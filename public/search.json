[{"title":"Python爬虫入门（一）","url":"/2020/07/20/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8%EF%BC%88%E4%B8%80%EF%BC%89/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\css\\APlayer.min.css\"><script src=\"\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\js\\Meting.min.js\"></script><h1 id=\"总述\"><a href=\"#总述\" class=\"headerlink\" title=\"总述\"></a>总述</h1><p>本来早就想学习下python爬虫了，总是找各种借口，一直拖到现在才开始系统的学习。</p>\n<p>我用的教程是中国大学MOOC上的由北京理工大学开设的Python网络爬虫与信息提取。</p>\n<p>废话不多说，直接开始。</p>\n<h1 id=\"1-网络爬虫之规则\"><a href=\"#1-网络爬虫之规则\" class=\"headerlink\" title=\"1. 网络爬虫之规则\"></a>1. 网络爬虫之规则</h1><h2 id=\"1-1-requests库入门\"><a href=\"#1-1-requests库入门\" class=\"headerlink\" title=\"1.1 requests库入门\"></a>1.1 requests库入门</h2><h3 id=\"1-1-1-requests库简介\"><a href=\"#1-1-1-requests库简介\" class=\"headerlink\" title=\"1.1.1 requests库简介\"></a>1.1.1 requests库简介</h3><ol>\n<li><p>Requests 是唯一的一个非转基因的 Python HTTP 库，人类可以安全享用。</p>\n</li>\n<li><p>安装     <code>pip install requests</code></p>\n</li>\n<li><p>引入    <code>import requests</code></p>\n</li>\n<li><p>7种常用方法</p>\n<p>  <code>requests.request()</code> 构造一个请求，最基础的方法<br>  <code>requests.get()</code>     获得HTML网页的主要方法，对应于HTTP的GET<br>  <code>requests.head()</code>    获得HTML网页头的主要方法，对应于HTTP的HEAD<br>  <code>requests.post()</code>    提交post请求，POST<br>  <code>requests.put()</code>     提交put请求，PUT<br>  <code>requests.patch()</code>   提交局部修改请求,PATCH<br>  <code>requests.delete()</code>  删除请求，DELETE</p>\n</li>\n</ol>\n<ol start=\"5\">\n<li><p>requests库的get()方法</p>\n<p><code>r = requests.get(url)</code><br>该语句的意为构造一个向服务器请求资源的Request对象，返回的是一个包含服务器资源的Response对象，用r来接收。</p>\n</li>\n<li><p>Response对象的属性</p>\n<p><code>r.ststus_code</code>           http请求的返回状态，200为成功<br><code>r.text</code>                  http响应内容的字符串形式，url对应的页面内容<br><code>r.encoding</code>              http header中猜测的编码格式<br><code>r.apparent_encoding</code>     http内容中猜测的响应内容的编码格式，备用<br><code>r.content</code>               http响应内容的二进制形式</p>\n<h3 id=\"1-1-2-通用代码框架\"><a href=\"#1-1-2-通用代码框架\" class=\"headerlink\" title=\"1.1.2 通用代码框架\"></a>1.1.2 通用代码框架</h3></li>\n<li><p>Requests库的异常</p>\n<p><code>requests.ConnectionError</code>   网络连接异常<br><code>requests.HTTPError</code>         http错误异常<br><code>requesrs.URLRequired</code>       URL缺失异常<br><code>requests,ToomanyRedirects</code>  重定向异常，超过最大重定向次数<br><code>requests.ConnectTimeOut</code>    连接远程服务器超时异常<br><code>requests,Time</code>              请求URL超时，超时异常（包括上述的整个请求过程）</p>\n</li>\n<li><p>通用代码框架</p>\n</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getHTMLText</span><span class=\"params\">(url)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        r = requests.get(url, timeout=<span class=\"number\">30</span>)</span><br><span class=\"line\">        r.raise_for_status()</span><br><span class=\"line\">        r.encoding = r.apparent_encoding</span><br><span class=\"line\">        <span class=\"keyword\">return</span> r.text</span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'超时异常'</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    url = <span class=\"string\">\"https://www.baidu.com/\"</span></span><br><span class=\"line\">    print(getHTMLText(url))</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"HTTP协议及Requests库方法\"><a href=\"#HTTP协议及Requests库方法\" class=\"headerlink\" title=\"HTTP协议及Requests库方法\"></a>HTTP协议及Requests库方法</h3><ol>\n<li><p>HTTP协议</p>\n<p>HTTP协议, Hypertext Transfer Protocol, 超文本传输协议。<br>是一个基于“请求与响应”模式的、无状态的应用层协议。<br>采用URL作为定位网络资源的标识。</p>\n</li>\n<li><p>URL</p>\n<p>URL是通过HTTP协议存取资源的Internet路径，一个URL对应一个数据资源。<br>格式为：<a href=\"http://host[:port][path]\">http://host[:port][path]</a><br>host: 合法的Internet主机域名或IP地址<br>port: 端口号，省略端口为80<br>path: 请求资源的路径</p>\n</li>\n<li><p>HTTP协议对资源的操作</p>\n</li>\n</ol>\n<p>GET：发送一个请求来取得服务器上的某一资源。</p>\n<p>HEAD：HEAD和GET是一样的，区别在于HEAD不含有呈现数据，而仅仅是HTTP头信息。</p>\n<p>POST：向服务器提交数据。这个方法用途广泛，几乎目前所有的提交操作都是靠这个完成。</p>\n<p>PUT：这个方法比较少见。HTML表单也不支持这个。本质上来讲， PUT和POST极为相似，都是向服务器发送数据。</p>\n<p>PATCH：向服务器更新数据。</p>\n<p>DELETE：删除某一个资源。</p>\n<ol start=\"4\">\n<li>HTTP协议方法与requests库方法一致。</li>\n</ol>\n","categories":["Python爬虫"],"tags":["Python","爬虫","入门"]},{"title":"Python爬虫实战（二）教务处首页","url":"/2020/08/15/Python%E7%88%AC%E8%99%AB%E5%AE%9E%E6%88%98%EF%BC%88%E4%BA%8C%EF%BC%89%E6%95%99%E5%8A%A1%E5%A4%84%E9%A6%96%E9%A1%B5/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\css\\APlayer.min.css\"><script src=\"\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\js\\Meting.min.js\"></script><h1 id=\"功能\"><a href=\"#功能\" class=\"headerlink\" title=\"功能\"></a>功能</h1><p>爬取四川大学教务处首页的通知，并邮件推送</p>\n<p>github链接：<a href=\"https://github.com/ZhengLin-Li/leaning-spider-scu-jwc\" target=\"_blank\" rel=\"noopener\">https://github.com/ZhengLin-Li/leaning-spider-scu-jwc</a></p>\n<h1 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h1><h2 id=\"一、crawl-py\"><a href=\"#一、crawl-py\" class=\"headerlink\" title=\"一、crawl.py\"></a>一、crawl.py</h2><ol>\n<li>利用<code>requests</code>库,拿到页面的response对象</li>\n<li>利用<code>BeautifulSoup</code>库解析拿到的文档树</li>\n<li>把数据文件保存进<code>data.txt</code>文件中</li>\n</ol>\n<h2 id=\"二、send-email-py\"><a href=\"#二、send-email-py\" class=\"headerlink\" title=\"二、send_email.py\"></a>二、send_email.py</h2><ol>\n<li>引入<code>SMTP</code>,<code>Header</code>,<code>MIMEText</code>库</li>\n<li>利用固定格式发送电子邮件</li>\n</ol>\n<h1 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h1><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">import requests</span><br><span class=\"line\">from bs4 import BeautifulSoup</span><br><span class=\"line\"></span><br><span class=\"line\">response &#x3D; requests.get(&#39;http:&#x2F;&#x2F;jwc.scu.edu.cn&#x2F;&#39;)</span><br><span class=\"line\">page &#x3D; response.content.decode()</span><br><span class=\"line\"># print(page)</span><br><span class=\"line\"></span><br><span class=\"line\">soup &#x3D; BeautifulSoup(page, &#39;lxml&#39;)</span><br><span class=\"line\">tag &#x3D; soup.find_all(class_&#x3D;&#39;list-llb-list&#39;)</span><br><span class=\"line\"># print(tag)</span><br><span class=\"line\"></span><br><span class=\"line\">result &#x3D; &#39;&#39;</span><br><span class=\"line\">for each in tag:</span><br><span class=\"line\">    result +&#x3D; each.text</span><br><span class=\"line\"># print(result)</span><br><span class=\"line\"></span><br><span class=\"line\">with open(&#39;data.txt&#39;, &#39;w&#39;, encoding&#x3D;&#39;utf8&#39;) as fp:</span><br><span class=\"line\">    for each in tag:</span><br><span class=\"line\">        text &#x3D; each.text</span><br><span class=\"line\">        fp.write(text)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">from smtplib import SMTP</span><br><span class=\"line\">from email.header import Header</span><br><span class=\"line\">from email.mime.text import MIMEText</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def main():</span><br><span class=\"line\">    # 请自行修改下面的邮件发送者和接收者</span><br><span class=\"line\">    sender &#x3D; &#39;xxxxxxxxx@qq.com&#39;  # 发送者的邮箱地址</span><br><span class=\"line\">    receivers &#x3D; [&#39;xxxxxxxxxx@qq.com&#39;]  # 接收者的邮箱地址</span><br><span class=\"line\">    message &#x3D; MIMEText(open(&#39;data.txt&#39;).read(), _subtype&#x3D;&#39;plain&#39;, _charset&#x3D;&#39;utf-8&#39;)</span><br><span class=\"line\">    message[&#39;From&#39;] &#x3D; Header(&#39;Your Old Friend&#39;, &#39;utf-8&#39;)  # 邮件的发送者</span><br><span class=\"line\">    message[&#39;To&#39;] &#x3D; Header(&#39;Darling Jay&#39;, &#39;utf-8&#39;)   # 邮件的接收者</span><br><span class=\"line\">    message[&#39;Subject&#39;] &#x3D; Header(&#39;To darling Jay&#39;, &#39;utf-8&#39;) # 邮件的标题</span><br><span class=\"line\">    smtper &#x3D; SMTP(&#39;smtp.qq.com&#39;)</span><br><span class=\"line\">    # 请自行修改下面的登录口令</span><br><span class=\"line\"></span><br><span class=\"line\">    smtper.login(sender, &#39;xxxxxxxxxxxxxxxx&#39;)  # QQ邮箱smtp的授权码</span><br><span class=\"line\">    smtper.sendmail(sender, receivers, message.as_string())</span><br><span class=\"line\">    print(&#39;邮件发送完成!&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n","categories":["Python爬虫"],"tags":["Python","爬虫","实战"]},{"title":"c++初探（二）","url":"/2020/09/20/c++%E5%88%9D%E6%8E%A2%EF%BC%88%E4%BA%8C%EF%BC%89/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\css\\APlayer.min.css\"><script src=\"\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\js\\Meting.min.js\"></script><h1 id=\"理解封装\"><a href=\"#理解封装\" class=\"headerlink\" title=\"理解封装\"></a>理解封装</h1><h2 id=\"类里有什么\"><a href=\"#类里有什么\" class=\"headerlink\" title=\"类里有什么\"></a>类里有什么</h2><ul>\n<li>数据（属性）</li>\n<li>操作（函数、方法）</li>\n<li>访问控制（公有/私有）</li>\n<li>静态/非静态</li>\n</ul>\n<p>直接使用类：静态<br>使用对象：静态和非静态<br>静态不能访问非静态</p>\n<h1 id=\"使用类和对象\"><a href=\"#使用类和对象\" class=\"headerlink\" title=\"使用类和对象\"></a>使用类和对象</h1><h2 id=\"定义类和对象\"><a href=\"#定义类和对象\" class=\"headerlink\" title=\"定义类和对象\"></a>定义类和对象</h2><h1 id=\"代码复用\"><a href=\"#代码复用\" class=\"headerlink\" title=\"代码复用\"></a>代码复用</h1><h2 id=\"代码复用的手段\"><a href=\"#代码复用的手段\" class=\"headerlink\" title=\"代码复用的手段\"></a>代码复用的手段</h2><ul>\n<li>函数重载</li>\n<li>类的继承，动态 </li>\n<li>借口</li>\n</ul>\n<h1 id=\"题外话\"><a href=\"#题外话\" class=\"headerlink\" title=\"题外话\"></a>题外话</h1><h2 id=\"构造函数使用初始化列表来初始化字段\"><a href=\"#构造函数使用初始化列表来初始化字段\" class=\"headerlink\" title=\"构造函数使用初始化列表来初始化字段\"></a>构造函数使用初始化列表来初始化字段</h2><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\">Line::Line( <span class=\"keyword\">double</span> len): length(len)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Object is being created, length = \"</span> &lt;&lt; len &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面的语法等同于如下语法：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\">Line::Line( <span class=\"keyword\">double</span> len)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    length = len;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Object is being created, length = \"</span> &lt;&lt; len &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在不同的字段使用逗号进行分隔，如下所示：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\">C::C( <span class=\"keyword\">double</span> a, <span class=\"keyword\">double</span> b, <span class=\"keyword\">double</span> c): X(a), Y(b), Z(c)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  ....</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"模板（Template）\"><a href=\"#模板（Template）\" class=\"headerlink\" title=\"模板（Template）\"></a>模板（Template）</h1><h2 id=\"函数模板\"><a href=\"#函数模板\" class=\"headerlink\" title=\"函数模板\"></a>函数模板</h2><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Created by Zhenglin Li on 2020/9/23.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"iostream\"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"function\">T <span class=\"title\">sum</span><span class=\"params\">(T <span class=\"built_in\">array</span>[], <span class=\"keyword\">int</span> <span class=\"built_in\">size</span>)</span> </span>&#123;</span><br><span class=\"line\">    T s = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">size</span>; ++i) &#123;</span><br><span class=\"line\">        s += <span class=\"built_in\">array</span>[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a1[<span class=\"number\">5</span>] = &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> a2[<span class=\"number\">3</span>] = &#123;<span class=\"number\">1.1</span>, <span class=\"number\">2.2</span>, <span class=\"number\">3.3</span>&#125;;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; sum(a1, <span class=\"number\">5</span>) &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; sum(a2, <span class=\"number\">3</span>) &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; sum(a2, <span class=\"number\">1</span>, <span class=\"number\">3</span>) &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>函数模板的重载</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Created by Zhenglin Li on 2020/9/23.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"iostream\"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"function\">T <span class=\"title\">sum</span><span class=\"params\">(T <span class=\"built_in\">array</span>[], <span class=\"keyword\">int</span> <span class=\"built_in\">size</span>)</span> </span>&#123;</span><br><span class=\"line\">    T s = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">size</span>; ++i) &#123;</span><br><span class=\"line\">        s += <span class=\"built_in\">array</span>[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"function\">T <span class=\"title\">sum</span><span class=\"params\">(T <span class=\"built_in\">array</span>[], <span class=\"keyword\">int</span> from, <span class=\"keyword\">int</span> to)</span> </span>&#123;</span><br><span class=\"line\">    T s = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = from - <span class=\"number\">1</span>; i &lt;= to - <span class=\"number\">1</span>; ++i) &#123;</span><br><span class=\"line\">        s += <span class=\"built_in\">array</span>[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a1[<span class=\"number\">5</span>] = &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> a2[<span class=\"number\">3</span>] = &#123;<span class=\"number\">1.1</span>, <span class=\"number\">2.2</span>, <span class=\"number\">3.3</span>&#125;;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; sum(a1, <span class=\"number\">5</span>) &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; sum(a2, <span class=\"number\">3</span>) &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; sum(a2, <span class=\"number\">1</span>, <span class=\"number\">3</span>) &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"类模板\"><a href=\"#类模板\" class=\"headerlink\" title=\"类模板\"></a>类模板</h2><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Created by Zhenglin Li on 2020/9/23.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"iostream\"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"comment\">//模板</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Vector</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    T x;</span><br><span class=\"line\">    T y;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    Vector(T x = <span class=\"number\">0</span>, T y = <span class=\"number\">0</span>) : x(x), y(y) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">friend</span> ostream &amp;<span class=\"keyword\">operator</span>&lt;&lt;(ostream &amp;o, <span class=\"keyword\">const</span> Vector&lt;T&gt; &amp;v) &#123;</span><br><span class=\"line\">        o &lt;&lt; <span class=\"string\">\"&lt;\"</span> &lt;&lt; v.x &lt;&lt; <span class=\"string\">\", \"</span> &lt;&lt; v.y &lt;&lt; <span class=\"string\">\"&gt;\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//真正的类，要&lt;&gt;</span></span><br><span class=\"line\">    <span class=\"function\">Vector&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">x</span><span class=\"params\">(<span class=\"number\">1</span>,<span class=\"number\">2</span>)</span></span>;</span><br><span class=\"line\">    Vector&lt;<span class=\"keyword\">double</span>&gt; *p = <span class=\"keyword\">new</span> Vector&lt;<span class=\"keyword\">double</span>&gt;(<span class=\"number\">1.1</span>,<span class=\"number\">2.2</span>);</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; x &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; *p &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"标准模板库（STL）\"><a href=\"#标准模板库（STL）\" class=\"headerlink\" title=\"标准模板库（STL）\"></a>标准模板库（STL）</h2><ul>\n<li>Standard Template Library</li>\n<li>很多容器</li>\n<li>很多算法</li>\n</ul>\n"},{"title":"Python爬虫实战（一）疫情数据","url":"/2020/08/10/Python%E7%88%AC%E8%99%AB%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89%E7%96%AB%E6%83%85%E6%95%B0%E6%8D%AE/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\css\\APlayer.min.css\"><script src=\"\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\js\\Meting.min.js\"></script><p><a href=\"https://github.com/ZhengLin-Li/leaning-spider-COVID19Situation\" target=\"_blank\" rel=\"noopener\">https://github.com/ZhengLin-Li/leaning-spider-COVID19Situation</a></p>\n<h1 id=\"1-BeautifulSoup的find方法\"><a href=\"#1-BeautifulSoup的find方法\" class=\"headerlink\" title=\"1. BeautifulSoup的find方法\"></a>1. BeautifulSoup的find方法</h1><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># for example</span></span><br><span class=\"line\"></span><br><span class=\"line\">soup.find(<span class=\"string\">'a'</span>) <span class=\"comment\"># 根据标签名查找</span></span><br><span class=\"line\"></span><br><span class=\"line\">soup.find(id=<span class=\"string\">'link1'</span>) <span class=\"comment\"># 根据属性查找</span></span><br><span class=\"line\"></span><br><span class=\"line\">soup.find(attrs=&#123;<span class=\"string\">'id'</span>:<span class=\"string\">'link1'</span>&#125;) <span class=\"comment\"># 根据属性查找</span></span><br><span class=\"line\"></span><br><span class=\"line\">soup.find(test=<span class=\"string\">'aaa'</span>) <span class=\"comment\"># 根据标签文本内容查找</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"2-Tag对象\"><a href=\"#2-Tag对象\" class=\"headerlink\" title=\"2. Tag对象\"></a>2. Tag对象</h1><p>find方法返回的是Tag对象，有如下属性</p>\n<p>Tag对象对应于原始文档中的html标签</p>\n<p>name：标签名称</p>\n<p>attrs：标签属性的键和值</p>\n<p>text：标签的字符串文本</p>\n<h1 id=\"3-正则表达式\"><a href=\"#3-正则表达式\" class=\"headerlink\" title=\"3. 正则表达式\"></a>3. 正则表达式</h1><p>. \\d </p>\n<p>+*?</p>\n<p>()</p>\n<p>[]</p>\n<p>\\</p>\n<p>r原串</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"></span><br><span class=\"line\">rs = re.findall(<span class=\"string\">'\\d'</span>,<span class=\"string\">'123'</span>)</span><br><span class=\"line\">rs = re.findall(<span class=\"string\">'\\d*'</span>,<span class=\"string\">'456'</span>)</span><br><span class=\"line\">rs = re.findall(<span class=\"string\">'\\d+'</span>,<span class=\"string\">'789'</span>)</span><br><span class=\"line\">rs = re.findall(<span class=\"string\">'a+'</span>,<span class=\"string\">'aaabcd'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">print(rs)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 分组的使用</span></span><br><span class=\"line\">rs = re.findall(<span class=\"string\">'\\d&#123;1,2&#125;'</span>,<span class=\"string\">'chuan13zhi2'</span>)</span><br><span class=\"line\">rs = re.findall(<span class=\"string\">'aaa(\\d+)b'</span>,<span class=\"string\">'aaa91b'</span>)</span><br><span class=\"line\">print(rs)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 一般的正则表达式匹配一个\\需要四个\\</span></span><br><span class=\"line\">rs = re.findall(<span class=\"string\">'a\\\\\\\\bc'</span>,<span class=\"string\">'a\\\\bc'</span>)</span><br><span class=\"line\">print(rs)</span><br><span class=\"line\">print(<span class=\"string\">'a\\\\bc'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用r原串</span></span><br><span class=\"line\">rs = re.findall(<span class=\"string\">r'a\\\\rbc'</span>,<span class=\"string\">'a\\\\rbc'</span>)</span><br><span class=\"line\">print(rs)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"4-json字符串互转python数据\"><a href=\"#4-json字符串互转python数据\" class=\"headerlink\" title=\"4. json字符串互转python数据\"></a>4. json字符串互转python数据</h1><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"></span><br><span class=\"line\">json_str = <span class=\"string\">'''[&#123;\"a\":\"thia is a\",</span></span><br><span class=\"line\"><span class=\"string\">\"b\":[1,2,3]&#125;,&#123;\"a\":\"thia is a\",</span></span><br><span class=\"line\"><span class=\"string\">\"b\":[1,2,3]&#125;]'''</span></span><br><span class=\"line\"></span><br><span class=\"line\">rs = json.loads(json_str)</span><br><span class=\"line\">print(rs)</span><br><span class=\"line\">print(type(rs))  <span class=\"comment\"># &lt;class 'list'&gt;</span></span><br><span class=\"line\">print(type(rs[<span class=\"number\">0</span>]))  <span class=\"comment\"># &lt;class 'dict'&gt;</span></span><br><span class=\"line\">print(type(json_str))  <span class=\"comment\"># &lt;class 'str'&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"></span><br><span class=\"line\">json_str = <span class=\"string\">'''[</span></span><br><span class=\"line\"><span class=\"string\">  &#123;</span></span><br><span class=\"line\"><span class=\"string\">    \"a\": \"this is a\",</span></span><br><span class=\"line\"><span class=\"string\">    \"b\": [1, 2,\"熊猫\"]</span></span><br><span class=\"line\"><span class=\"string\">  &#125;,</span></span><br><span class=\"line\"><span class=\"string\">  &#123;</span></span><br><span class=\"line\"><span class=\"string\">    \"c\": \"thia is c\",</span></span><br><span class=\"line\"><span class=\"string\">    \"d\": [1, 2, 3]</span></span><br><span class=\"line\"><span class=\"string\">  &#125;</span></span><br><span class=\"line\"><span class=\"string\">]'''</span></span><br><span class=\"line\"></span><br><span class=\"line\">rs = json.loads(json_str)</span><br><span class=\"line\">json_str = json.dumps(rs,ensure_ascii=<span class=\"literal\">False</span>)</span><br><span class=\"line\">print(json_str)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"5-json格式文件互转python数据\"><a href=\"#5-json格式文件互转python数据\" class=\"headerlink\" title=\"5. json格式文件互转python数据\"></a>5. json格式文件互转python数据</h1><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># json格式文件转python数据</span></span><br><span class=\"line\"><span class=\"keyword\">with</span> open(<span class=\"string\">'data/test.json'</span>) <span class=\"keyword\">as</span> fp:</span><br><span class=\"line\">    python_list = json.load(fp)</span><br><span class=\"line\">    print(python_list)</span><br><span class=\"line\">    print(type(python_list))  <span class=\"comment\"># &lt;class 'list'&gt;</span></span><br><span class=\"line\">    print(type(python_list[<span class=\"number\">0</span>]))  <span class=\"comment\"># &lt;class 'dict'&gt;</span></span><br><span class=\"line\">    print(type(fp))  <span class=\"comment\"># &lt;class '_io.TextIOWrapper'&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">with</span> open(<span class=\"string\">\"data/test1.json\"</span>,<span class=\"string\">'w'</span>) <span class=\"keyword\">as</span> fp:</span><br><span class=\"line\">    json.dump(rs,fp,ensure_ascii=<span class=\"literal\">False</span>)</span><br></pre></td></tr></table></figure>\n\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://i.loli.net/2020/08/08/rQuwR8DGphdTcox.png\" alt=\"image-20200808102225666\"></p>\n","categories":["Python爬虫"],"tags":["Python","爬虫","实战"]},{"title":"hexo butterfly折腾心得","url":"/2020/08/11/hexo%20butterfly%E6%8A%98%E8%85%BE%E5%BF%83%E5%BE%97/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\css\\APlayer.min.css\"><script src=\"\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\js\\Meting.min.js\"></script><p>魔改了两天的butterfly主题，说下心得吧</p>\n<h1 id=\"我的博客\"><a href=\"#我的博客\" class=\"headerlink\" title=\"我的博客\"></a>我的博客</h1><p>首先给各位观众老爷们看下效果<br><a href=\"https://zhenglin-li.github.io/\" target=\"_blank\" rel=\"noopener\">https://zhenglin-li.github.io/</a><br><a href=\"http://9pshr3.coding-pages.com/\">http://9pshr3.coding-pages.com/</a><br>这两个一样的，第二个速度快</p>\n<h1 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h1><ol>\n<li><p>butterfly主题官方的参考文档：<a href=\"https://demo.jerryc.me/\" target=\"_blank\" rel=\"noopener\">https://demo.jerryc.me/</a></p>\n</li>\n<li><p>0基础从hexo开始的参考文档：<a href=\"https://www.jianshu.com/p/a1a4ebf0e5fc\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/a1a4ebf0e5fc</a></p>\n</li>\n<li><p>0基础从hexo开始的参考文档：<a href=\"https://blog.csdn.net/weixin_42429718/article/details/105723193\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/weixin_42429718/article/details/105723193</a></p>\n</li>\n<li><p>音乐页面的参考文档：<a href=\"https://blog.csdn.net/qq_46435629/article/details/106295515\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/qq_46435629/article/details/106295515</a></p>\n</li>\n<li><p>hexo douban的使用参考文档：<a href=\"https://github.com/mythsman/hexo-douban\" target=\"_blank\" rel=\"noopener\">https://github.com/mythsman/hexo-douban</a></p>\n</li>\n<li><p>在butterfy中使用iconfont图标：<a href=\"https://blog.csdn.net/u012208219/article/details/106883012/\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/u012208219/article/details/106883012/</a></p>\n</li>\n</ol>\n<h1 id=\"坑\"><a href=\"#坑\" class=\"headerlink\" title=\"坑\"></a>坑</h1><ol>\n<li><p>刚开始改主题配置文件的时候，一定要记得修改的是<code>blog根目录/source/_data</code>下的<code>butterfly.yml</code>，没有你就创建一个，然后把本来的配置文件里的代码复制过去再进行修改</p>\n</li>\n<li><p>参考文档里面对增加音乐界面的描述不是很清楚，可以参考<a href=\"https://blog.csdn.net/qq_46435629/article/details/106295515\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/qq_46435629/article/details/106295515</a></p>\n</li>\n<li><p>在hexo douban的使用中</p>\n<ol>\n<li><p>书籍电影游戏页面分别对应books、movies、games</p>\n</li>\n<li><p>注意这里不用hexo new page books，hexo douban会自动生成的</p>\n</li>\n<li><p>hexo douban是利用爬虫来实现的，每日在终端（powershell或git bash）输入<code>hexo douban -bgm</code>多次会触发豆瓣的反爬虫机制，导致获取不到数据的情况，等过一天就好了<br>附报错提示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">   INFO  0 books have been loaded in 1336 ms, because you are offline \t\tor your network is bad</span><br><span class=\"line\">INFO  0 movies have been loaded in 1409 ms, because you are offline \tor your network is bad</span><br><span class=\"line\">INFO  0 games have been loaded in 1360 ms, because you are offline \t\tor your network is bad</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n<li><p>在butterfy中使用iconfont图标：<a href=\"https://blog.csdn.net/u012208219/article/details/106883012/\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/u012208219/article/details/106883012/</a></p>\n</li>\n</ol>\n","categories":["个人博客"]},{"title":"c++初探（一）","url":"/2020/09/16/c++%E5%88%9D%E6%8E%A2%EF%BC%88%E4%B8%80%EF%BC%89/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\css\\APlayer.min.css\"><script src=\"\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\js\\Meting.min.js\"></script><h1 id=\"关于iostream与using-namespace-std-的解析\"><a href=\"#关于iostream与using-namespace-std-的解析\" class=\"headerlink\" title=\"关于iostream与using namespace std 的解析\"></a>关于iostream与using namespace std 的解析</h1><p>  当我们在使用C++语法进行编程练习的时候，往往在代码的前两行会这样来写</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\">include&lt;iostream&gt;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>学过C语言的同学在学习C++的时候是否会产生这样的疑惑呢：</strong></p>\n<p>练习C语言编程的时候，只需要声明一个头文件：#include&lt;stdio.h&gt;.而为什么在C++中，却需要写出include<iostream>和using namespace std;这两行代码呢？</p>\n<p>其中第一行include<iostream>我们还勉强可以理解，它其实类似于C语言中的#include&lt;stdio.h&gt;，即：声明标准的输入输出头文件。然而using namespace std究竟起到了什么作用呢？</p>\n<p>针对这个问题，网络上有很多专业的说法，但是长篇大论的内容，对于初学者来说实在头疼，根本看不进去，所以接下来我希望可以用简练的语言来解释清楚using namespace std的作用，以下的内容虽可能有些许冗余，但我相信是通俗易懂的，您只要能够一行行的看下去，一定能够完全看懂！</p>\n<p>本人认为正确的学习顺序是：我们要做到先学会定义、使用和理解命名空间(namespace)，再回过头去研究using namespace std;的作用，这样可以起到事半功倍的效果，那么接下来重点就来了。</p>\n<h2 id=\"定义命名空间\"><a href=\"#定义命名空间\" class=\"headerlink\" title=\"定义命名空间\"></a>定义命名空间</h2><p><strong>（1）简单的命名空间</strong></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1、定义命名空间A</span></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> A</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"keyword\">int</span> a=<span class=\"number\">0</span>;<span class=\"comment\">//在命名空间A中定义变量a</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>定义一个命名空间就是这样简单：在这个命名空间A中，有一个int型的变量，他的名字是“a”。那么我们接下来直接上难度！定义一个复杂的命名空间。</p>\n<p><strong>（2）复杂的命名空间</strong></p>\n<p>要求：定义命名空间B，并在命名空间B中定义命名空间C，并在命名空间C中定义结构体Teacher</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">//2、复杂的命名空间</span><br><span class=\"line\">namespace B  //定义命名空间B</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tint a=1;//在命名空间B中也可以定义变量a，因为他们不在同一个命名空间中</span><br><span class=\"line\">\tnamespace C//还可以在命名空间B中再定义一个命名空间C</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tstruct Teacher//在命名空间C中定义结构体Teacher</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tchar a[32];//结构体中还可以定义变量a，因为这三个“a”都不在同一个命名空间中</span><br><span class=\"line\">\t\t\tint b;</span><br><span class=\"line\">\t\t&#125;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h2 id=\"使用命名空间\"><a href=\"#使用命名空间\" class=\"headerlink\" title=\"使用命名空间\"></a>使用命名空间</h2><p><strong>（1）使用命名空间的基本方法</strong></p>\n<p>前面已经定义好了命名空间A、B、C，且在这三个命名空间中都定义相同的变量“a”，接下来我们就来使用这三个命名空间。</p>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t//使用命名空间的基本方法1\t</span><br><span class=\"line\">\tusing namespace A;//告诉编译器我要使用命名空间A中的功能了</span><br><span class=\"line\">\ta=10;             //将命名空间A中的变量“a”由0更改为10</span><br><span class=\"line\">    cout&lt;&lt;a&lt;&lt;endl;    //查看是否完成了更改，此时屏幕上应该输出“10</span><br></pre></td></tr></table></figure>\n\n<p><strong>注：</strong>此时只使用了命名空间A，所以只会对命名空间A中的变量a进行访问，而不会对命名空间B、C中的变量a进行访问。</p>\n<p>而实际上，针对上面这三行代码，只要第三行代码中变量“a”的指向明确，便可以省去第一行“using namespace A”，如下：</p>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\">//使用命名空间的基本方法2</span><br><span class=\"line\">//由于在代码中只要使用这两种方法中的其中一种即可，所以我在第二种方法这里加上的“//”注释符号，如下两行代码：</span><br><span class=\"line\">// a=10;</span><br><span class=\"line\">// cout&lt;&lt;A::a&lt;&lt;endl;  //“A::a”明确指向了命名空间A中的变量a（用双冒号::）</span><br></pre></td></tr></table></figure>\n\n<p>以上两种使用命名空间的方法供君随意挑选^_^</p>\n<p><strong>（2）使用复杂的命名空间</strong></p>\n<p>命名空间A的使用相对简单，但是在命名空间B中嵌套着命名空间C，并且命名空间C中又嵌套着结构体Teacher，那么我们又该如何去使用命名空间B和命名空间C呢？</p>\n<p>接下来，除了使用命名空间A以外，如果我们还使用了命名空间B的话，” a=10; “ 这条语句的指向就不明确了：因为命名空间B中也有个变量a，于是现在有两个”a”可以被访问。故：若想访问某一个特定的变量a就需要指向明确！</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">using namespace B;</span><br><span class=\"line\">//如果想访问某一个特定的变量a，就需要指向明确！如下：</span><br><span class=\"line\">\tcout&lt;&lt;A::a&lt;&lt;endl; //明确指向了“命名空间A” </span><br><span class=\"line\">//虽然现在有A、B两个命名空间，且两个命名空间中都有变量“a”，但只要指向明确，就能指定我们所访问的变量究竟是命名空间A中的“a”还是命名空间B中的“a”</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>（3）使用结构体Teacher中的变量</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">//如何使用Teacher</span><br><span class=\"line\">\t//方法1：这种方法每定义一个结构体就需要：“B::C::Teacher 结构体名称”</span><br><span class=\"line\">\t//B::C::Teacher t1;//用命名空间B中的命名空间C中的结构体模板（Teacher）来定义结构体t1</span><br><span class=\"line\">\t//t1.b=33;//注意：t1.a 语法错误！是因为a是一个指针（地址），这个指针是无法被修改的，否则以后无法释放内存          </span><br><span class=\"line\">\t//方法2：先一口气直接定义好“结构体型”数据类型，然后按照根据数据类型定义变量的方法来使用结构体</span><br><span class=\"line\">\tusing B::C::Teacher;</span><br><span class=\"line\">\tTeacher t2;</span><br><span class=\"line\">\tt2.b=22;</span><br><span class=\"line\">\treturn 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"关于iostream与using-namespace-std-的解析-1\"><a href=\"#关于iostream与using-namespace-std-的解析-1\" class=\"headerlink\" title=\"关于iostream与using namespace std 的解析****\"></a>关于iostream与using namespace std 的解析****</h2><p>（1）通过以上关于命名空间的定义及使用的介绍，我们不难发现：不同的命名空间之间是相互独立的个体，虽然附加在其中的变量名可能是相同的（比如上面所提到的命名空间A、B、C中都包含有变量a），但是没关系：“命名空间” 这层 “屏障”将这些相同的变量名分隔开来，让他们虽然拥有相同的名字，但是互不影响。</p>\n<p>（2）看起来命名空间的引入十分方便，让我们不必再因为变量重名而烦恼。但是在以前，并没有命名空间这个概念，而是将标准库功能定义在全局空间里，并声明在&lt;iostream.h&gt;（早期的C++头文件）中。但是由于标准库非常的庞大，那么程序员在选择的类的名称或函数名时，就很有可能和标准库中的某个名字相同。所以为了避免这种情况所造成的名字冲突，就把标准库中的一切都放在一个名为std的命名空间中。后来C++标准为了和C区别开，也为了正确使用命名空间，规定头文件不使用后缀.h，即出现了现在的<iostream>头文件。</p>\n<p>（3）当使用<iostream>的时候，该头文件没有定义全局命名空间，必须使用C++所规定的标准的命名空间（即：namespace std），这样才能正确使用cout、endl等功能。</p>\n<p>（4）最后：如果大家想进一步了解相关内容，请参考：<a href=\"http://blog.csdn.net/adudurant/article/details/16927747\" target=\"_blank\" rel=\"noopener\">点击打开链接</a> 谢谢。</p>\n<h1 id=\"c-定义结构体\"><a href=\"#c-定义结构体\" class=\"headerlink\" title=\"c++定义结构体\"></a>c++定义结构体</h1><h2 id=\"先定义结构体类型再单独进行变量定义\"><a href=\"#先定义结构体类型再单独进行变量定义\" class=\"headerlink\" title=\"先定义结构体类型再单独进行变量定义\"></a>先定义结构体类型再单独进行变量定义</h2><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Student</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> Code;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> Name[<span class=\"number\">20</span>];</span><br><span class=\"line\">    <span class=\"keyword\">char</span> Sex;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> Age;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Student</span> <span class=\"title\">Stu</span>;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Student</span> <span class=\"title\">Stu</span>[10];</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Student</span> *<span class=\"title\">pStru</span>;</span></span><br></pre></td></tr></table></figure>\n\n<p>结构体类型是struct Student，因此，struct和Student都不能省略。但实际上，我用codeblocks运行时，下面变量的定义，不加struct 也是可以的。</p>\n<h2 id=\"紧跟在结构体类型说明之后进行定义\"><a href=\"#紧跟在结构体类型说明之后进行定义\" class=\"headerlink\" title=\"紧跟在结构体类型说明之后进行定义\"></a>紧跟在结构体类型说明之后进行定义</h2><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Student</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> Code;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> Name[<span class=\"number\">20</span>];</span><br><span class=\"line\">    <span class=\"keyword\">char</span> Sex;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> Age;</span><br><span class=\"line\">&#125;Stu,Stu[<span class=\"number\">10</span>],*pStu;</span><br></pre></td></tr></table></figure>\n\n<p>这种情况时，后面还可以再定义结构体变量。</p>\n<h2 id=\"在说明一个无名结构体变量的同时直接进行定义\"><a href=\"#在说明一个无名结构体变量的同时直接进行定义\" class=\"headerlink\" title=\"在说明一个无名结构体变量的同时直接进行定义\"></a>在说明一个无名结构体变量的同时直接进行定义</h2><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> Code;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> Name[<span class=\"number\">20</span>];</span><br><span class=\"line\">    <span class=\"keyword\">char</span> Sex;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> Age;</span><br><span class=\"line\">&#125;Stu,Stu[<span class=\"number\">10</span>],*pStu;</span><br></pre></td></tr></table></figure>\n\n<p>这种情况下，之后不能再定义其他变量。</p>\n<h2 id=\"使用typedef说明一个结构体变量之后再用新类名来定义变量\"><a href=\"#使用typedef说明一个结构体变量之后再用新类名来定义变量\" class=\"headerlink\" title=\"使用typedef说明一个结构体变量之后再用新类名来定义变量\"></a>使用typedef说明一个结构体变量之后再用新类名来定义变量</h2><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> Code;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> Name[<span class=\"number\">20</span>];</span><br><span class=\"line\">    <span class=\"keyword\">char</span> Sex;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> Age;</span><br><span class=\"line\">&#125;student;</span><br><span class=\"line\">Student Stu,Stu[<span class=\"number\">10</span>],*pStu;</span><br></pre></td></tr></table></figure>\n\n<p>Student是一个具体的结构体类型，唯一标识。这里不用再加struct</p>\n<h1 id=\"c语言分区\"><a href=\"#c语言分区\" class=\"headerlink\" title=\"c语言分区\"></a>c语言分区</h1><ol>\n<li>栈Stack（大地址，由高向低使用）</li>\n<li>堆Heap（由低向高使用）</li>\n<li>全局or静态常量区</li>\n<li>文本and代码区（小地址）</li>\n</ol>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> total = <span class=\"number\">0</span>;  <span class=\"comment\">//全局or静态常量区</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">hehe</span><span class=\"params\">()</span> </span>&#123; <span class=\"comment\">//函数,在stack中</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> he = <span class=\"number\">0</span>; <span class=\"comment\">//全局or静态常量区，因为static只会创建一次</span></span><br><span class=\"line\">    he++;</span><br><span class=\"line\">    total++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> k = <span class=\"number\">3</span>;  <span class=\"comment\">//函数的内部变量，在stack中，但3在代码区</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> *str = <span class=\"string\">\"Hello, world!\"</span>;  <span class=\"comment\">//  str函数中内部变量，在stack中，“hello world”在常量区</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> *p = (<span class=\"keyword\">int</span> *) <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>));  <span class=\"comment\">// p在stack中，malloc动态分配的内存在堆中</span></span><br><span class=\"line\">    hehe();</span><br><span class=\"line\">    hehe();</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d%s%d\"</span>, k, str, *p);</span><br><span class=\"line\">    <span class=\"built_in\">free</span>(p);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;  <span class=\"comment\">//stack中内存释放</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"类和对象\"><a href=\"#类和对象\" class=\"headerlink\" title=\"类和对象\"></a>类和对象</h1><ul>\n<li><strong>类</strong>：类是一个模板，它描述一类对象的行为和状态。</li>\n<li><strong>对象</strong>：对象是类的一个实例</li>\n</ul>\n<p><strong>c语言如何处理类和对象：</strong></p>\n<ul>\n<li><p>没有“类”，只有“类型”</p>\n</li>\n<li><p>没有“对象”，只有“变量”</p>\n</li>\n<li><p>结构体变量+函数</p>\n<p>c语言采用结构体变量+函数的方式来实现类似功能，如下</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"stdio.h\"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Student</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> id;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">printID</span><span class=\"params\">(struct Student *in)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"My id is %d.\\n\"</span>,in-&gt;id);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Student</span> <span class=\"title\">one</span>;</span></span><br><span class=\"line\">    one.id=<span class=\"number\">999</span>;</span><br><span class=\"line\">    printID(&amp;one);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>但我们发现，Student的属性和加在属性上的操作是割裂开的，我们可以使用函数指针类解决此问题</p>\n<ul>\n<li>函数指针</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"stdio.h\"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Student</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> id;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> (*printID)(struct Student *in);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">printID</span><span class=\"params\">(struct Student *in)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"My id is %d.\\n\"</span>,in-&gt;id);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Student</span> <span class=\"title\">one</span>;</span></span><br><span class=\"line\">    one.id=<span class=\"number\">999</span>;</span><br><span class=\"line\">    one.printID=printID;</span><br><span class=\"line\">    one.printID(&amp;one);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"不一样的体验，用纯文本命令行写C-程序\"><a href=\"#不一样的体验，用纯文本命令行写C-程序\" class=\"headerlink\" title=\"不一样的体验，用纯文本命令行写C++程序\"></a>不一样的体验，用纯文本命令行写C++程序</h1><ol>\n<li>打开vmware运行ubuntu</li>\n<li>桌面右键打开终端</li>\n<li>输入命令<code>ls</code>查看当前所在位置</li>\n<li>输入命令<code>cd 桌面</code>进入桌面这个文件夹</li>\n<li>输入命令<code>touch test.cpp</code>创建test.cpp文件</li>\n<li>打开test.cpp文件，输入以下代码并保存<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/2020091713284558.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1BhbmRhMzI1,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></li>\n<li>输入命令<code>g++ test.cpp</code>编译test.cpp文件，我们发现桌面上产生了一个新的文件a.out，这就是编译产生的可执行文件，接下来我们运行之</li>\n<li>输入命令<code>./a.out</code>运行，发现如下输出：<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/2020091713315557.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1BhbmRhMzI1,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></li>\n</ol>\n<h1 id=\"c-的新特性\"><a href=\"#c-的新特性\" class=\"headerlink\" title=\"c++的新特性\"></a>c++的新特性</h1><h2 id=\"类（class\"><a href=\"#类（class\" class=\"headerlink\" title=\"类（class)\"></a>类（class)</h2><p>  之前说过了</p>\n<h2 id=\"bool类型和auto类型\"><a href=\"#bool类型和auto类型\" class=\"headerlink\" title=\"bool类型和auto类型\"></a>bool类型和auto类型</h2><p>  bool，c语言中，真假用整形来代替，<code>0 --&gt;False</code> &amp;&amp;  <code>!0--&gt;True</code> &amp;&amp; <code>True--&gt;</code> &amp;&amp; <code>False--&gt;0</code></p>\n<p>  c++中，可以true，false，也可以用0和1</p>\n<p>  auto，让编译器推断是什么类型，但必须在初始化时赋值，否则编译报错</p>\n<p>  cout，在打印浮点数是会省略后面的部分</p>\n<h2 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h2><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> a = <span class=\"number\">3</span>;  <span class=\"comment\">//定义了变量a，并用3使其初始化，=不是运算符=含义是初始化</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> b;  <span class=\"comment\">//定义了变量b，没有初始化</span></span><br><span class=\"line\">b = <span class=\"number\">3</span>;  <span class=\"comment\">//把3赋值给b，=是运算符</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> <span class=\"built_in\">array</span>[<span class=\"number\">10</span>]=&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;;  <span class=\"comment\">//定义了数组array，并用&#123;1,2,3&#125;使其初始化</span></span><br><span class=\"line\"><span class=\"built_in\">array</span>=&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;;  <span class=\"comment\">//错误</span></span><br><span class=\"line\"><span class=\"built_in\">array</span>[<span class=\"number\">10</span>]=&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;;  <span class=\"comment\">//错误</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> *p; <span class=\"comment\">// *的含义是p是一个指针，不是取值运算符，p是指向int类型的指针</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> a = <span class=\"number\">3</span>;</span><br><span class=\"line\">p = &amp;a;</span><br><span class=\"line\">*p = <span class=\"number\">6</span>;  <span class=\"comment\">// *的是取值运算符</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> b = <span class=\"number\">6</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> &amp;r = b; <span class=\"comment\">// &amp;的含义是r是一个引用类型，不是取地址运算符，r是int类型的引用，=表示用b来初始化r，让r成为b的引用，不是赋值，可以理解为给b起个外号，自此之后r就是b，b就是r</span></span><br><span class=\"line\">r = <span class=\"number\">123</span>;</span><br><span class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; r &lt;&lt; <span class=\"built_in\">endl</span>;  <span class=\"comment\">// 123</span></span><br><span class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; b &lt;&lt; <span class=\"built_in\">endl</span>;  <span class=\"comment\">// 123</span></span><br></pre></td></tr></table></figure>\n\n<p>在C++中函数的参数传递：</p>\n<ul>\n<li>按值传递(pass by value)</li>\n<li>地址传递(pass by pointer)</li>\n<li>引用传递(pass by reference)</li>\n</ul>\n<p>引用必须在定义时初始化，一旦创建就不可更换引用的对象</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> b = <span class=\"number\">6</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> &amp;r;  <span class=\"comment\">//error: 'r' declared as reference but not initialized</span></span><br><span class=\"line\">r = b;  <span class=\"comment\">//把b的值赋值给r，但此时r并没有任何的引用</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"关于赋值\"><a href=\"#关于赋值\" class=\"headerlink\" title=\"关于赋值\"></a>关于赋值</h2><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> a, b, c;</span><br><span class=\"line\">(a = b = c = <span class=\"number\">3</span>) = <span class=\"number\">666</span>;</span><br><span class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; a &lt;&lt; <span class=\"built_in\">endl</span>;  <span class=\"comment\">//666</span></span><br><span class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; b &lt;&lt; <span class=\"built_in\">endl</span>;  <span class=\"comment\">//3</span></span><br><span class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; c &lt;&lt; <span class=\"built_in\">endl</span>;  <span class=\"comment\">//3</span></span><br></pre></td></tr></table></figure>\n\n<p>赋值之后返回的是左值的引用</p>\n<h2 id=\"初始化的新语法\"><a href=\"#初始化的新语法\" class=\"headerlink\" title=\"初始化的新语法\"></a>初始化的新语法</h2><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> a&#123;<span class=\"number\">3</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">int</span> <span class=\"built_in\">array</span>[<span class=\"number\">5</span>]&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"new和delete\"><a href=\"#new和delete\" class=\"headerlink\" title=\"new和delete\"></a>new和delete</h2><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> *p;</span><br><span class=\"line\">p = (<span class=\"keyword\">int</span> *) <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>));</span><br><span class=\"line\"><span class=\"built_in\">free</span>(p);</span><br><span class=\"line\">p = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>;</span><br><span class=\"line\"><span class=\"keyword\">delete</span> p;</span><br><span class=\"line\">deleete[] p;  <span class=\"comment\">//复杂类型应该这样写</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"iostream\"</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"keyword\">int</span> sid;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    Student one, two;</span><br><span class=\"line\">    one.sid = <span class=\"number\">1</span>;</span><br><span class=\"line\">    two.sid = <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; &amp;one &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; &amp;two &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    one = two;</span><br><span class=\"line\">    two.sid = <span class=\"number\">999</span>;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; &amp;one &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; &amp;two &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"iostream\"</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"keyword\">int</span> sid;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    Student *one = <span class=\"keyword\">new</span> Student();</span><br><span class=\"line\">    Student *two = <span class=\"keyword\">new</span> Student();</span><br><span class=\"line\"><span class=\"comment\">//    Student *one, *two;</span></span><br><span class=\"line\"><span class=\"comment\">//    one = new Student();</span></span><br><span class=\"line\"><span class=\"comment\">//    two = new Student();</span></span><br><span class=\"line\">    one-&gt;sid = <span class=\"number\">1</span>;</span><br><span class=\"line\">    two-&gt;sid = <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; &amp;one &lt;&lt; <span class=\"built_in\">endl</span>;  <span class=\"comment\">//0x63fde8</span></span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; &amp;two &lt;&lt; <span class=\"built_in\">endl</span>;  <span class=\"comment\">//0x63fde0</span></span><br><span class=\"line\">    one = two; <span class=\"comment\">//内存泄漏</span></span><br><span class=\"line\">    two-&gt;sid = <span class=\"number\">999</span>;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; one &lt;&lt; <span class=\"built_in\">endl</span>;  <span class=\"comment\">//0x1c1770</span></span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; two &lt;&lt; <span class=\"built_in\">endl</span>;  <span class=\"comment\">//0x1c1770</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>进一步理解Java的引用，相当于c++中的指针，java的引用和c++的引用是不一样的</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> sid;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args[])</span> </span>&#123;</span><br><span class=\"line\">        Student one = <span class=\"keyword\">new</span> Student();  <span class=\"comment\">//创建对象一定需要new</span></span><br><span class=\"line\">        Student two = <span class=\"keyword\">new</span> Student();  </span><br><span class=\"line\">        one.sid = <span class=\"number\">1</span>;</span><br><span class=\"line\">        two.sid = <span class=\"number\">2</span>;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"one: \"</span> + one);  <span class=\"comment\">//one: Student@7291c18f</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"two: \"</span> + two);  <span class=\"comment\">//two: Student@34a245ab</span></span><br><span class=\"line\">        one = two;</span><br><span class=\"line\">        two.sid = <span class=\"number\">999</span>;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"one: \"</span> + one);  <span class=\"comment\">//one: Student@34a245ab</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"two: \"</span> + two);  <span class=\"comment\">//two: Student@34a245ab</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"新的for循环\"><a href=\"#新的for循环\" class=\"headerlink\" title=\"新的for循环\"></a>新的for循环</h2><p>for-each不再赘述，可以使用auto，each是取出来的容器里的值，&amp;each可以修改容器里本来的值</p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200920102146966.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1BhbmRhMzI1,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200920102201193.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1BhbmRhMzI1,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"重载\"><a href=\"#重载\" class=\"headerlink\" title=\"重载\"></a>重载</h2><p>C++ 允许在同一作用域中的某个<strong>函数</strong>和<strong>运算符</strong>指定多个定义，分别称为<strong>函数重载</strong>和<strong>运算符重载</strong>。</p>\n<p>在同一个作用域内，可以声明几个同名函数，<strong>但是这些同名函数的形式参数（指参数的个数、类型或者顺序）必须不同。不能仅通过返回类型的不同来重载函数。</strong></p>\n<p>我们可以重定义或重载大部分 C++ 内置的运算符。这样，您就能使用自定义类型的运算符。</p>\n<p>重载的运算符是带有特殊名称的函数，函数名是由关键字 operator 和其后要重载的运算符符号构成的。与其他函数一样，重载运算符有一个返回类型和一个参数列表。</p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200920103255493.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1BhbmRhMzI1,size_16,color_FFFFFF,t_70#pic_center\" alt=\"\"></p>\n<p>注：在一个函数声明中，const可以修饰形参表明他是一个输入参数，在函数内部不可以改变其值；</p>\n<h2 id=\"lambda\"><a href=\"#lambda\" class=\"headerlink\" title=\"lambda\"></a>lambda</h2><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">auto</span> f = [](<span class=\"keyword\">auto</span> a, <span class=\"keyword\">auto</span> b) -&gt; <span class=\"keyword\">auto</span> &#123; <span class=\"keyword\">return</span> a + b; &#125;;</span><br><span class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; f(<span class=\"number\">3.1</span>, <span class=\"number\">5</span>) &lt;&lt; <span class=\"built_in\">endl</span>; <span class=\"comment\">// 8.1</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"泛型和模板\"><a href=\"#泛型和模板\" class=\"headerlink\" title=\"泛型和模板\"></a>泛型和模板</h1><p>泛型是概念, 模板是泛型的实现<br>     泛型编程让你编写完全一般化并可重复使用的算法，其效率与针对某特定数据类型而设计的算法相同。泛型编程的代表作品STL是一种高效、泛型、可交互操作的软件组件。所谓泛型(Genericity)，是指具有在多种数据类型上皆可操作的含意，与模板有些相似。STL巨大，而且可以扩充，它包含很多计算机基本算法和数据结构，而且将算法与数据结构完全分离，其中算法是泛型的，不与任何特定数据结构或对象类型系在一起。STL以迭代器(Iterators)和容器(Containers)为基础，是一种泛型算法(Generic Algorithms)库，容器的存在使这些算法有东西可以操作。STL包含各种泛型算法(algorithms)、泛型指针(iterators)、泛型容器(containers)以及函数对象(function objects)。STL并非只是一些有用组件的集合，它是描述软件组件抽象需求条件的一个正规而有条理的架构。</p>\n<h1 id=\"C语言-运算符和-amp-运算符\"><a href=\"#C语言-运算符和-amp-运算符\" class=\"headerlink\" title=\"C语言*运算符和&amp;运算符\"></a>C语言*运算符和&amp;运算符</h1><p>取址运算符<code>&amp;</code>用来取得其操作数的地址。如果操作数 x 的类型为 T，则表达式 <strong>&amp;x 的类型是 T 类型指针</strong>（指向 T 的指针）。</p>\n<p>取址运算符的操作数必须是在内存中可寻址到的地址。换句话说，该运算符只能用于函数或对象（例如左值），而不可以用于位字段，以及那些还未被存储类修饰符 register 声明的内容。</p>\n<p>当需要初始化指针，以指向某些对象或函数时，需要获得这些对象或函数的地址：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">float</span> x, *ptr;ptr = &amp;x;           <span class=\"comment\">// 合法：使得指针ptr指向xptr = &amp;(x+1);       // 错误： (x+1) 不是一个左值</span></span><br></pre></td></tr></table></figure>\n\n<p>相反地，当已具有一个指针，并且希望获取它所引用的对象时，使用间接运算符 *（indirection operator），有时候这会被称为解引用运算符（dereferencing operator）。它的操作数必须是指针类型。如果 ptr 是指针，那么 *ptr 就是 ptr 所指向的对象或函数。如果 ptr 是一个对象指针，那么 *ptr 就是一个左值，可以把它（即 *ptr）当作赋值运算符左边的操作数：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">float</span> x, *ptr = &amp;x;*ptr = <span class=\"number\">1.7</span>;                                      <span class=\"comment\">// 将1.7赋值给变量x++(*ptr);                                        // 并将变量x的值加1</span></span><br></pre></td></tr></table></figure>\n\n<p>在这个示例最后的语句中，ptr 的值保持不变，但 x 的值变成 2.7。</p>\n<p>如果指针操作数的值不是某个对象或函数的地址，则间接运算符*的操作结果无法确定。</p>\n<p>像其他一元操作数一样，运算符 &amp; 和 * 具有很高的优先级。操作数的组合方式是从右到左。因此，表达式 ++（*ptr）中的括号是没有必要的。</p>\n<p>运算符 &amp; 和 * 是互补的：如果 x 是一个表达式，用于指定一个对象或一个函数，那么表达式 <em>&amp;x 就等于 x。相反地，在形如 &amp;</em>ptr 的表达式中，这些运算符会互相抵消，表达式的类型与值等效于 ptr。然而，不管 ptr 是不是左值，&amp;*ptr 都一定不会是左值。</p>\n"},{"title":"mysql 安装教程和注意事项","url":"/2020/07/19/mysql%E5%AE%89%E8%A3%85/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\css\\APlayer.min.css\"><script src=\"\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\js\\Meting.min.js\"></script><h1 id=\"mysql-安装教程和注意事项\"><a href=\"#mysql-安装教程和注意事项\" class=\"headerlink\" title=\"mysql 安装教程和注意事项\"></a>mysql 安装教程和注意事项</h1><h2 id=\"下载MySql\"><a href=\"#下载MySql\" class=\"headerlink\" title=\"下载MySql\"></a>下载MySql</h2><p>官网下载地址：<a href=\"https://dev.mysql.com/downloads/mysql/，\" target=\"_blank\" rel=\"noopener\">https://dev.mysql.com/downloads/mysql/，</a> 我选的第一个版本。</p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://i.loli.net/2020/07/19/yiSjxTZ1ncPz3AH.png\" alt=\"image-20200719173654976\"></p>\n<h2 id=\"解压和配置\"><a href=\"#解压和配置\" class=\"headerlink\" title=\"解压和配置\"></a>解压和配置</h2><p>我是直接解压到D盘，总之路径不能有中文，解压到指定文件目录。</p>\n<ol>\n<li><p>打开解压后的MySql文件在根目录下创建my.ini (mysql配置文件)。</p>\n</li>\n<li><p>新建文本文件输入以下内容,并修改文件名为my.ini</p>\n</li>\n<li><p>注意里面的basedir和datadir字段要视安装位置而定</p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">[mysql]</span><br><span class=\"line\"> </span><br><span class=\"line\"># 设置mysql客户端默认字符集</span><br><span class=\"line\"> </span><br><span class=\"line\">default-character-set&#x3D;utf8</span><br><span class=\"line\"> </span><br><span class=\"line\">[mysqld]</span><br><span class=\"line\"> </span><br><span class=\"line\">#设置3306端口</span><br><span class=\"line\"> </span><br><span class=\"line\">port &#x3D; 3306</span><br><span class=\"line\"> </span><br><span class=\"line\"># 设置mysql的安装目录</span><br><span class=\"line\"> </span><br><span class=\"line\">basedir&#x3D;D:\\mysql-8.0.21-winx64</span><br><span class=\"line\"> </span><br><span class=\"line\"># 设置mysql数据库的数据的存放目录</span><br><span class=\"line\"> </span><br><span class=\"line\">datadir&#x3D;D:\\mysql-8.0.21-winx64\\data</span><br><span class=\"line\"> </span><br><span class=\"line\"># 允许最大连接数</span><br><span class=\"line\"> </span><br><span class=\"line\">max_connections&#x3D;200</span><br><span class=\"line\"> </span><br><span class=\"line\"># 服务端使用的字符集默认为8比特编码的latin1字符集</span><br><span class=\"line\"> </span><br><span class=\"line\">character-set-server&#x3D;utf8</span><br><span class=\"line\"> </span><br><span class=\"line\"># 创建新表时将使用的默认存储引擎</span><br><span class=\"line\"> </span><br><span class=\"line\">default-storage-engine&#x3D;INNODB</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li><p>找到CMD命令提示符，右键以管理员身份运行</p>\n<p>如下图</p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://i.loli.net/2020/07/19/beTQEgw1HdWI2GA.png\" alt=\"\"></p>\n</li>\n</ol>\n<p>​             进入mysql子目录bin，如D: 进入D盘，cd 文件夹名 打开文件夹等操作不再赘述。</p>\n<p>​             在bin下依次输入:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysqld --install</span><br></pre></td></tr></table></figure>\n\n<pre><code>(安装) </code></pre><p>​             </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysqld --initialize</span><br></pre></td></tr></table></figure>\n\n<pre><code>（初始化）</code></pre><p>​        </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">net start mysql</span><br></pre></td></tr></table></figure>\n\n<p>​              （运行）</p>\n<p>如果出现“发生系统错误2”的提示，我的解决方法是：</p>\n<p>在<strong>管理员命令行窗口</strong>下，进入<strong>安装的mysql的bin</strong>目录下：</p>\n<p><strong>1.  mysql -remove</strong></p>\n<p><strong>2.  mysql -install</strong></p>\n<p><strong>3.  net start mysql</strong></p>\n<p><strong>(4. net stop mysql (关闭mysql))</strong></p>\n<h2 id=\"配置环境变量\"><a href=\"#配置环境变量\" class=\"headerlink\" title=\"配置环境变量\"></a>配置环境变量</h2><ol>\n<li>直接搜索环境变量进入到页面</li>\n<li>点击系统变量的Path，编辑Path。</li>\n<li>点击新建，把bin目录加入其中。</li>\n</ol>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://i.loli.net/2020/07/20/eORgKXBpbGaZ5YV.png\" alt=\"\"></p>\n<h2 id=\"重设密码\"><a href=\"#重设密码\" class=\"headerlink\" title=\"重设密码\"></a>重设密码</h2><p>这一步花了我很长时间，是因为在my.ini文件中加入mysqld –skip-grant-tables跳过密码验证的方法在mysql8.0中已失效，使用使用以下步骤重设密码</p>\n<ol>\n<li>打开命令窗口cmd，输入命令：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">net stop mysql</span><br></pre></td></tr></table></figure>\n\n<p>停止MySQL服务，</p>\n<ol start=\"2\">\n<li>开启跳过密码验证登录的MySQL服务</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysqld --console --skip-grant-tables --shared-memory</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>再打开一个新的cmd，无密码登录MySQL，输入登录命令：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql -u root -p</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>密码置为空，命令如下：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">use mysql</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">update user set authentication_string&#x3D;&#39;&#39; where user&#x3D;&#39;root&#39;;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>退出mysql，执行命令：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">quit</span><br></pre></td></tr></table></figure>\n\n\n\n<ol start=\"6\">\n<li><p>关闭以-console –skip-grant-tables –shared-memory 启动的MySQL服务，</p>\n</li>\n<li><p>打开命令框，输入：net start mysql 启动MySQL服务，一管理员的身份运行cmd。</p>\n</li>\n<li><p>步骤4密码已经置空，所以无密码状态登录MySQL，输入登录命令：mysql -u root -p</p>\n</li>\n<li><p>修改密码，如下图：</p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;新密码&#39;;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"10\">\n<li>验证更改后密码正确登录</li>\n</ol>\n<p>输入quit，退出当前登录，输入登录命令：mysql -u root -p</p>\n<p>输入密码，成功登录，到此，重置密码结束。</p>\n","categories":["数据库"],"tags":["mysql","数据库"]},{"title":"my-first-blog","url":"/2020/06/16/my-first-blog/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\css\\APlayer.min.css\"><script src=\"\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\js\\Meting.min.js\"></script><h1 id=\"my-first-Blog\"><a href=\"#my-first-Blog\" class=\"headerlink\" title=\"my first Blog\"></a>my first Blog</h1><p>各位好，欢迎来到我的Blog。</p>\n<p>本博客采用hexo框架，GitHub、gitee、coding托管，现为butterfly主题。</p>\n<p>这是我的第一篇博客。</p>\n","categories":["个人博客"]},{"title":"二叉树的遍历","url":"/2020/09/16/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86%EF%BC%88%E5%89%8D%E5%BA%8F%E3%80%81%E4%B8%AD%E5%BA%8F%E3%80%81%E5%90%8E%E5%BA%8F%E3%80%81%E5%B7%B2%E7%9F%A5%E5%89%8D%E4%B8%AD%E5%BA%8F%E6%B1%82%E5%90%8E%E5%BA%8F%E3%80%81%E5%B7%B2%E7%9F%A5%E4%B8%AD%E5%90%8E%E5%BA%8F%E6%B1%82%E5%89%8D%E5%BA%8F%EF%BC%89/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\css\\APlayer.min.css\"><script src=\"\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\js\\Meting.min.js\"></script><p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img2018.cnblogs.com/blog/1590962/201903/1590962-20190306170951841-1886726002.jpg\" alt=\"\"></p>\n<p>之前的一篇随笔（<a href=\"https://www.cnblogs.com/lanhaicode/p/10358736.html\" target=\"_blank\" rel=\"noopener\">二叉树、前序遍历、中序遍历、后序遍历</a>）只对二叉树的遍历进行了笼统的描述，这篇随笔重点对前、中、后序的遍历顺序进行分析</p>\n<h1 id=\"二叉树的遍历\"><a href=\"#二叉树的遍历\" class=\"headerlink\" title=\"二叉树的遍历\"></a>二叉树的遍历</h1><p>二叉树的深度优先遍历可细分为前序遍历、中序遍历、后序遍历，这三种遍历可以用递归实现（本篇随笔主要分析递归实现），也可使用非递归实现的</p>\n<p>前序遍历：根节点-&gt;左子树-&gt;右子树<strong>（根-&gt;左-&gt;右）</strong></p>\n<p>中序遍历：左子树-&gt;根节点-&gt;右子树<strong>（左-&gt;根-&gt;右）</strong></p>\n<p>后序遍历：左子树-&gt;右子树-&gt;根节点<strong>（左-&gt;右-&gt;根）</strong></p>\n<p>在进行已知两种遍历顺序求另一种遍历顺序前，先看一下不同遍历顺序对应的代码</p>\n<p><strong>前序遍历</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"> 1 &#x2F;* 以递归方式 前序遍历二叉树 *&#x2F;</span><br><span class=\"line\"> 2 void PreOrderTraverse(BiTree t, int level)</span><br><span class=\"line\"> 3 &#123;</span><br><span class=\"line\"> 4     if (t &#x3D;&#x3D; NULL)    </span><br><span class=\"line\"> 5     &#123;</span><br><span class=\"line\"> 6         return ;</span><br><span class=\"line\"> 7     &#125;</span><br><span class=\"line\"> 8     printf(&quot;data &#x3D; %c level &#x3D; %d\\n &quot;, t-&gt;data, level);</span><br><span class=\"line\"> 9     PreOrderTraverse(t-&gt;lchild, level + 1);</span><br><span class=\"line\">10     PreOrderTraverse(t-&gt;rchild, level + 1);</span><br><span class=\"line\">11 &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>中序遍历</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"> 1 &#x2F;* 以递归方式 中序遍历二叉树 *&#x2F;</span><br><span class=\"line\"> 2 void PreOrderTraverse(BiTree t, int level)</span><br><span class=\"line\"> 3 &#123;</span><br><span class=\"line\"> 4     if (t &#x3D;&#x3D; NULL)    </span><br><span class=\"line\"> 5     &#123;</span><br><span class=\"line\"> 6         return ;</span><br><span class=\"line\"> 7     &#125;</span><br><span class=\"line\"> 8     PreOrderTraverse(t-&gt;lchild, level + 1);</span><br><span class=\"line\"> 9     printf(&quot;data &#x3D; %c level &#x3D; %d\\n &quot;, t-&gt;data, level);</span><br><span class=\"line\">10     PreOrderTraverse(t-&gt;rchild, level + 1);</span><br><span class=\"line\">11 &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>后序遍历</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"> 1 &#x2F;* 以递归方式 后序遍历二叉树 *&#x2F;</span><br><span class=\"line\"> 2 void PreOrderTraverse(BiTree t, int level)</span><br><span class=\"line\"> 3 &#123;</span><br><span class=\"line\"> 4     if (t &#x3D;&#x3D; NULL)    </span><br><span class=\"line\"> 5     &#123;</span><br><span class=\"line\"> 6         return ;</span><br><span class=\"line\"> 7     &#125;</span><br><span class=\"line\"> 8     PreOrderTraverse(t-&gt;lchild, level + 1);</span><br><span class=\"line\"> 9     PreOrderTraverse(t-&gt;rchild, level + 1);</span><br><span class=\"line\">10     printf(&quot;data &#x3D; %c level &#x3D; %d\\n &quot;, t-&gt;data, level);</span><br><span class=\"line\">11 &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p> 三种遍历方式对应的代码几乎相同，只是一条语句的位置发生了变化</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">printf(&quot;data &#x3D; %c level &#x3D; %d\\n &quot;, t-&gt;data, level);</span><br></pre></td></tr></table></figure>\n\n<p> 只看文字和代码来理解遍历的过程是比较困难的，建议读者亲自去遍历，为了理清遍历的过程下面上题</p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img2018.cnblogs.com/blog/1590962/201903/1590962-20190306194614674-1602895543.png\" alt=\"\"></p>\n<p>（图片来源：<a href=\"https://www.cnblogs.com/xinchrome/p/4905608.html）\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/xinchrome/p/4905608.html）</a></p>\n<h2 id=\"前序遍历\"><a href=\"#前序遍历\" class=\"headerlink\" title=\"前序遍历\"></a>前序遍历</h2><p>前序的遍历的特点，根节点-&gt;左子树-&gt;右子树，注意看前序的遍历的代码printf语句是放在两条递归语句之前的，所以先<strong>访问根节点G，打印G</strong>，然后访问左子树D，此时左子树D又作为根节点，<strong>打印D，</strong>再访问D的左子树A</p>\n<p>A又作为根节点，<strong>打印A，</strong>A没有左子树或者右子树，函数调用结束返回到D节点（此时已经打印出来的有：<strong>GDA</strong>）D节点的左子树已经递归完成，现在递归访问右子树F，F作为根节点，<strong>打印F，</strong>F有左子树访问左子树E，E作为</p>\n<p>根节点，<strong>打印E，</strong>（此时已经打印出来的有：<strong>GDAFE</strong>），E没有左子树和右子树，函数递归结束返回F节点，F的左子树已经递归完成了，但没有右子树，所以函数递归结束，返回D节点，D节点的左子树和右子树递归全部完成，</p>\n<p>函数递归结束返回G节点，访问G节点的右子树M，M作为根节点，<strong>打印M，</strong>访问M的左子树H，H作为根节点，<strong>打印H，</strong>（此时已经打印出来的有：<strong>GDAFEMH</strong>）H没有左子树和右子树，函数递归结束，返回M节点，M节点的左子树已经</p>\n<p>递归完成，访问右子树Z，Z作为根节点，<strong>打印Z，</strong>Z没有左子树和右子树，函数递归结束，返回M节点，M节点的左子树右子树递归全部完成，函数递归结束，返回G节点，G节点的左右子树递归全部完成，整个二叉树的遍历就结束了</p>\n<p>（MGJ，终于打完了··）</p>\n<p><strong>前序遍历结果：GDAFEMHZ</strong></p>\n<p><strong>总结一下前序遍历步骤</strong></p>\n<p>第一步：<strong>打印该节点（再三考虑还是把访问根节点这句话去掉了）</strong></p>\n<p>第二步：访问左子树，返回到第一步（注意：返回到第一步的意思是将根节点的左子树作为<strong>新的根节点</strong>，就好比图中D是G的左子树但是D也是A节点和F节点的根节点）</p>\n<p>第三步：访问右子树，返回到第一步</p>\n<p>第四步：结束递归，返回到上一个节点</p>\n<p> <strong>前序遍历的另一种表述：</strong></p>\n<p><strong>（1）访问根节点</strong></p>\n<p><strong>（2）前序遍历左子树</strong></p>\n<p><strong>（3）前序遍历右子树</strong></p>\n<p><strong>（在完成第2,3步的时候，也是要按照前序遍历二叉树的规则完成）</strong></p>\n<p><strong>前序遍历结果：GDAFEMHZ</strong></p>\n<h2 id=\"中序遍历（详细遍历过程就不再赘述了，-┬＿┬-）\"><a href=\"#中序遍历（详细遍历过程就不再赘述了，-┬＿┬-）\" class=\"headerlink\" title=\"中序遍历（详细遍历过程就不再赘述了，(┬＿┬)）\"></a>中序遍历（详细遍历过程就不再赘述了，(┬＿┬)）</h2><h2 id=\"中序遍历步骤\"><a href=\"#中序遍历步骤\" class=\"headerlink\" title=\"中序遍历步骤\"></a>中序遍历步骤</h2><p>第一步：访问该节点左子树</p>\n<p>第二步：若该节点有左子树，则返回第一步，<strong>否则打印该节点</strong></p>\n<p>第三步：若该节点有右子树，则返回第一步，<strong>否则结束递归并返回上一节点</strong></p>\n<p>（按我自己理解的中序就是：先左到底，左到不能在左了就停下来并打印该节点，然后返回到该节点的上一节点，并打印该节点，然后再访问该节点的右子树，再左到不能再左了就停下来）</p>\n<p><strong>中序遍历的另一种表述：</strong></p>\n<p><strong>（1）中序遍历左子树</strong></p>\n<p><strong>（2）访问根节点</strong></p>\n<p><strong>（3）中序遍历右子树</strong></p>\n<p><strong>（在完成第1，3步的时候，要按照中序遍历的规则来完成）</strong></p>\n<p><strong>所以该图的中序遍历为：ADEFGHMZ</strong></p>\n<h2 id=\"后序遍历步骤\"><a href=\"#后序遍历步骤\" class=\"headerlink\" title=\"后序遍历步骤\"></a>后序遍历步骤</h2><p>第一步：访问左子树</p>\n<p>第二步：若该节点有左子树，返回第一步</p>\n<p>第三步：若该节点有右子树，返回第一步，<strong>否则打印该节点并返回上一节点</strong></p>\n<p> <strong>后序遍历的另一种表述：</strong></p>\n<p><strong>（1）后序遍历左子树</strong></p>\n<p><strong>（2）后序遍历右子树</strong></p>\n<p><strong>（3）访问根节点</strong></p>\n<p><strong>（在完成1,2步的时候，依然要按照后序遍历的规则来完成）</strong></p>\n<p><strong>该图的后序遍历为：AEFDHZMG</strong></p>\n<p> （读者如果在纸上遍历二叉树的时候，仍然容易将顺序搞错建议再回去看一下三种不同遍历对应的代码）</p>\n<h1 id=\"重构二叉树\"><a href=\"#重构二叉树\" class=\"headerlink\" title=\"重构二叉树\"></a>重构二叉树</h1><h1 id=\"第一种：已知前序遍历、中序遍历求后序遍历\"><a href=\"#第一种：已知前序遍历、中序遍历求后序遍历\" class=\"headerlink\" title=\"第一种：已知前序遍历、中序遍历求后序遍历\"></a>第一种：已知前序遍历、中序遍历求后序遍历</h1><p>前序遍历：ABCDEF</p>\n<p>中序遍历：CBDAEF</p>\n<p>在进行分析前读者需要知道不同遍历结果的特点</p>\n<p><strong>1、前序遍历的第一元素是整个二叉树的根节点</strong></p>\n<p><strong>2、中序遍历中根节点的左边的元素是左子树，根节点右边的元素是右子树</strong></p>\n<p><strong>3、后序遍历的最后一个元素是整个二叉树的根节点</strong></p>\n<p><strong>（如果读者不明白上述三个特点，建议再回去看一下三种不同遍历对应的代码，并在纸上写出一个简单的二叉树的三种不同的遍历结果，以加深对三种不同遍历的理解）</strong></p>\n<p>用上面这些特点来分析遍历结果，</p>\n<p><strong>第一步：</strong>先看前序遍历<strong>A</strong>肯定是根节点<img src= \"/img/loading.gif\" data-lazy-src=\"https://img2018.cnblogs.com/blog/1590962/201903/1590962-20190308110049685-131632486.png\" alt=\"\"></p>\n<p><strong>第二步：</strong>确认了根节点，再来看中序遍历，中序遍历中根节点A的左边是<strong>CBD</strong>，右边是<strong>EF</strong>，所有可以确定二叉树既有左子树又有右子树<img src= \"/img/loading.gif\" data-lazy-src=\"https://img2018.cnblogs.com/blog/1590962/201903/1590962-20190308111832076-64554868.png\" alt=\"\"></p>\n<p><strong>第三步：</strong>先来分析左子树<strong>CBD，</strong>那么CBD谁来做A的左子树呢？这个时候<strong>不能</strong>直接用中序遍历的特点（左-&gt;根-&gt;右）得出左子树应该是这个样子<img src= \"/img/loading.gif\" data-lazy-src=\"https://img2018.cnblogs.com/blog/1590962/201903/1590962-20190308104123264-1263028885.png\" alt=\"\"></p>\n<p>因为有两种情况都满足中序遍历为<strong>CBD<img src= \"/img/loading.gif\" data-lazy-src=\"https://img2018.cnblogs.com/blog/1590962/201903/1590962-20190308104526312-43746275.png\" alt=\"\"></strong>无法直接根据中序遍历来直接得出左子树的结构，这个时候就要返回到前序遍历中去</p>\n<p>观察前序遍历<strong>ABCDEF，</strong>左子树<strong>CBD</strong>在前序遍历中的顺序是<strong>BCD，</strong>意味着<strong>B</strong>是左子树的根节点（这么说可能不太好理解，换个说法就是B是A的左子树）,得出这个结果是因为如果一个二叉树的根节点有左子树，那么</p>\n<p>这个左子树一定在前序遍历中一定紧跟着根节点（这个是用前序遍历的特点（根-&gt;左-&gt;右）得出的）,到这里就可以确认<strong>B</strong>是左子树的根节点<img src= \"/img/loading.gif\" data-lazy-src=\"https://img2018.cnblogs.com/blog/1590962/201903/1590962-20190308111823897-778383099.png\" alt=\"\"></p>\n<p><strong>第四步：</strong>再观察中序遍历<strong>CBDAEF，</strong>B元素左边是<strong>C</strong>右边是<strong>D</strong>，说明B节点既有左子树又有右子树，左右子树只有一个元素就可以直接确定了，不用再返回去观察前序遍历<img src= \"/img/loading.gif\" data-lazy-src=\"https://img2018.cnblogs.com/blog/1590962/201903/1590962-20190308111608228-371713643.png\" alt=\"\"></p>\n<p><strong>第五步：</strong>到这里左子树的重建就已经完成了，现在重建右子树，因为重建右子树的过程和左子树的过程一模一样，步骤就不像上面写这么细了（(┬＿┬)），观察中序遍历右子树为<strong>EF</strong>，再观察前序遍历<strong>ABCDEF</strong>中右子树</p>\n<p>的顺序为<strong>EF</strong>，所以E为A的右子树，再观察中序便利中<strong>E</strong>只有右边有<strong>F</strong>，所有F为E的右子树，最后得到的二叉树是这个样子的</p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img2018.cnblogs.com/blog/1590962/201903/1590962-20190308112146891-622698790.png\" alt=\"\">所有求得的后序遍历为：<strong>CDBFEA</strong></p>\n<p>总结一下上述步骤： 先观察前序遍历找到根节点-&gt;观察中序遍历将根节点左边归为左子树元素，右边归为右子树元素（可能会出现只有左子树或者右子树的情况）-&gt;观察前序遍历中左\\右子树几个元素的顺序，最靠前的为左\\右子树的根节点-&gt;重复前面的步骤</p>\n<h1 id=\"第二种：已知中序遍历、后序遍历求前序遍历（题还是上面这道）\"><a href=\"#第二种：已知中序遍历、后序遍历求前序遍历（题还是上面这道）\" class=\"headerlink\" title=\"第二种：已知中序遍历、后序遍历求前序遍历（题还是上面这道）\"></a>第二种：已知中序遍历、后序遍历求前序遍历（题还是上面这道）</h1><p>中序遍历：CBDAEF</p>\n<p>后序遍历为：CDBFEA</p>\n<p>仍然是根据不同遍历方式结果的特点来重构二叉树，过程很相似这里就不详细说了，后序遍历的最后一个元素A是根节点，在中序遍历中以根节点A作为分界将元素分为左子树（<strong>CBD</strong>）和右子树（<strong>EF</strong>），再观察后序遍历中左子树的顺序是CDB</p>\n<p>，可以判断出B是左子树的根节点（因为后序遍历是：左-&gt;右-&gt;根），再观察中序遍历，B元素左边是C右边是D，说明B节点既有左子树又有右子树，左右子树只有一个元素就可以直接确定了，不用再返回去观察后序遍历，左子树重建完成，</p>\n<p>现在来看右子树，右子树有两个元素<strong>EF，</strong>观察后序遍历E在F的后面，所以E是右子树的根节点，然后看中序遍历中E只有右边一个F元素了，即F是E的右子树，此时整个二叉树重构完成</p>\n<p>总结一下上述步骤：先观察后序遍历找到根节点-&gt;观察中序遍历将根节点左边归为左子树元素，右边归为右子树元素（可能会出现只有左子树或者右子树的情况）-&gt;观察后序遍历中左\\右子树几个元素的顺序，最靠后的为左\\右子树的根节点-&gt;重复前面的步骤</p>\n<h1 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h1><p>已知前序遍历、后序遍历无法求出中序遍历（因为由前序后序重构出来的二叉树不止一种）</p>\n<p>举个栗子<img src= \"/img/loading.gif\" data-lazy-src=\"https://img2018.cnblogs.com/blog/1590962/201903/1590962-20190308141438270-1859838531.png\" alt=\"\">左图这两种二叉树前序（<strong>BEFA</strong>）和后序（<strong>AFEB</strong>）一样，但对应的中序遍历结果不一样（左边的是AFEB右边的是BEFA），所以仅靠前序后序是无法重构出唯一的二叉树</p>\n"},{"title":"reset.css","url":"/2020/08/04/reset-css/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\css\\APlayer.min.css\"><script src=\"\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\js\\Meting.min.js\"></script><p>css的重置样式表分享：reset.css</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\">html5doctor.com Reset Stylesheet</span></span><br><span class=\"line\"><span class=\"comment\">Time:2020.8.4</span></span><br><span class=\"line\"><span class=\"comment\">Author: Zhenglin Li</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"selector-tag\">html</span>, <span class=\"selector-tag\">body</span>, <span class=\"selector-tag\">div</span>, <span class=\"selector-tag\">span</span>, <span class=\"selector-tag\">object</span>, <span class=\"selector-tag\">iframe</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">h1</span>, <span class=\"selector-tag\">h2</span>, <span class=\"selector-tag\">h3</span>, <span class=\"selector-tag\">h4</span>, <span class=\"selector-tag\">h5</span>, <span class=\"selector-tag\">h6</span>, <span class=\"selector-tag\">p</span>, <span class=\"selector-tag\">blockquote</span>, <span class=\"selector-tag\">pre</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">abbr</span>, <span class=\"selector-tag\">address</span>, <span class=\"selector-tag\">cite</span>, <span class=\"selector-tag\">code</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">del</span>, <span class=\"selector-tag\">dfn</span>, <span class=\"selector-tag\">em</span>, <span class=\"selector-tag\">img</span>, <span class=\"selector-tag\">ins</span>, <span class=\"selector-tag\">kbd</span>, <span class=\"selector-tag\">q</span>, <span class=\"selector-tag\">samp</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">small</span>, <span class=\"selector-tag\">strong</span>, <span class=\"selector-tag\">sub</span>, <span class=\"selector-tag\">sup</span>, <span class=\"selector-tag\">var</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">b</span>, <span class=\"selector-tag\">i</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">dl</span>, <span class=\"selector-tag\">dt</span>, <span class=\"selector-tag\">dd</span>, <span class=\"selector-tag\">ol</span>, <span class=\"selector-tag\">ul</span>, <span class=\"selector-tag\">li</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">fieldset</span>, <span class=\"selector-tag\">form</span>, <span class=\"selector-tag\">label</span>, <span class=\"selector-tag\">legend</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">table</span>, <span class=\"selector-tag\">caption</span>, <span class=\"selector-tag\">tbody</span>, <span class=\"selector-tag\">tfoot</span>, <span class=\"selector-tag\">thead</span>, <span class=\"selector-tag\">tr</span>, <span class=\"selector-tag\">th</span>, <span class=\"selector-tag\">td</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">article</span>, <span class=\"selector-tag\">aside</span>, <span class=\"selector-tag\">canvas</span>, <span class=\"selector-tag\">details</span>, <span class=\"selector-tag\">figcaption</span>, <span class=\"selector-tag\">figure</span>, </span><br><span class=\"line\"><span class=\"selector-tag\">footer</span>, <span class=\"selector-tag\">header</span>, <span class=\"selector-tag\">hgroup</span>, <span class=\"selector-tag\">menu</span>, <span class=\"selector-tag\">nav</span>, <span class=\"selector-tag\">section</span>, <span class=\"selector-tag\">summary</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">time</span>, <span class=\"selector-tag\">mark</span>, <span class=\"selector-tag\">audio</span>, <span class=\"selector-tag\">video</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">outline</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>:<span class=\"number\">100%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">vertical-align</span>:baseline;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>:transparent;</span><br><span class=\"line\">    <span class=\"attribute\">box-sizing</span>:border-box;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">line-height</span>:<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-pseudo\">:focus</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">outline</span>: <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">article</span>,<span class=\"selector-tag\">aside</span>,<span class=\"selector-tag\">canvas</span>,<span class=\"selector-tag\">details</span>,<span class=\"selector-tag\">figcaption</span>,<span class=\"selector-tag\">figure</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">footer</span>,<span class=\"selector-tag\">header</span>,<span class=\"selector-tag\">hgroup</span>,<span class=\"selector-tag\">menu</span>,<span class=\"selector-tag\">nav</span>,<span class=\"selector-tag\">section</span>,<span class=\"selector-tag\">summary</span> &#123; </span><br><span class=\"line\">    <span class=\"attribute\">display</span>:block;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">ul</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">list-style</span>:none;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">blockquote</span>, <span class=\"selector-tag\">q</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">quotes</span>:none;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">blockquote</span><span class=\"selector-pseudo\">:before</span>, <span class=\"selector-tag\">blockquote</span><span class=\"selector-pseudo\">:after</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">q</span><span class=\"selector-pseudo\">:before</span>, <span class=\"selector-tag\">q</span><span class=\"selector-pseudo\">:after</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>:<span class=\"string\">''</span>;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>:none;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">a</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>:<span class=\"number\">100%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">vertical-align</span>:baseline;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>:transparent;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">ins</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>:<span class=\"number\">#ff9</span>;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>:<span class=\"number\">#000</span>;</span><br><span class=\"line\">    <span class=\"attribute\">text-decoration</span>:none;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">mark</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>:<span class=\"number\">#ff9</span>;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>:<span class=\"number\">#000</span>; </span><br><span class=\"line\">    <span class=\"attribute\">font-style</span>:italic;</span><br><span class=\"line\">    <span class=\"attribute\">font-weight</span>:bold;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">del</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">text-decoration</span>: line-through;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">abbr</span><span class=\"selector-attr\">[title]</span>, <span class=\"selector-tag\">dfn</span><span class=\"selector-attr\">[title]</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">border-bottom</span>:<span class=\"number\">1px</span> dotted <span class=\"number\">#000</span>;</span><br><span class=\"line\">    <span class=\"attribute\">cursor</span>:help;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">table</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">border-collapse</span>:collapse;</span><br><span class=\"line\">    <span class=\"attribute\">border-spacing</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">hr</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>:block;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>:<span class=\"number\">1px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>:<span class=\"number\">0</span>;   </span><br><span class=\"line\">    <span class=\"attribute\">border-top</span>:<span class=\"number\">1px</span> solid <span class=\"number\">#cccccc</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>:<span class=\"number\">1em</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">input</span>, <span class=\"selector-tag\">select</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">vertical-align</span>:middle;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","categories":["前端"],"tags":["资源分享"]},{"title":"八大排序算法详解","url":"/2020/09/16/%E5%85%AB%E5%A4%A7%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\css\\APlayer.min.css\"><script src=\"\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\js\\Meting.min.js\"></script><p><a href=\"https://www.cnblogs.com/l199616j/p/10742603.html\" target=\"_blank\" rel=\"noopener\">八大排序算法详解（动图演示 思路分析 实例代码java 复杂度分析 适用场景）</a></p>\n<h1 id=\"一、分类\"><a href=\"#一、分类\" class=\"headerlink\" title=\"一、分类\"></a><strong>一、分类</strong></h1><h2 id=\"1-内部排序和外部排序\"><a href=\"#1-内部排序和外部排序\" class=\"headerlink\" title=\"1.内部排序和外部排序　\"></a><strong>1.内部排序和外部排序</strong>　</h2><ul>\n<li><strong>内部排序</strong>：待排序记录存放在计算机随机存储器中（说简单点，就是内存）进行的排序过程。</li>\n<li><strong>外部排序</strong>：待排序记录的数量很大，以致于内存不能一次容纳全部记录，所以在排序过程中需要对外存进行访问的排序过程。</li>\n</ul>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img2018.cnblogs.com/blog/1258817/201904/1258817-20190420100103564-1484547501.png\" alt=\"\"></p>\n<h2 id=\"2-比较类排序和非比较排序\"><a href=\"#2-比较类排序和非比较排序\" class=\"headerlink\" title=\"2.比较类排序和非比较排序\"></a><strong>2.比较类排序和非比较排序</strong></h2><ul>\n<li><strong>比较类排序</strong>：通过比较来决定元素间的相对次序，由于其时间复杂度不能突破O(nlogn)，因此也称为非线性时间比较类排序。</li>\n<li><strong>非比较类排序</strong>：不通过比较来决定元素间的相对次序，它可以突破基于比较排序的时间下界，以线性时间运行，因此也称为线性时间非比较类排序。<br><img src= \"/img/loading.gif\" data-lazy-src=\"https://img2018.cnblogs.com/blog/1258817/201904/1258817-20190420193244916-2091485181.png\" alt=\"\"></li>\n</ul>\n<h1 id=\"二、复杂度分析，算法稳定性和适用场景\"><a href=\"#二、复杂度分析，算法稳定性和适用场景\" class=\"headerlink\" title=\"二、复杂度分析，算法稳定性和适用场景\"></a><strong>二、复杂度分析，算法稳定性和适用场景</strong></h1><ul>\n<li><strong>稳定</strong>：如果a原本在b前面，而a=b，排序之后a仍然在b的前面。</li>\n<li><strong>不稳定</strong>：如果a原本在b的前面，而a=b，排序之后 a 可能会出现在 b 的后面。</li>\n<li><strong>时间复杂度</strong>：对排序数据的总的操作次数。反映当n变化时，操作次数呈现什么规律。</li>\n<li><strong>空间复杂度：</strong>是指算法在计算机内执行时所需存储空间的度量，它也是数据规模n的函数。 </li>\n</ul>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img2018.cnblogs.com/blog/1258817/201904/1258817-20190420193530213-2111577377.png\" alt=\"\"></p>\n<h1 id=\"三、八大排序算法详解\"><a href=\"#三、八大排序算法详解\" class=\"headerlink\" title=\"三、八大排序算法详解\"></a><strong>三、八大排序算法详解</strong></h1><h2 id=\"1-选择排序\"><a href=\"#1-选择排序\" class=\"headerlink\" title=\"1.选择排序\"></a><strong>1.选择排序</strong></h2><p><strong>1.1 动图演示</strong></p>\n<p><strong>1.2 思路分析</strong></p>\n<p><strong>1.</strong> <strong>第一个跟后面的所有数相比，</strong>如果小于（或小于）第一个数的时候，暂存较小数的下标，第一趟结束后，将第一个数，与暂存的那个最小数进行交换，第一个数就是最小（或最大的数）</p>\n<p><strong>2.</strong> 下标移到第二位，第二个数跟后面的所有数相比，一趟下来，确定第二小（或第二大）的数</p>\n<p>重复以上步骤</p>\n<p>直到指针移到倒数第二位，确定倒数第二小（或倒数第二大）的数，那么最后一位也就确定了，排序完成。</p>\n<p><strong>1.3 复杂度分析</strong></p>\n<p><strong>1.</strong> 不管原始数组是否有序，<strong>时间复杂度都是O（n2）</strong>，</p>\n<p>因为没一个数都要与其他数比较一次，（n-1）2次，分解：n2-2n+1, 去掉低次幂和常数，剩下n2,所以最后的时间复杂度是n2</p>\n<p><strong>2. 空间复杂度是O（1）</strong>,因为只定义了两个辅助变量，与n的大小无关，所以空间复杂度为O（1）</p>\n<p> <strong>1.4 Java 代码如下：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">import java.util.Arrays;</span><br><span class=\"line\">public class Main &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        int[] n &#x3D; new int[]&#123;1,6,3,8,33,27,66,9,7,88&#125;;</span><br><span class=\"line\">        int temp,index &#x3D; -1;</span><br><span class=\"line\">        for (int i &#x3D; 0; i &lt; n.length-1; i++) &#123;</span><br><span class=\"line\">            index&#x3D;i;</span><br><span class=\"line\">            &#x2F;&#x2F;如果大于，暂存较小的数的下标</span><br><span class=\"line\">            for (int j &#x3D; i+1; j &lt;n.length; j++) &#123;</span><br><span class=\"line\">                if(n[index]&gt;n[j])&#123;</span><br><span class=\"line\">                    index &#x3D; j;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            &#x2F;&#x2F;&#x2F;&#x2F;将一趟下来求出的最小数，与这个数交换</span><br><span class=\"line\">            if(index&gt;0)&#123;</span><br><span class=\"line\">                temp &#x3D; n[i];</span><br><span class=\"line\">                n[i] &#x3D; n[index];</span><br><span class=\"line\">                n[index] &#x3D; temp;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.println(Arrays.toString(n));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(Arrays.toString(n));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n<h2 id=\"2-冒泡排序\"><a href=\"#2-冒泡排序\" class=\"headerlink\" title=\"2. 冒泡排序\"></a><strong>2. 冒泡排序</strong></h2><p><strong>2.1 动图演示</strong></p>\n<p><strong>2.2 思路分析</strong></p>\n<p><strong>1.</strong> <strong>相邻两个数两两相比</strong>，n[i]跟n[j+1]比，如果n[i]&gt;n[j+1]，则将连个数进行交换，**<br>**</p>\n<p>\\2. j++, 重复以上步骤，第一趟结束后，最大数就会被确定在最后一位，这就是冒泡排序又称大（小）数沉底，</p>\n<p>\\3. i++,重复以上步骤，直到i=n-1结束，排序完成。</p>\n<p><strong>2.3 复杂度分析</strong></p>\n<p><strong>1.</strong> 不管原始数组是否有序，<strong>时间复杂度都是O（n2）</strong>，</p>\n<p>因为没一个数都要与其他数比较一次，（n-1）2次，分解：n2+2n-1, 去掉低次幂和常数，剩下n2,所以最后的时间复杂度是n2</p>\n<p><strong>2. 空间复杂度是O（1）</strong>,因为只定义了一个辅助变量，与n的大小无关，所以空间复杂度为O（1）</p>\n<p><strong>2.4 选择排序和冒泡排序的比较</strong></p>\n<p>\\1. 时间负责度都是O（n2）</p>\n<p>\\2. 空间复杂度都是O（1）</p>\n<p>\\3. 选择排序是从第一位开始确定最大或最小的数，保证前面的数都是有序的，且都比后面的数小或大，</p>\n<p>　 冒泡排序是从最后一位开始确定最大或最小的数，保证后面的数都是有序的且都大于或小于前面的数。</p>\n<p><strong>2.5 Java 代码如下</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">import java.util.Arrays;</span><br><span class=\"line\">public class 冒泡 &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        int[] n &#x3D; new int[]&#123;1,6,3,8,33,27,66,9,7,88&#125;;</span><br><span class=\"line\">        int temp;</span><br><span class=\"line\">        for (int i &#x3D; 0; i &lt; n.length-1; i++) &#123;</span><br><span class=\"line\">            for (int j &#x3D; 0; j &lt;n.length-1; j++) &#123;</span><br><span class=\"line\">                if(n[j]&gt;n[j+1])&#123;</span><br><span class=\"line\">                    temp &#x3D; n[j];</span><br><span class=\"line\">                    n[j] &#x3D; n[j+1];</span><br><span class=\"line\">                    n[j+1] &#x3D; temp;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(Arrays.toString(n));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n<h2 id=\"3-直接插入排序\"><a href=\"#3-直接插入排序\" class=\"headerlink\" title=\"3. 直接插入排序\"></a><strong>3. 直接插入排序</strong></h2><p><strong>3.1 动图演示</strong></p>\n<p><strong>3.2 思路分析</strong></p>\n<p>例如从<strong>小到大</strong>排序:</p>\n<p><strong>1.</strong> 从第二位开始遍历，</p>\n<p><strong>2.</strong> 当前数（第一趟是第二位数）<strong>与前面的数依次比较，如果前面的数大于当前数，则将这个数放在当前数的位置上，当前数的下标-1</strong>，**<br>**</p>\n<p><strong>3. 重复以上步骤，直到当前数不大于前面的某一个数为止，这时，将当前数，放到这个位置，</strong></p>\n<p>　　1-3步就是保证当前数的前面的数都是有序的，内层循环的目的就是将当前数插入到前面的有序序列里</p>\n<p><strong>4.</strong> 重复以上3步，直到遍历到最后一位数，并将最后一位数插入到合适的位置，插入排序结束。</p>\n<p>根据思路分析，每一趟的执行流程如下图所示：</p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img2018.cnblogs.com/blog/1258817/201903/1258817-20190325151805019-1065720478.png\" alt=\"\"></p>\n<p><strong>3.3 复杂度分析</strong></p>\n<p><strong>1. 时间复杂度：</strong>插入算法，就是保证前面的序列是有序的，只需要把当前数插入前面的某一个位置即可。</p>\n<p>   所以如果数组本来就是有序的，则数组的<strong>最好情况下时间复杂度为O（n）</strong></p>\n<p>   如果数组恰好是倒=倒序，比如原始数组是5 4 3 2 1，想要排成从小到大，则每一趟前面的数都要往后移，一共要执行n-1 + n-2 + … + 2 + 1 = n * (n-1) / 2 = <strong>0.5 * n2 - 0.5 * n</strong>次，去掉低次幂及系数，所以<strong>最坏情况下时间复杂度为O（n2）</strong></p>\n<p>  平均时间复杂度(n+n2 )/2，所以<strong>平均时间复杂度为O（n2）</strong></p>\n<p><strong>2. 空间复杂度：</strong>插入排序算法，只需要两个变量暂存当前数，以及下标，与n的大小无关，所以<strong>空间复杂度为：O（1）</strong></p>\n<p><strong>3.4 Java 代码如下</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">import java.util.Arrays;</span><br><span class=\"line\">public class insertSort &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        int[] n &#x3D; new int[]&#123;20,12,15,1,5,49,58,24,578,211,20,214,78,35,125,789,11&#125;;</span><br><span class=\"line\">        int temp &#x3D; 0,j;</span><br><span class=\"line\">        for (int i &#x3D; 1; i &lt; n.length; i++) &#123;</span><br><span class=\"line\">            temp &#x3D; n[i];</span><br><span class=\"line\">            for (j &#x3D; i; j &gt;0; j--) &#123;</span><br><span class=\"line\">                &#x2F;&#x2F;如果当前数前面的数大于当前数，则把前面的数向后移一个位置</span><br><span class=\"line\">                if(n[j-1]&gt;temp)&#123;</span><br><span class=\"line\">                    n[j] &#x3D; n[j-1];</span><br><span class=\"line\">                    </span><br><span class=\"line\">                    &#x2F;&#x2F;第一个数已经移到第二个数，将当前数放到第一个位置，这一趟结束</span><br><span class=\"line\">                    if(j&#x3D;&#x3D;1)&#123;</span><br><span class=\"line\">                        n[j-1] &#x3D; temp;</span><br><span class=\"line\">                        break;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;else&#123;&#x2F;&#x2F;如果不大于，将当前数放到j的位置，这一趟结束</span><br><span class=\"line\">                </span><br><span class=\"line\">                    n[j] &#x3D; temp;</span><br><span class=\"line\">                    break;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.println(Arrays.toString(n));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(Arrays.toString(n));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n<h2 id=\"4-快速排序\"><a href=\"#4-快速排序\" class=\"headerlink\" title=\"4. 快速排序\"></a><strong>4. 快速排序</strong></h2><p><strong>4.1 动图演示</strong></p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img2018.cnblogs.com/blog/1258817/201903/1258817-20190325195811497-310078615.jpg\" alt=\"\"></p>\n<p><strong>4.2 思路分析</strong></p>\n<p>快速排序的思想就是，选一个数作为基数（这里我选的是第一个数），大于这个基数的放到右边，小于这个基数的放到左边，等于这个基数的数可以放到左边或右边，看自己习惯，这里我是放到了左边，</p>\n<p>一趟结束后，将基数放到中间分隔的位置，第二趟将数组从基数的位置分成两半，分割后的两个的数组继续重复以上步骤，选基数，将小数放在基数左边，将大数放到基数的右边，在分割数组，，，直到数组不能再分为止，排序结束。</p>\n<p>例如从<strong>小到大</strong>排序:</p>\n<p><strong>1.</strong> 第一趟，第一个数为基数temp，设置两个指针left = 0，right = n.length，</p>\n<p>　　①从right开始与基数temp比较，如果n[right]&gt;基数temp，则right指针向前移一位，继续与基数temp比较，直到不满足n[right]&gt;基数temp</p>\n<p>　　②将n[right]赋给n[left]</p>\n<p>　　③从left开始与基数temp比较，如果n[left]&lt;=基数temp，则left指针向后移一位，继续与基数temp比较，直到不满足n[left]&lt;=基数temp</p>\n<p>　　④将n[left]赋给n[rigth]</p>\n<p>　　⑤重复①-④步，直到left==right结束，将基数temp赋给n[left]</p>\n<p><strong>2.</strong> 第二趟，将数组从中间分隔，每个数组再进行第1步的操作，然后再将分隔后的数组进行分隔再快排，</p>\n<p><strong>3.</strong> 递归重复分隔快排，直到数组不能再分，也就是只剩下一个元素的时候，结束递归，排序完成</p>\n<p>根据思路分析，第一趟的执行流程如下图所示：</p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img2018.cnblogs.com/blog/1258817/201903/1258817-20190325222933746-500131356.png\" alt=\"\"></p>\n<p><strong>4.3 复杂度分析</strong></p>\n<p><strong>1. 时间复杂度：</strong></p>\n<p>最坏情况就是每一次取到的元素就是数组中最小/最大的，这种情况其实就是冒泡排序了(每一次都排好一个元素的顺序)</p>\n<p>这种情况时间复杂度就好计算了，就是冒泡排序的时间复杂度：T[n] = n * (n-1) = n^2 + n;</p>\n<p><strong>最好情况下是O(nlog2n)，推导过程如下：</strong></p>\n<p><strong>（</strong>递归算法的时间复杂度公式：<strong>T[n] = aT[n/b] + f(n)</strong> <strong>）</strong></p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img2018.cnblogs.com/blog/1258817/201903/1258817-20190326191158640-601403776.png\" alt=\"\"></p>\n<p>所以<strong>平均时间复杂度为O（nlog2n）</strong></p>\n<p><strong>2. 空间复杂度：</strong></p>\n<p>　　快速排序使用的空间是O(1)的，也就是个常数级；而真正消耗空间的就是递归调用了，因为每次递归就要保持一些数据：</p>\n<p>　　最优的情况下空间复杂度为:<strong>O(log2n)</strong>；每一次都平分数组的情况</p>\n<p>　　最差的情况下空间复杂度为：<strong>O( n )</strong>；退化为冒泡排序的情况</p>\n<p>所以<strong>平均空间复杂度为O（log2n）</strong></p>\n<p> <strong>4.4 Java 代码如下</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">import java.util.Arrays;</span><br><span class=\"line\">public class quick&#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        int[] arr &#x3D; new int[]&#123;10,6,3,8,33,27,66,9,7,88&#125;;</span><br><span class=\"line\">&#x2F;&#x2F;        int[] arr &#x3D; new int[]&#123;1,3,2&#125;;</span><br><span class=\"line\">        f(arr,0,arr.length-1);</span><br><span class=\"line\">        System.out.println(Arrays.toString(arr));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public static void f(int[] arr,int start,int end)&#123;</span><br><span class=\"line\">        &#x2F;&#x2F;直到start&gt;&#x3D;end时结束递归</span><br><span class=\"line\">        if(start&lt;end)&#123;</span><br><span class=\"line\">            int left &#x3D; start;</span><br><span class=\"line\">            int right &#x3D; end;</span><br><span class=\"line\">            int temp &#x3D; arr[start];</span><br><span class=\"line\">            </span><br><span class=\"line\">            while(left&lt;right)&#123;</span><br><span class=\"line\">                </span><br><span class=\"line\">                &#x2F;&#x2F;右面的数字大于标准数时，右边的数的位置不变，指针向左移一个位置</span><br><span class=\"line\">                while(left&lt;right &amp;&amp; arr[right]&gt;temp)&#123;</span><br><span class=\"line\">                    right--;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                </span><br><span class=\"line\">                </span><br><span class=\"line\">                &#x2F;&#x2F;右边的数字及下标小于或等于基本数，将右边的数放到左边</span><br><span class=\"line\">                if(left&lt;right) &#123;</span><br><span class=\"line\">                     arr[left] &#x3D; arr[right];</span><br><span class=\"line\">                     left++;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                </span><br><span class=\"line\">                &#x2F;&#x2F;&#x2F;&#x2F;左边的数字小于或等于标准数时，左边的数的位置不变，指针向右移一个位置</span><br><span class=\"line\">                while(left&lt;right &amp;&amp; arr[left]&lt;&#x3D;temp)&#123;</span><br><span class=\"line\">                    left++;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                </span><br><span class=\"line\">                &#x2F;&#x2F;左边的数字大于基本数，将左边的数放到右边</span><br><span class=\"line\">                arr[right] &#x3D; arr[left];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">            &#x2F;&#x2F;一趟循环结束，此时left&#x3D;right，将基数放到这个重合的位置，</span><br><span class=\"line\">            arr[left] &#x3D; temp;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#x2F;&#x2F;将数组从left位置分为两半，继续递归下去进行排序</span><br><span class=\"line\">            f(arr,start,left);</span><br><span class=\"line\">            f(arr,left+1,end);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n<h2 id=\"5-归并排序\"><a href=\"#5-归并排序\" class=\"headerlink\" title=\"5. 归并排序\"></a><strong>5. 归并排序</strong></h2><p><strong>5.1 动图演示</strong></p>\n<p><strong>5.2 思路分析</strong></p>\n<p>归并排序就是递归得将原始数组递归对半分隔，直到不能再分（只剩下一个元素）后，开始从最小的数组向上归并排序</p>\n<p>\\1. 向上归并排序的时候，需要一个暂存数组用来排序，</p>\n<p>\\2. 将待合并的两个数组，从第一位开始比较，小的放到暂存数组，指针向后移，</p>\n<p>\\3. 直到一个数组空，这时，不用判断哪个数组空了，直接将两个数组剩下的元素追加到暂存数组里，</p>\n<p>\\4. 再将暂存数组排序后的元素放到原数组里，两个数组合成一个，这一趟结束。</p>\n<p><strong>根据思路分析，每一趟的执行流程如下图所示：</strong></p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img2018.cnblogs.com/blog/1258817/201903/1258817-20190326213950253-1393118004.png\" alt=\"\"></p>\n<p><strong>5.3 复杂度分析</strong></p>\n<p><strong>1. 时间复杂度：</strong>递归算法的时间复杂度公式：<strong>T[n] = aT[n/b] + f(n)</strong> **<br>**</p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img2018.cnblogs.com/blog/1258817/201903/1258817-20190326191158640-601403776.png\" alt=\"\"></p>\n<p>无论原始数组是否是有序的，都要递归分隔并向上归并排序，所以<strong>时间复杂度始终是O（nlog2n）</strong></p>\n<p><strong>2. 空间复杂度：</strong></p>\n<p>　　每次两个数组进行归并排序的时候，都会利用一个长度为n的数组作为辅助数组用于保存合并序列，所以<strong>空间复杂度为O（n）</strong></p>\n<p> <strong>5.4 Java 代码如下</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">import java.util.Arrays;</span><br><span class=\"line\"></span><br><span class=\"line\">public class Main &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        int[] arr &#x3D; new int[]&#123;3,6,4,7,5,2&#125;;</span><br><span class=\"line\">        merge(arr,0,arr.length-1);</span><br><span class=\"line\">        System.out.println(Arrays.toString(arr));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#x2F;&#x2F;归并</span><br><span class=\"line\">    public static void merge(int[] arr,int low,int high)&#123;</span><br><span class=\"line\">        int center &#x3D; (high+low)&#x2F;2;</span><br><span class=\"line\">        if(low&lt;high)&#123;</span><br><span class=\"line\">            &#x2F;&#x2F;递归，直到low&#x3D;&#x3D;high，也就是数组已不能再分了，</span><br><span class=\"line\">            merge(arr,low,center);</span><br><span class=\"line\">            merge(arr,center+1,high);</span><br><span class=\"line\">            </span><br><span class=\"line\">            &#x2F;&#x2F;当数组不能再分，开始归并排序</span><br><span class=\"line\">            mergeSort(arr,low,center,high);</span><br><span class=\"line\">            System.out.println(Arrays.toString(arr));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#x2F;&#x2F;排序</span><br><span class=\"line\">    public static void mergeSort(int[] arr,int low,int center,int high)&#123;</span><br><span class=\"line\">        &#x2F;&#x2F;用于暂存排序后的数组的临时数组</span><br><span class=\"line\">        int[] tempArr &#x3D; new int[arr.length];</span><br><span class=\"line\">        int i &#x3D; low,j &#x3D; center+1;</span><br><span class=\"line\">        </span><br><span class=\"line\">        &#x2F;&#x2F;临时数组的下标</span><br><span class=\"line\">        int index &#x3D; 0;</span><br><span class=\"line\">        </span><br><span class=\"line\">        &#x2F;&#x2F;循环遍历两个数组的数字，将小的插入到临时数组里</span><br><span class=\"line\">        while(i&lt;&#x3D;center &amp;&amp; j&lt;&#x3D; high)&#123;</span><br><span class=\"line\">            </span><br><span class=\"line\">            &#x2F;&#x2F;左边数组的数小，插入到新数组</span><br><span class=\"line\">            if(arr[i]&lt;arr[j])&#123;</span><br><span class=\"line\">                tempArr[index] &#x3D; arr[i];</span><br><span class=\"line\">                i++;</span><br><span class=\"line\">            &#125;else&#123;&#x2F;&#x2F;右边数组的数小，插入到新数组</span><br><span class=\"line\">                tempArr[index] &#x3D; arr[j];</span><br><span class=\"line\">                j++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            index++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        &#x2F;&#x2F;处理左半边数组多余的数据，将左半边多余的数据直接追加的临时数组的后面</span><br><span class=\"line\">        while(i&lt;&#x3D;center)&#123;</span><br><span class=\"line\">            tempArr[index] &#x3D; arr[i];</span><br><span class=\"line\">            i++;</span><br><span class=\"line\">            index++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        &#x2F;&#x2F;处理右半边数组多余的数据，将右半边多余的数据直接追加的临时数组的后面</span><br><span class=\"line\">        while(j&lt;&#x3D; high)&#123;</span><br><span class=\"line\">            tempArr[index] &#x3D; arr[j];</span><br><span class=\"line\">            j++;</span><br><span class=\"line\">            index++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        &#x2F;&#x2F;将临时数组中的数据重新放进原数组</span><br><span class=\"line\">        for (int k &#x3D; 0; k &lt; index; k++) &#123;</span><br><span class=\"line\">            arr[k+low] &#x3D; tempArr[k];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n<h2 id=\"6-基数排序\"><a href=\"#6-基数排序\" class=\"headerlink\" title=\"6. 基数排序\"></a><strong>6. 基数排序</strong></h2><p><strong>6.1 动图演示</strong></p>\n<p><strong>6.2 思路分析</strong></p>\n<p>基数排序第i趟将待排数组里的每个数的i位数放到tempj（j=1-10）队列中，然后再从这十个队列中取出数据，重新放到原数组里，直到i大于待排数的最大位数。</p>\n<p>1.数组里的数最大位数是n位，就需要排n趟，例如数组里最大的数是3位数，则需要排3趟。</p>\n<p>2.若数组里共有m个数，则需要十个长度为m的数组tempj（j=0-9）用来暂存i位上数为j的数，例如，第1趟，各位数为0的会被分配到temp0数组里，各位数为1的会被分配到temp1数组里……</p>\n<p>3.分配结束后，再依次从tempj数组中取出数据，遵循先进先进原则，例如对数组{1，11，2，44，4}，进行第1趟分配后，temp1={1,11}，temp2={2}，temp4={44，4}，依次取出元素后{1，11，2，44，4}，第一趟结束</p>\n<p>4.循环到n趟后结束，排序完成</p>\n<p><strong>根据思路分析，每一趟的执行流程如下图所示：</strong></p>\n<p>通过基数排序对数组{53, 3, 542, 748, 14, 214, 154, 63, 616}：</p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img2018.cnblogs.com/blog/1258817/201904/1258817-20190418154706937-1683821955.png\" alt=\"\"></p>\n<p><strong>6.3 复杂度分析</strong></p>\n<p><strong>1. 时间复杂度：**</strong><br>**</p>\n<p>每一次关键字的桶分配都需要O(n)的时间复杂度，而且分配之后得到新的关键字序列又需要O(n)的时间复杂度。</p>\n<p>假如待排数据可以分为d个关键字，则基数排序的时间复杂度将是O(d*2n) ，当然d要远远小于n，因此基本上还是线性级别的。</p>\n<p>系数2可以省略，且无论数组是否有序，都需要从个位排到最大位数，所以<strong>时间复杂度始终为O(d*n)</strong> 。其中，n是数组长度，d是最大位数。</p>\n<p><strong>2. 空间复杂度：</strong> </p>\n<p>　　基数排序的<strong>空间复杂度为O(n+k)</strong>，其中k为桶的数量，需要分配n个数。</p>\n<p><strong>6.4 Java 代码如下</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">import java.util.Arrays;</span><br><span class=\"line\">public class Main &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        int[] arr &#x3D; new int[]&#123;10,6,3,8,33,27,66,9,7,88&#125;;</span><br><span class=\"line\">        radixSort(arr);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static void radixSort(int[] arr) &#123;</span><br><span class=\"line\">        &#x2F;&#x2F;求出待排数的最大数</span><br><span class=\"line\">        int maxLength&#x3D;0;</span><br><span class=\"line\">        for (int i &#x3D; 0; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">            if(maxLength&lt;arr[i])</span><br><span class=\"line\">                maxLength &#x3D; arr[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        &#x2F;&#x2F;根据最大数求最大长度</span><br><span class=\"line\">        maxLength &#x3D; (maxLength+&quot;&quot;).length();</span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F;用于暂存数据的数组</span><br><span class=\"line\">        int[][] temp &#x3D; new int[10][arr.length];</span><br><span class=\"line\">        &#x2F;&#x2F;用于记录temp数组中每个桶内存的数据的数量</span><br><span class=\"line\">        int[] counts &#x3D; new int[10];</span><br><span class=\"line\">        &#x2F;&#x2F;用于记录每个数的i位数</span><br><span class=\"line\">        int num &#x3D; 0;</span><br><span class=\"line\">        &#x2F;&#x2F;用于取的元素需要放的位置</span><br><span class=\"line\">        int index &#x3D; 0;</span><br><span class=\"line\">        &#x2F;&#x2F;根据最大长度决定排序的次数</span><br><span class=\"line\">        for (int i &#x3D; 0,n&#x3D;1; i &lt; maxLength; i++,n*&#x3D;10) &#123;</span><br><span class=\"line\">            for (int j &#x3D; 0; j &lt; arr.length; j++) &#123;</span><br><span class=\"line\">                num &#x3D; arr[j]&#x2F;n%10;</span><br><span class=\"line\">                temp[num][counts[num]] &#x3D; arr[j];</span><br><span class=\"line\">                counts[num]++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">            &#x2F;&#x2F;从temp中取元素重新放到arr数组中</span><br><span class=\"line\">            for (int j &#x3D; 0; j &lt; counts.length; j++) &#123;</span><br><span class=\"line\">                for (int j2 &#x3D; 0; j2 &lt; counts[j]; j2++) &#123;</span><br><span class=\"line\">                    arr[index] &#x3D; temp[j][j2];</span><br><span class=\"line\">                    index++;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                counts[j]&#x3D;0;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            index&#x3D;0;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(Arrays.toString(arr));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n<h2 id=\"7-希尔（shell）排序\"><a href=\"#7-希尔（shell）排序\" class=\"headerlink\" title=\"7. 希尔（shell）排序\"></a><strong>7. 希尔（shell）排序</strong></h2><p><strong>7.1 动图演示</strong></p>\n<p><strong>7.2 思路分析</strong></p>\n<blockquote>\n<p><strong>希尔排序是把记录按下标的一定增量分组，对每组使用直接插入排序算法排序；随着增量逐渐减少，每组包含的关键词越来越多，当增量减至1时，整个文件恰被分成一组，算法便终止。</strong></p>\n</blockquote>\n<p>　　简单插入排序很循规蹈矩，不管数组分布是怎么样的，依然一步一步的对元素进行比较，移动，插入，比如[5,4,3,2,1,0]这种倒序序列，数组末端的0要回到首位置很是费劲，比较和移动元素均需n-1次。</p>\n<p>　　而希尔排序在数组中采用跳跃式分组的策略，通过某个增量将数组元素划分为若干组，然后分组进行插入排序，随后逐步缩小增量，继续按组进行插入排序操作，直至增量为1。希尔排序通过这种策略使得整个数组在初始阶段达到从宏观上看基本有序，小的基本在前，大的基本在后。然后缩小增量，到增量为1时，其实多数情况下只需微调即可，不会涉及过多的数据移动。</p>\n<p>　　来看下希尔排序的基本步骤，在此选择增量gap=length/2，缩小增量继续以gap = gap/2的方式，这种增量选择可以用一个序列来表示，{n/2,(n/2)/2…1}，称为<strong>增量序列</strong>。希尔排序的增量序列的选择与证明是个数学难题，选择的这个增量序列是比较常用的，也是希尔建议的增量，称为希尔增量，但其实这个增量序列不是最优的。此处做示例使用希尔增量。</p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://images2015.cnblogs.com/blog/1024555/201611/1024555-20161128110416068-1421707828.png\" alt=\"\"></p>\n<p><strong>7.3 复杂度分析</strong></p>\n<p><strong>1. 时间复杂度：</strong>最坏情况下，每两个数都要比较并交换一次，则<strong>最坏情况下的时间复杂度为O（n2）</strong>, 最好情况下，数组是有序的，不需要交换，只需要比较，则<strong>最好情况下的时间复杂度为O（n）。</strong></p>\n<p>经大量人研究，希尔排序的<strong>平均时间复杂度为O（n1.3）</strong>（这个我也不知道咋来的，书上和博客上都这样说，也没找到个具体的依据，，，）。</p>\n<p><strong>2. 空间复杂度：</strong>希尔排序，只需要一个变量用于两数交换，与n的大小无关，所以<strong>空间复杂度为：O（1）。</strong></p>\n<p><strong>7.4 Java 代码如下</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">import java.util.Arrays;</span><br><span class=\"line\"></span><br><span class=\"line\">public class shell &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        int[] arr &#x3D; new int[]&#123;10,6,3,8,33,27,66,9,7,88&#125;;</span><br><span class=\"line\">        shellSort(arr);</span><br><span class=\"line\">        System.out.println(Arrays.toString(arr));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    private static void shellSort(int[] arr) &#123;</span><br><span class=\"line\">        int temp;</span><br><span class=\"line\">        &#x2F;&#x2F;控制增量序列,增量序列为1的时候为最后一趟</span><br><span class=\"line\">        for (int i &#x3D; arr.length&#x2F;2; i &gt;0; i&#x2F;&#x3D;2) &#123;</span><br><span class=\"line\">            &#x2F;&#x2F;根据增量序列，找到每组比较序列的最后一个数的位置</span><br><span class=\"line\">            for (int j &#x3D; i; j &lt; arr.length; j++) &#123;</span><br><span class=\"line\">                &#x2F;&#x2F;根据该比较序列的最后一个数的位置，依次向前执行插入排序</span><br><span class=\"line\">                for (int k &#x3D; j-i; k &gt;&#x3D;0; k-&#x3D;i) &#123;</span><br><span class=\"line\">                    if(arr[k]&gt;arr[k+i])&#123;</span><br><span class=\"line\">                        temp &#x3D; arr[k];</span><br><span class=\"line\">                        arr[k]  &#x3D; arr[k+i];</span><br><span class=\"line\">                        arr[k+i] &#x3D; temp;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n<h2 id=\"8-堆排序\"><a href=\"#8-堆排序\" class=\"headerlink\" title=\"8. 堆排序\"></a><strong>8. 堆排序</strong></h2><p><strong>8.1 动图演示</strong></p>\n<p><strong>8.2 思路分析</strong></p>\n<p>　　先来了解下堆的相关概念：堆是具有以下性质的完全二叉树：每个结点的值都大于或等于其左右孩子结点的值，称为大顶堆；或者每个结点的值都小于或等于其左右孩子结点的值，称为小顶堆。如下图：</p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://images2015.cnblogs.com/blog/1024555/201612/1024555-20161217182750011-675658660.png\" alt=\"\"></p>\n<p>同时，我们对堆中的结点按层进行编号，将这种逻辑结构映射到数组中就是下面这个样子</p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://images2015.cnblogs.com/blog/1024555/201612/1024555-20161217182857323-2092264199.png\" alt=\"\"></p>\n<p>该数组从逻辑上讲就是一个堆结构，我们用简单的公式来描述一下堆的定义就是：</p>\n<p><strong>大顶堆：arr[i] &gt;= arr[2i+1] &amp;&amp; arr[i] &gt;= arr[2i+2]</strong>  </p>\n<p><strong>小顶堆：arr[i] &lt;= arr[2i+1] &amp;&amp; arr[i] &lt;= arr[2i+2]</strong>  </p>\n<p>了解了这些定义。接下来看看堆排序的基本思想及基本步骤：</p>\n<p>堆排序基本思想及步骤</p>\n<blockquote>\n<p>　　堆排序的基本思想是：将待排序序列构造成一个大顶堆，此时，整个序列的最大值就是堆顶的根节点。将其与末尾元素进行交换，此时末尾就为最大值。然后将剩余n-1个元素重新构造成一个堆，这样会得到n个元素的次小值。如此反复执行，便能得到一个有序序列了</p>\n</blockquote>\n<p><strong>步骤一 构造初始堆。将给定无序序列构造成一个大顶堆（一般升序采用大顶堆，降序采用小顶堆)。</strong></p>\n<p>　　a.假设给定无序序列结构如下</p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://images2015.cnblogs.com/blog/1024555/201612/1024555-20161217192038651-934327647.png\" alt=\"\"></p>\n<p>2.此时我们从最后一个非叶子结点开始（叶结点自然不用调整，第一个非叶子结点 arr.length/2-1=5/2-1=1，也就是下面的6结点），从左至右，从下至上进行调整。</p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://images2015.cnblogs.com/blog/1024555/201612/1024555-20161217192209433-270379236.png\" alt=\"\"></p>\n<p>4.找到第二个非叶节点4，由于[4,9,8]中9元素最大，4和9交换。</p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://images2015.cnblogs.com/blog/1024555/201612/1024555-20161217192854636-1823585260.png\" alt=\"\"></p>\n<p>这时，交换导致了子根[4,5,6]结构混乱，继续调整，[4,5,6]中6最大，交换4和6。</p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://images2015.cnblogs.com/blog/1024555/201612/1024555-20161217193347886-1142194411.png\" alt=\"\"></p>\n<p>此时，我们就将一个无需序列构造成了一个大顶堆。</p>\n<p><strong>步骤二 将堆顶元素与末尾元素进行交换，使末尾元素最大。然后继续调整堆，再将堆顶元素与末尾元素交换，得到第二大元素。如此反复进行交换、重建、交换。</strong></p>\n<p>a.将堆顶元素9和末尾元素4进行交换</p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://images2015.cnblogs.com/blog/1024555/201612/1024555-20161217194207620-1455153342.png\" alt=\"\"></p>\n<p>b.重新调整结构，使其继续满足堆定义</p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://images2015.cnblogs.com/blog/1024555/201612/1024555-20161218153110495-1280388728.png\" alt=\"\"></p>\n<p>c.再将堆顶元素8与末尾元素5进行交换，得到第二大元素8.</p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://images2015.cnblogs.com/blog/1024555/201612/1024555-20161218152929339-1114983222.png\" alt=\"\"></p>\n<p>后续过程，继续进行调整，交换，如此反复进行，最终使得整个序列有序</p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://images2015.cnblogs.com/blog/1024555/201612/1024555-20161218152348229-935654830.png\" alt=\"\"></p>\n<p>再简单总结下堆排序的基本思路：</p>\n<p>　　<strong>a.将无序序列构建成一个堆，根据升序降序需求选择大顶堆或小顶堆;</strong></p>\n<p>　　<strong>b.将堆顶元素与末尾元素交换，将最大元素”沉”到数组末端;</strong></p>\n<p>　　<strong>c.重新调整结构，使其满足堆定义，然后继续交换堆顶元素与当前末尾元素，反复执行调整+交换步骤，直到整个序列有序。</strong></p>\n<p><strong>8.3 复杂度分析</strong></p>\n<p><strong>1. 时间复杂度：</strong>堆排序是一种选择排序，整体主要由构建初始堆+交换堆顶元素和末尾元素并重建堆两部分组成。其中构建初始堆经推导复杂度为O(n)，在交换并重建堆的过程中，需交换n-1次，而重建堆的过程中，根据完全二叉树的性质，[log2(n-1),log2(n-2)…1]逐步递减，近似为nlogn。所以堆排序时间复杂度最好和最坏情况下都是<strong>O(nlogn)</strong>级。</p>\n<p><strong>2. 空间复杂度：</strong>堆排序不要任何辅助数组，只需要一个辅助变量，所占空间是常数与n无关，所以<strong>空间复杂度为O(1)</strong>。</p>\n<p><strong>8.4 Java 代码如下</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">import java.util.Arrays;</span><br><span class=\"line\">public class duipaixu &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        int[] arr &#x3D; new int[]&#123;4,6,8,5,9&#125;;</span><br><span class=\"line\">        int length &#x3D; arr.length;</span><br><span class=\"line\">        &#x2F;&#x2F;从最后一个非叶节点开始构建大顶堆</span><br><span class=\"line\">        for (int i &#x3D; arr.length&#x2F;2-1; i &gt;&#x3D;0; i--) &#123;</span><br><span class=\"line\">            maximumHeap(i,arr,length);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        &#x2F;&#x2F;从最小的叶子节点开始与根节点进行交换并重新构建大顶堆</span><br><span class=\"line\">        for (int i &#x3D; arr.length-1; i &gt;&#x3D;0; i--) &#123;</span><br><span class=\"line\">&#x2F;&#x2F;            System.out.println(Arrays.toString(arr));</span><br><span class=\"line\">            swap(arr,0,i);</span><br><span class=\"line\">            length--;</span><br><span class=\"line\">            maximumHeap(0,arr,length);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(Arrays.toString(arr));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#x2F;&#x2F;构建大顶堆</span><br><span class=\"line\">    public static void maximumHeap(int i,int[] arr,int length)&#123;</span><br><span class=\"line\">        int temp &#x3D; arr[i];</span><br><span class=\"line\">        for (int j &#x3D; i*2+1; j &lt; length; j&#x3D;j*2+1) &#123;</span><br><span class=\"line\">            &#x2F;&#x2F;如果右孩子大于做孩子，则指向右孩子</span><br><span class=\"line\">            if(j+1&lt;length &amp;&amp; arr[j+1]&gt;arr[j])&#123;</span><br><span class=\"line\">                j++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            &#x2F;&#x2F;如果最大的孩子大于当前节点，则将大孩子赋给当前节点，修改当前节点为其大孩子节点，再向下走。</span><br><span class=\"line\">            if(arr[j]&gt;temp)&#123;</span><br><span class=\"line\">                arr[i] &#x3D; arr[j];</span><br><span class=\"line\">                i &#x3D; j;</span><br><span class=\"line\">            &#125;else&#123;</span><br><span class=\"line\">                break;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        &#x2F;&#x2F;将temp放到最终位置</span><br><span class=\"line\">        arr[i] &#x3D; temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#x2F;&#x2F;交换</span><br><span class=\"line\">    public static void swap(int[] arr,int i,int j)&#123;</span><br><span class=\"line\">        int temp &#x3D; arr[i];</span><br><span class=\"line\">        arr[i] &#x3D; arr[j];</span><br><span class=\"line\">        arr[j] &#x3D; temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"发文Demo","url":"/2020/08/11/%E5%8F%91%E6%96%87Demo/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\css\\APlayer.min.css\"><script src=\"\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\js\\Meting.min.js\"></script><h1 id=\"链接合集\"><a href=\"#链接合集\" class=\"headerlink\" title=\"链接合集\"></a>链接合集</h1><p>github：<br>我的邮箱：<a href=\"mailto:1125806272@qq.com\">1125806272@qq.com</a><br>我的博客：<a href=\"http://9pshr3.coding-pages.com/\">http://9pshr3.coding-pages.com/</a><br>或<a href=\"https://zhenglin-li.github.io/\" target=\"_blank\" rel=\"noopener\">https://zhenglin-li.github.io/</a><br>我的csdn：<a href=\"https://me.csdn.net/Panda325\" target=\"_blank\" rel=\"noopener\">https://me.csdn.net/Panda325</a><br>我的简书：<a href=\"https://www.jianshu.com/u/e2d945027d3f\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/u/e2d945027d3f</a><br>我的今日头条：<a href=\"https://www.toutiao.com/c/user/4004188138/#mid=1592553312231438\" target=\"_blank\" rel=\"noopener\">https://www.toutiao.com/c/user/4004188138/#mid=1592553312231438</a><br>我的博客园：<a href=\"https://www.cnblogs.com/zhenglin-li/\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/zhenglin-li/</a></p>\n<h1 id=\"git-bash一条龙\"><a href=\"#git-bash一条龙\" class=\"headerlink\" title=\"git bash一条龙\"></a>git bash一条龙</h1><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo clean &amp;&amp; hexo douban -bgm &amp;&amp; hexo g &amp;&amp; hexo deploy &amp;&amp; hexo s</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo clean &amp;&amp; hexo g &amp;&amp; hexo deploy &amp;&amp; hexo s</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h1 id=\"Front-matter\"><a href=\"#Front-matter\" class=\"headerlink\" title=\"Front-matter\"></a>Front-matter</h1><p>Front-matter 是档案最上方以 — 分隔的区域，用于指定个别档案的变数。</p>\n<p>如果标注可选的参数，可根据自己需要添加，不用全部都写在 markdown 里</p>\n<h2 id=\"Page-Front-matter\"><a href=\"#Page-Front-matter\" class=\"headerlink\" title=\"Page Front-matter\"></a>Page Front-matter</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title:</span><br><span class=\"line\">date:</span><br><span class=\"line\">updated:</span><br><span class=\"line\">type:</span><br><span class=\"line\">comments:</span><br><span class=\"line\">description:</span><br><span class=\"line\">keywords:</span><br><span class=\"line\">top_img:</span><br><span class=\"line\">mathjax:</span><br><span class=\"line\">katex:</span><br><span class=\"line\">aside:</span><br><span class=\"line\">aplayer：</span><br><span class=\"line\">highlight_shrink：</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n<hr>\n<table>\n<thead>\n<tr>\n<th>写法</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>title</td>\n<td>【必需】页面标题</td>\n</tr>\n<tr>\n<td>date</td>\n<td>【必需】页面创建日期</td>\n</tr>\n<tr>\n<td>type</td>\n<td>【必需】标籤、分类和友情链接三个页面需要配置</td>\n</tr>\n<tr>\n<td>updated</td>\n<td>【可选】页面更新日期</td>\n</tr>\n<tr>\n<td>description</td>\n<td>【可选】页面描述</td>\n</tr>\n<tr>\n<td>keywords</td>\n<td>【可选】页面关键字</td>\n</tr>\n<tr>\n<td>comments</td>\n<td>【可选】显示页面评论模块 (默认 true)</td>\n</tr>\n<tr>\n<td>top_img</td>\n<td>【可选】页面顶部图片</td>\n</tr>\n<tr>\n<td>mathjax</td>\n<td>【可选】显示 mathjax (当设置 mathjax 的 per_page: false 时，才需要配置，默认 false)</td>\n</tr>\n<tr>\n<td>katex</td>\n<td>【可选】显示 katex (当设置 katex 的 per_page: false 时，才需要配置，默认 false)</td>\n</tr>\n<tr>\n<td>aside</td>\n<td>【可选】显示侧边栏 (默认 true)</td>\n</tr>\n<tr>\n<td>aplayer</td>\n<td>【可选】在需要的页面加载 aplayer 的 js 和 css, 请参考文章下面的音乐 配置</td>\n</tr>\n<tr>\n<td>highlight_shrink</td>\n<td>【可选】配置代码框是否展开 (true/false)(默认为设置中 highlight_shrink 的配</td>\n</tr>\n</tbody></table>\n<h2 id=\"Post-Front-matter\"><a href=\"#Post-Front-matter\" class=\"headerlink\" title=\"Post Front-matter\"></a>Post Front-matter</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title:</span><br><span class=\"line\">date:</span><br><span class=\"line\">updated:</span><br><span class=\"line\">tags:</span><br><span class=\"line\">categories:</span><br><span class=\"line\">keywords:</span><br><span class=\"line\">description:</span><br><span class=\"line\">top_img:</span><br><span class=\"line\">comments：</span><br><span class=\"line\">cover:  </span><br><span class=\"line\">toc:  </span><br><span class=\"line\">toc_number:</span><br><span class=\"line\">auto_open:</span><br><span class=\"line\">copyright:</span><br><span class=\"line\">copyright_author:</span><br><span class=\"line\">copyright_author_href:</span><br><span class=\"line\">copyright_url:</span><br><span class=\"line\">copyright_info:</span><br><span class=\"line\">mathjax:</span><br><span class=\"line\">katex:</span><br><span class=\"line\">aplayer：</span><br><span class=\"line\">highlight_shrink：</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>写法</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>title</td>\n<td>【必需】文章标题</td>\n</tr>\n<tr>\n<td>date</td>\n<td>【必需】文章创建日期</td>\n</tr>\n<tr>\n<td>updated</td>\n<td>【可选】文章更新日期</td>\n</tr>\n<tr>\n<td>tags</td>\n<td>【可选】文章标籤</td>\n</tr>\n<tr>\n<td>categories</td>\n<td>【可选】文章分类</td>\n</tr>\n<tr>\n<td>keywords</td>\n<td>【可选】文章关键字</td>\n</tr>\n<tr>\n<td>description</td>\n<td>【可选】文章描述</td>\n</tr>\n<tr>\n<td>top_img</td>\n<td>【可选】文章顶部图片</td>\n</tr>\n<tr>\n<td>cover</td>\n<td>【可选】文章缩略图 (如果没有设置 top_img, 文章页顶部将显示缩略图，可设为 false / 图</td>\n</tr>\n<tr>\n<td>comments</td>\n<td>【可选】显示文章评论模块 (默认 true)</td>\n</tr>\n<tr>\n<td>toc</td>\n<td>【可选】显示文章 TOC (默认为设置中 toc 的 enable 配置)</td>\n</tr>\n<tr>\n<td>toc_number</td>\n<td>【可选】显示 toc_number (默认为设置中 toc 的 number 配置)</td>\n</tr>\n<tr>\n<td>auto_open</td>\n<td>【可选】是否自动打开 TOC (默认为设置中 toc 的 auto_open 配置)</td>\n</tr>\n<tr>\n<td>copyright</td>\n<td>【可选】显示文章版权模块 (默认为设置中 post_copyright 的 enable 配置)</td>\n</tr>\n<tr>\n<td>copyright_author</td>\n<td>【可选】文章版权模块的文章作者</td>\n</tr>\n<tr>\n<td>copyright_author_href</td>\n<td>【可选】文章版权模块的文章作者链接</td>\n</tr>\n<tr>\n<td>copyright_url</td>\n<td>【可选】文章版权模块的文章连结链接</td>\n</tr>\n<tr>\n<td>copyright_info</td>\n<td>【可选】文章版权模块的版权声明文字</td>\n</tr>\n<tr>\n<td>mathjax</td>\n<td>【可选】显示 mathjax (当设置 mathjax 的 per_page: false 时，才需要配置，默认 false)</td>\n</tr>\n<tr>\n<td>katex</td>\n<td>【可选】显示 katex (当设置 katex 的 per_page: false 时，才需要配置，默认 false)</td>\n</tr>\n<tr>\n<td>aplayer</td>\n<td>【可选】在需要的页面加载 aplayer 的 js 和 css, 请参考文章下面的音乐 配置</td>\n</tr>\n<tr>\n<td>highlight_shrink</td>\n<td>【可选】配置代码框是否展开 (true/false)(默认为设置中 highlight_shrink 的配置)</td>\n</tr>\n</tbody></table>\n<h1 id=\"插入视频\"><a href=\"#插入视频\" class=\"headerlink\" title=\"插入视频\"></a>插入视频</h1><div style=\"position: relative; width: 100%; height: 0; padding-bottom: 75%;\">\n    <iframe src=\"//player.bilibili.com/player.html?aid=77217003&bvid=BV1XJ411X7Ud&cid=132187550&page=101\"  scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\" style=\"position: absolute; width: 100%; height: 100%; left: 0; top: 0;\"></iframe>\n</div>\n\n\n","categories":["个人博客"]},{"title":"地平线：零之曙光","url":"/2020/08/15/%E5%9C%B0%E5%B9%B3%E7%BA%BF%EF%BC%9A%E9%9B%B6%E4%B9%8B%E6%9B%99%E5%85%89/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\css\\APlayer.min.css\"><script src=\"\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\js\\Meting.min.js\"></script><h1 id=\"图集\"><a href=\"#图集\" class=\"headerlink\" title=\"图集\"></a>图集</h1><p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img.3dmgame.com/uploads/allimg/170222/316-1F222162218.jpg\" alt=\"\"></p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img.3dmgame.com/uploads/allimg/170222/316-1F222162217.jpg\" alt=\"\"></p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img.3dmgame.com/uploads/allimg/170222/316-1F222162216-50.jpg\" alt=\"\"></p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img.3dmgame.com/uploads/allimg/170222/316-1F222162215.jpg\" alt=\"\"></p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img.3dmgame.com/uploads/allimg/170222/316-1F222162214-50.jpg\" alt=\"\"></p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img.3dmgame.com/uploads/allimg/170222/316-1F222162214.jpg\" alt=\"\"></p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img.3dmgame.com/uploads/allimg/170222/316-1F222162216.jpg\" alt=\"\"></p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img.3dmgame.com/uploads/allimg/160621/317-160621135640.jpg\" alt=\"\"></p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img.3dmgame.com/uploads/allimg/160621/317-160621135641-50.jpg\" alt=\"\"></p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img.3dmgame.com/uploads/allimg/160621/317-160621135642.jpg\" alt=\"\"></p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img.3dmgame.com/uploads/allimg/160621/317-160621135643.jpg\" alt=\"\"></p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img.3dmgame.com/uploads/allimg/160621/317-160621135643-50.jpg\" alt=\"\"></p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img.3dmgame.com/uploads/allimg/160621/317-160621135644.jpg\" alt=\"\"></p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img.3dmgame.com/uploads/allimg/160621/317-160621135405.jpg\" alt=\"\"></p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img.3dmgame.com/uploads/allimg/160621/317-160621135407.jpg\" alt=\"\"></p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img.3dmgame.com/uploads/allimg/160621/317-160621135407-50.jpg\" alt=\"\"></p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img.3dmgame.com/uploads/allimg/160621/317-160621135408.jpg\" alt=\"\"></p>\n<h1 id=\"原声带\"><a href=\"#原声带\" class=\"headerlink\" title=\"原声带\"></a>原声带</h1><p><a href=\"http://pan.baidu.com/s/1eS9T9HC\" target=\"_blank\" rel=\"noopener\">http://pan.baidu.com/s/1eS9T9HC</a></p>\n<p>或</p>\n<p><a href=\"https://dl2.wdk6534.com/Laosiji/3DMGAME-Horizon_Zero_Dawn_(Original_Soundtrack)-WEB-2017[320Kbps].rar\" target=\"_blank\" rel=\"noopener\">https://dl2.wdk6534.com/Laosiji/3DMGAME-Horizon_Zero_Dawn_(Original_Soundtrack)-WEB-2017[320Kbps].rar</a></p>\n","categories":["游戏"],"tags":["游戏"]},{"title":"删除github上仓库里的文件","url":"/2020/08/18/%E5%88%A0%E9%99%A4github%E4%B8%8A%E4%BB%93%E5%BA%93%E9%87%8C%E7%9A%84%E6%96%87%E4%BB%B6/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\css\\APlayer.min.css\"><script src=\"\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\js\\Meting.min.js\"></script><h1 id=\"一-删除已有仓库\"><a href=\"#一-删除已有仓库\" class=\"headerlink\" title=\"一.删除已有仓库\"></a>一.删除已有仓库</h1><p>如果我们想要删除Github中没有用的仓库，应该如何去做呢？</p>\n<p>进入到我们需要删除的仓库里面，找到“settings”即仓库设置,<br>然后，在仓库设置里拉到最底部，找到“Danger Zone”即危险区域,<br>点击“Delete this repository”这样就可以删除该仓库了。</p>\n<h1 id=\"二-删除Github中的某个文件或文件夹\"><a href=\"#二-删除Github中的某个文件或文件夹\" class=\"headerlink\" title=\"二.删除Github中的某个文件或文件夹\"></a>二.删除Github中的某个文件或文件夹</h1><p>我们知道，在Github上我们只能删除仓库，并不能删除文件或者文件夹，所以只能用命令来解决。</p>\n<h2 id=\"1-新建文件夹\"><a href=\"#1-新建文件夹\" class=\"headerlink\" title=\"1. 新建文件夹\"></a>1. 新建文件夹</h2><p>在桌面上新建一个文件夹<code>delete</code>，其实在哪里建叫什么名都可以</p>\n<h2 id=\"2-git-bash-here\"><a href=\"#2-git-bash-here\" class=\"headerlink\" title=\"2. git bash here\"></a>2. <code>git bash here</code></h2><p>在新建的文件夹里右键<code>git bash here</code>打开终端，并执行<code>git init</code>初始化仓库</p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://i.loli.net/2020/08/18/6qcP7g1FWEJZnvY.png\" alt=\"\"></p>\n<h2 id=\"3-git-clone-lt-你的地址-gt\"><a href=\"#3-git-clone-lt-你的地址-gt\" class=\"headerlink\" title=\"3. git clone &lt;你的地址&gt;\"></a>3. <code>git clone &lt;你的地址&gt;</code></h2><p>找到github上要删除的仓库地址，并复制，在终端里输入<code>git clone &lt;你的地址&gt;</code><br><img src= \"/img/loading.gif\" data-lazy-src=\"https://i.loli.net/2020/08/18/PKmY8O756IDc4sr.png\" alt=\"\"></p>\n<h2 id=\"4-git-bash-here\"><a href=\"#4-git-bash-here\" class=\"headerlink\" title=\"4. git bash here\"></a>4. <code>git bash here</code></h2><p>然后你会发现多了一个文件夹，打开之，并在该文件夹下右键<code>git bash here</code>打开终端，注意这里是一个新的终端了<br><img src= \"/img/loading.gif\" data-lazy-src=\"https://i.loli.net/2020/08/18/PKmY8O756IDc4sr.png\" alt=\"\"><br><img src= \"/img/loading.gif\" data-lazy-src=\"https://i.loli.net/2020/08/18/PKmY8O756IDc4sr.png\" alt=\"\"></p>\n<h2 id=\"5-dir\"><a href=\"#5-dir\" class=\"headerlink\" title=\"5. dir\"></a>5. <code>dir</code></h2><p>在终端里输入<code>dir</code>查看此文件夹下的文件和目录（文件夹）</p>\n<h2 id=\"6-git-rm-lt-filename-gt\"><a href=\"#6-git-rm-lt-filename-gt\" class=\"headerlink\" title=\"6.git rm &lt;filename&gt;\"></a>6.<code>git rm &lt;filename&gt;</code></h2><p>删除本地仓库文件 <code>git rm &lt;filename&gt;</code>，<code>&lt;filename&gt;</code>是你要删除的文件名字</p>\n<h2 id=\"7-git-rm-r-lt-filename-gt-，-lt-filename-gt\"><a href=\"#7-git-rm-r-lt-filename-gt-，-lt-filename-gt\" class=\"headerlink\" title=\"7. git rm -r &lt;filename&gt;，&lt;filename&gt;\"></a>7. <code>git rm -r &lt;filename&gt;</code>，<code>&lt;filename&gt;</code></h2><p>文件夹的删除和文件不一样，需要多一个参数，如下<br>删除本地仓库文件夹 <code>git rm -r &lt;filename&gt;</code>，<code>&lt;filename&gt;</code>是你要删除的文件夹名字<br><img src= \"/img/loading.gif\" data-lazy-src=\"https://i.loli.net/2020/08/18/f45za73j8PFqGZm.png\" alt=\"\"></p>\n<h2 id=\"8-git-commit-m-quot-备注-quot\"><a href=\"#8-git-commit-m-quot-备注-quot\" class=\"headerlink\" title=\"8. git commit -m &quot;备注&quot;\"></a>8. <code>git commit -m &quot;备注&quot;</code></h2><p>删除完你需要删除的文件和文件夹以后，在终端里提交本次修改<code>git commit -m &quot;备注&quot;</code><br><img src= \"/img/loading.gif\" data-lazy-src=\"https://i.loli.net/2020/08/18/hmP58SUoFCuvzqw.png\" alt=\"\"></p>\n<h2 id=\"9-git-checkout\"><a href=\"#9-git-checkout\" class=\"headerlink\" title=\"9. git checkout\"></a>9. <code>git checkout</code></h2><p>把删除的文件恢复到最新版本 <code>git checkout</code></p>\n<h2 id=\"10-git-push\"><a href=\"#10-git-push\" class=\"headerlink\" title=\"10. git push\"></a>10. <code>git push</code></h2><p>将本地内容推送到远程仓库 <code>git push</code></p>\n<h2 id=\"11-大功告成！\"><a href=\"#11-大功告成！\" class=\"headerlink\" title=\"11. 大功告成！\"></a>11. 大功告成！</h2><p>刷新github仓库 看到选定删除的文件没有了。</p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://i.loli.net/2020/08/18/uXqeW94l7HsZUNb.png\" alt=\"\"></p>\n","categories":["git"],"tags":["git","github"]},{"title":"同步Synchronous和异步Asynchronous","url":"/2020/09/17/%E5%90%8C%E6%AD%A5Synchronous%E5%92%8C%E5%BC%82%E6%AD%A5Asynchronous/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\css\\APlayer.min.css\"><script src=\"\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\js\\Meting.min.js\"></script><h1 id=\"什么是同步与异步\"><a href=\"#什么是同步与异步\" class=\"headerlink\" title=\"什么是同步与异步\"></a>什么是同步与异步</h1><p>定义：同步和异步关注的是*<em>消息通信机制*</em> (synchronous communication/ asynchronous communication)。同步，就是调用某个东西是，调用方得等待这个调用返回结果才能继续往后执行。异步，和同步相反 调用方不会理解得到结果，而是在调用发出后调用者可用继续执行后续操作，被调用者通过状体来通知调用者，或者通过回掉函数来处理这个调用**</p>\n<p><strong>比方说：</strong>你去商城买东西，你看上了一款手机，能和店家说你一个这款手机，他就去仓库拿货，你得在店里等着，不能离开，这叫做同步。现在你买手机赶时髦直接去京东下单，下单完成后你就可用做其他时间（追剧、打王者、lol）等货到了去签收就ok了.这就叫异步。</p>\n<h1 id=\"以方法调用为例\"><a href=\"#以方法调用为例\" class=\"headerlink\" title=\"以方法调用为例\"></a>以方法调用为例</h1><ul>\n<li><strong>同步方法</strong>调用一旦开始，调用者必须等到方法调用返回后，才能继续后续的行为。</li>\n<li><strong>异步方法</strong>调用更像一个消息传递，一旦开始，方法调用就会立即返回，调用者就可以继续后续的操作。而，异步方法通常会在另外一个线程中，“真实”地执行着。整个过程，不会阻碍调用者的工作</li>\n</ul>\n<h1 id=\"加两张图更好理解\"><a href=\"#加两张图更好理解\" class=\"headerlink\" title=\"加两张图更好理解\"></a>加两张图更好理解</h1><p><strong>同步执行</strong></p>\n<p><a href=\"https://img2018.cnblogs.com/blog/1680783/201905/1680783-20190521124754180-1985908967.png\" target=\"_blank\" rel=\"noopener\"><img src= \"/img/loading.gif\" data-lazy-src=\"https://img2018.cnblogs.com/blog/1680783/201905/1680783-20190521124754180-1985908967.png\" alt=\"img\"></a></p>\n<p>同步执行当调用方法执行完成后并返回结果，才能执行后续代码</p>\n<p>异步执行</p>\n<p><a href=\"https://img2018.cnblogs.com/blog/1680783/201905/1680783-20190521125411515-1327485285.png\" target=\"_blank\" rel=\"noopener\"><img src= \"/img/loading.gif\" data-lazy-src=\"https://img2018.cnblogs.com/blog/1680783/201905/1680783-20190521125411515-1327485285.png\" alt=\"img\"></a></p>\n<p>异步调用的话可用参考ajax，调用方法后不会等到sum方法执行完成，而是直接执行后续代码。sum方法执行完成后主要通过状态通知主线程，或者通过回调处理这次异步方法执行的结果</p>\n<h1 id=\"同步异步于阻塞非阻塞不能混为一谈\"><a href=\"#同步异步于阻塞非阻塞不能混为一谈\" class=\"headerlink\" title=\"同步异步于阻塞非阻塞不能混为一谈\"></a>同步异步于阻塞非阻塞不能混为一谈</h1><p>看了上面的讲解，你可能会说这不就是阻塞机制吗？不不不，同步异步不能和阻塞非阻塞混为一谈。</p>\n<p>阻塞和非阻塞 强调的是程序在等待调用结果（消息，返回值）时的状态. 阻塞调用是指调用结果返回之前，当前线程会被挂起。调用线程只有在得到结果之后才会返回。非阻塞调用指在不能立刻得到结果之前，该调用不会阻塞当前线程。 对于同步调用来说，很多时候当前线程还是激活的状态，只是从逻辑上当前函数没有返回而已，即同步等待时什么都不干，白白占用着资源。</p>\n<p>同步和异步强调的是消息通信机制 (synchronous communication/ asynchronous communication)。所谓同步，就是在发出一个”调用”时，在没有得到结果之前，该“调用”就不返回。但是一旦调用返回，就得到返回值了。换句话说，就是由“调用者”主动等待这个“调用”的结果。而异步则是相反，”调用”在发出之后，这个调用就直接返回了，所以没有返回结果。换句话说，当一个异步过程调用发出后，调用者不会立刻得到结果。而是在”调用”发出后，”被调用者”通过状态、通知来通知调用者，或通过回调函数处理这个调用</p>\n<p>参考博客：<a href=\"https://blog.csdn.net/huangqiang1363/article/details/79508852\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/huangqiang1363/article/details/79508852</a> </p>\n"},{"title":"大一实训","url":"/2020/07/14/%E5%A4%A7%E4%B8%80%E5%AE%9E%E8%AE%AD/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\css\\APlayer.min.css\"><script src=\"\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\js\\Meting.min.js\"></script><p>好了，又到了全校放假而计软网实训的时候了，我选的是超市信息管理系统。</p>\n<p>链接如下：</p>\n<p><a href=\"https://github.com/ZhengLin-Li/Practical-training-in-2020\" target=\"_blank\" rel=\"noopener\">https://github.com/ZhengLin-Li/Practical-training-in-2020</a></p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://i.loli.net/2020/07/23/HYDmIMiQ2szgEc3.png\" alt=\"image-20200723142936009\"></p>\n<p>实习总结：</p>\n<p>对于软件工程专业来说，实习的重要性不言而喻。虽然大一暑假的这次实训也算不上实习，但我还是获益良多，下面我来做个简短的总结。</p>\n<p>本次实训工作的具体内容有和小组成员们讨论并完善完善需求规约以及填写项目设计报告，并在此基础上进行代码的编写。</p>\n<p>自项目开始之初，我就热情饱满，以认真负责的态度努力完成自己负责的各项任务。我能严格要求自己，主动完成组长交给我的各项任务。众所周知，一个软件的完成需要团队默契的配合，我自己出现的失误可能会使整个团队进度受到影响。因此在实训的这段时间里，我与小组内其他成员积极沟通，互相协助解决问题。从而在项目基本完成的情况下又进行了多方面的改善，达到了预定的目标。</p>\n<p>通过这次实训，我了解到了明确需求的重要性，良好团队沟通和代码规范的必要性，以及体会到了软件行业确实需要不断的学习才能跟上时代的步伐。在本次实训开始前，我就初略的看完了链表，本想着水到渠成，结果纸上得来终觉浅，实操起来接问题百出，于是我明白了编程要勤于实践。这次实训我另外一个收获就是了解了在企业中是如何通过团队合作的方式来协力完成某个项目的开发。培养了我的软件开发思维，让我在编写代码和完善文档时更具有条理。</p>\n<p>这次实训也暴露出我自身的一些问题：c语言基础不够扎实，撰写文档的经验不足，团队交流有些生疏等等。我在这次实训中着重关注了这些问题并加以改进，已有明显进步。也很感谢实训老师这十天的辛苦付出与耐心讲解，为我的代码提出了很多实用的意见，也指出了我不足，使我能够找准方向提升自己。</p>\n<p>日期：2020.7.22</p>\n","categories":["实训"],"tags":["实训","C语言"]},{"title":"微信小程序云开发学习笔记（一）云数据库","url":"/2020/08/17/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%BA%91%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89%E4%BA%91%E6%95%B0%E6%8D%AE%E5%BA%93/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\css\\APlayer.min.css\"><script src=\"\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\js\\Meting.min.js\"></script><p>微信小程序和后台交互扫盲：<a href=\"https://www.bilibili.com/video/BV1jt411E7au\" target=\"_blank\" rel=\"noopener\">https://www.bilibili.com/video/BV1jt411E7au</a></p>\n<p>云开发：<a href=\"https://www.bilibili.com/video/BV1pE411C7Ca?from=search&amp;seid=14303234966957086491\" target=\"_blank\" rel=\"noopener\">https://www.bilibili.com/video/BV1pE411C7Ca?from=search&amp;seid=14303234966957086491</a></p>\n<p>云开发学习代码： D:\\code is here\\微信小程序云开发学习</p>\n<p><a href=\"https://github.com/ZhengLin-Li/learning-miniapp-coulddevelopment\" target=\"_blank\" rel=\"noopener\">https://github.com/ZhengLin-Li/learning-miniapp-coulddevelopment</a></p>\n<p>云开发配置的环境：cloud-learning</p>\n<div style=\"position: relative; width: 100%; height: 0; padding-bottom: 75%;\">\n    <iframe src=\"//player.bilibili.com/player.html?aid=71382448&bvid=BV1pE411C7Ca&cid=123683867&page=16\"  scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\" style=\"position: absolute; width: 100%; height: 100%; left: 0; top: 0;\"></iframe>\n</div>\n\n\n<h1 id=\"云开发环境初始化准备\"><a href=\"#云开发环境初始化准备\" class=\"headerlink\" title=\"云开发环境初始化准备\"></a>云开发环境初始化准备</h1><h2 id=\"需要：\"><a href=\"#需要：\" class=\"headerlink\" title=\"需要：\"></a>需要：</h2><p>APPID</p>\n<h2 id=\"操作：\"><a href=\"#操作：\" class=\"headerlink\" title=\"操作：\"></a>操作：</h2><ol>\n<li><p>在创建项目时，填入APPID并选择不使用云函数</p>\n</li>\n<li><p>进入到开发者页面，点击左上角的云开发并选择开通</p>\n</li>\n<li><p>设置云开发环境名称，可以任意填写</p>\n</li>\n<li><p>在<code>project.config.json</code>中加入字段<code>&quot;cloudfunctionRoot&quot;:&quot;cloud&quot;</code></p>\n</li>\n<li><p>在打开的云开发控制台中点击设置，新建一个环境ID</p>\n</li>\n<li><p><code>app.js</code>中删除所有代码，只保留<code>env</code>即环境ID</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">App(&#123;</span><br><span class=\"line\">  onLaunch: function () &#123;</span><br><span class=\"line\">    &#x2F;&#x2F;云开发环境初始化</span><br><span class=\"line\">    wx.cloud.init(&#123;</span><br><span class=\"line\">      env:&quot;cloud-learning-i44qm&quot;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200817153256182.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1BhbmRhMzI1,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在project.config.json中加入字段&quot;cloudfunctionRoot&quot;:&quot;cloud&quot;\"><br><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200817153332529.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1BhbmRhMzI1,size_16,color_FFFFFF,t_70#pic_center\" alt=\"app.js中删除所有代码，只保留\"></p>\n</li>\n<li><p>在根目录下创建文件夹（目录）<code>cloud</code></p>\n</li>\n</ol>\n<h1 id=\"云数据库\"><a href=\"#云数据库\" class=\"headerlink\" title=\"云数据库\"></a>云数据库</h1><h2 id=\"新增固定的数据\"><a href=\"#新增固定的数据\" class=\"headerlink\" title=\"新增固定的数据\"></a>新增固定的数据</h2><p>效果：通过点击一个按键可以向云数据库中新增固定字段的内容</p>\n<p>实现：</p>\n<ol>\n<li>在<code>index.wxml</code>中，加入如下代码</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;button bindtap&#x3D;&quot;addData&quot;&gt;新增数据&lt;&#x2F;button&gt;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>点击云开发–&gt;数据库–&gt;创建集合<code>testlist</code></li>\n<li>在<code>index.js</code>中加入如下代码</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">const DB &#x3D; wx.cloud.database().collection(&quot;testlist&quot;)</span><br><span class=\"line\">Page(&#123;</span><br><span class=\"line\">  addData()&#123;</span><br><span class=\"line\">    console.log(&#39;调用添加数据的方法&#39;)</span><br><span class=\"line\">    DB.add(&#123;</span><br><span class=\"line\">      data:&#123;</span><br><span class=\"line\">        name:&#39;panda bear&#39;,</span><br><span class=\"line\">        price:9999</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      success(res) &#123;</span><br><span class=\"line\">        console.log(&quot;成功&quot;, res)</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      fail(res) &#123;</span><br><span class=\"line\">        console.log(&quot;失败&quot;, res)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>测试：点击新增数据按钮，发现控制台上有相应输出，再进入到云开发的数据库页面，发现上述字段已新增</p>\n<h2 id=\"新增用户输入的不确定数据\"><a href=\"#新增用户输入的不确定数据\" class=\"headerlink\" title=\"新增用户输入的不确定数据\"></a>新增用户输入的不确定数据</h2><p>效果：用户通过输入想新增的数据并点击确定新增按键，即可向云数据库中新增用户想新增的数据</p>\n<p>实现：</p>\n<ol>\n<li>在<code>index.wxml</code>中加入如下代码</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;input placeholder&#x3D;&quot;输入名字&quot; bindinput&#x3D;&quot;addName&quot;&gt;&lt;&#x2F;input&gt;</span><br><span class=\"line\">&lt;text&gt;\\n&lt;&#x2F;text&gt;</span><br><span class=\"line\">&lt;input placeholder&#x3D;&quot;输入年龄&quot; bindinput&#x3D;&quot;addAge&quot;&gt;&lt;&#x2F;input&gt;</span><br><span class=\"line\">&lt;text&gt;\\n&lt;&#x2F;text&gt;</span><br><span class=\"line\">&lt;button bindtap&#x3D;&quot;addData&quot; type&#x3D;&quot;primary&quot;&gt;新增数据&lt;&#x2F;button&gt;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>在<code>index.js</code>中加入如下代码</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">const DB &#x3D; wx.cloud.database().collection(&quot;list&quot;)</span><br><span class=\"line\">let name &#x3D; &#39;&#39;</span><br><span class=\"line\">let age &#x3D; &#39;&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">Page(&#123;</span><br><span class=\"line\">  addName(event)&#123;</span><br><span class=\"line\">    &#x2F;&#x2F;console.log(event.detail.value)</span><br><span class=\"line\">    name &#x3D; event.detail.value</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  addAge(event)&#123;</span><br><span class=\"line\">    &#x2F;&#x2F;console.log(event.detail.value)</span><br><span class=\"line\">    age &#x3D; event.detail.value</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  addData() &#123;</span><br><span class=\"line\">    console.log(&#39;调用添加数据的方法&#39;)</span><br><span class=\"line\">    DB.add(&#123;</span><br><span class=\"line\">      data: &#123;</span><br><span class=\"line\">        name: name,</span><br><span class=\"line\">        age: age</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      success(res) &#123;</span><br><span class=\"line\">        console.log(&quot;添加数据成功&quot;, res)</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      fail(res) &#123;</span><br><span class=\"line\">        console.log(&quot;添加数据失败&quot;, res)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>测试：输入数据后，点击新增数据按钮，发现控制台上有相应输出，再进入到云开发的数据库页面，发现输入的字段已新增</p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200817153642239.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1BhbmRhMzI1,size_16,color_FFFFFF,t_70#pic_center\" alt=\"输入数据后，点击新增数据按钮\"><br><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/2020081715371567.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1BhbmRhMzI1,size_16,color_FFFFFF,t_70#pic_center\" alt=\"控制台上有相应输出\"><br><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200817153801918.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1BhbmRhMzI1,size_16,color_FFFFFF,t_70#pic_center\" alt=\"再进入到云开发的数据库页面，发现输入的字段已新增\"></p>\n<h2 id=\"查找已有的数据\"><a href=\"#查找已有的数据\" class=\"headerlink\" title=\"查找已有的数据\"></a>查找已有的数据</h2><p>效果：通过点击一个按键可以查询云数据库中的内容</p>\n<p>实现：</p>\n<ol>\n<li>在<code>index.wxml</code>中，加入如下代码</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;button bindtap&#x3D;&quot;getData&quot;&gt;查询数据&lt;&#x2F;button&gt;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>在<code>index.js</code>中加入如下代码</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">const DB &#x3D; wx.cloud.database().collection(&quot;testlist&quot;)</span><br><span class=\"line\">Page(&#123;</span><br><span class=\"line\">  getData() &#123;</span><br><span class=\"line\">    console.log(&#39;调用查询数据的方法&#39;)</span><br><span class=\"line\">    DB.get(&#123;</span><br><span class=\"line\">      success(res)&#123;</span><br><span class=\"line\">        console.log(&#39;查询数据成功&#39;,res)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>测试：点击查询数据按钮，发现控制台上有相应输出</p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjAvMDgvMTcvTkdIVHpBcVhjeXcyTXJuLnBuZw?x-oss-process=image/format,png\" alt=\"\"></p>\n<h2 id=\"通过ID删除数据\"><a href=\"#通过ID删除数据\" class=\"headerlink\" title=\"通过ID删除数据\"></a>通过ID删除数据</h2><p>效果：用户通过输入想删除数据的ID并点击确定删除按键，即可删除云数据库中用户想删除的数据</p>\n<p>实现：</p>\n<ol>\n<li>在<code>index.wxml</code>中加入如下代码</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;input placeholder&#x3D;&quot;要删除数据的ID&quot; bindinput&#x3D;&quot;delDataInput&quot;&gt;&lt;&#x2F;input&gt;</span><br><span class=\"line\">&lt;text&gt;\\n&lt;&#x2F;text&gt;</span><br><span class=\"line\">&lt;button bindtap&#x3D;&quot;delData&quot; type&#x3D;&quot;primary&quot;&gt;删除数据&lt;&#x2F;button&gt;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>在<code>index.js</code>中加入如下代码</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">const DB &#x3D; wx.cloud.database().collection(&quot;list&quot;)</span><br><span class=\"line\">let id &#x3D; &#39;&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">Page(&#123;</span><br><span class=\"line\">  delDataInput(event)&#123;</span><br><span class=\"line\">    &#x2F;&#x2F;console.log(event.detail.value)</span><br><span class=\"line\">    id &#x3D; event.detail.value</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  delData() &#123;</span><br><span class=\"line\">    console.log(&#39;调用删除数据的方法&#39;)</span><br><span class=\"line\">    DB.doc(id).remove(&#123;</span><br><span class=\"line\">      success(res) &#123;</span><br><span class=\"line\">        console.log(&#39;删除数据成功&#39;, res.data)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>测试：输入想删除数据的ID后（注意不要带有引号””），点击确定删除按键，发现控制台上有相应输出，再进入到云开发的数据库页面，发现输入id对应的该条数据已删除<br><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200817154308889.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1BhbmRhMzI1,size_16,color_FFFFFF,t_70#pic_center\" alt=\"删除前\"><br><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200817154330814.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1BhbmRhMzI1,size_16,color_FFFFFF,t_70#pic_center\" alt=\"删除后\"></p>\n<h2 id=\"通过属性删除数据\"><a href=\"#通过属性删除数据\" class=\"headerlink\" title=\"通过属性删除数据\"></a>通过属性删除数据</h2><p>效果：用户通过输入想删除数据的name的值并点击确定删除按键，即可删除云数据库中用户想删除的数据</p>\n<p>实现：</p>\n<ol>\n<li>在<code>index.wxml</code>中加入如下代码</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;input placeholder&#x3D;&quot;输入要删除数据的name&quot; bindinput&#x3D;&quot;delDataInputName&quot;&gt;&lt;&#x2F;input&gt;</span><br><span class=\"line\">&lt;text&gt;\\n&lt;&#x2F;text&gt;</span><br><span class=\"line\">&lt;button bindtap&#x3D;&quot;delDataByProperty&quot; type&#x3D;&quot;primary&quot;&gt;通过属性删除&lt;&#x2F;button&gt;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>在<code>index.js</code>中加入如下代码</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">const DB &#x3D; wx.cloud.database().collection(&quot;list&quot;)</span><br><span class=\"line\">let nameDelete &#x3D; &#39;&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">Page(&#123;</span><br><span class=\"line\">  delDataInputName(event)&#123;</span><br><span class=\"line\">    &#x2F;&#x2F;console.log(event.detail.value)</span><br><span class=\"line\">    nameDelete &#x3D; event.detail.value</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  </span><br><span class=\"line\">  delDataByProperty() &#123;</span><br><span class=\"line\">    console.log(&#39;调用属性删除数据的方法&#39;)</span><br><span class=\"line\">    DB.where(&#123;</span><br><span class=\"line\">      name: nameDelete</span><br><span class=\"line\">    &#125;).remove(&#123;</span><br><span class=\"line\">      success(res) &#123;</span><br><span class=\"line\">        console.log(&#39;删除数据成功&#39;, res.data)</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      fail(res) &#123;</span><br><span class=\"line\">        console.log(&quot;删除数据失败&quot;, res)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>测试：输入想删除数据的name的值后（注意不要带有引号””），点击确定删除按键，发现控制台上有相应输出，再进入到云开发的数据库页面，发现输入的想删除数据的name的值对应的该条数据已删除<br><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200817154708242.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1BhbmRhMzI1,size_16,color_FFFFFF,t_70#pic_center\" alt=\"删除前\"><br><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200817154729966.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1BhbmRhMzI1,size_16,color_FFFFFF,t_70#pic_center\" alt=\"删除后\"><br>另：<br>如果<code>name</code>为<code>abcd</code>的有多个数据，则全部name为abcd的数据都会被删除，如下图：<br><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200817155152692.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1BhbmRhMzI1,size_16,color_FFFFFF,t_70#pic_center\" alt=\"全部name为abcd的数据都会被删除\"></p>\n<h2 id=\"修改更新数据\"><a href=\"#修改更新数据\" class=\"headerlink\" title=\"修改更新数据\"></a>修改更新数据</h2><p>更新有两个，updata和set，分别为：<br>update：局部更新一个或多个记录<br>set：替换更新一个记录<br>此处演示update</p>\n<p>效果：用户通过输入数据ID以及修改后的name的值并点击修改更新数据按键，即可修改更新数据云数据库中用户想修改更新数据的数据</p>\n<p>实现：</p>\n<ol>\n<li>在<code>index.wxml</code>中加入如下代码</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;input placeholder&#x3D;&quot;输入要更新的数据的ID&quot; bindinput&#x3D;&quot;updateID&quot;&gt;&lt;&#x2F;input&gt;</span><br><span class=\"line\">&lt;input placeholder&#x3D;&quot;输入更新后的name的值&quot; bindinput&#x3D;&quot;updateValue&quot;&gt;&lt;&#x2F;input&gt;</span><br><span class=\"line\">&lt;button bindtap&#x3D;&quot;updateData&quot; type&#x3D;&quot;primary&quot;&gt;修改更新数据&lt;&#x2F;button&gt;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>在<code>index.js</code>中加入如下代码</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">const DB &#x3D; wx.cloud.database().collection(&quot;list&quot;)</span><br><span class=\"line\">let updateID &#x3D; &#39;&#39;</span><br><span class=\"line\">let updateValue &#x3D; &#39;&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">Page(&#123;</span><br><span class=\"line\">  updateID(event) &#123;</span><br><span class=\"line\">    console.log(event.detail.value)</span><br><span class=\"line\">    updateID &#x3D; event.detail.value</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  updateValue(event) &#123;</span><br><span class=\"line\">    console.log(event.detail.value)</span><br><span class=\"line\">    updateValue &#x3D; event.detail.value</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  </span><br><span class=\"line\">  updateData() &#123;</span><br><span class=\"line\">    console.log(&#39;调用修改更新数据的方法&#39;)</span><br><span class=\"line\">    DB.doc(updateID).update(&#123;</span><br><span class=\"line\">      data: &#123;</span><br><span class=\"line\">        name: updateValue</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      success(res) &#123;</span><br><span class=\"line\">        console.log(&#39;修改更新数据成功&#39;, res.data)</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      fail(res) &#123;</span><br><span class=\"line\">        console.log(&quot;修改更新数据失败&quot;, res)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>测试：输入数据ID以及修改后的name的值并点击修改更新数据按键，发现控制台上有相应输出，再进入到云开发的数据库页面，数据已修改更新<br><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200817164257555.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1BhbmRhMzI1,size_16,color_FFFFFF,t_70#pic_center\" alt=\"修改更新数据前\"><br><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200817164315864.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1BhbmRhMzI1,size_16,color_FFFFFF,t_70#pic_center\" alt=\"修改更新数据后\"></p>\n<h1 id=\"小程序云开发数据库的增删改查已经全部完成！\"><a href=\"#小程序云开发数据库的增删改查已经全部完成！\" class=\"headerlink\" title=\"小程序云开发数据库的增删改查已经全部完成！\"></a>小程序云开发数据库的增删改查已经全部完成！</h1>","categories":["微信小程序"],"tags":["入门","微信小程序云开发"]},{"title":"小镇做题家没错，错的是世界","url":"/2020/07/29/%E5%B0%8F%E9%95%87%E5%81%9A%E9%A2%98%E5%AE%B6/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\css\\APlayer.min.css\"><script src=\"\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\js\\Meting.min.js\"></script><h1 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"1\"></a><strong>1</strong></h1><p>最近小镇做题家这个词冒了出来，作为后浪的反面。</p>\n<p>小镇做题家代表了那些出身贫苦，读书努力，依靠高考进入了一所比较好的大学，有一个相对不错的学历，但面对社会依然单薄无力拘谨的形象。</p>\n<p>我回想自己的生活中，似乎是遇到过这些朋友的。</p>\n<p>读中学时有一个同学，努力上进，埋头苦读，在我们翘课打球的时候，他在做题，在我们网吧CS五黑的时候，他在做题，在我们唱K宵夜吹牛皮的时候，他还在写题，他是那种典型的别人家的孩子，老师的最爱，校长的希望。</p>\n<p>有一说一，我是校长我也喜欢人家，毕竟这是行走的KPI。</p>\n<p>人人都爱KPI。</p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"http://p3-tt.byteimg.com/large/pgc-image/3d8ffe037c294ecb97e94a5a972f2616?from=pc\" alt=\"小镇做题家没错，错的是世界\"></p>\n<p>工作之后，我遇到过这么一个实习生，说是实习生，但是看起来似乎比我还要大，半路从生物转行计算机，某985毕业，浑身上下带着一股“老实人”的气息，正儿八经的老实人。</p>\n<p>我说的不是牛顿老师。</p>\n<p>只是这人虽然老实，但老实的并不可爱，也不好用。</p>\n<p>脑回路异乎寻常的直，跟他沟通存在一定门槛，对于工作难以变通，同时也不知道到处去问，我不认为这是他的错误，毕竟谁也不敢说刚上班就有经验，但确实也不喜欢和他合作，因为会给我自己增加非常多的工作量。</p>\n<p>他的野心很明显，想在大城市待下来，但接人待物确实存在问题，喜欢抱怨，并且逢人就强调自己一定要留下来，所以最后尽管我给他写了转正推荐，但拒绝他来我的组，他去了别的更缺人的组，后来我离职，就断了联系。</p>\n<p>人不是坏人，也没什么坏心思，很努力，很肯付出，但有时候就是战战兢兢，不得其法。</p>\n<p>一提起小镇做题家，我第一时间就想到了他们。</p>\n<h1 id=\"2\"><a href=\"#2\" class=\"headerlink\" title=\"2\"></a><strong>2</strong></h1><p>小镇做题家是指那些村镇出生，学习优秀但因缺乏视野和资源导致生活不如意的青年，本质上是一种自嘲的称谓。</p>\n<p>但要区分清楚，不是所有小镇出身大城市工作的年轻人都叫小镇做题家。</p>\n<p>你小镇出身，大城市流水线拼手机，送外卖，剪头发，这叫入城务工青年。</p>\n<p>你小镇出身，娶/嫁了个富二代，从此衣食无忧，这叫人生赢家。</p>\n<p>你小镇出生，清北毕业，先上班后创业，门店开遍全国，纳斯达克上市，问鼎福布斯，这叫莫欺少年穷。</p>\n<p>你小镇出身，学校还行，工作正常，稳扎稳打，赚了点小钱，这叫芸芸众生。</p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"http://p6-tt.byteimg.com/large/pgc-image/3d20be349fdd4d298db432ed9901827d?from=pc\" alt=\"小镇做题家没错，错的是世界\"></p>\n<p>如果你仔细观察，你可以发现，小镇做题家基本包含了所有与奋斗相关的美德。</p>\n<p>尽管经济条件一般，原生家庭物质生活匮乏导致童年见识缺失，在成长路上家庭也无法提供额外的资源和助力，在初高中时依附于“题海战术”、取得优异成绩，从而脱离农村、小镇考入一流名校进入大城市。</p>\n<p>辛苦三年早起晚睡千辛万苦从小镇刷题考上大学后，才发现来自城市的同学因为丰富的教学资源，高中悠闲度过。</p>\n<p>当他们早早的觉醒危机意识，在大学里开始制定学籍计划，希望复刻自己在高中时的成功时，但发现自己思维、眼界、见识都远弱于他人。</p>\n<p>而因为教育资源的落后，以及家庭资源的局限，自己既没有同学那样悠闲的生活，除了纸面上的学习成绩之外，音乐、才艺、运动甚至连人际交往等各类技能都是欠缺的。</p>\n<p>别人的四年叫青春，他们的四年叫大学。</p>\n<p>这其实并不好笑。</p>\n<h1 id=\"3\"><a href=\"#3\" class=\"headerlink\" title=\"3\"></a><strong>3</strong></h1><p>小镇做题家往往入学即巅峰，然后就是被各种暴打，尤其是在面对就业时，会发现自己前四年积累的那些证书，那些学分对面试、工作没有想象中的给力。</p>\n<p>最后企业选了你那个大二就在家人帮助开始实习，做出过好几个实操项目的同学。</p>\n<p>或者更直接一些有资源的。</p>\n<p>这不能怪企业现实，毕竟公司是要赚钱的，这年头大家都不容易，很多老板其实甚至可以说是在给员工打工。</p>\n<p>不是所有人都能骗到投资人接盘的。</p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"http://p6-tt.byteimg.com/large/pgc-image/8251aec8f0384b4f801d109dc57cc514?from=pc\" alt=\"小镇做题家没错，错的是世界\"></p>\n<p>工作之后，好不容易留在了大城市，一线行业。</p>\n<p>但工作不上不下，既比不过那些资源型同学，也比不过本地城市中产。</p>\n<p>既没有六个钱包给他助力，也没有开公司的父母等着他回家继承家产。</p>\n<p>做题家们逐渐开始发现自己面临的尴尬，有的过了很久才发现自己选错了行业，浪费数年时间；</p>\n<p>有的因为谨小慎微，做事犹犹豫豫，不够机灵常常错失良机；</p>\n<p>有的做着一份没有未来的工作，因为害怕转行的风险，日渐绝望。</p>\n<p>简单的来说，在以成绩作为唯一标准的高考前阶段，他们用成绩吊打了一众同学，当高考结束开始拼实操能力的时候，他们却开始反向被世界吊打。</p>\n<p>某种程度上，这证明了地球是圆的。</p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"http://p6-tt.byteimg.com/large/pgc-image/d65766abdb7543b8960b5db1d2d186de?from=pc\" alt=\"小镇做题家没错，错的是世界\"></p>\n<h1 id=\"4\"><a href=\"#4\" class=\"headerlink\" title=\"4\"></a><strong>4</strong></h1><p><strong>小镇做题家真的是失败者吗？</strong></p>\n<p>很明显不是。</p>\n<p>刷题也是有门槛的，就像我，想刷题都刷不来，我当年不知道多羡慕他们。</p>\n<p>那小镇做题家是目光短浅吗？</p>\n<p>很明显也不是。</p>\n<p>小镇做题家其实早早认识到了人生的残酷和自身没有资源可以依靠这个事实，选择了“刷题”这样一条艰辛但高效的道路，并几年如一日的坚持下来，达成了目标。</p>\n<p>自制力强大，执行力爆表。</p>\n<p>刷题这件事情，可真不是谁都能搞定的。</p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"http://p6-tt.byteimg.com/large/pgc-image/85bccde2e0f9436b90c0c48da3378757?from=pc\" alt=\"小镇做题家没错，错的是世界\"></p>\n<p>能吃苦，能认识到现实，看起来是很好，但这里面会有一个负面循环。</p>\n<p>物质的匮乏，导致他们没有条件去增长见识，大量的时间在刷题上，和刷题占用了他们太多的时间资源，导致他们没有时间自行发展其他软性技能。</p>\n<p>实现人生成功→要有好学历→没钱没资源→只能刷题→刷题导致思维僵化→成为做题家→做题家难以成功。</p>\n<p>形成了一个逻辑上的死循环。</p>\n<p>出生于农村城镇，因为原生家庭物质生活匮乏，无法给做题家们带来助力。</p>\n<p>小镇做题家的名头就是这样来的。</p>\n<p>现实只能让他们刷题，不刷题没有出路，但这个社会没有给你继续刷题的机会。</p>\n<p>所以我从来不会看不起小镇做题家，因为错的不是他们，真的是这个世界。</p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"http://p6-tt.byteimg.com/large/pgc-image/277a022a7876484cae83538b37fa0140?from=pc\" alt=\"小镇做题家没错，错的是世界\"></p>\n<h1 id=\"5\"><a href=\"#5\" class=\"headerlink\" title=\"5\"></a><strong>5</strong></h1><p>另外，讲道理，刷题家们的失败，是相对于城市中产而言的，相对于老家的务工青年，他们的生活条件和上升通道是要强得多。</p>\n<p>导致做题家失败的原因是资源的不足+社会化程度低，可以说是非战之罪。</p>\n<p>这种资源不光是指金钱，也指人脉、信息。</p>\n<p>比如中产家庭的父母，可以在子女报考专业的时候给一些指导意见，可以给子女介绍实习，可以帮助子女内推工作。</p>\n<p>而做题家们的父母要不就是农民，要不就是小城市打工仔，别说什么给资源，别在你报专业的时候跟你憋出一句21世纪是生物的世纪就算帮忙了。</p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"http://p6-tt.byteimg.com/large/pgc-image/8cbf6f5f6de642e186e41e52a02a7dfa?from=pc\" alt=\"小镇做题家没错，错的是世界\"></p>\n<p>这是直接原因，那么根本原因是什么呢？</p>\n<p>是“信息差”。</p>\n<p>做题家们对抗人生的策略是用时间换空间。</p>\n<p>这个策略是没问题的，但问题在于，社会性的“成功”是多因素导致的，但做题家们能做的事情却是单一的。</p>\n<p>高考前成功的唯一考量因素是“成绩”，</p>\n<p>高考后最大的考量因素是“经济”，是“资源”。</p>\n<p>成绩的成功是单一的，时间只需要花在六个科目上，“经济”的成功是多因素的，你要把时间花在性价比最高的因素上。</p>\n<p>后者比前者的门槛，高了太多。</p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"http://p6-tt.byteimg.com/large/pgc-image/b05239685f94453c8ed12df16e931571?from=pc\" alt=\"小镇做题家没错，错的是世界\"></p>\n<p>打个比方，企业挑选员工的条件，是找合适的人，有过相关行业实习经验，容易沟通，实操能力强；</p>\n<p>企业晋升员工的条件是有管理能力，做出过成绩，能服众。</p>\n<p>而做题家能提供的只有，学习成绩好，善于应试。</p>\n<p>企业不需要应试能力，社会也不需要应试能力，因为这些换不来金钱。</p>\n<p>而这种信息差导致的认知的偏差，就会最终导致“努力错了方向”。</p>\n<p>产生这种“我明明已经很努力了，为什么还是这么失败”的结局。</p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"http://p1-tt.byteimg.com/large/pgc-image/f1399dbd1fad4683a6e8435987b548e9?from=pc\" alt=\"小镇做题家没错，错的是世界\"></p>\n<h1 id=\"6\"><a href=\"#6\" class=\"headerlink\" title=\"6\"></a><strong>6</strong></h1><p>做题家们痛苦的根源是跳出了自己的圈层，看到了更大的世界，而手头上的资源和以往的成功经验却难以支撑他们在正确的路上更进一步。</p>\n<p>俗话说，不努力还好，一努力才发现自己是个废物，这才是最痛苦的。</p>\n<p>但，小镇做题家是废物吗？</p>\n<p>当然不是。</p>\n<p>看一下小镇做题家的开局难度就知道。</p>\n<p>物资的匮乏，教育资源跟不上，必须靠堆时间刷题找补。</p>\n<p>出身地与外界接触少，很多人大学毕业后才第一次离开自己家的小镇眼界窄。</p>\n<p>面临学业、就业等人生重大抉择没人能够提供建议，帮自己避雷，容易进坑。</p>\n<p>没有家庭资源兜底，没有退路，容错极低，面临选择只能选择短期保底，致使长期失利。</p>\n<p>这四点加在一起堪称深渊开局，甚至如果婴儿有意识有的选，面对这种投胎都恨不得当场去世。</p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"http://p1-tt.byteimg.com/large/pgc-image/144977d0af524f9fa649dd165d27572a?from=pc\" alt=\"小镇做题家没错，错的是世界\"></p>\n<p>但人家是怎么做的？</p>\n<p>认识到了开局难度，知道自己所处的劣势，于是早早的认准了“刷题”这样一条单调高效且成功率最高的路，忍受着孤独和无奈一路杀了上去，最后顶着一身白装跟那些满身时装的rmb玩家同台竞技。</p>\n<p>在开局两只手的情况下，靠刷题刷成了社会中上水平收入，你们别笑，按绝对比例来说大部分白领学历，收入都是社会中上水平，哪怕仅在城市中，也不拖后腿。</p>\n<p>尽管做题家们经常自嘲自己被家境、社会环境、生存压力压垮，努力半生无所作为。</p>\n<p>但从绝对比例来说，小镇做题家依然是人生中的强者。</p>\n<p>强者是什么？</p>\n<p>从绝对意义来说，是强于大多数人，从相对意义来说，是强于昨天的自己。</p>\n<p>无论是哪一点，他们都做到了。</p>\n<p>尤其是考虑到他们的起点，更是值得尊敬。</p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"http://p6-tt.byteimg.com/large/pgc-image/773332dc12fd47bb9f2909980bc6a159?from=pc\" alt=\"小镇做题家没错，错的是世界\"></p>\n<h1 id=\"7\"><a href=\"#7\" class=\"headerlink\" title=\"7\"></a><strong>7</strong></h1><p>在小镇做题家这个话题底下，我看到一句话是我很讨厌的。</p>\n<p>“同样出身小镇，有的人依然对知识抱有无功利的兴趣，有的人则完全只把读书当成敲门砖。”</p>\n<p>对小镇做题家极尽鄙夷。</p>\n<p>这是一句完全正确的废话，是“何不食肉糜”的现代版本。</p>\n<p>读书如果不是作为敲门砖，那么世界上99%的人不会去读书。</p>\n<p>读书就是不如王者荣耀有趣，这很正常。</p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"http://p1-tt.byteimg.com/large/pgc-image/49083ade1e074fe29ce633ceb17ff9f7?from=pc\" alt=\"小镇做题家没错，错的是世界\"></p>\n<p>确实承认，书籍文化有文化传承、探索知识的作用，但在社层面上的意义在于给社会输出一批具有良好学历水平和工作能力的专向人才。</p>\n<p>对个人的意义在于让自己拥有获得工作，获得更好生活的能力。</p>\n<p>对知识抱有兴趣的完全可以自己自学，或者向着专业领域冲就行了，完全不冲突。</p>\n<p>更何况，面对一个缺乏资源独自战斗，只是为了获得跟后浪们同台竞技的年轻人，你好意思跟他说，你不要那么功利？</p>\n<p>功利有错吗？功利没错，功利是他们获得更好生活的唯一方式，功利是他们对抗这个世界的唯一方式。</p>\n<p>在你们指责别人功利前，请别忘了有许多人光是活着就已经拼尽了全力。</p>\n<p>有人耗费整个青春，只是为了证明他不比你差。</p>\n<p>谁喜欢功利的世界呢，但很多时候他们没的选。</p>\n<p>其实，我们也没得选。</p>\n","categories":["读书"]},{"title":"微信小程序云开发学习笔记（二）云函数","url":"/2020/08/17/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%BA%91%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89%E4%BA%91%E5%87%BD%E6%95%B0/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\css\\APlayer.min.css\"><script src=\"\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\js\\Meting.min.js\"></script><h1 id=\"一、创建一个云开发的小程序\"><a href=\"#一、创建一个云开发的小程序\" class=\"headerlink\" title=\"一、创建一个云开发的小程序\"></a>一、创建一个云开发的小程序</h1><h2 id=\"1-如下图所示创建小程序\"><a href=\"#1-如下图所示创建小程序\" class=\"headerlink\" title=\"1. 如下图所示创建小程序\"></a>1. 如下图所示创建小程序</h2><p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200818084851626.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1BhbmRhMzI1,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"2-删除无关文件\"><a href=\"#2-删除无关文件\" class=\"headerlink\" title=\"2. 删除无关文件\"></a>2. 删除无关文件</h2><p>删除前：<br><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/2020081808502252.png#pic_center\" alt=\"在这里插入图片描述\"><br>删除后：<br><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200818085156316.png#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"3-删除无关代码\"><a href=\"#3-删除无关代码\" class=\"headerlink\" title=\"3. 删除无关代码\"></a>3. 删除无关代码</h2><p><code>index.wxml</code> <code>index.wxss</code> 内的代码全部清空，<code>index.js</code>保留如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Page(&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200818085442731.png#pic_center\" alt=\"在这里插入图片描述\"><br><code>app.json</code>删除无关代码，如下：<br><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200818085748146.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1BhbmRhMzI1,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"4-配置云函数存储目录\"><a href=\"#4-配置云函数存储目录\" class=\"headerlink\" title=\"4. 配置云函数存储目录\"></a>4. 配置云函数存储目录</h2><p>在<code>project.config.json</code>中新增如下代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&quot;cloudfunctionRoot&quot;:&quot;cloud&quot;,</span><br></pre></td></tr></table></figure>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200818085851769.png#pic_center\" alt=\"在这里插入图片描述\"><br>在根目录下创建同名文件夹，发现其有云朵标识<br><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200818085949202.png#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"5-云开发环境初始化\"><a href=\"#5-云开发环境初始化\" class=\"headerlink\" title=\"5. 云开发环境初始化\"></a>5. 云开发环境初始化</h2><p>点击云开发—&gt;设置，复制你的环境ID<br><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200818090314311.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1BhbmRhMzI1,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>在<code>app.js</code>中，删除所有代码，并新增如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">App(&#123;</span><br><span class=\"line\">  onLaunch: function () &#123;</span><br><span class=\"line\">    wx.cloud.init(&#123;</span><br><span class=\"line\">      env:&quot;cloud-learning-i44qm&quot;&#x2F;&#x2F;你的环境ID</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200818092006170.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1BhbmRhMzI1,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"6-创建并上传一个云函数\"><a href=\"#6-创建并上传一个云函数\" class=\"headerlink\" title=\"6. 创建并上传一个云函数\"></a>6. 创建并上传一个云函数</h2><p>我们以最简单的求和函数为例<br><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200818092045766.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1BhbmRhMzI1,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>输入<code>add</code>并回车<br><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200818092133669.png#pic_center\" alt=\"在这里插入图片描述\"><br>在上图的<code>index.js</code>中改变代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 云函数入口文件</span><br><span class=\"line\">const cloud &#x3D; require(&#39;wx-server-sdk&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\">cloud.init()</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 云函数入口函数</span><br><span class=\"line\">exports.main &#x3D; async (event, context) &#x3D;&gt; &#123;</span><br><span class=\"line\">  let a &#x3D; event.a;</span><br><span class=\"line\">  let b &#x3D; event.b;</span><br><span class=\"line\">  return a+b;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>写完代码后，记得 Ctrl+s 保存，然后点击如下图所示：<br><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200818092500381.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1BhbmRhMzI1,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>出现下图，则上传成功<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200818092523660.png#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"7-使用云函数\"><a href=\"#7-使用云函数\" class=\"headerlink\" title=\"7. 使用云函数\"></a>7. 使用云函数</h2><p>以下皆在page下的index页面操作<br><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200818093124592.png#pic_center\" alt=\"在这里插入图片描述\"><br><code>index.wxml</code>中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;button bindtap&#x3D;&quot;getSum&quot;&gt;云函数的求和运算&lt;&#x2F;button&gt;</span><br></pre></td></tr></table></figure>\n<p><code>index.js</code>中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Page(&#123;</span><br><span class=\"line\">  getSum() &#123;</span><br><span class=\"line\">    wx.cloud.callFunction(&#123;</span><br><span class=\"line\">      name:&quot;add&quot;,</span><br><span class=\"line\">      data:&#123;</span><br><span class=\"line\">        a:5,</span><br><span class=\"line\">        b:6</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      success(res)&#123;</span><br><span class=\"line\">        console.log(&quot;请求成功！&quot;, res)</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      fail(res)&#123;</span><br><span class=\"line\">        console.log(&quot;请求失败！&quot;,res)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<ol start=\"8\">\n<li>测试云函数调用是否成功<br><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200818093350787.png#pic_center\" alt=\"在这里插入图片描述\"><h2 id=\"8-进阶测试\"><a href=\"#8-进阶测试\" class=\"headerlink\" title=\"8. 进阶测试\"></a>8. 进阶测试</h2><code>index.wxml</code>中<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;input bindinput&#x3D;&quot;handleInput1&quot; placeholder&#x3D;&quot;数字1&quot;&gt;&lt;&#x2F;input&gt;</span><br><span class=\"line\">&lt;input bindinput&#x3D;&quot;handleInput2&quot; placeholder&#x3D;&quot;数字2&quot;&gt;&lt;&#x2F;input&gt;</span><br><span class=\"line\">&lt;button bindtap&#x3D;&quot;getSum&quot;&gt;云函数的求和运算&lt;&#x2F;button&gt;</span><br></pre></td></tr></table></figure>\n<code>index.js</code>中<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">let a &#x3D; 0</span><br><span class=\"line\">let b &#x3D; 0</span><br><span class=\"line\"></span><br><span class=\"line\">Page(&#123;</span><br><span class=\"line\">  handleInput1(event) &#123;</span><br><span class=\"line\">    &#x2F;&#x2F;console.log(event.detail.value)</span><br><span class=\"line\">    a &#x3D; event.detail.value</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  handleInput2(event) &#123;</span><br><span class=\"line\">    &#x2F;&#x2F;console.log(event.detail.value)</span><br><span class=\"line\">    b &#x3D; event.detail.value</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  getSum() &#123;</span><br><span class=\"line\">    wx.cloud.callFunction(&#123;</span><br><span class=\"line\">      name: &quot;add&quot;,</span><br><span class=\"line\">      data: &#123;</span><br><span class=\"line\">        a: a - &#39;&#39;,</span><br><span class=\"line\">        b: b - &#39;&#39;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      success(res) &#123;</span><br><span class=\"line\">        console.log(&quot;请求成功！&quot;, res)</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      fail(res) &#123;</span><br><span class=\"line\">        console.log(&quot;请求失败！&quot;, res)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200818094114663.png#pic_center\" alt=\"在这里插入图片描述\"></p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/2020081809405454.png#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h1 id=\"二、使用云函数获取用户openid\"><a href=\"#二、使用云函数获取用户openid\" class=\"headerlink\" title=\"二、使用云函数获取用户openid\"></a>二、使用云函数获取用户openid</h1><h2 id=\"1-创建一个新的页面getopenid\"><a href=\"#1-创建一个新的页面getopenid\" class=\"headerlink\" title=\"1. 创建一个新的页面getopenid\"></a>1. 创建一个新的页面<code>getopenid</code></h2><p>如下图：<br><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200818095349654.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1BhbmRhMzI1,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"2-创建云函数getopenid\"><a href=\"#2-创建云函数getopenid\" class=\"headerlink\" title=\"2. 创建云函数getopenid\"></a>2. 创建云函数<code>getopenid</code></h2><p>里面的代码不用改动，使用默认的就可以<br><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200818095617698.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1BhbmRhMzI1,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"3-getopenid-wxml\"><a href=\"#3-getopenid-wxml\" class=\"headerlink\" title=\"3. getopenid.wxml\"></a>3. <code>getopenid.wxml</code></h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;button bindtap&#x3D;&quot;getopenid&quot;&gt;getopenid&lt;&#x2F;button&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-getopenid-js\"><a href=\"#4-getopenid-js\" class=\"headerlink\" title=\"4. getopenid.js\"></a>4. <code>getopenid.js</code></h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Page(&#123;</span><br><span class=\"line\">  onLoad()&#123;</span><br><span class=\"line\">    wx.cloud.callFunction(&#123;</span><br><span class=\"line\">      name:&quot;getopenid&quot;,</span><br><span class=\"line\">      data:&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      success(res) &#123;</span><br><span class=\"line\">        console.log(&quot;获取openid成功！&quot;, res)</span><br><span class=\"line\">        console.log(&quot;openid是：&quot;, res.result.openid)</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      fail(res) &#123;</span><br><span class=\"line\">        console.log(&quot;获取openid失败！&quot;, res)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-测试\"><a href=\"#5-测试\" class=\"headerlink\" title=\"5. 测试\"></a>5. 测试</h2><p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200818095738693.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1BhbmRhMzI1,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h1 id=\"二、通过云数据库API获取云数据库数据\"><a href=\"#二、通过云数据库API获取云数据库数据\" class=\"headerlink\" title=\"二、通过云数据库API获取云数据库数据\"></a>二、通过云数据库API获取云数据库数据</h1><h2 id=\"1-新建测试数据\"><a href=\"#1-新建测试数据\" class=\"headerlink\" title=\"1. 新建测试数据\"></a>1. 新建测试数据</h2><p>在云数据库中随便新建几条数据<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200818101955175.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1BhbmRhMzI1,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"2-新建测试页面\"><a href=\"#2-新建测试页面\" class=\"headerlink\" title=\"2. 新建测试页面\"></a>2. 新建测试页面</h2><p>新建页面<code>cloudfunctionVSdatabaseAPI</code><br><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200818101632569.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1BhbmRhMzI1,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"3-创建测试按键\"><a href=\"#3-创建测试按键\" class=\"headerlink\" title=\"3. 创建测试按键\"></a>3. 创建测试按键</h2><p><code>cloudfunctionVSdatabaseAPI.wxml</code>中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;button bindtap&#x3D;&quot;shujuku&quot;&gt;数据库API获取数据&lt;&#x2F;button&gt;</span><br></pre></td></tr></table></figure>\n<p><code>cloudfunctionVSdatabaseAPI.js</code>中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Page(&#123;</span><br><span class=\"line\">  shujuku()&#123;</span><br><span class=\"line\">    wx.cloud.database().collection(&quot;pk&quot;).get(&#123;</span><br><span class=\"line\">      success(res) &#123;</span><br><span class=\"line\">        console.log(&quot;数据库API获取数据成功！&quot;, res)</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      fail(res) &#123;</span><br><span class=\"line\">        console.log(&quot;数据库API获取数据失败！&quot;, res)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-测试\"><a href=\"#4-测试\" class=\"headerlink\" title=\"4. 测试\"></a>4. 测试</h2><p>点击按键<code>数据库API获取数据</code>，发现控制台如下输出：<br><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200818103343412.png#pic_center\" alt=\"在这里插入图片描述\"><br>此时，我们发现数据库中明明有数据但通过数据库API获取不到，为什么呢？<br><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200818103445206.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1BhbmRhMzI1,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>原因是权限不够，如果我们更新权限，让所有用户都可以获取，会怎么样呢？<br><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200818103554484.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1BhbmRhMzI1,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200818103609591.png#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"5-结论\"><a href=\"#5-结论\" class=\"headerlink\" title=\"5. 结论\"></a>5. 结论</h2><p>可以看到，我们现在获取到了想要的数据，我们也发现了通过数据库API获取数据的局限性。</p>\n<h1 id=\"三、通过云函数获取云数据库数据\"><a href=\"#三、通过云函数获取云数据库数据\" class=\"headerlink\" title=\"三、通过云函数获取云数据库数据\"></a>三、通过云函数获取云数据库数据</h1><h2 id=\"1-云数据库就可以直接获取数据库里的数据，为什么这么做？\"><a href=\"#1-云数据库就可以直接获取数据库里的数据，为什么这么做？\" class=\"headerlink\" title=\"1. 云数据库就可以直接获取数据库里的数据，为什么这么做？\"></a>1. 云数据库就可以直接获取数据库里的数据，为什么这么做？</h2><p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200818100024885.png#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"2-说明\"><a href=\"#2-说明\" class=\"headerlink\" title=\"2. 说明\"></a>2. 说明</h2><p>本例延续上例中的<code>cloudfunctionVSdatabaseAPI</code>页面</p>\n<h2 id=\"3-创建云函数\"><a href=\"#3-创建云函数\" class=\"headerlink\" title=\"3. 创建云函数\"></a>3. 创建云函数</h2><p>利用上述方法创建云函数<code>cloudfunctionVSdatabaseAPI</code><br><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200818104300955.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1BhbmRhMzI1,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>云函数<code>cloudfunctionVSdatabaseAPI.js</code>中的代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 云函数入口文件</span><br><span class=\"line\">const cloud &#x3D; require(&#39;wx-server-sdk&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\">cloud.init()</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 云函数入口函数</span><br><span class=\"line\">exports.main &#x3D; async (event, context) &#x3D;&gt; &#123;</span><br><span class=\"line\">  return cloud.database().collection(&quot;pk&quot;).get();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>记得上传并部署，注意这里没有<code>wx.</code><br>云函数调用：<code>cloud.database().collection(&quot;pk&quot;).get();</code><br>本地调用：<code>wx.cloud.database().collection(&quot;pk&quot;).get();</code></p>\n<h2 id=\"4-创建测试按键\"><a href=\"#4-创建测试按键\" class=\"headerlink\" title=\"4. 创建测试按键\"></a>4. 创建测试按键</h2><p><code>cloudfunctionVSdatabaseAPI.wxml</code>中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;button bindtap&#x3D;&quot;shujuku&quot;&gt;数据库API获取数据&lt;&#x2F;button&gt;</span><br><span class=\"line\">&lt;button bindtap&#x3D;&quot;yunhanshu&quot;&gt;云函数获取数据&lt;&#x2F;button&gt;</span><br></pre></td></tr></table></figure>\n<p><code>cloudfunctionVSdatabaseAPI.js</code>中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Page(&#123;</span><br><span class=\"line\">  shujuku()&#123;</span><br><span class=\"line\">    wx.cloud.database().collection(&quot;pk&quot;).get(&#123;</span><br><span class=\"line\">      success(res) &#123;</span><br><span class=\"line\">        console.log(&quot;数据库API获取数据成功！&quot;, res)</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      fail(res) &#123;</span><br><span class=\"line\">        console.log(&quot;数据库API获取数据失败！&quot;, res)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  yunhanshu()&#123;</span><br><span class=\"line\">    wx.cloud.callFunction(&#123;</span><br><span class=\"line\">      name:&quot;cloudfunctionVSdatabaseAPI&quot;,</span><br><span class=\"line\">      success(res) &#123;</span><br><span class=\"line\">        console.log(&quot;云函数获取数据成功！&quot;, res)</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      fail(res) &#123;</span><br><span class=\"line\">        console.log(&quot;云函数获取数据失败！&quot;, res)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-测试-1\"><a href=\"#5-测试-1\" class=\"headerlink\" title=\"5. 测试\"></a>5. 测试</h2><p>首先更改云数据库的权限为仅创建者可读写<br><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200818105244679.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1BhbmRhMzI1,size_16,color_FFFFFF,t_70#pic_center\" alt=\"\"><br>点击两个按键<br><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200818105303589.png#pic_center\" alt=\"在这里插入图片描述\"><br>控制台输出如下：同样的，数据库API不可以获取到数据，而云函数可以<br><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200818105333789.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1BhbmRhMzI1,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"6-注意事项\"><a href=\"#6-注意事项\" class=\"headerlink\" title=\"6. 注意事项\"></a>6. 注意事项</h2><p>如果你的云开发有多套环境，在初始化时应指明，如下：<br>在下图文件中<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200818105730727.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1BhbmRhMzI1,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 云函数入口文件</span><br><span class=\"line\">const cloud &#x3D; require(&#39;wx-server-sdk&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\">cloud.init(&#123;</span><br><span class=\"line\">  env: &quot;cloud-learning-i44qm&quot;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 云函数入口函数</span><br><span class=\"line\">exports.main &#x3D; async (event, context) &#x3D;&gt; &#123;</span><br><span class=\"line\">  return cloud.database().collection(&quot;pk&quot;).get();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"7-云函数调用数据库的应用\"><a href=\"#7-云函数调用数据库的应用\" class=\"headerlink\" title=\"7. 云函数调用数据库的应用\"></a>7. 云函数调用数据库的应用</h2><p>短信发送，邮件发送，复杂数据运算</p>\n<p>我的邮箱：<a href=\"mailto:1125806272@qq.com\">1125806272@qq.com</a><br>我的博客：<a href=\"http://9pshr3.coding-pages.com/\">http://9pshr3.coding-pages.com/</a><br>或<a href=\"https://zhenglin-li.github.io/\" target=\"_blank\" rel=\"noopener\">https://zhenglin-li.github.io/</a><br>我的csdn：<a href=\"https://me.csdn.net/Panda325\" target=\"_blank\" rel=\"noopener\">https://me.csdn.net/Panda325</a><br>我的简书：<a href=\"https://www.jianshu.com/u/e2d945027d3f\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/u/e2d945027d3f</a><br>我的今日头条：<a href=\"https://www.toutiao.com/c/user/4004188138/#mid=1592553312231438\" target=\"_blank\" rel=\"noopener\">https://www.toutiao.com/c/user/4004188138/#mid=1592553312231438</a><br>我的博客园：<a href=\"https://www.cnblogs.com/zhenglin-li/\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/zhenglin-li/</a></p>\n","categories":["微信小程序"],"tags":["入门","微信小程序云开发"]},{"title":"微信小程序云开发学习笔记（三）云存储","url":"/2020/08/17/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%BA%91%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89%E4%BA%91%E5%AD%98%E5%82%A8/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\css\\APlayer.min.css\"><script src=\"\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\js\\Meting.min.js\"></script><h1 id=\"一、小程序云存储简介\"><a href=\"#一、小程序云存储简介\" class=\"headerlink\" title=\"一、小程序云存储简介\"></a>一、小程序云存储简介</h1><p>云开发提供了一块存储空间，提供了上传文件到云端、带权限管理的云端下载能力，开发者可以在小程序端和云函数端通过 API 使用云存储功能。</p>\n<p>在小程序端可以分别调用 <code>wx.cloud.uploadFile</code> 和 <code>wx.cloud.downloadFile</code> 完成上传和下载云文件操作</p>\n<h1 id=\"二、选择并上传图片\"><a href=\"#二、选择并上传图片\" class=\"headerlink\" title=\"二、选择并上传图片\"></a>二、选择并上传图片</h1><h2 id=\"使用的API：\"><a href=\"#使用的API：\" class=\"headerlink\" title=\"使用的API：\"></a>使用的API：</h2><ol>\n<li><p><a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/media/image/wx.chooseImage.html\" target=\"_blank\" rel=\"noopener\">wx.chooseImage</a></p>\n</li>\n<li><p><a href=\"https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/storage/uploadFile/client.uploadFile.html\" target=\"_blank\" rel=\"noopener\">wx.cloud.uploadFile</a></p>\n</li>\n</ol>\n<h2 id=\"实现步骤\"><a href=\"#实现步骤\" class=\"headerlink\" title=\"实现步骤\"></a>实现步骤</h2><h3 id=\"1-初始化云环境\"><a href=\"#1-初始化云环境\" class=\"headerlink\" title=\"1. 初始化云环境\"></a>1. 初始化云环境</h3><p>在app.js中指定云开发环境，其中<code>env</code>是你自己指定的环境ID</p>\n<p><code>app.js</code>中的代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">App(&#123;</span><br><span class=\"line\">  onLaunch: function () &#123;</span><br><span class=\"line\">    wx.cloud.init(&#123;</span><br><span class=\"line\">      env: &quot;cloud-learning-i44qm&quot;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-新建一个pageuploadImg用于测试\"><a href=\"#2-新建一个pageuploadImg用于测试\" class=\"headerlink\" title=\"2. 新建一个pageuploadImg用于测试\"></a>2. 新建一个page<code>uploadImg</code>用于测试</h3><h3 id=\"3-uploadImg-wxml中，\"><a href=\"#3-uploadImg-wxml中，\" class=\"headerlink\" title=\"3. uploadImg.wxml中，\"></a>3. <code>uploadImg.wxml</code>中，</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;button bindtap&#x3D;&quot;handleTap&quot;&gt;上传&lt;&#x2F;button&gt;</span><br><span class=\"line\">&lt;image src&#x3D;&quot;&#123;&#123;URL&#125;&#125;&quot;&gt;&lt;&#x2F;image&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-uploadImg-js中（版本一）\"><a href=\"#4-uploadImg-js中（版本一）\" class=\"headerlink\" title=\"4. uploadImg.js中（版本一）\"></a>4. <code>uploadImg.js</code>中（版本一）</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Page(&#123;</span><br><span class=\"line\">  data:&#123;</span><br><span class=\"line\">    URL:&#39;&#39;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  handleTap() &#123;</span><br><span class=\"line\">    let that &#x3D; this</span><br><span class=\"line\">    console.log(&quot;点击了上传按钮&quot;)</span><br><span class=\"line\">    wx.chooseImage(&#123;</span><br><span class=\"line\">      count: 1,</span><br><span class=\"line\">      sizeType: [&#39;original&#39;, &#39;compressed&#39;],</span><br><span class=\"line\">      sourceType: [&#39;album&#39;, &#39;camera&#39;],</span><br><span class=\"line\">      success(res) &#123;</span><br><span class=\"line\">        console.log(&quot;选择成功&quot;, res)</span><br><span class=\"line\">        that.upload(res.tempFilePaths[0])</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  upload(imgUrl) &#123;</span><br><span class=\"line\">    wx.cloud.uploadFile(&#123;</span><br><span class=\"line\">      cloudPath: new Date().getTime() +&#39;.png&#39;,    &#x2F;&#x2F;防止文件名重复，使用时间戳</span><br><span class=\"line\">      filePath: imgUrl, &#x2F;&#x2F; 文件路径</span><br><span class=\"line\">      success: res &#x3D;&gt; &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; get resource ID</span><br><span class=\"line\">        console.log(&quot;上传成功&quot;,res)</span><br><span class=\"line\">        this.setData(&#123;</span><br><span class=\"line\">          URL: res.fileID</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      fail: err &#x3D;&gt; &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; handle error</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-uploadImg-js中（版本二）\"><a href=\"#5-uploadImg-js中（版本二）\" class=\"headerlink\" title=\"5. uploadImg.js中（版本二）\"></a>5. <code>uploadImg.js</code>中（版本二）</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Page(&#123;</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    imgURL:&#39;&#39;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  selectAndUpload() &#123;</span><br><span class=\"line\">    let that &#x3D; this</span><br><span class=\"line\">    wx.chooseImage(&#123;</span><br><span class=\"line\">      count: 1,</span><br><span class=\"line\">      sizeType: [&#39;original&#39;, &#39;compressed&#39;],</span><br><span class=\"line\">      sourceType: [&#39;album&#39;, &#39;camera&#39;],</span><br><span class=\"line\">      success: res &#x3D;&gt; &#123;</span><br><span class=\"line\">        console.log(&#39;choose successfully&#39;,res)</span><br><span class=\"line\">        wx.cloud.uploadFile(&#123;</span><br><span class=\"line\">          cloudPath: new Date().getTime() + &#39;.png&#39;,</span><br><span class=\"line\">          filePath: res.tempFilePaths[0], &#x2F;&#x2F; 文件路径</span><br><span class=\"line\">          success: function (res) &#123;</span><br><span class=\"line\">            console.log(&#39;upload successfully&#39;, res)</span><br><span class=\"line\">            that.setData(&#123;</span><br><span class=\"line\">              imgURL: res.fileID</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          fail(res) &#123;</span><br><span class=\"line\">            console.log(&#39;upload failed&#39;, res)</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      fail(res) &#123;</span><br><span class=\"line\">        console.log(&#39;choose failed&#39;, res)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"6-查看控制台和模拟器，我们发现如下输出：\"><a href=\"#6-查看控制台和模拟器，我们发现如下输出：\" class=\"headerlink\" title=\"6. 查看控制台和模拟器，我们发现如下输出：\"></a>6. 查看控制台和模拟器，我们发现如下输出：</h3><p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200819222757284.png#pic_center\" alt=\"在这里插入图片描述\"><br><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/2020081923020121.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1BhbmRhMzI1,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h1 id=\"三、选择并上传视频\"><a href=\"#三、选择并上传视频\" class=\"headerlink\" title=\"三、选择并上传视频\"></a>三、选择并上传视频</h1><h2 id=\"使用的API：-1\"><a href=\"#使用的API：-1\" class=\"headerlink\" title=\"使用的API：\"></a>使用的API：</h2><ol>\n<li><p><a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/media/video/wx.chooseVideo.html\" target=\"_blank\" rel=\"noopener\">wx.chooseVideo</a></p>\n</li>\n<li><p><a href=\"https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/storage/uploadFile/client.uploadFile.html\" target=\"_blank\" rel=\"noopener\">wx.cloud.uploadFile</a></p>\n</li>\n</ol>\n<h2 id=\"实现步骤-1\"><a href=\"#实现步骤-1\" class=\"headerlink\" title=\"实现步骤\"></a>实现步骤</h2><p>同上，把图片API相关代码换为如下即可</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">wx.chooseVideo(&#123;</span><br><span class=\"line\">  sourceType: [&#39;album&#39;,&#39;camera&#39;],</span><br><span class=\"line\">  maxDuration: 600,</span><br><span class=\"line\">  camera: &#39;back&#39;,</span><br><span class=\"line\">  success(res) &#123;</span><br><span class=\"line\">    console.log(res.tempFilePath)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"四、选择并上传多媒体文件（图片-视频）\"><a href=\"#四、选择并上传多媒体文件（图片-视频）\" class=\"headerlink\" title=\"四、选择并上传多媒体文件（图片+视频）\"></a>四、选择并上传多媒体文件（图片+视频）</h1><h2 id=\"使用的API：-2\"><a href=\"#使用的API：-2\" class=\"headerlink\" title=\"使用的API：\"></a>使用的API：</h2><ol>\n<li><p><a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/media/video/wx.chooseMedia.html\" target=\"_blank\" rel=\"noopener\">wx.chooseMedia</a></p>\n</li>\n<li><p><a href=\"https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/storage/uploadFile/client.uploadFile.html\" target=\"_blank\" rel=\"noopener\">wx.cloud.uploadFile</a></p>\n</li>\n</ol>\n<h2 id=\"实现步骤-2\"><a href=\"#实现步骤-2\" class=\"headerlink\" title=\"实现步骤\"></a>实现步骤</h2><p>同上，把图片API相关代码换为如下即可</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">wx.chooseMedia(&#123;</span><br><span class=\"line\">  count: 9,</span><br><span class=\"line\">  mediaType: [&#39;image&#39;,&#39;video&#39;],</span><br><span class=\"line\">  sourceType: [&#39;album&#39;, &#39;camera&#39;],</span><br><span class=\"line\">  maxDuration: 300,</span><br><span class=\"line\">  camera: &#39;back&#39;,</span><br><span class=\"line\">  success(res) &#123;</span><br><span class=\"line\">    console.log(res.tempFiles.tempFilePath)</span><br><span class=\"line\">    console.log(res.tempFiles.size)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"五、实现类似朋友圈效果\"><a href=\"#五、实现类似朋友圈效果\" class=\"headerlink\" title=\"五、实现类似朋友圈效果\"></a>五、实现类似朋友圈效果</h1><h2 id=\"效果\"><a href=\"#效果\" class=\"headerlink\" title=\"效果\"></a>效果</h2><p>编辑并share页面如下：<br><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200820100623691.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1BhbmRhMzI1,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>点击分享以后，跳转到以前share过的朋友圈页面，点击左上角可以返回，如下：<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200820101912679.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1BhbmRhMzI1,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h2><p>本demo会用到微信小程序的云开发功能，包括云数据库，云存储</p>\n<h2 id=\"实现步骤-3\"><a href=\"#实现步骤-3\" class=\"headerlink\" title=\"实现步骤\"></a>实现步骤</h2><h3 id=\"1-云开发环境的初始化\"><a href=\"#1-云开发环境的初始化\" class=\"headerlink\" title=\"1. 云开发环境的初始化\"></a>1. 云开发环境的初始化</h3><p>详见：<a href=\"https://blog.csdn.net/Panda325/article/details/108117775\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/Panda325/article/details/108117775</a></p>\n<h3 id=\"2-新建page\"><a href=\"#2-新建page\" class=\"headerlink\" title=\"2. 新建page\"></a>2. 新建page</h3><p>新建两个page<code>share</code>和<code>pyq</code>，<code>share</code>用于编辑文案并选择配图，<code>pyq</code>用于查看以前发过的朋友圈<br><code>app.json</code>的<code>pages</code>字段如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&quot;pages&quot;: [</span><br><span class=\"line\">    &quot;pages&#x2F;share&#x2F;share&quot;,</span><br><span class=\"line\">    &quot;pages&#x2F;pyq&#x2F;pyq&quot;</span><br><span class=\"line\">  ],</span><br></pre></td></tr></table></figure>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200820102112926.png#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"3-share页面\"><a href=\"#3-share页面\" class=\"headerlink\" title=\"3. share页面\"></a>3. <code>share</code>页面</h3><p> <code>share</code>页面从上到下依次是：多行输入框 <code>textarea</code>，选择图片的按钮 <code>button</code>，分享按钮 <code>button</code><br> <code>share.wxml</code>如下：<br> <figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"> &lt;textarea placeholder&#x3D;&quot;输入您的文案&quot; bindblur&#x3D;&quot;bindTextAreaBlur&quot;</span><br><span class=\"line\">    value&#x3D;&quot;&#123;&#123;details&#125;&#125;&quot; class&#x3D;&#39;text&#39;&gt; &lt;&#x2F;textarea&gt;</span><br><span class=\"line\">&lt;input&gt;\\n\\n&lt;&#x2F;input&gt;</span><br><span class=\"line\">&lt;button bindtap&#x3D;&quot;seleteAndUploadPicture&quot;&gt;</span><br><span class=\"line\">&lt;image src&#x3D;&#39;https:&#x2F;&#x2F;ss0.bdstatic.com&#x2F;70cFvHSh_Q1YnxGkpoWK1HF6hhy&#x2F;it&#x2F;u&#x3D;2444066247,3899866315&amp;fm&#x3D;26&amp;gp&#x3D;0.jpg&#39;&gt;&lt;&#x2F;image&gt;</span><br><span class=\"line\">&lt;&#x2F;button&gt;</span><br><span class=\"line\">&lt;input&gt;\\n\\n&lt;&#x2F;input&gt;</span><br><span class=\"line\">&lt;button bindtap&#x3D;&quot;share&quot;&gt;分享&lt;&#x2F;button&gt;</span><br></pre></td></tr></table></figure><br>  <code>share.js</code>如下：<br> <figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">const DB &#x3D; wx.cloud.database().collection(&quot;pyq&quot;)</span><br><span class=\"line\">Page(&#123;</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    details: &#39;&#39;,</span><br><span class=\"line\">    imgURL: &#39;&#39;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  bindTextAreaBlur: function (e) &#123;</span><br><span class=\"line\">    console.log(e.detail.value);</span><br><span class=\"line\">    var that &#x3D; this;</span><br><span class=\"line\">    that.setData(&#123;</span><br><span class=\"line\">      details: e.detail.value</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  seleteAndUploadPicture() &#123;</span><br><span class=\"line\">    let that &#x3D; this</span><br><span class=\"line\">    wx.chooseImage(&#123;</span><br><span class=\"line\">      count: 1,</span><br><span class=\"line\">      sizeType: [&#39;original&#39;, &#39;compressed&#39;],</span><br><span class=\"line\">      sourceType: [&#39;album&#39;, &#39;camera&#39;],</span><br><span class=\"line\">      success: res &#x3D;&gt; &#123;</span><br><span class=\"line\">        console.log(&#39;choose successfully&#39;, res)</span><br><span class=\"line\">        that.setData(&#123;</span><br><span class=\"line\">          imgURL: res.tempFilePaths[0]</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      fail(res) &#123;</span><br><span class=\"line\">        console.log(&#39;choose failed&#39;, res)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  share() &#123;</span><br><span class=\"line\">    console.log(&#39;调用share的方法&#39;)</span><br><span class=\"line\">    let that &#x3D; this</span><br><span class=\"line\">    wx.cloud.uploadFile(&#123;</span><br><span class=\"line\">      cloudPath: new Date().getTime() + &#39;.png&#39;,</span><br><span class=\"line\">      filePath: this.data.imgURL, &#x2F;&#x2F; 文件路径</span><br><span class=\"line\">      success: function (res) &#123;</span><br><span class=\"line\">        console.log(&#39;upload successfully&#39;, res)</span><br><span class=\"line\">        that.setData(&#123;</span><br><span class=\"line\">          imgURL: res.fileID</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      fail(res) &#123;</span><br><span class=\"line\">        console.log(&#39;upload failed&#39;, res)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    DB.add(&#123;</span><br><span class=\"line\">      data: &#123;</span><br><span class=\"line\">        descption: this.data.details,</span><br><span class=\"line\">        imgURL: this.data.imgURL</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      success(res) &#123;</span><br><span class=\"line\">        console.log(&quot;share成功&quot;, res)</span><br><span class=\"line\">        wx.navigateTo(&#123;</span><br><span class=\"line\">          url: &quot;..&#x2F;..&#x2F;pages&#x2F;pyq&#x2F;pyq&quot;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        wx.showToast(&#123;</span><br><span class=\"line\">          title: &#39;成功&#39;,</span><br><span class=\"line\">          icon: &#39;success&#39;,</span><br><span class=\"line\">          duration: 2000</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      fail(res) &#123;</span><br><span class=\"line\">        console.log(&quot;share失败&quot;, res)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure><br>  <code>share.wxss</code>如下：<br> <figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">.text&#123;</span><br><span class=\"line\">  &#x2F;* height: 100rpx;</span><br><span class=\"line\">  line-height: 100rpx; *&#x2F;</span><br><span class=\"line\">  width: 100%;</span><br><span class=\"line\">  font-size: 60rpx;</span><br><span class=\"line\">  background-color: #bfa;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"4-pyq页面\"><a href=\"#4-pyq页面\" class=\"headerlink\" title=\"4. pyq页面\"></a>4. <code>pyq</code>页面</h3><p> <code>pyq.wxml</code>如下：<br> <figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;view wx:for&#x3D;&quot;&#123;&#123;array&#125;&#125;&quot;&gt;</span><br><span class=\"line\">&lt;view&gt;&#123;&#123;index&#125;&#125; : &#123;&#123;item.descption&#125;&#125;&lt;&#x2F;view&gt;</span><br><span class=\"line\">&lt;image src&#x3D;&quot;&#123;&#123;item.imgURL&#125;&#125;&quot;&gt;&lt;&#x2F;image&gt;</span><br><span class=\"line\">&lt;view&gt;\\n&lt;&#x2F;view&gt;</span><br><span class=\"line\">&lt;&#x2F;view&gt;</span><br></pre></td></tr></table></figure><br>  <code>pyq.js</code>如下：<br> <figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">const DB &#x3D; wx.cloud.database().collection(&quot;pyq&quot;)</span><br><span class=\"line\">Page(&#123;</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    array: []</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  onLoad() &#123;</span><br><span class=\"line\">    let that &#x3D; this</span><br><span class=\"line\">    DB.get(&#123;</span><br><span class=\"line\">      success(res) &#123;</span><br><span class=\"line\">        that.setData(&#123;</span><br><span class=\"line\">          array: res.data</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        for (let i &#x3D; 0; i &lt; res.data.length; i++) &#123;</span><br><span class=\"line\">          console.log(res.data[i].descption)</span><br><span class=\"line\">          console.log(res.data[i].imgURL)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure><br> <figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n","categories":["微信小程序"],"tags":["入门","微信小程序云开发"]},{"title":"微信小程序黑马优购（一）","url":"/2020/06/25/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E9%BB%91%E9%A9%AC%E4%BC%98%E8%B4%AD%EF%BC%88%E4%B8%80%EF%BC%89/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\css\\APlayer.min.css\"><script src=\"\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\js\\Meting.min.js\"></script><p>本篇博客将实时更新我学习使用微信小程序搭建范例黑马优购的过程。</p>\n<p>教程地址：<a href=\"https://www.bilibili.com/video/BV1nE41117BQ?p=47\" target=\"_blank\" rel=\"noopener\">https://www.bilibili.com/video/BV1nE41117BQ?p=47</a></p>\n<p>参考文档：<a href=\"https://www.showdoc.cc/128719739414963\" target=\"_blank\" rel=\"noopener\">https://www.showdoc.cc/128719739414963</a></p>\n<h2 id=\"一、-新建小程序项目\"><a href=\"#一、-新建小程序项目\" class=\"headerlink\" title=\"一、 新建小程序项目\"></a>一、 新建小程序项目</h2><p>打开微信开发者工具，新建小程序项目，然后执行如下操作：</p>\n<ol>\n<li><p>app.json中删除”pages/logs/logs”</p>\n</li>\n<li><p>app.json中的window字段改动如下：<code>&quot;navigationBarTitleText&quot;: &quot;黑马优购&quot;</code></p>\n</li>\n<li><p>pages中logs’文件夹删除</p>\n</li>\n<li><p>app.wxss中删除全部内容</p>\n</li>\n<li><p>app.js中删除全部代码，并在vscode中输入wx-app，即可自动补全所需必要代码，再删除globleData</p>\n</li>\n<li><p>pages中index.wxml, index.wxss删除全部语句, index.js中保留必要语句，同上在vscode中输入wx-page</p>\n</li>\n<li><p>pages/index/index.json中，新增如下：<code>&quot;navigationBarTitleText&quot;: &quot;优购首页&quot;</code></p>\n</li>\n<li><p>unils文件夹删除</p>\n<p>至此，目录结构已无冗余，接下来我们新增项目必要的文件夹和文件</p>\n</li>\n</ol>\n<p>##　二、 搭建目录结构</p>\n<p>把目录结构改为如下图所示：</p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://i.loli.net/2020/06/28/49GKD6VP7lmRfEo.png\" alt=\"image-20200625205252095\"></p>\n<p>各个目录的作用如下：</p>\n<ol>\n<li>style： 存放公共样式</li>\n<li>components： 存放组件</li>\n<li>lib： 存放第三方库</li>\n<li>untils： 自己的帮助库</li>\n<li>request： 自己的借口帮助库</li>\n</ol>\n<h2 id=\"三、-搭建项目的页面\"><a href=\"#三、-搭建项目的页面\" class=\"headerlink\" title=\"三、 搭建项目的页面\"></a>三、 搭建项目的页面</h2><p><img src= \"/img/loading.gif\" data-lazy-src=\"https://i.loli.net/2020/06/28/SZEYAydNDWfLqnK.png\" alt=\"image-20200625210001721\"></p>\n<p>在app.json中，修改pages字段，如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&quot;pages&quot;: [ &quot;pages&#x2F;index&#x2F;index&quot;,</span><br><span class=\"line\"></span><br><span class=\"line\"> &quot;pages&#x2F;category&#x2F;index&quot;,</span><br><span class=\"line\"></span><br><span class=\"line\"> &quot;pages&#x2F;goods_list&#x2F;index &quot;,</span><br><span class=\"line\"></span><br><span class=\"line\"> &quot;pages&#x2F;goods_detail&#x2F;index &quot;,</span><br><span class=\"line\"></span><br><span class=\"line\"> &quot;pages&#x2F;cart&#x2F;index&quot;,</span><br><span class=\"line\"></span><br><span class=\"line\"> &quot;pages&#x2F;collect&#x2F;index&quot;,</span><br><span class=\"line\"></span><br><span class=\"line\"> &quot;pages&#x2F;order&#x2F;index&quot;,</span><br><span class=\"line\"></span><br><span class=\"line\"> &quot;pages&#x2F;search&#x2F;index&quot;,</span><br><span class=\"line\"></span><br><span class=\"line\"> &quot;pages&#x2F;user&#x2F;index&quot;,</span><br><span class=\"line\"></span><br><span class=\"line\"> &quot;pages&#x2F;feedback&#x2F;index&quot;,</span><br><span class=\"line\"></span><br><span class=\"line\"> &quot;pages&#x2F;login&#x2F;index&quot;,</span><br><span class=\"line\"></span><br><span class=\"line\"> &quot;pages&#x2F;auth&#x2F;index&quot;,</span><br><span class=\"line\"></span><br><span class=\"line\"> &quot;pages&#x2F;pay&#x2F;index&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"> ],</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"四、-引入字体图标\"><a href=\"#四、-引入字体图标\" class=\"headerlink\" title=\"四、 引入字体图标\"></a>四、 引入字体图标</h2><ol>\n<li><p>打开阿里巴巴字体图标库，地址<a href=\"https://www.iconfont.cn/，选择图标后加入购物车。![image-20200625212648119](https://i.loli.net/2020/06/28/WEayt6IYfjlrzQD.png)\" target=\"_blank\" rel=\"noopener\">https://www.iconfont.cn/，选择图标后加入购物车。![image-20200625212648119](https://i.loli.net/2020/06/28/WEayt6IYfjlrzQD.png)</a></p>\n</li>\n<li><p>复制下图中链接在浏览器中打开，页面打开后复制页面内所有的内容。</p>\n</li>\n<li><p>在style中新建iconfont.wxss,粘贴刚才复制的全部内容。</p>\n</li>\n<li><p>在app.wxss中导入字体图标，app.wxss加入如下代码<code>@import &quot;./styles/iconfont.wxss&quot;;</code></p>\n</li>\n<li><p>用法测试：在pages/index/index.wxml中输入如下代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;view&gt;首页\t</span><br><span class=\"line\">\t&lt;text class&#x3D;&quot;iconfont incon-shoucang1&quot;&gt;&lt;&#x2F;text&gt;</span><br><span class=\"line\">&lt;&#x2F;view&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">## 五、 搭建项目tabber结构</span><br><span class=\"line\"></span><br><span class=\"line\">1. 在app.json的window字段同层级下新增如下代码：</span><br><span class=\"line\"></span><br><span class=\"line\">   &#96;&#96;&#96; </span><br><span class=\"line\">   &quot;tabBar&quot;: &#123;</span><br><span class=\"line\">       &quot;color&quot;: &quot;#999&quot;,</span><br><span class=\"line\">       &quot;selectedColor&quot;: &quot;#ff2d4a&quot;,</span><br><span class=\"line\">       &quot;backgroundColor&quot;: &quot;#fafafa&quot;,</span><br><span class=\"line\">       &quot;position&quot;: &quot;bottom&quot;,</span><br><span class=\"line\">       &quot;borderStyle&quot;: &quot;black&quot;,</span><br><span class=\"line\">       &quot;list&quot;: [</span><br><span class=\"line\">         &#123;</span><br><span class=\"line\">           &quot;pagePath&quot;: &quot;pages&#x2F;index&#x2F;index&quot;,</span><br><span class=\"line\">           &quot;text&quot;: &quot;首页&quot;,</span><br><span class=\"line\">           &quot;iconPath&quot;: &quot;icons&#x2F;home.png&quot;,</span><br><span class=\"line\">           &quot;selectedIconPath&quot;: &quot;icons&#x2F;home1.png&quot;</span><br><span class=\"line\">         &#125;,</span><br><span class=\"line\">         &#123;</span><br><span class=\"line\">           &quot;pagePath&quot;: &quot;pages&#x2F;category&#x2F;index&quot;,</span><br><span class=\"line\">           &quot;text&quot;: &quot;分类&quot;,</span><br><span class=\"line\">           &quot;iconPath&quot;: &quot;icons&#x2F;cart.png&quot;,</span><br><span class=\"line\">           &quot;selectedIconPath&quot;: &quot;icons&#x2F;cart1.png&quot;</span><br><span class=\"line\">         &#125;,</span><br><span class=\"line\">         &#123;</span><br><span class=\"line\">           &quot;pagePath&quot;: &quot;pages&#x2F;cart&#x2F;index&quot;,</span><br><span class=\"line\">           &quot;text&quot;: &quot;购物车&quot;,</span><br><span class=\"line\">           &quot;iconPath&quot;: &quot;icons&#x2F;category.png&quot;,</span><br><span class=\"line\">           &quot;selectedIconPath&quot;: &quot;icons&#x2F;category1.png&quot;</span><br><span class=\"line\">         &#125;,</span><br><span class=\"line\">         &#123;</span><br><span class=\"line\">           &quot;pagePath&quot;: &quot;pages&#x2F;user&#x2F;index&quot;,</span><br><span class=\"line\">           &quot;text&quot;: &quot;我的&quot;,</span><br><span class=\"line\">           &quot;iconPath&quot;: &quot;icons&#x2F;me.png&quot;,</span><br><span class=\"line\">           &quot;selectedIconPath&quot;: &quot;icons&#x2F;me1.png&quot;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">       ]</span><br><span class=\"line\">     &#125;,</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>各字段说明详见开发者文档。</p>\n</li>\n</ol>\n<h2 id=\"六、初始化页面样式\"><a href=\"#六、初始化页面样式\" class=\"headerlink\" title=\"六、初始化页面样式\"></a>六、初始化页面样式</h2><ol>\n<li><p>在app.wxss中加入如下代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">page,view,text,swiper,swiper-item,image,navigator&#123;</span><br><span class=\"line\">  padding: 0;</span><br><span class=\"line\">  margin: 0;</span><br><span class=\"line\">  box-sizing: border-box;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;* </span><br><span class=\"line\">  主题颜色 </span><br><span class=\"line\">  支持变量</span><br><span class=\"line\">*&#x2F;</span><br><span class=\"line\">page&#123;</span><br><span class=\"line\">  --themeColor:#eb4450;</span><br><span class=\"line\">  font-size: 28rpx;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用主题颜色</p>\n<p>在index.wxss中加入如下代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;* pages&#x2F;index&#x2F;index.wxss *&#x2F;</span><br><span class=\"line\">view&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;* 使用主题颜色 *&#x2F;</span><br><span class=\"line\"></span><br><span class=\"line\">  color:var(--themeColor);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n","categories":["微信小程序"],"tags":["入门","黑马优购"]},{"title":"解决GitHub下载速度慢的方法","url":"/2020/08/18/%E8%A7%A3%E5%86%B3GitHub%E4%B8%8B%E8%BD%BD%E9%80%9F%E5%BA%A6%E6%85%A2%E7%9A%84%E6%96%B9%E6%B3%95/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\css\\APlayer.min.css\"><script src=\"\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\js\\Meting.min.js\"></script><h2 id=\"GitHub下载慢的问题\"><a href=\"#GitHub下载慢的问题\" class=\"headerlink\" title=\"GitHub下载慢的问题\"></a>GitHub下载慢的问题</h2><p>很多小伙伴说啊这个GitHub的下载速度很慢，那么本期视屏我给大家准备了几个可以提升速度的方法非常的简单</p>\n<h2 id=\"码云\"><a href=\"#码云\" class=\"headerlink\" title=\"码云\"></a>码云</h2><p>码云作为国内的代码托管厂商，速度是非常快的，我们可以使用码云来作为中转站</p>\n<h2 id=\"使用cnpmjs镜像\"><a href=\"#使用cnpmjs镜像\" class=\"headerlink\" title=\"使用cnpmjs镜像\"></a>使用cnpmjs镜像</h2><p>这个方法更加的简单,只需要修改你的路径<code>github.com</code>为<code>github.com.cnpmjs.org</code></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 之前</span></span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/ZhengLin-Li/leaning-spider-scu-jwc.git</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用cnpmjs</span></span><br><span class=\"line\">git <span class=\"built_in\">clone</span>  https://github.com.cnpm.org/ZhengLin-Li/leaning-spider-scu-jwc.git</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"使用jsdelivr加速\"><a href=\"#使用jsdelivr加速\" class=\"headerlink\" title=\"使用jsdelivr加速\"></a>使用jsdelivr加速</h2><p>jsdelivr可免费提供CDN加速，我们一般用来给自己的博客加速，或者制作一个免费的图床</p>\n<p>同样的它也可以加速我们的GitHub，当我们要快速获取项目中的某个文件的时候就可以使用这个方式</p>\n<p>它的使用也非常简单，我们将<code>github.com</code>修改为<code>cdn.jsdelivr.net</code>同时将<code>/blob/</code>修改为<code>@</code></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 之前</span></span><br><span class=\"line\">https://github.com/vuejs/vue/blob/dev/README.md</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用jsdelivr</span></span><br><span class=\"line\">https://cdn.jsdelivr.net/gh/vuejs/vue@dev/README.md</span><br></pre></td></tr></table></figure>\n\n<p>此时速度就非常快了</p>\n","categories":["git"],"tags":["git","github"]},{"title":"浅析动物农场","url":"/2020/06/28/%E6%B5%85%E6%9E%90%E5%8A%A8%E7%89%A9%E5%86%9C%E5%9C%BA/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\css\\APlayer.min.css\"><script src=\"\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\js\\Meting.min.js\"></script><h1 id=\"书籍资源\"><a href=\"#书籍资源\" class=\"headerlink\" title=\"书籍资源\"></a>书籍资源</h1><p>动物农场（译文经典版）epub格式电子书</p>\n<p>链接：<a href=\"https://pan.baidu.com/s/10fNbTN1_zJokyxZQFQ6eVw\" target=\"_blank\" rel=\"noopener\">https://pan.baidu.com/s/10fNbTN1_zJokyxZQFQ6eVw</a><br>提取码：tm3g </p>\n<p>动物农场的后浪问题：<a href=\"https://mp.weixin.qq.com/s?srcid=&amp;scene=22&amp;sharer_sharetime=1588998963415&amp;mid=2247485320&amp;sharer_shareid=ded2fc85fa0f2a75c0e6cd17d67c6c3c&amp;sn=463c7495c61e4dc5c73263aba10fe5e9&amp;idx=1&amp;__biz=MzIxMzc2NjY0NA%3D%3D&amp;chksm=97b09f13a0c71605556b92facfc1ba46e4742b9d8b903071a8df735fe8b004bc0ab4d851e498&amp;mpshare=1#rd\" target=\"_blank\" rel=\"noopener\">https://mp.weixin.qq.com/s?srcid=&amp;scene=22&amp;sharer_sharetime=1588998963415&amp;mid=2247485320&amp;sharer_shareid=ded2fc85fa0f2a75c0e6cd17d67c6c3c&amp;sn=463c7495c61e4dc5c73263aba10fe5e9&amp;idx=1&amp;__biz=MzIxMzc2NjY0NA%3D%3D&amp;chksm=97b09f13a0c71605556b92facfc1ba46e4742b9d8b903071a8df735fe8b004bc0ab4d851e498&amp;mpshare=1#rd</a></p>\n<h1 id=\"人物关系\"><a href=\"#人物关系\" class=\"headerlink\" title=\"人物关系\"></a>人物关系</h1><ol>\n<li><p>老少校——也就是那头曾经获奖的公猪，昔年他参展时的报名是维林敦帅哥，在农场里真可谓德高望重，每一只动物都不惜少睡个把小时，十分乐意来听听他要讲些什么。</p>\n</li>\n<li><p>三条狗，分别叫做蓝铃铛、杰茜和钳爪。</p>\n</li>\n<li><p>两匹拉套干重活的马，一匹叫拳击手，一匹叫紫苜蓿，紫苜蓿是一匹母性洋溢的壮实雌马，现在步入其中年期，在生育过四胎之后，她再也没能重塑自己昔日的体态风韵。拳击手则是个庞然大物，几乎有六英尺高，论力气顶得上寻常的马两匹合起来那么大。顺着他鼻梁长就白白的一道毛色，使他的相貌总有那么点儿傻里傻气，而他的智能也确实算不上出类拔萃，不过凭着其坚忍不拔的性格和惊天动地的干劲，他还是到处赢得大家的尊敬。</p>\n</li>\n<li><p>白山羊慕莉尔和驴子本杰明。后者在农场里算得上最资深的动物，脾气也是最坏的。他难得说话，一旦开口通常会发表一些冷嘲热讽的怪论，例如他会说上帝赐给他尾巴以便驱赶苍蝇，然而他宁愿尾巴和苍蝇都不要。在农场的动物中，惟独他从来不笑。倘若被问到这是为什么，他会说他看不出来有什么值得一笑。不过，他对拳击手倒是佩服得五体投地，尽管并不公开承认这一点；他俩每每一块儿到果园后面的一小块牧地去共度星期天，互相紧挨着吃草，可就是从不搭话。</p>\n</li>\n<li><p>失去了母亲的小鸭有气无力地细声叫着鱼贯而入，一边左顾右盼，想找一块他们不至于被踩踏的地方。紫苜蓿用她一条巨大的前腿权当一堵墙，把小鸭子围拢来</p>\n</li>\n<li><p>给琼斯先生拉双轮轻便车的莫丽，那匹长得挺俊、却相当愚蠢的白母马</p>\n</li>\n<li><p>末了一个来到的是一只猫，她照例环视四周，先看看哪儿最暖和，最后生生地从拳击手和紫苜蓿之间挤了进去；少校讲话时她从头至尾一直在那里发出轻微的呜噜声表示心满意足，少校说些什么她连一句也没在听。</p>\n</li>\n<li><p>摩西——那是一只驯化了的乌鸦</p>\n<p>有些动物的名字，在英文里是有含义的。<br>比如克洛弗含义是“苜蓿”，博克塞是“拳击手”,三头猪的名字，分别是斯诺鲍尔、斯奎勒和拿破仑。<br>斯诺鲍尔，Snowball，无论造反夺取政权还是其后捍卫政权，他都身先士卒；他又是七大戒律的起草人和风车工程的设计者，属于动物农场上有理想有干法的最高领导人之一。后来，在与拿破仑单挑的斗争中大败，被拿破仑定性为“卖国贼”（多么熟悉的欲加之罪啊）。在拿破仑成为独裁者后，动物农场的阶级斗争随之开始。只要破坏活动发生了，十之有九会归罪斯诺鲍尔。连老实巴交的奶牛们都会表态说：“斯诺鲍尔悄悄溜进了她们的牛圈，在她们睡觉时把她们的牛奶挤没了。”然而，斯诺鲍尔被驱逐出了农场后，是生是死都早是个问题了。<br>斯奎勒，squealer，英文词根等于汉语的“哇哇叫”“尖声叫”“号叫”等意；加了er，名词化，相当于汉语里的“尖叫的动物”，俚语里有“告密者”的意思。他陪伴在拿破仑左右，上蹿下跳，叽哩哇啦，他的言行是纳粹政权里的戈培尔式的，一个很独特的角色，巧舌如簧、颠倒黑白是他的拿手好戏，他始终如一的基调是：<br>“正是为了你们的利益，我们才喝牛奶，吃那些苹果。你们知道，如果我们猪猡对你们玩忽职守，会发生什么情况吗？琼斯会回来！是的，琼斯会回来！千真万确，同志们。”<br>特供怎么建立的？特权怎么产生的？腐败怎么发生的？这就是理论基础。在极权主义社会里，这样的宣传部长式的角色，在古今中外的历史上确实是史无前例的。审查书籍的刀笔吏有的，审查作品的内务大臣有的，但是企图控制、指挥、统一、支配人的思想的宣传部长，却是二十世纪纳粹政权才发明出来的。名叫宣传部长，实际上是传声筒。什么领袖讲话啦、二百五方针啦、各种指示啦、红头文件啦，五花八门，而中心只有一个：我说好就是好，不好也好；我说坏就是坏，不坏也坏。你们敢不听吗？……剿灭自由思想的方式方法无所不用其极。然而，但凡有一分真诚，是人就相信，思想是控制不了的。控制思想的结果，只能是双重思想泛滥成灾。动物农场这个动物社会，最后一步步走向堕落，宣传部长斯奎勒心知肚明，所以他狐假虎威，后来不得不随时带着两条猛犬出入各种宣传场合。<br>“拿破仑”这个名字，嗨，怎么说呢，不管法国那个小个子皇帝在法国历史上发挥过什么有益的作用，但是在自由知识分子的心目中，他只是一个专制者，一个风光一时的皇帝。奥威尔用这个名字的用意，这点是很清楚的。动物农场上的这个拿破仑，奥威尔描写他的形象，使用的文字与描写劳模博克塞的字数相当，说他“体格硕大，长相狰狞”，“平素不大爱说话，但是以凡事自有主张而出名”。创建动物农场初期，他对斯诺鲍尔的各种计划和各种委员会没有兴趣，只说“教育青少年比给那些成年人干任何事情都重要”。他从娃娃抓起的教育，就是豢养那九条猛犬，为他日后驱逐斯诺鲍尔、独揽大权打下了军队加警察的坚实基础。关于修建风车的投票大会，是拿破仑和斯诺鲍尔你死我活的关键战役，斯诺鲍尔滔滔不绝地讲了大半天修建风车的光明前景，广大动物都被动员起来了，但是拿破仑一句“瞎扯淡”就否定了，随着他“扯尖嗓门儿一声怪叫”，九只猛犬一起扑向斯诺鲍尔，斯诺鲍尔只得落荒而逃，从此在动物农场上消失。拿破仑的专政从此拉开了序幕。斯诺鲍尔被驱逐的第三个星期日，拿破仑出尔反尔，宣布修建风车。要修就要大跃进，加班加点，谁缺席把谁的“食物配额减掉一半”。他的一项新政策是“动物农场要和邻近的农场进行贸易活动”。紧接着他带领猪们住进了琼斯的农场住宅，放风说这是“领袖”的工作需要。住上了人的住宅，就要睡人的床，在人的厨房进食，在人的客厅接待客人。为了显示动物农场的富足，他下令弄虚作假，用沙子装满粮仓。为了和外界进行贸易，他下令把母鸡的蛋统统收缴，连孵小鸡的蛋也不留……群众不服吗？召开群众大会，他带着九条猛犬主持会议，只要他“扯尖嗓子叫了一声”，那些猛犬就向特定目标扑去，拉出来示众，在他们坦白了“罪过”之后，那些猛犬就“立即把他们的喉咙咬断”……四只有独立看法的猪死了，三只试图护蛋闹事的鸡死了，一只隐藏过一穗玉米的鹅死了，一只往水池里尿过尿的羊死了，另两只谋杀了“特别忠于拿破仑的老公羊”的羊也死了……“就这样，坦白和处决的故事整了一起又一起，后来一堆尸体摞在了拿破仑的蹄子旁，空气里充满了血腥味儿。这是自从赶走琼斯后闻所未闻的。”……大清洗之后，拿破仑树立了自己的绝对权威，却也让他感到风声鹤唳，“四只猛犬夜间守卫在他的床边，每个床角一只猛犬，一只名叫品克耶的小猪被委以重任，负责品尝拿破仑吃的所有食物，生怕食物里有毒”……<br>拿破仑这个形象，我没觉得可气可恨，还觉得他直接而专横得可爱。他就是一只大权独揽的伯克郡大公猪，兽性即本性，如同动物世界里的狮子逮住猎物一口咬断喉咙那样痛痛快快，无须人的花花肠子弯弯绕，只要一副造反者大获成功的形象，打下江山就要独享江山，杀害同类就要亲临现场，寡人御榻岂能容他人打瞌睡，我是流氓我怕谁？于是乎，“到了四月份，动物农场宣布成立共和国，这下很有必要选出一位总统。候选人只有一个，拿破仑，因此就一致当选了”。于是乎，“地契虽然在他的名下，但是为猪们所共同享有”。于是乎，“小猪全是黑白花斑，因为拿破仑是农场上唯一的种猪，大家很容易猜出来谁是小猪的父亲”。于是乎，“原来一只猪站在后腿上行走了”……<br>猪乎？人乎？<br>人乎？猪乎？</p>\n</li>\n</ol>\n<h1 id=\"浅析\"><a href=\"#浅析\" class=\"headerlink\" title=\"浅析\"></a>浅析</h1><p>小说里涉及狗、马、山羊、驴子、乌鸦和猪，这些动物有名有姓，算角色；绵羊、奶牛、猫、鸽子和成群的鸡与鹅，无名无姓，算群众演员。<br>  谁可以成为《动物农场》上的主人公呢？一般人可能会在狗身上做文章，而且写狗狗的文学作品也确实不少。不过，奥威尔似乎只给三只狗起了名字——布鲁贝尔、杰西和平彻，因为正是这三只有名有姓的狗生了九只小狗，被拿破仑包养起来，后来成了他一步步独揽大权并成功地当上独裁者的有效工具，相当于希特勒豢养的无恶不作的党卫队，从而把狗的属性写到了本质。当然，马是人类最得力的好朋友，写马的文字，古今中外，几近汗牛充栋的程度。奥威尔写了三匹有名有姓的马，每一匹马代表一种性格，而且几乎是为了给这三匹马做映衬，才写了动物农场的哲学家驴子本杰明、略识文字的白山羊缪里尔。乌鸦摩西代表鸟类，没有腿而有翅膀，来去自由的一个形象，代表没有腿的动物。我没有想到奥威尔会把猪写成主人公，有名有姓的有四只；一只称为少校的老公猪，没有名字，但是十章容量的小说，作者用了几乎整整一章写少校的讲话，其核心价值是“人是所有动物的老爷”“所有人都是敌人”“所有动物都是同志”。待到动物们揭竿而起，把庄园农庄攻打下来，建立了政权，开始筹建乌托邦了，正是根据少校临终前的这番讲话的核心价值，归纳出了神圣的宪章性质的“七大戒律”：<br>　　一、凡是两条腿走路的都是敌人。<br>　　二、凡是四条腿走路的，或者长翅膀的，都是朋友。<br>　　三、任何动物都不准穿衣服。<br>　　四、任何动物都不准在床上睡觉。<br>　　五、任何动物都不准喝酒。<br>　　六、任何动物都不准杀害其他动物。<br>　　七、所有动物都生而平等。<br>　　这七大戒律最后围绕着独裁者拿破仑转圈圈，越转越小，把他舒舒服服地包裹起来，起先虽然只是在特定戒律上抠字眼地稍加涂改，但内容却发生了根本改变，比如第四条“任何动物都不准在床上睡觉”涂改成了“任何动物都不准在有被褥的床上睡觉”；动物在柴火窝里睡觉，充其量铺盖一些麦秸或杂草，铺了被褥睡觉就是人的行为了。又比如第五条“任何动物都不准喝酒”涂改成了“任何动物不得饮酒过度”。喝酒是享乐，酗酒则是堕落，这更是人的行为。动物们造反夺取政权，与人不共戴天，夺取政权后却偷偷摸摸地向人的生活靠近，而这样的更改戒律，又都是为了适应统治阶级和独裁者的一步步腐化和享受。到了最后，更具深刻寓意的是，七大戒律最后剩下了三行字，归纳成了一条规定：<br>  所有的动物生而平等，但是一些动物生来要比，另一些动物更平等。<br>写到这里，我又想起奥威尔另外一句深刻的语句：<br>  如果你们有你们的低等动物感到满意，那么我们有我们的低等阶级感到满意。<br>　　<br>  动物们造反，就是造琼斯的反。琼斯是庄园农庄的农场主，因为酗酒，渐渐对农场疏于管理，最终导致动物们揭竿而起，一举夺得庄园农庄，改名动物农场，成立了史无前例的动物当家的乌托邦。建立乌托邦是一回事儿，维持乌托邦是另一回事儿。乌托邦即“无托邦”，没有任何依托为依据，统治者便可以随心所欲地重塑他们心目中的无托邦。理想一个个破灭，怪事、丑事和恶事一起又一起地发生。贫穷始终像恶魔一样挥之不去，定量配给成了习以为常的分配制度。每当下层动物们发生重大疑问而发出不同声音、而统治者又理屈词穷时，统治阶级强词夺理的最后一根稻草就是：你们不想让琼斯回来吧。奥威尔是要用他笔下的动物形象来揭示人类极权主义的恐怖、丑陋和罪恶，不只是新旧社会的问题。在动物农场这个社会里，动物是主要角色，人是配角，却不可或缺。<br>  三匹有名有姓的马——博克塞、克洛弗和莫丽。莫丽是一匹年轻的牝马，爱捯饬，爱显摆，总忘不了在鬃毛上系一条彩带。动物农场走上集体道路后，她是集体活动中最爱迟到早退的主儿，干活儿也是磨洋工的时候多，卖力气干活儿的时候少，究其原因似乎主要是她吃不到她爱吃的一样东西——糖。中国古圣人说“食色性也”，把“食”放在第一位，无比正确。无论动物还是人类，从小挨饿而不得不觅食的主儿，一定比饱食终日的主儿要机灵得多，智慧得多。作者写莫丽的文字很有限，但是一个最有远见的问题却由她提了出来：造反之后还有糖吃吗？莫丽受不了苦，喜欢过甜蜜的日子，提出这个问题仅仅是因为她的胃，但是这个问题却是全书中最有远见的，类似鲁迅的“娜拉出走后怎么办？”莫丽是个现实主义者，看见造反后的日子每况愈下，定量配给都难以保障，吃糖成了奢望，便悄悄地溜之大吉，跑到别的农场去给人拉马车，从而过上了她有糖吃的甜蜜的生活，意味深长。<br>  克洛弗也是一匹牝马，总是陪伴在博克塞的身边。在劳动中她拼力劳作，试图减轻博克塞的劳动强度；在生活上她关心博克塞的冷暖，尤其在博克塞的蹄子受伤之后。和她的名字克洛弗一样，在英语里是“苜蓿”，又称“三叶草”，她恨不得让博克塞吃下肚子变得更强壮，有一个健康强大的身体，顶得住繁重的体力劳动。她是作者心目中的下等阶级的贤妻良母，不过作品赋予她的另一项使命似乎更重要：她是在动物农场每次发生重大变故后，唯一一个使用记忆的角色。她是文盲，脑子也不是很好使，但是她有心，有记忆，每当遇到疑惑不解的问题，就求教驴子本杰明或者白山羊缪里尔，或者帮助她回忆过去的事实，或者到“七大戒律”前面求证。记忆是奥威尔追究极权主义实质的重要依据，在《动物农场》里只是通过克洛弗这个动物角色进行了比较浅层的探讨，在动物们的身上似乎也只能写到为止，而只有在《一九八四》一书里人成为角色后，才能系统地揭示。尽管如此，克洛弗这匹善良的母马，留给人的印象足够深刻的。正是这匹善良的母马，在动物农场发生触目惊心的“大清洗”之后，作者给她来了画龙点睛之笔：“克洛弗望着山坡，不禁泪水盈眶。如果她能讲出她的思绪，千言万语汇成一句话：他们多年前费尽艰辛推翻人类，他们追求的目的可不是目前的样子……他们盼到一个谁都不敢讲心里话的时代，那些凶猛的狂吠的猛犬横行，而你不得不目睹你的同志在坦白了莫须有的罪过后统统被撕成了碎片。”随着年龄老去，克洛弗的记忆也变成了碎片，尤其目睹博克塞被送往屠宰场之后。<br>  就下层阶级而言，博克塞是作者着墨最多的一个形象：第一章写到动物们在一次秘密会议上粉墨登场，只对博克塞交代得最具体，描写也最多，用了大约一百零几个字。在六万字一部小说里，作者惜墨如金，这样刻画形象的篇幅算是很大了，而就这一百多个字来看，作者还有重点，那就是：他鼻梁上有一道白毛，他因此看上去有几分傻相，而实际上他也不是一流脑子。这匹身架高大到足有两匹普通马相加的个头与力量的大牡马，何止不具备一流智商，连把字母表认到D的智商都没有。他就知道干活儿，动物农场一半的活儿都是他干的，尤其在建设风车这样的超级工程中，他就是中流砥柱，而他也是在这项工程中被累垮的。<br>  从早到晚，他拉啊，拽啊，哪里有最累的活儿，他就出现在哪里。他早和一只打鸣的公鸡达成协议，请他早上提前半小时叫他起来，赶在别人前面，把那些最需要力气的活儿自愿干完，赶在日常的活儿开始之前。<br>动物农场是集体农庄，集体农庄上的劳模就是这个样子。如今，年纪五十岁开外的人，只要在这样的生产形式下干过活儿的人，这样的形象是再熟悉不过的，是一种既让人爱戴又让人可怜甚至遭人憎恨的形象。在我心目中最接近博克塞似的人物，是我们村里的一个我应该叫叔叔的农人，在我们村做了多年劳模，干活儿真的是披星戴月，积劳成疾。他最著名的事迹是他一大早上地，睡眼惺忪，经常胳肢窝夹了一个扫炕的笤帚，到了地头才明白把笤帚误当成了小勾锄。在生产队和公社组织的劳模讲用会上，他一次又一次讲起这些个事实，把一个农民很丢人的事实讲成了光荣事迹。当然，他的讲用材料是地方御用文人舞文弄墨的结果。在小说中，博克塞这样的劳模，与其说干活儿卖力是特色，不如说“他鼻梁上有一道白毛，他因此看上去有几分傻相”更含意味。博克塞的座右铭是：“拿破仑一贯正确，我会更加努力干活儿。”博克塞这样的劳模悲剧的一面，是要大家一起跟他学得愚蠢起来，殉道般地听任统治者恣意摆布。<br>  这样的形象之所以还受下层动物普遍尊重，劳动好是一个方面，品德底线是另一个方面。博克塞有良知，讲诚实，而正因这两点，在动物农场几个需要统一思想的场合里他表示了不同声音，便差一点成为大清洗的对象，多亏他力大无穷，眼见“三只猛犬……气汹汹扑来，用他的大蹄子迎住他们，在空中把一只猛犬踢中，一下子把他死死地踩在地上”。在一个控制脑力也控制体力的极权体制里，强有力的武力是一种绝对牵制，这也是独裁者必要时拉拢武夫的根本原因。博克塞不用独裁者拉拢，因他一生唯独裁者命是听，他最后走进了一辆前往屠宰场的货车，对上面“艾尔弗雷德·西蒙兹，马匹屠夫以及皮胶熬制人”的广告视而不见，不只是因为他不识字，更是因为他一辈子只会盲从。<br>  关于劳模博克塞的结局，官方说用货车送他去养老院了，而民众根据货车上的广告而断定是把他送进屠宰场了。作者给出的说法是：“听说猪们不知从什么地方弄来一笔钱，又为他们自己购买了一箱威士忌。”读者很容易忽略这个细节，而译者是想方设法让译文突出这样的信息：辛劳一生的博克塞的血肉钱，为猪们换来了威士忌！<br>  生活潦倒的琼斯到底没有回来，但是比琼斯更残忍的人还是回来过的。<br>群众是多数，多数总是最难对付的，而统治者对付多数最好的办法就是愚弄加欺骗。绵羊、奶牛、猫、鸽子和成群的鸡与鹅是动物农场上的群众，猫喜欢独来独往，鸽子可以飞来飞去做哨兵，奶牛越多就越有统治阶级的奶喝，这样，鸡、鹅和绵羊这类多数就成了更低一级的基本群众了，而这三种动物又有区别：鸡与鹅可以下蛋，供统治者享用，而绵羊只有杀身才能成仁。就人类而言，猪羊任其宰割，在家畜中命是最贱的。如今猪做了统治者，绵羊们不需要杀身成仁了，但必须为统治者服务，成为吹鼓手才算有了与压迫深反抗重相应的主人翁地位。于是，在动物农场宣传部长斯奎勒的专门指导和调教下，绵羊们成了群众动物中争先恐后充当墙头草的喽啰。每到群众性的阶级斗争大会或者领导互相倾轧的核心会议的关键时刻，绵羊们都会气势如虹地喊出：四条腿好，两条腿坏。这是政治形势的需要，因此在政治形势需要他们改换口径的时候，他们又会毫不犹豫地喊出“四条腿好，两条腿更好”的口号。这不是绵羊的脑子转弯快，而是绵羊任人宰割的天性决定的。群众在造反活动、游行示威、公审大会等场合确实声势浩大、势不可当，但是在分而治之的情况下，尤其利益相关之时，哪怕因为蝇头小利，他们又是最容易充当墙头草的。<br>  奥威尔一生同情下等阶级，对动物农场的群众动物的批评，温和而有分寸，基本是幽默式的讽刺笔触。在星期天的群众大会上，宣传部长斯奎勒“用蹄子夹住一张长长的纸条，给他们念出来一大串数字，表明每一级食物生产按照大好形势看来，都增加百分之二百、百分之三百或者百分之五百不等”；这样的形势报告做过，群众就得表态，一只母鸡因此会扯尖嗓子说：<br>  在我们的领袖拿破仑同志的英明领导下，我六天下了五个鸡蛋。<br>  奶牛们在饮水池边，一边大口喝水，一边由衷地赞扬说：感谢拿破仑同志的英明领导，这水喝来是多么甜啊！<br>  绵羊们在隆重的胜利大会结束时，则会咩咩地引吭高歌，合唱文人墨客精心修改过的《英格兰动物之歌》：<br>  无父的动物们的朋友！<br>  幸福的源头！<br>  食桶的主！啊，我的灵魂会面临<br>  大火，只要我注视您<br>  安详的威严的目光，如同天空的太阳，<br>  拿破仑同志！<br>  在极权体制下生活过的人们，对这样的表达是耳熟能详的，但是对生活在英格兰这样一片自由土地上的奥威尔来说，能形象地准确地写出这样的文字，不能不令人叹服。</p>\n","categories":["读书"],"tags":["社科"]},{"title":"Wolfram Alpha 算微积分指令集合","url":"/2020/06/29/Wolfram-Alpha-%E7%AE%97%E5%BE%AE%E7%A7%AF%E5%88%86%E6%8C%87%E4%BB%A4%E9%9B%86%E5%90%88/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\css\\APlayer.min.css\"><script src=\"\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\js\\Meting.min.js\"></script><h1 id=\"一、Wolfram-Alpha介绍\"><a href=\"#一、Wolfram-Alpha介绍\" class=\"headerlink\" title=\"一、Wolfram Alpha介绍\"></a>一、Wolfram Alpha介绍</h1><p>Wolfram Alpha网址：<a href=\"https://www.wolframalpha.com/\" target=\"_blank\" rel=\"noopener\">https://www.wolframalpha.com/</a></p>\n<p>WolframAlpha是开发计算数学应用软件的沃尔夫勒姆研究公司开发出的新一代的搜索引擎，能根据问题直接给出答案的网站，用户在搜索框键入需要查询的问题后，该搜索引擎将直接向用户返回答案。</p>\n<p>它是基于 Wolfram 早期旗舰产品 <a href=\"https://baike.baidu.com/item/Mathematica\" target=\"_blank\" rel=\"noopener\">Mathematica</a>，一款囊括了计算机代数、符号和数值计算、可视化和统计功能的计算平台和工具包开发的。其数据来源包括学术网站和出版物、商业网站和公司、科学机构等等。</p>\n<h1 id=\"二、计算微积分（图片版）\"><a href=\"#二、计算微积分（图片版）\" class=\"headerlink\" title=\"二、计算微积分（图片版）\"></a>二、计算微积分（图片版）</h1><p>那么怎么使用Wolfram Alpha来计算微积分呢？</p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://i.loli.net/2020/06/29/iRwNft9jPGu3Yna.gif\" alt=\"\"></p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://i.loli.net/2020/06/29/QKNiA9V4lF5ehjH.gif\" alt=\"view_1_DGFPSw0wdoOatkCLh_ffwwmdwdHiFZTi3DpqnHqkJf0=\"></p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://i.loli.net/2020/06/29/U2xfBstVX7YnMzJ.gif\" alt=\"wKh2ClzcsvWAdBmEAAEWkzPRifs071\"></p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://i.loli.net/2020/07/23/bOAtU8WTQGYXvxE.png\" alt=\"image008\"></p>\n<p>说明： 点击公式进入WolframAlpha网页，然后将其中的函数换成需要计算函数即可。</p>\n<p><a href=\"http://www.wolfram.com/\" target=\"_blank\" rel=\"noopener\">http://www.wolfram.com/</a></p>\n<h1 id=\"三、计算微积分（表格版）\"><a href=\"#三、计算微积分（表格版）\" class=\"headerlink\" title=\"三、计算微积分（表格版）\"></a>三、计算微积分（表格版）</h1><table>\n<thead>\n<tr>\n<th><strong>求极限</strong></th>\n<th><a href=\"http://www.wolframalpha.com/input/?i=+lim+sin2x%2F(e^x-1)%2C+x->0\" target=\"_blank\" rel=\"noopener\">lim sin2x/(e^x-1), x-&gt;0</a></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><a href=\"http://www.wolframalpha.com/input/?i=lim+arctan(1%2Fx)+as+x->0%2B\" target=\"_blank\" rel=\"noopener\">lim arctan(1/x) as x-&gt;0+</a>   <a href=\"http://www.wolframalpha.com/input/?i=+lim+exp(1%2Fx)+as+x->0-\" target=\"_blank\" rel=\"noopener\">lim exp(1/x) as x-&gt;0-</a></td>\n<td>单侧极限</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"http://www.wolframalpha.com/input/?i=lim+x^2sin(3%2Fx^2)\" target=\"_blank\" rel=\"noopener\">lim x^2sin(3/x^2)) , x-&gt;oo</a>+%2C+x-&gt;oo)   <a href=\"http://www.wolframalpha.com/input/?i=lim+arctan(x)%2C+x->-oo\" target=\"_blank\" rel=\"noopener\">lim arctan(x), x-&gt;-oo</a></td>\n<td>x 趋于无穷大：oo</td>\n<td></td>\n</tr>\n<tr>\n<td><strong>求导数</strong></td>\n<td><a href=\"http://www.wolframalpha.com/input/?i=derivative+of+(2x^2%2B3)sin(x)\" target=\"_blank\" rel=\"noopener\">derivative of (2x^2+3)sin(x)</a>   或  <a href=\"http://www.wolframalpha.com/input/?i=derivative+(2x^2%2B3)sin(x)\" target=\"_blank\" rel=\"noopener\">derivative (2x^2+3)sin(x)</a></td>\n<td>导数：derivative</td>\n</tr>\n<tr>\n<td><a href=\"http://www.wolframalpha.com/input/?i=d%2Fdx+(2x^2%2B3)sin(x)\" target=\"_blank\" rel=\"noopener\">d/dx (2x^2+3)sin(x)</a></td>\n<td>分式记号</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"http://www.wolframalpha.com/input/?i=((2x^2%2B3)sin(x))’\" target=\"_blank\" rel=\"noopener\">((2x^2+3)sin(x))’</a></td>\n<td>撇记号，最简单</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"http://www.wolframalpha.com/input/?i=derivative+of+(2x^2%2B3)sin(x)+at+x%3D3\" target=\"_blank\" rel=\"noopener\">derivative of (2x^2+3)sin(x) at x=3</a></td>\n<td>求一点的导数</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"http://www.wolframalpha.com/input/?i=d%2Fdx+(2x^2%2B3)sin(x)+at+x%3D3\" target=\"_blank\" rel=\"noopener\">d/dx (2x^2+3)sin(x) at x=3</a></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"http://www.wolframalpha.com/input/?i=((2x^2%2B3)sin(x))' target=\"_blank\" rel=\"noopener\"+at+x%3D3\">((2x^2+3)sin(x))’ at x=3</a></td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th><strong>二阶导数</strong></th>\n<th><a href=\"http://www.wolframalpha.com/input/?i=second+derivative+of+sin(2x^2%2B3)\" target=\"_blank\" rel=\"noopener\">second derivative of sin(2x^2+3)</a></th>\n<th>二阶导数：second derivative</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><a href=\"http://www.wolframalpha.com/input/?i=2nd+derivative+sin(2x^2%2B3)\" target=\"_blank\" rel=\"noopener\">2nd derivative sin(2x^2+3)</a></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"http://www.wolframalpha.com/input/?i=(sin(2x^2%2B3))' target=\"_blank\" rel=\"noopener\"'\">(sin(2x^2+3))’’</a></td>\n<td>撇记号，最简单：打两撇</td>\n<td></td>\n</tr>\n<tr>\n<td><strong>三阶导数</strong></td>\n<td><a href=\"http://www.wolframalpha.com/input/?i=(sin(2x^2%2B3))' target=\"_blank\" rel=\"noopener\"''\">(sin(2x^2+3))’’’</a></td>\n<td>撇记号，最简单：打三撇</td>\n</tr>\n<tr>\n<td><strong>10阶导数</strong></td>\n<td><a href=\"http://www.wolframalpha.com/input/?i=10th+derivative+1%2F(1%2Bx)\" target=\"_blank\" rel=\"noopener\">10th derivative 1/(1+x)</a></td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"http://www.wolframalpha.com/input/?i=d^10%2Fdx^10(1%2F(1%2Bx))\" target=\"_blank\" rel=\"noopener\">d^10/dx^10(1/(1+x))</a></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"http://www.wolframalpha.com/input/?i=(exp(x)cos(2x^2))' target=\"_blank\" rel=\"noopener\"'+at+x%3D1\">(exp(x)cos(2x^2))’’ at x=1</a></td>\n<td>x=1处的2阶导数</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"http://www.wolframalpha.com/input/?i=7th+derivative+of+1%2F(1%2Bx)+at+0\" target=\"_blank\" rel=\"noopener\">7th derivative of 1/(1+x) at 0</a></td>\n<td>0处的7阶导数</td>\n<td></td>\n</tr>\n<tr>\n<td><strong>参数方程的导数</strong></td>\n<td><a href=\"http://www.wolframalpha.com/input/?i=+(sin(t))' target=\"_blank\" rel=\"noopener\"%2F(2t^2)'\">(sin(t))’/(2t^2)’</a></td>\n<td>x=2t^2, y=sint 的导数：dy/dx</td>\n</tr>\n<tr>\n<td><a href=\"http://www.wolframalpha.com/input/?i=(cost)' target=\"_blank\" rel=\"noopener\"%2F(sin2t)'+at+t%3Dpi%2F6\">(cost)’/(sin2t)’ at t=pi/6</a></td>\n<td>x=sin2t, y=cost 在 t=pi/6 处的导数</td>\n<td></td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th><strong>隐函数的导数</strong></th>\n<th><a href=\"http://www.wolframalpha.com/input/?i=-(+d%2Fdx(+1-x*exp(y)-y+)+)%2F(+d%2Fdy(+1-x*exp(y)-y+)+)\" target=\"_blank\" rel=\"noopener\">-( d/dx( 1-x<em>exp(y)-y ) )/( d/dy( 1-x</em>exp(y)-y ) )</a></th>\n<th>方程 y=1-xe^y 的导数:dy/dx</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>求方程的根</strong></td>\n<td><a href=\"http://www.wolframalpha.com/input/?i=solve+x^3%2B1.1*x^2%2B0.9*x-1.4%3D0\" target=\"_blank\" rel=\"noopener\">solve x^3+1.1<em>x^2+0.9</em>x-1.4=0</a></td>\n<td>解方程求根（包括复根）</td>\n</tr>\n<tr>\n<td><a href=\"http://www.wolframalpha.com/input/?i=real+root+x^3%2B1.1*x^2%2B0.9*x-1.4%3D0\" target=\"_blank\" rel=\"noopener\">real root x^3+1.1<em>x^2+0.9</em>x-1.4=0</a></td>\n<td>只求实根(real root)</td>\n<td></td>\n</tr>\n<tr>\n<td><strong>求函数的驻点</strong></td>\n<td><a href=\"http://www.wolframalpha.com/input/?i=stationary+point+of+x^3-2x%2B3\" target=\"_blank\" rel=\"noopener\">stationary point of x^3-2x+3</a></td>\n<td>驻点：stationary point</td>\n</tr>\n<tr>\n<td><strong>求函数的极值</strong></td>\n<td><a href=\"http://www.wolframalpha.com/input/?i=local+min+x%2F(x^2%2B2)\" target=\"_blank\" rel=\"noopener\">local min x/(x^2+2)</a></td>\n<td>极小值：local min</td>\n</tr>\n<tr>\n<td><a href=\"http://www.wolframalpha.com/input/?i=local+max+x%2F(x^2%2B2)\" target=\"_blank\" rel=\"noopener\">local max x/(x^2+2)</a></td>\n<td>极大值：local max</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"http://www.wolframalpha.com/input/?i=local+max+2sin(2x)^2-(5%2F2)cos(x%2F2)%2C+x%3D0+to+pi\" target=\"_blank\" rel=\"noopener\">local max 2sin(2x)^2-(5/2)cos(x/2), x=0 to pi</a></td>\n<td>求指定区间内的极大值</td>\n<td></td>\n</tr>\n<tr>\n<td><strong>求函数的最值</strong></td>\n<td><a href=\"http://www.wolframalpha.com/input/?i=global+min+of+2sin(2x)^2-(5%2F2)cos(x%2F2)^2+for+1<%3Dx<%3D3\" target=\"_blank\" rel=\"noopener\">global min of 2sin(2x)^2-(5/2)cos(x/2)^2 for 1&lt;=x&lt;=3</a></td>\n<td>求指定区间内的最小值</td>\n</tr>\n<tr>\n<td><strong>求曲线的拐点</strong></td>\n<td><a href=\"http://www.wolframalpha.com/input/?i=inflection+point+of+x%2F(x^2%2B2)\" target=\"_blank\" rel=\"noopener\">inflection point of x/(x^2+2)</a></td>\n<td>拐点：inflection point</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th><strong>求不定积分</strong></th>\n<th><a href=\"http://www.wolframalpha.com/input/?i=integrate++x^2%2Bsin(x)%2B1\" target=\"_blank\" rel=\"noopener\">integrate x^2+sin(x)+1</a></th>\n<th>积分：integrate</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><a href=\"http://www.wolframalpha.com/input/?i=int+xarctan(x)\" target=\"_blank\" rel=\"noopener\">int xarctan(x)</a></td>\n<td>int：integrate 的简写</td>\n<td></td>\n</tr>\n<tr>\n<td><strong>求定积分</strong></td>\n<td><a href=\"http://www.wolframalpha.com/input/?i=integrate++x^2%2Bsin(x)%2B1+from+0+to+1+\" target=\"_blank\" rel=\"noopener\">integrate x^2+sin(x)+1 from 0 to 1</a></td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"http://www.wolframalpha.com/input/?i=int++1%2Fsqrt(1-x^2)+%2C+x%3D+0+..1%2F2\" target=\"_blank\" rel=\"noopener\">int 1/sqrt(1-x^2) , x= 0 ..1/2</a></td>\n<td>简单的格式</td>\n<td></td>\n</tr>\n<tr>\n<td><strong>求广义积分</strong></td>\n<td><a href=\"http://www.wolframalpha.com/input/?i=int++xexp(-2x)+from+0+to+oo\" target=\"_blank\" rel=\"noopener\">int xexp(-2x) from 0 to oo</a></td>\n<td>无穷大用两个o表示：oo</td>\n</tr>\n<tr>\n<td><a href=\"http://www.wolframalpha.com/input/?i=+int++1%2F(x^2%2B3)+%2C+x%3D+-oo+..+oo\" target=\"_blank\" rel=\"noopener\">int 1/(x^2+3) , x= -oo .. oo</a></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><strong>求积分变限函数</strong></td>\n<td><a href=\"http://www.wolframalpha.com/input/?i=integrate+texp(-t)+from+0+to+x+\" target=\"_blank\" rel=\"noopener\">integrate texp(-t) from 0 to x</a></td>\n<td>积分上限函数</td>\n</tr>\n<tr>\n<td><a href=\"http://www.wolframalpha.com/input/?i=d%2Fdx+(+int+texp(-t)+from+0+to+x+)\" target=\"_blank\" rel=\"noopener\">d/dx ( int texp(-t) from 0 to x )</a></td>\n<td>积分上限函数求导</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"http://www.wolframalpha.com/input/?i=F(x)%3D%3Dintegrate+texp(-t)+from+ln(x)+to+x^2\" target=\"_blank\" rel=\"noopener\">F(x)==integrate texp(-t) from ln(x) to x^2</a></td>\n<td>积分变限函数</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"http://www.wolframalpha.com/input/?i=d%2Fdx+(integrate+texp(-t)+from+ln(x)+to+x^2+)\" target=\"_blank\" rel=\"noopener\">d/dx (integrate texp(-t) from ln(x) to x^2 )</a></td>\n<td>积分变限函数求导</td>\n<td></td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th><strong>曲线与x轴之间的面积</strong></th>\n<th><a href=\"http://www.wolframalpha.com/input/?i=area+between+2-x^2+and+x-axis\" target=\"_blank\" rel=\"noopener\">area between 2-x^2 and x-axis</a></th>\n<th>曲线y=2-x^2与x轴之间的面积</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>曲线下方的面积</strong></td>\n<td><a href=\"http://www.wolframalpha.com/input/?i=area+under+3-x^2\" target=\"_blank\" rel=\"noopener\">area under 3-x^2</a></td>\n<td>曲线y=3-x^2与x轴之间的面积</td>\n</tr>\n<tr>\n<td><strong>求两曲线之间的面积</strong></td>\n<td><a href=\"http://www.wolframalpha.com/input/?i=area+between+x+and+x^2\" target=\"_blank\" rel=\"noopener\">area between x and x^2</a></td>\n<td>曲线y=x与y=x^2之间的面积</td>\n</tr>\n<tr>\n<td>求两曲线的交点</td>\n<td><a href=\"http://www.wolframalpha.com/input/?i=solve++x^2+%3D+x^3\" target=\"_blank\" rel=\"noopener\">solve x^2 = x^3</a></td>\n<td>曲线y=x^2与y=x^3的交点</td>\n</tr>\n<tr>\n<td><strong>求两曲线之间的面积</strong></td>\n<td><a href=\"http://www.wolframalpha.com/input/?i=area+between+sin(x)+and+cos(2x)+from+x%3D0+to+pi\" target=\"_blank\" rel=\"noopener\">area between sin(x) and cos(2x) from x=0 to pi</a></td>\n<td>曲线y=sinx与y=cos2x (0&lt;x&lt;pi) 之间的面积</td>\n</tr>\n<tr>\n<td><strong>旋转体的体积</strong></td>\n<td><a href=\"http://www.wolframalpha.com/input/?i=V%3Dpi*Integrate+(sin(x)^2%2C+x%3D0..2)\" target=\"_blank\" rel=\"noopener\">V=pi*Integrate (sin(x)^2, x=0..2)</a></td>\n<td>曲线y=sinx (0&lt;x&lt;2) 与x轴 之间的区域绕x轴旋转</td>\n</tr>\n<tr>\n<td><strong>旋转体的体积</strong></td>\n<td><a href=\"http://www.wolframalpha.com/input/?i=V%3Dpi*Integrate+(x^2-sin(x)^2%2C+x%3D0..pi)\" target=\"_blank\" rel=\"noopener\">V=pi*Integrate (x^2-sin(x)^2, x=0..pi)</a></td>\n<td>曲线y=x与y=sinx (0&lt;x&lt;pi) 之间的区域绕x轴旋转</td>\n</tr>\n<tr>\n<td><strong>求曲线的弧长</strong></td>\n<td><a href=\"http://www.wolframalpha.com/input/?i=int+sqrt(1%2B+(+(x^2)' target=\"_blank\" rel=\"noopener\"+)^2)%2C+x%3D1..3\">int sqrt(1+ ( (x^2)’ )^2), x=1..3</a></td>\n<td>曲线 y=x^2 (1&lt;x&lt;3) 的弧长</td>\n</tr>\n<tr>\n<td><a href=\"http://www.wolframalpha.com/input/?i=int++sqrt(+(sin(t^3))' target=\"_blank\" rel=\"noopener\"+^2%2B(t)'^2+)%2C+t%3D-1..1\">int sqrt( (sin(t^3))’ ^2+(t)’^2 ), t=-1..1</a></td>\n<td>参数曲线 x=sin(t^3), y=t (-1&lt;t&lt;1) 的弧长</td>\n<td></td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th><strong>向量的点积</strong></th>\n<th><a href=\"http://www.wolframalpha.com/input/?i=(1%2C2%2C4)+.+(-2%2C3%2C6)+\" target=\"_blank\" rel=\"noopener\">(1,2,4) . (-2,3,6)</a></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>向量的叉积</strong></td>\n<td><a href=\"http://www.wolframalpha.com/input/?i=+(1%2C2%2C4)+cross+(-2%2C3%2C6)\" target=\"_blank\" rel=\"noopener\">(1,2,4) cross (-2,3,6)</a></td>\n<td>叉积：cross</td>\n</tr>\n<tr>\n<td><strong>求偏导数</strong></td>\n<td><a href=\"http://www.wolframalpha.com/input/?i=+d%2Fdx+sin(x^2%2B2y)\" target=\"_blank\" rel=\"noopener\">d/dx sin(x^2+2y)</a></td>\n<td>对 x 求偏导数</td>\n</tr>\n<tr>\n<td><a href=\"http://www.wolframalpha.com/input/?i=d%2Fdy+sin(x^2%2B2y)\" target=\"_blank\" rel=\"noopener\">d/dy sin(x^2+2y)</a></td>\n<td>对 y 求偏导数</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"http://www.wolframalpha.com/input/?i=d%2Fdx+sin(x^2%2B2y)+at+(1%2C2)\" target=\"_blank\" rel=\"noopener\">d/dx sin(x^2+2y) at (1,2)</a></td>\n<td>在某一点的偏导数</td>\n<td></td>\n</tr>\n<tr>\n<td><strong>高阶偏导数</strong></td>\n<td><a href=\"http://www.wolframalpha.com/input/?i=d%2Fdx+d%2Fdx+x^3*y^2+-+3*x*y^3+-+x*y+%2B+1\" target=\"_blank\" rel=\"noopener\">d/dx d/dx x^3<em>y^2 - 3</em>x<em>y^3 - x</em>y + 1</a></td>\n<td>对 x 的二阶偏导数</td>\n</tr>\n<tr>\n<td><a href=\"http://www.wolframalpha.com/input/?i=d%2Fdy+d%2Fdx+x^3*y^2+-+3*x*y^3+-+x*y+%2B+1\" target=\"_blank\" rel=\"noopener\">d/dy d/dx x^3<em>y^2 - 3</em>x<em>y^3 - x</em>y + 1</a></td>\n<td>混合偏导数</td>\n<td></td>\n</tr>\n<tr>\n<td><strong>隐函数的偏导数</strong></td>\n<td><a href=\"http://www.wolframalpha.com/input/?i=-(+d%2Fdx(+exp(z)-xyz+)+)%2F(+d%2Fdz+(exp(z)-xyz)+)\" target=\"_blank\" rel=\"noopener\">-( d/dx( exp(z)-xyz ) )/( d/dz (exp(z)-xyz) )</a></td>\n<td>方程e^z=xyz的偏导数：dz/dx</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th><strong>向量函数的导数</strong></th>\n<th><a href=\"http://www.wolframalpha.com/input/?i=(t^2%2C+4t-3%2C+2t^2-6t)' target=\"_blank\" rel=\"noopener\"\">(t^2, 4t-3, 2t^2-6t)’</a></th>\n<th>速度</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>向量函数的二阶导数</strong></td>\n<td><a href=\"http://www.wolframalpha.com/input/?i=(t^2%2C+e^t%2C+2t^3)' target=\"_blank\" rel=\"noopener\"'\">(t^2, e^t, 2t^3)’’</a></td>\n<td>加速度</td>\n</tr>\n<tr>\n<td><strong>求梯度</strong></td>\n<td><a href=\"http://www.wolframalpha.com/input/?i=grad++x^2%2Bcos(2y)+\" target=\"_blank\" rel=\"noopener\">grad x^2+cos(2y) </a></td>\n<td>二元函数的梯度</td>\n</tr>\n<tr>\n<td>用 grad 或 del 求梯度</td>\n<td><a href=\"http://www.wolframalpha.com/input/?i=del++x^2y%2Bcos(xy)%2Bxyz^2\" target=\"_blank\" rel=\"noopener\">del x^2y+cos(xy)+xyz^2</a></td>\n<td>三元函数的梯度</td>\n</tr>\n<tr>\n<td><strong>求方向导数</strong></td>\n<td><a href=\"http://www.wolframalpha.com/input/?i=+derivative+of+x^2%2Bcos(2y)+in+the+direction+(2%2C-3)+at+(1%2C2)\" target=\"_blank\" rel=\"noopener\">derivative of x^2+cos(2y) in the direction (2,-3) at (1,2)</a></td>\n<td></td>\n</tr>\n<tr>\n<td><strong>求二元函数的驻点</strong></td>\n<td><a href=\"http://www.wolframalpha.com/input/?i=stationary+point+of++x^3-y^3%2B3*x^2%2B3*y^2-9*x\" target=\"_blank\" rel=\"noopener\">stationary point of x^3-y^3+3<em>x^2+3</em>y^2-9*x</a></td>\n<td>驻点：stationary point</td>\n</tr>\n<tr>\n<td><strong>求二元函数的极值</strong></td>\n<td><a href=\"http://www.wolframalpha.com/input/?i=local+max++x^3-y^3%2B3*x^2%2B3*y^2-9*x\" target=\"_blank\" rel=\"noopener\">local max x^3-y^3+3<em>x^2+3</em>y^2-9*x</a></td>\n<td>极大值：local max</td>\n</tr>\n<tr>\n<td>或 <a href=\"http://www.wolframalpha.com/input/?i=+maximize++x^3-y^3%2B3*x^2%2B3*y^2-9*x\" target=\"_blank\" rel=\"noopener\">maximize x^3-y^3+3<em>x^2+3</em>y^2-9*x</a></td>\n<td>最大化：maximize</td>\n<td></td>\n</tr>\n<tr>\n<td><strong>求二元函数的最值</strong></td>\n<td><a href=\"http://www.wolframalpha.com/input/?i=minimize+2(xy%2B2%2Fx%2B2%2Fy)++for+x>0%2C+y>0\" target=\"_blank\" rel=\"noopener\">minimize 2(xy+2/x+2/y) for x&gt;0, y&gt;0</a></td>\n<td>最小化：minimize</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th><strong>求条件极值</strong></th>\n<th><a href=\"http://www.wolframalpha.com/input/?i=maximize+xy+on+x%2By%3D1\" target=\"_blank\" rel=\"noopener\">maximize xy on x+y=1</a></th>\n<th>求函数xy在x+y=1上的最大值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><a href=\"http://www.wolframalpha.com/input/?i=maximize++xyz+on++2*(x*y+%2B+y*z+%2B+z*x)+%3D1%2C+x>0%2Cy>0%2Cz>0+\" target=\"_blank\" rel=\"noopener\">maximize xyz on 2<em>(x</em>y + y<em>z + z</em>x) =1, x&gt;0,y&gt;0,z&gt;0</a></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"http://www.wolframalpha.com/input/?i=maximize+sqrt(x^2%2By^2%2Bz^2)+on+z%3Dx^2%2By^2+and+x%2By%2Bz%3D1\" target=\"_blank\" rel=\"noopener\">maximize sqrt(x^2+y^2+z^2) on z=x^2+y^2 and x+y+z=1</a></td>\n<td>两个约束条件</td>\n<td></td>\n</tr>\n<tr>\n<td><strong>二重积分</strong></td>\n<td><a href=\"http://www.wolframalpha.com/input/?i=int++x^2y%2Bx%2C++y%3D2..4%2C+x%3D1..3\" target=\"_blank\" rel=\"noopener\">int x^2y+x, y=2..4, x=1..3</a></td>\n<td>矩形区域</td>\n</tr>\n<tr>\n<td><a href=\"http://www.wolframalpha.com/input/?i=int++xy+%2C+x%3D1..2%2C+y%3D1..x\" target=\"_blank\" rel=\"noopener\">int xy , x=1..2, y=1..x</a></td>\n<td>先y, 后x</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"http://www.wolframalpha.com/input/?i=int++xy+%2C+y%3D-1..2%2C+x%3Dy^2..y%2B2\" target=\"_blank\" rel=\"noopener\">int xy , y=-1..2, x=y^2..y+2</a></td>\n<td>先x, 后y</td>\n<td></td>\n</tr>\n<tr>\n<td><strong>三重积分</strong></td>\n<td><a href=\"http://www.wolframalpha.com/input/?i=int++x+%2C+x%3D0..1%2C+y%3D0..(1-x)%2F2%2C+z%3D0..1-x-2y\" target=\"_blank\" rel=\"noopener\">int x , x=0..1, y=0..(1-x)/2, z=0..1-x-2y</a></td>\n<td>积分次序:：z, y,x</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th><strong>级数求和</strong></th>\n<th><a href=\"http://www.wolframalpha.com/input/?i=sum+3*(2%2F5)^n%2C+n%3D1..oo\" target=\"_blank\" rel=\"noopener\">sum 3*(2/5)^n, n=1..oo</a></th>\n<th>等比级数求和</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>用 sum 求和</td>\n<td><a href=\"http://www.wolframalpha.com/input/?i=sum+1%2Fn^2%2C+n%3D1..oo\" target=\"_blank\" rel=\"noopener\">sum 1/n^2, n=1..oo</a></td>\n<td>p-级数求和</td>\n</tr>\n<tr>\n<td><a href=\"http://www.wolframalpha.com/input/?i=sum+(-1)^(n%2B1)%2Fn^2%2C+n%3D1..oo\" target=\"_blank\" rel=\"noopener\">sum (-1)^(n+1)/n^2, n=1..oo</a></td>\n<td>交错级数求和</td>\n<td></td>\n</tr>\n<tr>\n<td><strong>幂级数的和函数</strong></td>\n<td><a href=\"http://www.wolframalpha.com/input/?i=sum+(-1)^(n%2B1)*x^(2n-1)%2F(2n-1)%2Cn%3D1...oo\" target=\"_blank\" rel=\"noopener\">sum (-1)^(n+1)*x^(2n-1)/(2n-1),n=1…oo</a></td>\n<td></td>\n</tr>\n<tr>\n<td><strong>函数的泰勒公式</strong></td>\n<td><a href=\"http://www.wolframalpha.com/input/?i=series+xsin(x)+to+order+5\" target=\"_blank\" rel=\"noopener\">series xsin(x) to order 5</a>      series：级数</td>\n<td>xsinx在x=0处的5阶泰勒公式</td>\n</tr>\n<tr>\n<td>用series 或 taylor</td>\n<td><a href=\"http://www.wolframalpha.com/input/?i=+taylor+e^x+at+x%3D1+to+order+5\" target=\"_blank\" rel=\"noopener\">taylor e^x at x=1 to order 5</a>   taylor：泰勒</td>\n<td>e^x在x=1处的5阶泰勒公式</td>\n</tr>\n<tr>\n<td><strong>解微分方程</strong></td>\n<td><a href=\"http://www.wolframalpha.com/input/?i=+y’%3D2xy\" target=\"_blank\" rel=\"noopener\">y’=2xy</a></td>\n<td>直接输入微分方程</td>\n</tr>\n<tr>\n<td><a href=\"http://www.wolframalpha.com/input/?i=y’%3De^(2x-y)%2C+y(0)%3D0\" target=\"_blank\" rel=\"noopener\">y’=e^(2x-y), y(0)=0</a></td>\n<td>求特解</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"http://www.wolframalpha.com/input/?i=(1%2Bx^2)y’’%3D2xy’%2C+y(0)%3D1%2C+y’(0)%3D3\" target=\"_blank\" rel=\"noopener\">(1+x^2)y’’=2xy’, y(0)=1, y’(0)=3</a></td>\n<td>二阶微分方程的特解</td>\n<td></td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th><strong>高阶线性微分方程</strong></th>\n<th><a href=\"http://www.wolframalpha.com/input/?i=y’’-5y’%2B6y%3Dxe^(2x)\" target=\"_blank\" rel=\"noopener\">y’’-5y’+6y=xe^(2x)</a></th>\n<th>二阶微分方程的通解</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><a href=\"http://www.wolframalpha.com/input/?i=+y’’%2By%2Bsin(2x)%3D0%2C+y(pi)%3D1%2C+y’(pi)%3D1\" target=\"_blank\" rel=\"noopener\">y’’+y+sin(2x)=0, y(pi)=1, y’(pi)=1</a></td>\n<td>二阶微分方程的特解</td>\n<td></td>\n</tr>\n<tr>\n<td><strong>作 图</strong></td>\n<td><img src= \"/img/loading.gif\" data-lazy-src=\"http://b.bst.126.net/common/portrait/face/preview/face1.gif\" alt=\"WolframAlpha 快速指南 - calculus - 高等数学\"></td>\n<td></td>\n</tr>\n<tr>\n<td><strong>一元函数图形</strong></td>\n<td><a href=\"http://www.wolframalpha.com/input/?i=+plot+y%3Dx^3-x^2-x%2B1%2C+x%3D-2..2\" target=\"_blank\" rel=\"noopener\">plot y=x^3-x^2-x+1, x=-2..2</a></td>\n<td>作图：plot</td>\n</tr>\n<tr>\n<td><a href=\"http://www.wolframalpha.com/input/?i=plot+xsinx%2Carctanx\" target=\"_blank\" rel=\"noopener\">plot xsinx,arctanx</a></td>\n<td>两条曲线</td>\n<td></td>\n</tr>\n<tr>\n<td><strong>隐函数的图形</strong></td>\n<td><a href=\"http://www.wolframalpha.com/input/?i=plot+x^3%2By^3%3D6xy\" target=\"_blank\" rel=\"noopener\">plot x^3+y^3=6xy</a></td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"http://www.wolframalpha.com/input/?i=plot+x^3%2By^3%3D6xy%2C+x%3D-4..4%2C+y%3D-4..4\" target=\"_blank\" rel=\"noopener\">plot x^3+y^3=6xy, x=-4..4, y=-4..4</a></td>\n<td>指定范围</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"http://www.wolframalpha.com/input/?i=+plot+x^2%2By^2%3D2x%2C+x%3Dy^3%2B1\" target=\"_blank\" rel=\"noopener\">plot x^2+y^2=2x, x=y^3+1</a></td>\n<td>两条曲线</td>\n<td></td>\n</tr>\n<tr>\n<td><strong>参数曲线</strong></td>\n<td><a href=\"http://www.wolframalpha.com/input/?i=parametric+plot+(t(1-sint)%2Ctcost)+from+t%3D-10+to+10\" target=\"_blank\" rel=\"noopener\">parametric plot (t(1-sint),tcost) from t=-10 to 10</a> parametric plot : 参数方程作图</td>\n<td>参数方程 x=t(1-sint), y=tcost 的图形</td>\n</tr>\n<tr>\n<td><strong>极坐标曲线</strong></td>\n<td><a href=\"http://www.wolframalpha.com/input/?i=polar+plot+1%2Bcost%2C+t%3D0..2pi\" target=\"_blank\" rel=\"noopener\">polar plot 1+cost, t=0..2pi</a>  polar plot: 极坐标作图</td>\n<td>极坐标方程 r=1+cost 的图形</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th><strong>曲面作图</strong></th>\n<th>[plot x^2+y^2, -2</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><a href=\"http://www.wolframalpha.com/input/?i=plot++sqrt(2-x^2-3y^2)\" target=\"_blank\" rel=\"noopener\">plot sqrt(2-x^2-3y^2)</a></td>\n<td></td>\n</tr>\n</tbody></table>\n","tags":["资源分享"]}]