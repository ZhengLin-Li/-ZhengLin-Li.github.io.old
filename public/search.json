[{"title":"Python爬虫入门（一）","url":"/2020/07/20/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8%EF%BC%88%E4%B8%80%EF%BC%89/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\css\\APlayer.min.css\"><script src=\"\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\js\\Meting.min.js\"></script><h1 id=\"总述\"><a href=\"#总述\" class=\"headerlink\" title=\"总述\"></a>总述</h1><p>本来早就想学习下python爬虫了，总是找各种借口，一直拖到现在才开始系统的学习。</p>\n<p>我用的教程是中国大学MOOC上的由北京理工大学开设的Python网络爬虫与信息提取。</p>\n<p>废话不多说，直接开始。</p>\n<h1 id=\"1-网络爬虫之规则\"><a href=\"#1-网络爬虫之规则\" class=\"headerlink\" title=\"1. 网络爬虫之规则\"></a>1. 网络爬虫之规则</h1><h2 id=\"1-1-requests库入门\"><a href=\"#1-1-requests库入门\" class=\"headerlink\" title=\"1.1 requests库入门\"></a>1.1 requests库入门</h2><h3 id=\"1-1-1-requests库简介\"><a href=\"#1-1-1-requests库简介\" class=\"headerlink\" title=\"1.1.1 requests库简介\"></a>1.1.1 requests库简介</h3><ol>\n<li><p>Requests 是唯一的一个非转基因的 Python HTTP 库，人类可以安全享用。</p>\n</li>\n<li><p>安装     <code>pip install requests</code></p>\n</li>\n<li><p>引入    <code>import requests</code></p>\n</li>\n<li><p>7种常用方法</p>\n<p>  <code>requests.request()</code> 构造一个请求，最基础的方法<br>  <code>requests.get()</code>     获得HTML网页的主要方法，对应于HTTP的GET<br>  <code>requests.head()</code>    获得HTML网页头的主要方法，对应于HTTP的HEAD<br>  <code>requests.post()</code>    提交post请求，POST<br>  <code>requests.put()</code>     提交put请求，PUT<br>  <code>requests.patch()</code>   提交局部修改请求,PATCH<br>  <code>requests.delete()</code>  删除请求，DELETE</p>\n</li>\n</ol>\n<ol start=\"5\">\n<li><p>requests库的get()方法</p>\n<p><code>r = requests.get(url)</code><br>该语句的意为构造一个向服务器请求资源的Request对象，返回的是一个包含服务器资源的Response对象，用r来接收。</p>\n</li>\n<li><p>Response对象的属性</p>\n<p><code>r.ststus_code</code>           http请求的返回状态，200为成功<br><code>r.text</code>                  http响应内容的字符串形式，url对应的页面内容<br><code>r.encoding</code>              http header中猜测的编码格式<br><code>r.apparent_encoding</code>     http内容中猜测的响应内容的编码格式，备用<br><code>r.content</code>               http响应内容的二进制形式</p>\n<h3 id=\"1-1-2-通用代码框架\"><a href=\"#1-1-2-通用代码框架\" class=\"headerlink\" title=\"1.1.2 通用代码框架\"></a>1.1.2 通用代码框架</h3></li>\n<li><p>Requests库的异常</p>\n<p><code>requests.ConnectionError</code>   网络连接异常<br><code>requests.HTTPError</code>         http错误异常<br><code>requesrs.URLRequired</code>       URL缺失异常<br><code>requests,ToomanyRedirects</code>  重定向异常，超过最大重定向次数<br><code>requests.ConnectTimeOut</code>    连接远程服务器超时异常<br><code>requests,Time</code>              请求URL超时，超时异常（包括上述的整个请求过程）</p>\n</li>\n<li><p>通用代码框架</p>\n</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getHTMLText</span><span class=\"params\">(url)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        r = requests.get(url, timeout=<span class=\"number\">30</span>)</span><br><span class=\"line\">        r.raise_for_status()</span><br><span class=\"line\">        r.encoding = r.apparent_encoding</span><br><span class=\"line\">        <span class=\"keyword\">return</span> r.text</span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'超时异常'</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    url = <span class=\"string\">\"https://www.baidu.com/\"</span></span><br><span class=\"line\">    print(getHTMLText(url))</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"HTTP协议及Requests库方法\"><a href=\"#HTTP协议及Requests库方法\" class=\"headerlink\" title=\"HTTP协议及Requests库方法\"></a>HTTP协议及Requests库方法</h3><ol>\n<li><p>HTTP协议</p>\n<p>HTTP协议, Hypertext Transfer Protocol, 超文本传输协议。<br>是一个基于“请求与响应”模式的、无状态的应用层协议。<br>采用URL作为定位网络资源的标识。</p>\n</li>\n<li><p>URL</p>\n<p>URL是通过HTTP协议存取资源的Internet路径，一个URL对应一个数据资源。<br>格式为：<a href=\"http://host[:port][path]\">http://host[:port][path]</a><br>host: 合法的Internet主机域名或IP地址<br>port: 端口号，省略端口为80<br>path: 请求资源的路径</p>\n</li>\n<li><p>HTTP协议对资源的操作</p>\n</li>\n</ol>\n<p>GET：发送一个请求来取得服务器上的某一资源。</p>\n<p>HEAD：HEAD和GET是一样的，区别在于HEAD不含有呈现数据，而仅仅是HTTP头信息。</p>\n<p>POST：向服务器提交数据。这个方法用途广泛，几乎目前所有的提交操作都是靠这个完成。</p>\n<p>PUT：这个方法比较少见。HTML表单也不支持这个。本质上来讲， PUT和POST极为相似，都是向服务器发送数据。</p>\n<p>PATCH：向服务器更新数据。</p>\n<p>DELETE：删除某一个资源。</p>\n<ol start=\"4\">\n<li>HTTP协议方法与requests库方法一致。</li>\n</ol>\n","categories":["Python爬虫"],"tags":["Python","爬虫","入门"]},{"title":"Python爬虫实战（一）疫情数据","url":"/2020/08/10/Python%E7%88%AC%E8%99%AB%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89%E7%96%AB%E6%83%85%E6%95%B0%E6%8D%AE/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\css\\APlayer.min.css\"><script src=\"\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\js\\Meting.min.js\"></script><p><a href=\"https://github.com/ZhengLin-Li/leaning-spider-COVID19Situation\" target=\"_blank\" rel=\"noopener\">https://github.com/ZhengLin-Li/leaning-spider-COVID19Situation</a></p>\n<h1 id=\"1-BeautifulSoup的find方法\"><a href=\"#1-BeautifulSoup的find方法\" class=\"headerlink\" title=\"1. BeautifulSoup的find方法\"></a>1. BeautifulSoup的find方法</h1><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># for example</span></span><br><span class=\"line\"></span><br><span class=\"line\">soup.find(<span class=\"string\">'a'</span>) <span class=\"comment\"># 根据标签名查找</span></span><br><span class=\"line\"></span><br><span class=\"line\">soup.find(id=<span class=\"string\">'link1'</span>) <span class=\"comment\"># 根据属性查找</span></span><br><span class=\"line\"></span><br><span class=\"line\">soup.find(attrs=&#123;<span class=\"string\">'id'</span>:<span class=\"string\">'link1'</span>&#125;) <span class=\"comment\"># 根据属性查找</span></span><br><span class=\"line\"></span><br><span class=\"line\">soup.find(test=<span class=\"string\">'aaa'</span>) <span class=\"comment\"># 根据标签文本内容查找</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"2-Tag对象\"><a href=\"#2-Tag对象\" class=\"headerlink\" title=\"2. Tag对象\"></a>2. Tag对象</h1><p>find方法返回的是Tag对象，有如下属性</p>\n<p>Tag对象对应于原始文档中的html标签</p>\n<p>name：标签名称</p>\n<p>attrs：标签属性的键和值</p>\n<p>text：标签的字符串文本</p>\n<h1 id=\"3-正则表达式\"><a href=\"#3-正则表达式\" class=\"headerlink\" title=\"3. 正则表达式\"></a>3. 正则表达式</h1><p>. \\d </p>\n<p>+*?</p>\n<p>()</p>\n<p>[]</p>\n<p>\\</p>\n<p>r原串</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"></span><br><span class=\"line\">rs = re.findall(<span class=\"string\">'\\d'</span>,<span class=\"string\">'123'</span>)</span><br><span class=\"line\">rs = re.findall(<span class=\"string\">'\\d*'</span>,<span class=\"string\">'456'</span>)</span><br><span class=\"line\">rs = re.findall(<span class=\"string\">'\\d+'</span>,<span class=\"string\">'789'</span>)</span><br><span class=\"line\">rs = re.findall(<span class=\"string\">'a+'</span>,<span class=\"string\">'aaabcd'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">print(rs)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 分组的使用</span></span><br><span class=\"line\">rs = re.findall(<span class=\"string\">'\\d&#123;1,2&#125;'</span>,<span class=\"string\">'chuan13zhi2'</span>)</span><br><span class=\"line\">rs = re.findall(<span class=\"string\">'aaa(\\d+)b'</span>,<span class=\"string\">'aaa91b'</span>)</span><br><span class=\"line\">print(rs)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 一般的正则表达式匹配一个\\需要四个\\</span></span><br><span class=\"line\">rs = re.findall(<span class=\"string\">'a\\\\\\\\bc'</span>,<span class=\"string\">'a\\\\bc'</span>)</span><br><span class=\"line\">print(rs)</span><br><span class=\"line\">print(<span class=\"string\">'a\\\\bc'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用r原串</span></span><br><span class=\"line\">rs = re.findall(<span class=\"string\">r'a\\\\rbc'</span>,<span class=\"string\">'a\\\\rbc'</span>)</span><br><span class=\"line\">print(rs)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"4-json字符串互转python数据\"><a href=\"#4-json字符串互转python数据\" class=\"headerlink\" title=\"4. json字符串互转python数据\"></a>4. json字符串互转python数据</h1><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"></span><br><span class=\"line\">json_str = <span class=\"string\">'''[&#123;\"a\":\"thia is a\",</span></span><br><span class=\"line\"><span class=\"string\">\"b\":[1,2,3]&#125;,&#123;\"a\":\"thia is a\",</span></span><br><span class=\"line\"><span class=\"string\">\"b\":[1,2,3]&#125;]'''</span></span><br><span class=\"line\"></span><br><span class=\"line\">rs = json.loads(json_str)</span><br><span class=\"line\">print(rs)</span><br><span class=\"line\">print(type(rs))  <span class=\"comment\"># &lt;class 'list'&gt;</span></span><br><span class=\"line\">print(type(rs[<span class=\"number\">0</span>]))  <span class=\"comment\"># &lt;class 'dict'&gt;</span></span><br><span class=\"line\">print(type(json_str))  <span class=\"comment\"># &lt;class 'str'&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"></span><br><span class=\"line\">json_str = <span class=\"string\">'''[</span></span><br><span class=\"line\"><span class=\"string\">  &#123;</span></span><br><span class=\"line\"><span class=\"string\">    \"a\": \"this is a\",</span></span><br><span class=\"line\"><span class=\"string\">    \"b\": [1, 2,\"熊猫\"]</span></span><br><span class=\"line\"><span class=\"string\">  &#125;,</span></span><br><span class=\"line\"><span class=\"string\">  &#123;</span></span><br><span class=\"line\"><span class=\"string\">    \"c\": \"thia is c\",</span></span><br><span class=\"line\"><span class=\"string\">    \"d\": [1, 2, 3]</span></span><br><span class=\"line\"><span class=\"string\">  &#125;</span></span><br><span class=\"line\"><span class=\"string\">]'''</span></span><br><span class=\"line\"></span><br><span class=\"line\">rs = json.loads(json_str)</span><br><span class=\"line\">json_str = json.dumps(rs,ensure_ascii=<span class=\"literal\">False</span>)</span><br><span class=\"line\">print(json_str)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"5-json格式文件互转python数据\"><a href=\"#5-json格式文件互转python数据\" class=\"headerlink\" title=\"5. json格式文件互转python数据\"></a>5. json格式文件互转python数据</h1><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># json格式文件转python数据</span></span><br><span class=\"line\"><span class=\"keyword\">with</span> open(<span class=\"string\">'data/test.json'</span>) <span class=\"keyword\">as</span> fp:</span><br><span class=\"line\">    python_list = json.load(fp)</span><br><span class=\"line\">    print(python_list)</span><br><span class=\"line\">    print(type(python_list))  <span class=\"comment\"># &lt;class 'list'&gt;</span></span><br><span class=\"line\">    print(type(python_list[<span class=\"number\">0</span>]))  <span class=\"comment\"># &lt;class 'dict'&gt;</span></span><br><span class=\"line\">    print(type(fp))  <span class=\"comment\"># &lt;class '_io.TextIOWrapper'&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">with</span> open(<span class=\"string\">\"data/test1.json\"</span>,<span class=\"string\">'w'</span>) <span class=\"keyword\">as</span> fp:</span><br><span class=\"line\">    json.dump(rs,fp,ensure_ascii=<span class=\"literal\">False</span>)</span><br></pre></td></tr></table></figure>\n\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://i.loli.net/2020/08/08/rQuwR8DGphdTcox.png\" alt=\"image-20200808102225666\"></p>\n","categories":["Python爬虫"],"tags":["Python","爬虫","实战"]},{"title":"c++初探（一）","url":"/2020/09/16/c++%E5%88%9D%E6%8E%A2%EF%BC%88%E4%B8%80%EF%BC%89/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\css\\APlayer.min.css\"><script src=\"\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\js\\Meting.min.js\"></script><h1 id=\"C-运算符重载-简单易懂\"><a href=\"#C-运算符重载-简单易懂\" class=\"headerlink\" title=\"C++运算符重载(简单易懂)\"></a><a href=\"https://www.cnblogs.com/liuchenxu123/p/12538623.html\" target=\"_blank\" rel=\"noopener\">C++运算符重载(简单易懂)</a></h1><p>运算符重载，就是对已有的运算符重新进行定义，赋予其另一种功能，以适应不同的数据类型。</p>\n<p>你可以重定义或重载大部分 C++ 内置的运算符。例如 + 、 - 、 * 、 / 、</p>\n<p>++、–、&gt;&gt;、&lt;&lt;等，这样，你就能使用自定义类型的运算符。</p>\n<h2 id=\"运算符重载的基本格式\"><a href=\"#运算符重载的基本格式\" class=\"headerlink\" title=\"运算符重载的基本格式\"></a>运算符重载的基本格式</h2><p>重载的运算符是带有特殊名称的函数，函数名是由关键字 operator 和</p>\n<p>其后要重载的运算符符号构成的。与其他函数一样，重载运算符有一个</p>\n<p>返回类型和一个参数列表。</p>\n<blockquote>\n<p>Point operator+(const Point &amp;);</p>\n</blockquote>\n<p>运算符重载有两种方式：一种是类内重载（运算符重载函数作为类的成员函数），另一种是类外重载（运算符重载函数作为类的友元函数）</p>\n<h2 id=\"类内重载\"><a href=\"#类内重载\" class=\"headerlink\" title=\"类内重载\"></a>类内重载</h2><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span>&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    Point()&#123;&#125;;</span><br><span class=\"line\">    Point (<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y): x(x),y(y) &#123;&#125;;</span><br><span class=\"line\">    Point <span class=\"keyword\">operator</span>+(<span class=\"keyword\">const</span> Point &amp;a)&#123; <span class=\"comment\">//类内重载，运算符重载函数作为类的成员函数</span></span><br><span class=\"line\">        Point ret;</span><br><span class=\"line\">        ret.x = <span class=\"keyword\">this</span>-&gt;x + a.x;</span><br><span class=\"line\">        ret.y = <span class=\"keyword\">this</span>-&gt;y + a.y;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> x,y;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    Point a(2,4),b(5,3);</span><br><span class=\"line\">    Point c = a + b;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span>&lt;&lt; <span class=\"string\">\"x :\"</span> &lt;&lt; c.x &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"y :\"</span> &lt;&lt; c.y &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当上面的代码被编译和执行时，它会产生下列结果：</p>\n<blockquote>\n<p>x : 7</p>\n<p>y: 7</p>\n</blockquote>\n<p>运算符重载是类内重载时，运算符重载函数作为类的成员函数，以上述代码为例 <strong>a + b 相当于 a 对象调用+方法并且传入参数时 b 对象</strong></p>\n<h2 id=\"类外重载\"><a href=\"#类外重载\" class=\"headerlink\" title=\"类外重载\"></a>类外重载</h2><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span>&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    Point()&#123;&#125;;</span><br><span class=\"line\">    Point (<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y): x(x),y(y) &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">friend</span> Point <span class=\"keyword\">operator</span>+(<span class=\"keyword\">const</span> Point &amp;, <span class=\"keyword\">const</span> Point &amp;);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> x,y;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">Point <span class=\"keyword\">operator</span>+(<span class=\"keyword\">const</span> Point &amp;a,<span class=\"keyword\">const</span> Point &amp;b)&#123;<span class=\"comment\">//类外重载,运算符重载函数作为类的友元函数</span></span><br><span class=\"line\">    Point ret;</span><br><span class=\"line\">    ret.x = a.x + b.x;</span><br><span class=\"line\">    ret.y = a.y + b.y;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">     Point a(2,4),b(5,3);</span><br><span class=\"line\">    Point c = a + b;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span>&lt;&lt; <span class=\"string\">\"x :\"</span> &lt;&lt; c.x &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"y :\"</span> &lt;&lt; c.y &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当上面的代码被编译和执行时，它会产生和上面一样的结果</p>\n<h2 id=\"各种运算符重载实例\"><a href=\"#各种运算符重载实例\" class=\"headerlink\" title=\"各种运算符重载实例\"></a>各种运算符重载实例</h2><p>下面将进行各种运算符重载实例的代码演示，演示几种基本的运算符重载。</p>\n<h3 id=\"插入运算符重载-gt-gt-and-提取运算符重载-lt-lt\"><a href=\"#插入运算符重载-gt-gt-and-提取运算符重载-lt-lt\" class=\"headerlink\" title=\"插入运算符重载&gt;&gt; and 提取运算符重载&lt;&lt;\"></a>插入运算符重载&gt;&gt; and 提取运算符重载&lt;&lt;</h3><p>以提取运算符重载<code>&lt;&lt;</code>为例，<code>cout</code> 是 <code>ostream</code>类的对象。<code>ostream</code> 类和 <code>cout</code> 都是在头文件 <code>&lt;iostream&gt;</code>中声明的。<code>ostream</code> 类将<code>&lt;&lt;</code>重载为成员函数。</p>\n<p>下面我们重载<code>&lt;&lt;</code>使用<code>cout</code>输出a对象</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span>&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    Point()&#123;&#125;;</span><br><span class=\"line\">    Point (<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y): x(x),y(y) &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">friend</span> Point <span class=\"keyword\">operator</span>+(<span class=\"keyword\">const</span> Point &amp;, <span class=\"keyword\">const</span> Point &amp;);</span><br><span class=\"line\">    <span class=\"keyword\">friend</span> ostream &amp;<span class=\"keyword\">operator</span>&lt;&lt;(ostream &amp;out , <span class=\"keyword\">const</span> Point &amp;a);</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"keyword\">int</span> x,y;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">Point <span class=\"keyword\">operator</span>+(<span class=\"keyword\">const</span> Point &amp;a,<span class=\"keyword\">const</span> Point &amp;b)&#123;</span><br><span class=\"line\">    Point ret;</span><br><span class=\"line\">    ret.x = a.x + b.x;</span><br><span class=\"line\">    ret.y = a.y + b.y;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">ostream &amp;<span class=\"keyword\">operator</span>&lt;&lt;(ostream &amp;out , <span class=\"keyword\">const</span> Point &amp;a)&#123;</span><br><span class=\"line\">    out &lt;&lt; <span class=\"string\">\"&lt;Point&gt;( \"</span> &lt;&lt; a.x &lt;&lt; <span class=\"string\">\", \"</span> &lt;&lt; a.y &lt;&lt; <span class=\"string\">\")\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> out;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    Point a(2,4),b(5,3);</span><br><span class=\"line\">    Point c = a + b;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; c&lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当上面的代码被编译和执行时，它会产生下列结果：</p>\n<blockquote>\n<p>&lt; Point&gt;( 7, 7)</p>\n</blockquote>\n<p>注意：重载<code>&lt;&lt;</code>时，是类外重载，习惯上人们是使用<code>cin&gt;&gt;</code> 和 <code>cout&lt;&lt;</code> 的，得使用友元函数来重载运算符，如果使用成员函数来重载会出现 <code>c&lt;&lt;cout;</code> 这种不自然的代码。</p>\n<p>另外应该会有人对<code>ostream &amp;operator&lt;&lt;(ostream &amp;out , const Point &amp;a)</code>函数感到疑惑，首先在重载<code>&lt;&lt;</code>时，返回值类型是<code>ostream&amp;</code>, 第一个参数也是<code>ostream&amp;</code>。也就是说，表达式<code>cout&lt;&lt;c</code>的返回值仍是 <code>cout</code>，所以<code>cout&lt;&lt;c&lt;&lt;endl;</code>才能成立</p>\n<h3 id=\"前置运算符重载-and-后置运算符重载\"><a href=\"#前置运算符重载-and-后置运算符重载\" class=\"headerlink\" title=\"前置运算符重载++ and 后置运算符重载++\"></a>前置运算符重载++ and 后置运算符重载++</h3><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"> <span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span>&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    Point()&#123;&#125;;</span><br><span class=\"line\">    Point (<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y): x(x),y(y) &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">friend</span> Point <span class=\"keyword\">operator</span>+(<span class=\"keyword\">const</span> Point &amp;, <span class=\"keyword\">const</span> Point &amp;);</span><br><span class=\"line\">    <span class=\"keyword\">friend</span> ostream &amp;<span class=\"keyword\">operator</span>&lt;&lt;(ostream &amp;out , <span class=\"keyword\">const</span> Point &amp;a);</span><br><span class=\"line\">    Point&amp; <span class=\"keyword\">operator</span>++()&#123; <span class=\"comment\">//前置运算符，需要引用返回，不需要参数。返回自增后的值，且返回的是一个左值 </span></span><br><span class=\"line\">        x++;</span><br><span class=\"line\">        y++;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> Point <span class=\"keyword\">operator</span>++(<span class=\"keyword\">int</span>)&#123;<span class=\"comment\">//后置++，不需要引用返回，需要参数区分。返回自增前的值，且返回的是一个右值</span></span><br><span class=\"line\">        <span class=\"function\">Point <span class=\"title\">temp</span><span class=\"params\">(x,y)</span></span>;</span><br><span class=\"line\">        x++;</span><br><span class=\"line\">        y++;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"keyword\">int</span> x,y;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">Point <span class=\"keyword\">operator</span>+(<span class=\"keyword\">const</span> Point &amp;a,<span class=\"keyword\">const</span> Point &amp;b)&#123;</span><br><span class=\"line\">    Point ret;</span><br><span class=\"line\">    ret.x = a.x + b.x;</span><br><span class=\"line\">    ret.y = a.y + b.y;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">ostream &amp;<span class=\"keyword\">operator</span>&lt;&lt;(ostream &amp;out , <span class=\"keyword\">const</span> Point &amp;a)&#123;</span><br><span class=\"line\">    out &lt;&lt; <span class=\"string\">\"&lt;Point&gt;(\"</span> &lt;&lt; a.x &lt;&lt; <span class=\"string\">\" , \"</span> &lt;&lt; a.y &lt;&lt; <span class=\"string\">\")\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> out;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    Point a(2,4),b(5,3);</span><br><span class=\"line\">    Point c = a + b;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; c &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    c++;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; c &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    ++c;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; c &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当上面的代码被编译和执行时，它会产生下列结果：</p>\n<blockquote>\n<p>(7 , 7)<br>&lt; Point&gt;(8 , 8)<br>&lt; Point&gt;(9 , 9)</p>\n</blockquote>\n<p>1&gt;为区别前置和后置运算符，需要在后置运算符重载函数中加参数“int”，虽然这个类型在此除了以示区别之外并不代表任何实际含义；</p>\n<p>2&gt;前置返回的是变量的引用，后置返回的是常量。所以++++c合法，而c++++不合法;</p>\n<p>3&gt;为什么不让c++++也合法呢？如果要实现c++++合法，必须使后置返回变量或变量的引用。c++是先返回c值再+1，所以不可能返回c，那就只能先建立局部变量来保存c的初值，然后再返回局部变量（局部变量不允许返回引用），但返回了局部变量之后，如果再连着进行下一次++运算，参与运算的就是这个局部变量的值了，所以此时c++++其实等效与c++，也就没有存在的意义了。</p>\n<h1 id=\"C-中new-delete-和malloc-free的区别\"><a href=\"#C-中new-delete-和malloc-free的区别\" class=\"headerlink\" title=\"C++中new/delete 和malloc/free的区别\"></a>C++中new/delete 和malloc/free的区别</h1><p>1、new、delete是C++中的操作符，而malloc和free是标准库函数。</p>\n<p>2、对于非内部数据对象来说，只使用malloc是无法完成动态对象要求的，一般在创建对象时需要调用构造函数，对象消亡时，自动的调用析构函数。而malloc free是库函数而不是运算符，不在编译器控制范围之内，不能够自动调用构造函数和析构函数。而NEW在为对象申请分配内存空间时，可以自动调用构造函数，同时也可以完成对对象的初始化。同理，delete也可以自动调用析构函数。而mallloc只是做一件事，只是为变量分配了内存，同理，free也只是释放变量的内存。</p>\n<p>3、new返回的是指定类型的指针，并且可以自动计算所申请内存的大小。而 malloc需要我们计算申请内存的大小，并且在返回时强行转换为实际类型的指针。</p>\n<h2 id=\"new-和-delete-到底是什么？\"><a href=\"#new-和-delete-到底是什么？\" class=\"headerlink\" title=\"new 和 delete 到底是什么？\"></a>new 和 delete 到底是什么？</h2><p>如果找工作的同学看一些面试的书，我相信都会遇到这样的题：sizeof 不是函数，然后举出一堆的理由来证明 sizeof 不是函数。在这里，和 sizeof 类似，new 和 delete 也不是函数，它们都是 C++ 定义的关键字，通过特定的语法可以组成表达式。和 sizeof 不同的是，sizeof 在编译时候就可以确定其返回值，new 和 delete 背后的机制则比较复杂。<br>继续往下之前，请你想想你认为 new 应该要做些什么？也许你第一反应是，new 不就和 C 语言中的 malloc 函数一样嘛，就用来动态申请空间的。你答对了一半，看看下面语句：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">string *ps &#x3D; new string(&quot;hello world&quot;);</span><br></pre></td></tr></table></figure>\n\n<p>你就可以看出 new 和 malloc 还是有点不同的，malloc 申请完空间之后不会对内存进行必要的初始化，而 new 可以。所以 new expression 背后要做的事情不是你想象的那么简单。在我用实例来解释 new 背后的机制之前，你需要知道 <code>operator new</code> 和 <code>operator delete</code> 是什么玩意。</p>\n<h2 id=\"operator-new-和-operator-delete\"><a href=\"#operator-new-和-operator-delete\" class=\"headerlink\" title=\"operator new 和 operator delete\"></a>operator new 和 operator delete</h2><p>这两个其实是 C++ 语言标准库的库函数，原型分别如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">void *operator new(size_t);     &#x2F;&#x2F;allocate an object</span><br><span class=\"line\">void *operator delete(void *);    &#x2F;&#x2F;free an object</span><br><span class=\"line\"></span><br><span class=\"line\">void *operator new[](size_t);     &#x2F;&#x2F;allocate an array</span><br><span class=\"line\">void *operator delete[](void *);    &#x2F;&#x2F;free an array</span><br></pre></td></tr></table></figure>\n\n<p>后面两个你可以先不看，后面再介绍。前面两个均是 C++ 标准库函数，你可能会觉得这是函数吗？请不要怀疑，这就是函数！C++ Primer 一书上说这不是重载 new 和 delete 表达式（如 <code>operator=</code> 就是重载 = 操作符），因为 new 和 delete 是不允许重载的。但我还没搞清楚为什么要用 operator new 和 operator delete 来命名，比较费解。我们只要知道它们的意思就可以了，这两个函数和 C 语言中的 malloc 和 free 函数有点像了，都是用来申请和释放内存的，并且 operator new 申请内存之后不对内存进行初始化，直接返回申请内存的指针。</p>\n<p>我们可以直接在我们的程序中使用这几个函数。</p>\n<h2 id=\"new-和-delete-背后机制\"><a href=\"#new-和-delete-背后机制\" class=\"headerlink\" title=\"new 和 delete 背后机制\"></a>new 和 delete 背后机制</h2><p>知道上面两个函数之后，我们用一个实例来解释 new 和 delete 背后的机制：</p>\n<p>我们不用简单的 C++ 内置类型来举例，使用复杂一点的类类型，定义一个类 A：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">class A</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    A(int v) : var(v)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        fopen_s(&amp;file, &quot;test&quot;, &quot;r&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ~A()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        fclose(file);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">private:</span><br><span class=\"line\">    int var;</span><br><span class=\"line\">    FILE *file;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>很简单，类 A 中有两个私有成员，有一个构造函数和一个析构函数，构造函数中初始化私有变量 var 以及打开一个文件，析构函数关闭打开的文件。</p>\n<p>我们使用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">class *pA &#x3D; new A(10);</span><br></pre></td></tr></table></figure>\n\n<p>来创建一个类的对象，返回其指针 pA。如下图所示 new 背后完成的工作：</p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://github-camo.global.ssl.fastly.net/48182649501319d27121ede912b19be491b1b0a2/687474703a2f2f692e696d6775722e636f6d2f454a736e6b4a342e6a7067\" alt=\"\"></p>\n<p>简单总结一下：</p>\n<ol>\n<li>首先需要调用上面提到的 operator new 标准库函数，传入的参数为 class A 的大小，这里为 8 个字节，至于为什么是 8 个字节，你可以看看《深入 C++ 对象模型》一书，这里不做多解释。这样函数返回的是分配内存的起始地址，这里假设是 0x007da290。</li>\n<li>上面分配的内存是未初始化的，也是未类型化的，第二步就在这一块原始的内存上对类对象进行初始化，调用的是相应的构造函数，这里是调用 <code>A:A(10);</code> 这个函数，从图中也可以看到对这块申请的内存进行了初始化，<code>var=10, file 指向打开的文件</code>。</li>\n<li>最后一步就是返回新分配并构造好的对象的指针，这里 pA 就指向 0x007da290 这块内存，pA 的类型为类 A 对象的指针。</li>\n</ol>\n<p>所有这三步，你都可以通过反汇编找到相应的汇编代码，在这里我就不列出了。</p>\n<p>好了，那么 delete 都干了什么呢？还是接着上面的例子，如果这时想释放掉申请的类的对象怎么办？当然我们可以使用下面的语句来完成：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">delete pA;</span><br></pre></td></tr></table></figure>\n\n<p>delete 所做的事情如下图所示：</p>\n<p><a href=\"https://github-camo.global.ssl.fastly.net/8bfb4701b5c270dc3b27c86bce57f2d31562d82f/687474703a2f2f692e696d6775722e636f6d2f3156767239467a2e6a7067\" target=\"_blank\" rel=\"noopener\"><img src= \"/img/loading.gif\" data-lazy-src=\"https://github-camo.global.ssl.fastly.net/8bfb4701b5c270dc3b27c86bce57f2d31562d82f/687474703a2f2f692e696d6775722e636f6d2f3156767239467a2e6a7067\" alt=\"img\"></a></p>\n<p>delete 就做了两件事情：</p>\n<ol>\n<li>调用 pA 指向对象的析构函数，对打开的文件进行关闭。</li>\n<li>通过上面提到的标准库函数 operator delete 来释放该对象的内存，传入函数的参数为 pA 的值，也就是 0x007d290。</li>\n</ol>\n<p>好了，解释完了 new 和 delete 背后所做的事情了，是不是觉得也很简单？不就多了一个构造函数和析构函数的调用嘛。</p>\n<h2 id=\"如何申请和释放一个数组？\"><a href=\"#如何申请和释放一个数组？\" class=\"headerlink\" title=\"如何申请和释放一个数组？\"></a>如何申请和释放一个数组？</h2><p>我们经常要用到动态分配一个数组，也许是这样的：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">string *psa &#x3D; new string[10];      &#x2F;&#x2F;array of 10 empty strings</span><br><span class=\"line\">int *pia &#x3D; new int[10];           &#x2F;&#x2F;array of 10 uninitialized ints</span><br></pre></td></tr></table></figure>\n\n<p>上面在申请一个数组时都用到了 <code>new []</code> 这个表达式来完成，按照我们上面讲到的 new 和 delete 知识，第一个数组是 string 类型，分配了保存对象的内存空间之后，将调用 string 类型的默认构造函数依次初始化数组中每个元素；第二个是申请具有内置类型的数组，分配了存储 10 个 int 对象的内存空间，但并没有初始化。</p>\n<p>如果我们想释放空间了，可以用下面两条语句：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">delete [] psa;</span><br><span class=\"line\">delete [] pia;</span><br></pre></td></tr></table></figure>\n\n<p>都用到 <code>delete []</code> 表达式，注意这地方的 [] 一般情况下不能漏掉！我们也可以想象这两个语句分别干了什么：第一个对 10 个 string 对象分别调用析构函数，然后再释放掉为对象分配的所有内存空间；第二个因为是内置类型不存在析构函数，直接释放为 10 个 int 型分配的所有内存空间。</p>\n<p>这里对于第一种情况就有一个问题了：<strong>我们如何知道 psa 指向对象的数组的大小？怎么知道调用几次析构函数？</strong></p>\n<p>这个问题直接导致我们需要在 new [] 一个对象数组时，需要保存数组的维度，C++ 的做法是在分配数组空间时多分配了 4 个字节的大小，专门保存数组的大小，在 delete [] 时就可以取出这个保存的数，就知道了需要调用析构函数多少次了。</p>\n<p>还是用图来说明比较清楚，我们定义了一个类 A，但不具体描述类的内容，这个类中有显示的构造函数、析构函数等。那么 当我们调用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">class A *pAa &#x3D; new A[3];</span><br></pre></td></tr></table></figure>\n\n<p>时需要做的事情如下：</p>\n<p><a href=\"https://github-camo.global.ssl.fastly.net/1a2da83d54ac0110f8cdb13a6645dd5f9240e760/687474703a2f2f692e696d6775722e636f6d2f366857304431702e6a7067\" target=\"_blank\" rel=\"noopener\"><img src= \"/img/loading.gif\" data-lazy-src=\"https://github-camo.global.ssl.fastly.net/1a2da83d54ac0110f8cdb13a6645dd5f9240e760/687474703a2f2f692e696d6775722e636f6d2f366857304431702e6a7067\" alt=\"img\"></a></p>\n<p>从这个图中我们可以看到申请时在数组对象的上面还多分配了 4 个字节用来保存数组的大小，但是最终返回的是对象数组的指针，而不是所有分配空间的起始地址。</p>\n<p>这样的话，释放就很简单了：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">delete [] pAa;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://github-camo.global.ssl.fastly.net/db76cce60aaa6f0ad3ab65cd00b0ca26a5271547/687474703a2f2f692e696d6775722e636f6d2f3155425444316c2e6a7067\" target=\"_blank\" rel=\"noopener\"><img src= \"/img/loading.gif\" data-lazy-src=\"https://github-camo.global.ssl.fastly.net/db76cce60aaa6f0ad3ab65cd00b0ca26a5271547/687474703a2f2f692e696d6775722e636f6d2f3155425444316c2e6a7067\" alt=\"img\"></a></p>\n<p>这里要注意的两点是：</p>\n<ul>\n<li>调用析构函数的次数是从数组对象指针前面的 4 个字节中取出；</li>\n<li>传入 <code>operator delete[]</code> 函数的参数不是数组对象的指针 pAa，而是 pAa 的值减 4。</li>\n</ul>\n<h2 id=\"为什么-new-delete-、new-delete-要配对使用？\"><a href=\"#为什么-new-delete-、new-delete-要配对使用？\" class=\"headerlink\" title=\"为什么 new/delete 、new []/delete[] 要配对使用？\"></a>为什么 new/delete 、new []/delete[] 要配对使用？</h2><p>其实说了这么多，还没到我写这篇文章的最原始意图。从上面解释的你应该懂了 new/delete、new[]/delete[] 的工作原理了，因为它们之间有差别，所以需要配对使用。但偏偏问题不是这么简单，这也是我遇到的问题，如下这段代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">int *pia &#x3D; new int[10];</span><br><span class=\"line\">delete []pia;</span><br></pre></td></tr></table></figure>\n\n<p>这肯定是没问题的，但如果把 <code>delete []pia;</code> 换成 <code>delete pia;</code> 的话，会出问题吗？</p>\n<p>这就涉及到上面一节没提到的问题了。上面我提到了在 <code>new []</code> 时多分配 4 个字节的缘由，因为析构时需要知道数组的大小，但如果不调用析构函数呢（如内置类型，这里的 int 数组）？我们在 <code>new []</code> 时就没必要多分配那 4 个字节， delete [] 时直接到第二步释放为 int 数组分配的空间。如果这里使用 <code>delete pia;</code>那么将会调用 <code>operator delete</code> 函数，传入的参数是分配给数组的起始地址，所做的事情就是释放掉这块内存空间。不存在问题的。</p>\n<p>这里说的使用 <code>new []</code> 用 delete 来释放对象的提前是：对象的类型是内置类型或者是无自定义的析构函数的类类型！</p>\n<p>我们看看如果是带有自定义析构函数的类类型，用 <code>new []</code> 来创建类对象数组，而用 delete 来释放会发生什么？用上面的例子来说明：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">class A *pAa &#x3D; new class A[3];</span><br><span class=\"line\">delete pAa;</span><br></pre></td></tr></table></figure>\n\n<p>那么 <code>delete pAa;</code> 做了两件事：</p>\n<ul>\n<li>调用一次 pAa 指向的对象的析构函数；</li>\n<li>调用 <code>operator delete(pAa);</code> 释放内存。</li>\n</ul>\n<p>显然，这里只对数组的第一个类对象调用了析构函数，后面的两个对象均没调用析构函数，如果类对象中申请了大量的内存需要在析构函数中释放，而你却在销毁数组对象时少调用了析构函数，这会造成内存泄漏。</p>\n<p>上面的问题你如果说没关系的话，那么第二点就是致命的了！直接释放 pAa 指向的内存空间，这个总是会造成严重的段错误，程序必然会奔溃！因为分配的空间的起始地址是 pAa 指向的地方减去 4 个字节的地方。你应该传入参数设为那个地址！</p>\n<p>同理，你可以分析如果使用 new 来分配，用 <code>delete []</code> 来释放会出现什么问题？是不是总会导致程序错误？</p>\n<p>总的来说，记住一点即可：<strong>new/delete、new[]/delete[] 要配套使用总是没错的！</strong></p>\n<h1 id=\"关于iostream与using-namespace-std-的解析\"><a href=\"#关于iostream与using-namespace-std-的解析\" class=\"headerlink\" title=\"关于iostream与using namespace std 的解析\"></a>关于iostream与using namespace std 的解析</h1><p>  当我们在使用C++语法进行编程练习的时候，往往在代码的前两行会这样来写</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\">include&lt;iostream&gt;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>学过C语言的同学在学习C++的时候是否会产生这样的疑惑呢：</strong></p>\n<p>练习C语言编程的时候，只需要声明一个头文件：#include&lt;stdio.h&gt;.而为什么在C++中，却需要写出include<iostream>和using namespace std;这两行代码呢？</p>\n<p>其中第一行include<iostream>我们还勉强可以理解，它其实类似于C语言中的#include&lt;stdio.h&gt;，即：声明标准的输入输出头文件。然而using namespace std究竟起到了什么作用呢？</p>\n<p>针对这个问题，网络上有很多专业的说法，但是长篇大论的内容，对于初学者来说实在头疼，根本看不进去，所以接下来我希望可以用简练的语言来解释清楚using namespace std的作用，以下的内容虽可能有些许冗余，但我相信是通俗易懂的，您只要能够一行行的看下去，一定能够完全看懂！</p>\n<p>本人认为正确的学习顺序是：我们要做到先学会定义、使用和理解命名空间(namespace)，再回过头去研究using namespace std;的作用，这样可以起到事半功倍的效果，那么接下来重点就来了。</p>\n<h2 id=\"定义命名空间\"><a href=\"#定义命名空间\" class=\"headerlink\" title=\"定义命名空间\"></a>定义命名空间</h2><p><strong>（1）简单的命名空间</strong></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1、定义命名空间A</span></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> A</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"keyword\">int</span> a=<span class=\"number\">0</span>;<span class=\"comment\">//在命名空间A中定义变量a</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>定义一个命名空间就是这样简单：在这个命名空间A中，有一个int型的变量，他的名字是“a”。那么我们接下来直接上难度！定义一个复杂的命名空间。</p>\n<p><strong>（2）复杂的命名空间</strong></p>\n<p>要求：定义命名空间B，并在命名空间B中定义命名空间C，并在命名空间C中定义结构体Teacher</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">//2、复杂的命名空间</span><br><span class=\"line\">namespace B  //定义命名空间B</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tint a=1;//在命名空间B中也可以定义变量a，因为他们不在同一个命名空间中</span><br><span class=\"line\">\tnamespace C//还可以在命名空间B中再定义一个命名空间C</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tstruct Teacher//在命名空间C中定义结构体Teacher</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tchar a[32];//结构体中还可以定义变量a，因为这三个“a”都不在同一个命名空间中</span><br><span class=\"line\">\t\t\tint b;</span><br><span class=\"line\">\t\t&#125;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h2 id=\"使用命名空间\"><a href=\"#使用命名空间\" class=\"headerlink\" title=\"使用命名空间\"></a>使用命名空间</h2><p><strong>（1）使用命名空间的基本方法</strong></p>\n<p>前面已经定义好了命名空间A、B、C，且在这三个命名空间中都定义相同的变量“a”，接下来我们就来使用这三个命名空间。</p>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t//使用命名空间的基本方法1\t</span><br><span class=\"line\">\tusing namespace A;//告诉编译器我要使用命名空间A中的功能了</span><br><span class=\"line\">\ta=10;             //将命名空间A中的变量“a”由0更改为10</span><br><span class=\"line\">    cout&lt;&lt;a&lt;&lt;endl;    //查看是否完成了更改，此时屏幕上应该输出“10</span><br></pre></td></tr></table></figure>\n\n<p><strong>注：</strong>此时只使用了命名空间A，所以只会对命名空间A中的变量a进行访问，而不会对命名空间B、C中的变量a进行访问。</p>\n<p>而实际上，针对上面这三行代码，只要第三行代码中变量“a”的指向明确，便可以省去第一行“using namespace A”，如下：</p>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\">//使用命名空间的基本方法2</span><br><span class=\"line\">//由于在代码中只要使用这两种方法中的其中一种即可，所以我在第二种方法这里加上的“//”注释符号，如下两行代码：</span><br><span class=\"line\">// a=10;</span><br><span class=\"line\">// cout&lt;&lt;A::a&lt;&lt;endl;  //“A::a”明确指向了命名空间A中的变量a（用双冒号::）</span><br></pre></td></tr></table></figure>\n\n<p>以上两种使用命名空间的方法供君随意挑选^_^</p>\n<p><strong>（2）使用复杂的命名空间</strong></p>\n<p>命名空间A的使用相对简单，但是在命名空间B中嵌套着命名空间C，并且命名空间C中又嵌套着结构体Teacher，那么我们又该如何去使用命名空间B和命名空间C呢？</p>\n<p>接下来，除了使用命名空间A以外，如果我们还使用了命名空间B的话，” a=10; “ 这条语句的指向就不明确了：因为命名空间B中也有个变量a，于是现在有两个”a”可以被访问。故：若想访问某一个特定的变量a就需要指向明确！</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">using namespace B;</span><br><span class=\"line\">//如果想访问某一个特定的变量a，就需要指向明确！如下：</span><br><span class=\"line\">\tcout&lt;&lt;A::a&lt;&lt;endl; //明确指向了“命名空间A” </span><br><span class=\"line\">//虽然现在有A、B两个命名空间，且两个命名空间中都有变量“a”，但只要指向明确，就能指定我们所访问的变量究竟是命名空间A中的“a”还是命名空间B中的“a”</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>（3）使用结构体Teacher中的变量</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">//如何使用Teacher</span><br><span class=\"line\">\t//方法1：这种方法每定义一个结构体就需要：“B::C::Teacher 结构体名称”</span><br><span class=\"line\">\t//B::C::Teacher t1;//用命名空间B中的命名空间C中的结构体模板（Teacher）来定义结构体t1</span><br><span class=\"line\">\t//t1.b=33;//注意：t1.a 语法错误！是因为a是一个指针（地址），这个指针是无法被修改的，否则以后无法释放内存          </span><br><span class=\"line\">\t//方法2：先一口气直接定义好“结构体型”数据类型，然后按照根据数据类型定义变量的方法来使用结构体</span><br><span class=\"line\">\tusing B::C::Teacher;</span><br><span class=\"line\">\tTeacher t2;</span><br><span class=\"line\">\tt2.b=22;</span><br><span class=\"line\">\treturn 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"关于iostream与using-namespace-std-的解析-1\"><a href=\"#关于iostream与using-namespace-std-的解析-1\" class=\"headerlink\" title=\"关于iostream与using namespace std 的解析****\"></a>关于iostream与using namespace std 的解析****</h2><p>（1）通过以上关于命名空间的定义及使用的介绍，我们不难发现：不同的命名空间之间是相互独立的个体，虽然附加在其中的变量名可能是相同的（比如上面所提到的命名空间A、B、C中都包含有变量a），但是没关系：“命名空间” 这层 “屏障”将这些相同的变量名分隔开来，让他们虽然拥有相同的名字，但是互不影响。</p>\n<p>（2）看起来命名空间的引入十分方便，让我们不必再因为变量重名而烦恼。但是在以前，并没有命名空间这个概念，而是将标准库功能定义在全局空间里，并声明在&lt;iostream.h&gt;（早期的C++头文件）中。但是由于标准库非常的庞大，那么程序员在选择的类的名称或函数名时，就很有可能和标准库中的某个名字相同。所以为了避免这种情况所造成的名字冲突，就把标准库中的一切都放在一个名为std的命名空间中。后来C++标准为了和C区别开，也为了正确使用命名空间，规定头文件不使用后缀.h，即出现了现在的<iostream>头文件。</p>\n<p>（3）当使用<iostream>的时候，该头文件没有定义全局命名空间，必须使用C++所规定的标准的命名空间（即：namespace std），这样才能正确使用cout、endl等功能。</p>\n<p>（4）最后：如果大家想进一步了解相关内容，请参考：<a href=\"http://blog.csdn.net/adudurant/article/details/16927747\" target=\"_blank\" rel=\"noopener\">点击打开链接</a> 谢谢。</p>\n<h1 id=\"c-定义结构体\"><a href=\"#c-定义结构体\" class=\"headerlink\" title=\"c++定义结构体\"></a>c++定义结构体</h1><h2 id=\"先定义结构体类型再单独进行变量定义\"><a href=\"#先定义结构体类型再单独进行变量定义\" class=\"headerlink\" title=\"先定义结构体类型再单独进行变量定义\"></a>先定义结构体类型再单独进行变量定义</h2><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Student</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> Code;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> Name[<span class=\"number\">20</span>];</span><br><span class=\"line\">    <span class=\"keyword\">char</span> Sex;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> Age;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Student</span> <span class=\"title\">Stu</span>;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Student</span> <span class=\"title\">Stu</span>[10];</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Student</span> *<span class=\"title\">pStru</span>;</span></span><br></pre></td></tr></table></figure>\n\n<p>结构体类型是struct Student，因此，struct和Student都不能省略。但实际上，我用codeblocks运行时，下面变量的定义，不加struct 也是可以的。</p>\n<h2 id=\"紧跟在结构体类型说明之后进行定义\"><a href=\"#紧跟在结构体类型说明之后进行定义\" class=\"headerlink\" title=\"紧跟在结构体类型说明之后进行定义\"></a>紧跟在结构体类型说明之后进行定义</h2><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Student</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> Code;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> Name[<span class=\"number\">20</span>];</span><br><span class=\"line\">    <span class=\"keyword\">char</span> Sex;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> Age;</span><br><span class=\"line\">&#125;Stu,Stu[<span class=\"number\">10</span>],*pStu;</span><br></pre></td></tr></table></figure>\n\n<p>这种情况时，后面还可以再定义结构体变量。</p>\n<h2 id=\"在说明一个无名结构体变量的同时直接进行定义\"><a href=\"#在说明一个无名结构体变量的同时直接进行定义\" class=\"headerlink\" title=\"在说明一个无名结构体变量的同时直接进行定义\"></a>在说明一个无名结构体变量的同时直接进行定义</h2><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> Code;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> Name[<span class=\"number\">20</span>];</span><br><span class=\"line\">    <span class=\"keyword\">char</span> Sex;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> Age;</span><br><span class=\"line\">&#125;Stu,Stu[<span class=\"number\">10</span>],*pStu;</span><br></pre></td></tr></table></figure>\n\n<p>这种情况下，之后不能再定义其他变量。</p>\n<h2 id=\"使用typedef说明一个结构体变量之后再用新类名来定义变量\"><a href=\"#使用typedef说明一个结构体变量之后再用新类名来定义变量\" class=\"headerlink\" title=\"使用typedef说明一个结构体变量之后再用新类名来定义变量\"></a>使用typedef说明一个结构体变量之后再用新类名来定义变量</h2><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> Code;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> Name[<span class=\"number\">20</span>];</span><br><span class=\"line\">    <span class=\"keyword\">char</span> Sex;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> Age;</span><br><span class=\"line\">&#125;student;</span><br><span class=\"line\">Student Stu,Stu[<span class=\"number\">10</span>],*pStu;</span><br></pre></td></tr></table></figure>\n\n<p>Student是一个具体的结构体类型，唯一标识。这里不用再加struct</p>\n<h1 id=\"同步与异步\"><a href=\"#同步与异步\" class=\"headerlink\" title=\"同步与异步\"></a>同步与异步</h1><h2 id=\"什么是同步与异步\"><a href=\"#什么是同步与异步\" class=\"headerlink\" title=\"什么是同步与异步\"></a>什么是同步与异步</h2><p>定义：同步和异步关注的是*<em>消息通信机制*</em> (synchronous communication/ asynchronous communication)。同步，就是调用某个东西是，调用方得等待这个调用返回结果才能继续往后执行。异步，和同步相反 调用方不会理解得到结果，而是在调用发出后调用者可用继续执行后续操作，被调用者通过状体来通知调用者，或者通过回掉函数来处理这个调用**</p>\n<p><strong>比方说：</strong>你去商城买东西，你看上了一款手机，能和店家说你一个这款手机，他就去仓库拿货，你得在店里等着，不能离开，这叫做同步。现在你买手机赶时髦直接去京东下单，下单完成后你就可用做其他时间（追剧、打王者、lol）等货到了去签收就ok了.这就叫异步。</p>\n<h2 id=\"以方法调用为例\"><a href=\"#以方法调用为例\" class=\"headerlink\" title=\"以方法调用为例\"></a>以方法调用为例</h2><ul>\n<li><strong>同步方法</strong>调用一旦开始，调用者必须等到方法调用返回后，才能继续后续的行为。</li>\n<li><strong>异步方法</strong>调用更像一个消息传递，一旦开始，方法调用就会立即返回，调用者就可以继续后续的操作。而，异步方法通常会在另外一个线程中，“真实”地执行着。整个过程，不会阻碍调用者的工作</li>\n</ul>\n<h2 id=\"加两张图更好理解\"><a href=\"#加两张图更好理解\" class=\"headerlink\" title=\"加两张图更好理解\"></a>加两张图更好理解</h2><p><strong>同步执行</strong></p>\n<p><a href=\"https://img2018.cnblogs.com/blog/1680783/201905/1680783-20190521124754180-1985908967.png\" target=\"_blank\" rel=\"noopener\"><img src= \"/img/loading.gif\" data-lazy-src=\"https://img2018.cnblogs.com/blog/1680783/201905/1680783-20190521124754180-1985908967.png\" alt=\"img\"></a></p>\n<p>同步执行当调用方法执行完成后并返回结果，才能执行后续代码</p>\n<p>异步执行</p>\n<p><a href=\"https://img2018.cnblogs.com/blog/1680783/201905/1680783-20190521125411515-1327485285.png\" target=\"_blank\" rel=\"noopener\"><img src= \"/img/loading.gif\" data-lazy-src=\"https://img2018.cnblogs.com/blog/1680783/201905/1680783-20190521125411515-1327485285.png\" alt=\"img\"></a></p>\n<p>异步调用的话可用参考ajax，调用方法后不会等到sum方法执行完成，而是直接执行后续代码。sum方法执行完成后主要通过状态通知主线程，或者通过回调处理这次异步方法执行的结果</p>\n<h2 id=\"同步异步于阻塞非阻塞不能混为一谈\"><a href=\"#同步异步于阻塞非阻塞不能混为一谈\" class=\"headerlink\" title=\"同步异步于阻塞非阻塞不能混为一谈\"></a>同步异步于阻塞非阻塞不能混为一谈</h2><p>看了上面的讲解，你可能会说这不就是阻塞机制吗？不不不，同步异步不能和阻塞非阻塞混为一谈。</p>\n<p>阻塞和非阻塞 强调的是程序在等待调用结果（消息，返回值）时的状态. 阻塞调用是指调用结果返回之前，当前线程会被挂起。调用线程只有在得到结果之后才会返回。非阻塞调用指在不能立刻得到结果之前，该调用不会阻塞当前线程。 对于同步调用来说，很多时候当前线程还是激活的状态，只是从逻辑上当前函数没有返回而已，即同步等待时什么都不干，白白占用着资源。</p>\n<p>同步和异步强调的是消息通信机制 (synchronous communication/ asynchronous communication)。所谓同步，就是在发出一个”调用”时，在没有得到结果之前，该“调用”就不返回。但是一旦调用返回，就得到返回值了。换句话说，就是由“调用者”主动等待这个“调用”的结果。而异步则是相反，”调用”在发出之后，这个调用就直接返回了，所以没有返回结果。换句话说，当一个异步过程调用发出后，调用者不会立刻得到结果。而是在”调用”发出后，”被调用者”通过状态、通知来通知调用者，或通过回调函数处理这个调用</p>\n<p>参考博客：<a href=\"https://blog.csdn.net/huangqiang1363/article/details/79508852\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/huangqiang1363/article/details/79508852</a> </p>\n<h1 id=\"c语言分区\"><a href=\"#c语言分区\" class=\"headerlink\" title=\"c语言分区\"></a>c语言分区</h1><ol>\n<li>栈Stack（大地址，由高向低使用）</li>\n<li>堆Heap（由低向高使用）</li>\n<li>全局or静态常量区</li>\n<li>文本and代码区（小地址）</li>\n</ol>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> total = <span class=\"number\">0</span>;  <span class=\"comment\">//全局or静态常量区</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">hehe</span><span class=\"params\">()</span> </span>&#123; <span class=\"comment\">//函数,在stack中</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> he = <span class=\"number\">0</span>; <span class=\"comment\">//全局or静态常量区，因为static只会创建一次</span></span><br><span class=\"line\">    he++;</span><br><span class=\"line\">    total++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> k = <span class=\"number\">3</span>;  <span class=\"comment\">//函数的内部变量，在stack中，但3在代码区</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> *str = <span class=\"string\">\"Hello, world!\"</span>;  <span class=\"comment\">//  str函数中内部变量，在stack中，“hello world”在常量区</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> *p = (<span class=\"keyword\">int</span> *) <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>));  <span class=\"comment\">// p在stack中，malloc动态分配的内存在堆中</span></span><br><span class=\"line\">    hehe();</span><br><span class=\"line\">    hehe();</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d%s%d\"</span>, k, str, *p);</span><br><span class=\"line\">    <span class=\"built_in\">free</span>(p);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;  <span class=\"comment\">//stack中内存释放</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"类和对象\"><a href=\"#类和对象\" class=\"headerlink\" title=\"类和对象\"></a>类和对象</h1><ul>\n<li><strong>类</strong>：类是一个模板，它描述一类对象的行为和状态。</li>\n<li><strong>对象</strong>：对象是类的一个实例</li>\n</ul>\n<p><strong>c语言如何处理类和对象：</strong></p>\n<ul>\n<li><p>没有“类”，只有“类型”</p>\n</li>\n<li><p>没有“对象”，只有“变量”</p>\n</li>\n<li><p>结构体变量+函数</p>\n<p>c语言采用结构体变量+函数的方式来实现类似功能，如下</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"stdio.h\"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Student</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> id;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">printID</span><span class=\"params\">(struct Student *in)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"My id is %d.\\n\"</span>,in-&gt;id);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Student</span> <span class=\"title\">one</span>;</span></span><br><span class=\"line\">    one.id=<span class=\"number\">999</span>;</span><br><span class=\"line\">    printID(&amp;one);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>但我们发现，Student的属性和加在属性上的操作是割裂开的，我们可以使用函数指针类解决此问题</p>\n<ul>\n<li>函数指针</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"stdio.h\"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Student</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> id;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> (*printID)(struct Student *in);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">printID</span><span class=\"params\">(struct Student *in)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"My id is %d.\\n\"</span>,in-&gt;id);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Student</span> <span class=\"title\">one</span>;</span></span><br><span class=\"line\">    one.id=<span class=\"number\">999</span>;</span><br><span class=\"line\">    one.printID=printID;</span><br><span class=\"line\">    one.printID(&amp;one);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"不一样的体验，用纯文本命令行写C-程序\"><a href=\"#不一样的体验，用纯文本命令行写C-程序\" class=\"headerlink\" title=\"不一样的体验，用纯文本命令行写C++程序\"></a>不一样的体验，用纯文本命令行写C++程序</h1><ol>\n<li>打开vmware运行ubuntu</li>\n<li>桌面右键打开终端</li>\n<li>输入命令<code>ls</code>查看当前所在位置</li>\n<li>输入命令<code>cd 桌面</code>进入桌面这个文件夹</li>\n<li>输入命令<code>touch test.cpp</code>创建test.cpp文件</li>\n<li>打开test.cpp文件，输入以下代码并保存<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/2020091713284558.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1BhbmRhMzI1,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></li>\n<li>输入命令<code>g++ test.cpp</code>编译test.cpp文件，我们发现桌面上产生了一个新的文件a.out，这就是编译产生的可执行文件，接下来我们运行之</li>\n<li>输入命令<code>./a.out</code>运行，发现如下输出：<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/2020091713315557.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1BhbmRhMzI1,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></li>\n</ol>\n<h1 id=\"c-的新特性\"><a href=\"#c-的新特性\" class=\"headerlink\" title=\"c++的新特性\"></a>c++的新特性</h1><h2 id=\"类（class\"><a href=\"#类（class\" class=\"headerlink\" title=\"类（class)\"></a>类（class)</h2><p>  之前说过了</p>\n<h2 id=\"bool类型和auto类型\"><a href=\"#bool类型和auto类型\" class=\"headerlink\" title=\"bool类型和auto类型\"></a>bool类型和auto类型</h2><p>  bool，c语言中，真假用整形来代替，<code>0 --&gt;False</code> &amp;&amp;  <code>!0--&gt;True</code> &amp;&amp; <code>True--&gt;</code> &amp;&amp; <code>False--&gt;0</code></p>\n<p>  c++中，可以true，false，也可以用0和1</p>\n<p>  auto，让编译器推断是什么类型，但必须在初始化时赋值，否则编译报错</p>\n<p>  cout，在打印浮点数是会省略后面的部分</p>\n<h2 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h2><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> a = <span class=\"number\">3</span>;  <span class=\"comment\">//定义了变量a，并用3使其初始化，=不是运算符=含义是初始化</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> b;  <span class=\"comment\">//定义了变量b，没有初始化</span></span><br><span class=\"line\">b = <span class=\"number\">3</span>;  <span class=\"comment\">//把3赋值给b，=是运算符</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> <span class=\"built_in\">array</span>[<span class=\"number\">10</span>]=&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;;  <span class=\"comment\">//定义了数组array，并用&#123;1,2,3&#125;使其初始化</span></span><br><span class=\"line\"><span class=\"built_in\">array</span>=&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;;  <span class=\"comment\">//错误</span></span><br><span class=\"line\"><span class=\"built_in\">array</span>[<span class=\"number\">10</span>]=&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;;  <span class=\"comment\">//错误</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> *p; <span class=\"comment\">// *的含义是p是一个指针，不是取值运算符，p是指向int类型的指针</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> a = <span class=\"number\">3</span>;</span><br><span class=\"line\">p = &amp;a;</span><br><span class=\"line\">*p = <span class=\"number\">6</span>;  <span class=\"comment\">// *的是取值运算符</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> b = <span class=\"number\">6</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> &amp;r = b; <span class=\"comment\">// &amp;的含义是r是一个引用类型，不是取地址运算符，r是int类型的引用，=表示用b来初始化r，让r成为b的引用，不是赋值，可以理解为给b起个外号，自此之后r就是b，b就是r</span></span><br><span class=\"line\">r = <span class=\"number\">123</span>;</span><br><span class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; r &lt;&lt; <span class=\"built_in\">endl</span>;  <span class=\"comment\">// 123</span></span><br><span class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; b &lt;&lt; <span class=\"built_in\">endl</span>;  <span class=\"comment\">// 123</span></span><br></pre></td></tr></table></figure>\n\n<p>在C++中函数的参数传递：</p>\n<ul>\n<li>按值传递(pass by value)</li>\n<li>地址传递(pass by pointer)</li>\n<li>引用传递(pass by reference)</li>\n</ul>\n<p>引用必须在定义时初始化，一旦创建就不可更换引用的对象</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> b = <span class=\"number\">6</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> &amp;r;  <span class=\"comment\">//error: 'r' declared as reference but not initialized</span></span><br><span class=\"line\">r = b;  <span class=\"comment\">//把b的值赋值给r，但此时r并没有任何的引用</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"关于赋值\"><a href=\"#关于赋值\" class=\"headerlink\" title=\"关于赋值\"></a>关于赋值</h2><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> a, b, c;</span><br><span class=\"line\">(a = b = c = <span class=\"number\">3</span>) = <span class=\"number\">666</span>;</span><br><span class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; a &lt;&lt; <span class=\"built_in\">endl</span>;  <span class=\"comment\">//666</span></span><br><span class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; b &lt;&lt; <span class=\"built_in\">endl</span>;  <span class=\"comment\">//3</span></span><br><span class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; c &lt;&lt; <span class=\"built_in\">endl</span>;  <span class=\"comment\">//3</span></span><br></pre></td></tr></table></figure>\n\n<p>赋值之后返回的是左值的引用</p>\n<h2 id=\"初始化的新语法\"><a href=\"#初始化的新语法\" class=\"headerlink\" title=\"初始化的新语法\"></a>初始化的新语法</h2><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> a&#123;<span class=\"number\">3</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">int</span> <span class=\"built_in\">array</span>[<span class=\"number\">5</span>]&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"new和delete\"><a href=\"#new和delete\" class=\"headerlink\" title=\"new和delete\"></a>new和delete</h2><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> *p;</span><br><span class=\"line\">p = (<span class=\"keyword\">int</span> *) <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>));</span><br><span class=\"line\"><span class=\"built_in\">free</span>(p);</span><br><span class=\"line\">p = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>;</span><br><span class=\"line\"><span class=\"keyword\">delete</span> p;</span><br><span class=\"line\">deleete[] p;  <span class=\"comment\">//复杂类型应该这样写</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"iostream\"</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"keyword\">int</span> sid;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    Student one, two;</span><br><span class=\"line\">    one.sid = <span class=\"number\">1</span>;</span><br><span class=\"line\">    two.sid = <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; &amp;one &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; &amp;two &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    one = two;</span><br><span class=\"line\">    two.sid = <span class=\"number\">999</span>;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; &amp;one &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; &amp;two &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"iostream\"</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"keyword\">int</span> sid;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    Student *one = <span class=\"keyword\">new</span> Student();</span><br><span class=\"line\">    Student *two = <span class=\"keyword\">new</span> Student();</span><br><span class=\"line\"><span class=\"comment\">//    Student *one, *two;</span></span><br><span class=\"line\"><span class=\"comment\">//    one = new Student();</span></span><br><span class=\"line\"><span class=\"comment\">//    two = new Student();</span></span><br><span class=\"line\">    one-&gt;sid = <span class=\"number\">1</span>;</span><br><span class=\"line\">    two-&gt;sid = <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; &amp;one &lt;&lt; <span class=\"built_in\">endl</span>;  <span class=\"comment\">//0x63fde8</span></span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; &amp;two &lt;&lt; <span class=\"built_in\">endl</span>;  <span class=\"comment\">//0x63fde0</span></span><br><span class=\"line\">    one = two; <span class=\"comment\">//内存泄漏</span></span><br><span class=\"line\">    two-&gt;sid = <span class=\"number\">999</span>;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; one &lt;&lt; <span class=\"built_in\">endl</span>;  <span class=\"comment\">//0x1c1770</span></span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; two &lt;&lt; <span class=\"built_in\">endl</span>;  <span class=\"comment\">//0x1c1770</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>进一步理解Java的引用，相当于c++中的指针，java的引用和c++的引用是不一样的</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> sid;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args[])</span> </span>&#123;</span><br><span class=\"line\">        Student one = <span class=\"keyword\">new</span> Student();  <span class=\"comment\">//创建对象一定需要new</span></span><br><span class=\"line\">        Student two = <span class=\"keyword\">new</span> Student();  </span><br><span class=\"line\">        one.sid = <span class=\"number\">1</span>;</span><br><span class=\"line\">        two.sid = <span class=\"number\">2</span>;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"one: \"</span> + one);  <span class=\"comment\">//one: Student@7291c18f</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"two: \"</span> + two);  <span class=\"comment\">//two: Student@34a245ab</span></span><br><span class=\"line\">        one = two;</span><br><span class=\"line\">        two.sid = <span class=\"number\">999</span>;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"one: \"</span> + one);  <span class=\"comment\">//one: Student@34a245ab</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"two: \"</span> + two);  <span class=\"comment\">//two: Student@34a245ab</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"新的for循环\"><a href=\"#新的for循环\" class=\"headerlink\" title=\"新的for循环\"></a>新的for循环</h2><p>for-each不再赘述，可以使用auto，each是取出来的容器里的值，&amp;each可以修改容器里本来的值</p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200920102146966.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1BhbmRhMzI1,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200920102201193.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1BhbmRhMzI1,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"重载\"><a href=\"#重载\" class=\"headerlink\" title=\"重载\"></a>重载</h2><p>C++ 允许在同一作用域中的某个<strong>函数</strong>和<strong>运算符</strong>指定多个定义，分别称为<strong>函数重载</strong>和<strong>运算符重载</strong>。</p>\n<p>在同一个作用域内，可以声明几个同名函数，<strong>但是这些同名函数的形式参数（指参数的个数、类型或者顺序）必须不同。不能仅通过返回类型的不同来重载函数。</strong></p>\n<p>我们可以重定义或重载大部分 C++ 内置的运算符。这样，您就能使用自定义类型的运算符。</p>\n<p>重载的运算符是带有特殊名称的函数，函数名是由关键字 operator 和其后要重载的运算符符号构成的。与其他函数一样，重载运算符有一个返回类型和一个参数列表。</p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200920103255493.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1BhbmRhMzI1,size_16,color_FFFFFF,t_70#pic_center\" alt=\"\"></p>\n<p>注：在一个函数声明中，const可以修饰形参表明他是一个输入参数，在函数内部不可以改变其值；</p>\n<h2 id=\"lambda\"><a href=\"#lambda\" class=\"headerlink\" title=\"lambda\"></a>lambda</h2><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">auto</span> f = [](<span class=\"keyword\">auto</span> a, <span class=\"keyword\">auto</span> b) -&gt; <span class=\"keyword\">auto</span> &#123; <span class=\"keyword\">return</span> a + b; &#125;;</span><br><span class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; f(<span class=\"number\">3.1</span>, <span class=\"number\">5</span>) &lt;&lt; <span class=\"built_in\">endl</span>; <span class=\"comment\">// 8.1</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"泛型和模板\"><a href=\"#泛型和模板\" class=\"headerlink\" title=\"泛型和模板\"></a>泛型和模板</h1><p>泛型是概念, 模板是泛型的实现<br>     泛型编程让你编写完全一般化并可重复使用的算法，其效率与针对某特定数据类型而设计的算法相同。泛型编程的代表作品STL是一种高效、泛型、可交互操作的软件组件。所谓泛型(Genericity)，是指具有在多种数据类型上皆可操作的含意，与模板有些相似。STL巨大，而且可以扩充，它包含很多计算机基本算法和数据结构，而且将算法与数据结构完全分离，其中算法是泛型的，不与任何特定数据结构或对象类型系在一起。STL以迭代器(Iterators)和容器(Containers)为基础，是一种泛型算法(Generic Algorithms)库，容器的存在使这些算法有东西可以操作。STL包含各种泛型算法(algorithms)、泛型指针(iterators)、泛型容器(containers)以及函数对象(function objects)。STL并非只是一些有用组件的集合，它是描述软件组件抽象需求条件的一个正规而有条理的架构。</p>\n<h1 id=\"C语言-运算符和-amp-运算符\"><a href=\"#C语言-运算符和-amp-运算符\" class=\"headerlink\" title=\"C语言*运算符和&amp;运算符\"></a>C语言*运算符和&amp;运算符</h1><p>取址运算符<code>&amp;</code>用来取得其操作数的地址。如果操作数 x 的类型为 T，则表达式 <strong>&amp;x 的类型是 T 类型指针</strong>（指向 T 的指针）。</p>\n<p>取址运算符的操作数必须是在内存中可寻址到的地址。换句话说，该运算符只能用于函数或对象（例如左值），而不可以用于位字段，以及那些还未被存储类修饰符 register 声明的内容。</p>\n<p>当需要初始化指针，以指向某些对象或函数时，需要获得这些对象或函数的地址：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">float</span> x, *ptr;ptr = &amp;x;           <span class=\"comment\">// 合法：使得指针ptr指向xptr = &amp;(x+1);       // 错误： (x+1) 不是一个左值</span></span><br></pre></td></tr></table></figure>\n\n<p>相反地，当已具有一个指针，并且希望获取它所引用的对象时，使用间接运算符 *（indirection operator），有时候这会被称为解引用运算符（dereferencing operator）。它的操作数必须是指针类型。如果 ptr 是指针，那么 *ptr 就是 ptr 所指向的对象或函数。如果 ptr 是一个对象指针，那么 *ptr 就是一个左值，可以把它（即 *ptr）当作赋值运算符左边的操作数：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">float</span> x, *ptr = &amp;x;*ptr = <span class=\"number\">1.7</span>;                                      <span class=\"comment\">// 将1.7赋值给变量x++(*ptr);                                        // 并将变量x的值加1</span></span><br></pre></td></tr></table></figure>\n\n<p>在这个示例最后的语句中，ptr 的值保持不变，但 x 的值变成 2.7。</p>\n<p>如果指针操作数的值不是某个对象或函数的地址，则间接运算符*的操作结果无法确定。</p>\n<p>像其他一元操作数一样，运算符 &amp; 和 * 具有很高的优先级。操作数的组合方式是从右到左。因此，表达式 ++（*ptr）中的括号是没有必要的。</p>\n<p>运算符 &amp; 和 * 是互补的：如果 x 是一个表达式，用于指定一个对象或一个函数，那么表达式 <em>&amp;x 就等于 x。相反地，在形如 &amp;</em>ptr 的表达式中，这些运算符会互相抵消，表达式的类型与值等效于 ptr。然而，不管 ptr 是不是左值，&amp;*ptr 都一定不会是左值。</p>\n<h1 id=\"理解封装\"><a href=\"#理解封装\" class=\"headerlink\" title=\"理解封装\"></a>理解封装</h1><h2 id=\"类里有什么\"><a href=\"#类里有什么\" class=\"headerlink\" title=\"类里有什么\"></a>类里有什么</h2><ul>\n<li>数据（属性）</li>\n<li>操作（函数、方法）</li>\n<li>访问控制（公有/私有）</li>\n<li>静态/非静态</li>\n</ul>\n<p>直接使用类：静态<br>使用对象：静态和非静态<br>静态不能访问非静态</p>\n<h1 id=\"使用类和对象\"><a href=\"#使用类和对象\" class=\"headerlink\" title=\"使用类和对象\"></a>使用类和对象</h1><h2 id=\"定义类和对象\"><a href=\"#定义类和对象\" class=\"headerlink\" title=\"定义类和对象\"></a>定义类和对象</h2><h1 id=\"代码复用\"><a href=\"#代码复用\" class=\"headerlink\" title=\"代码复用\"></a>代码复用</h1><h2 id=\"代码复用的手段\"><a href=\"#代码复用的手段\" class=\"headerlink\" title=\"代码复用的手段\"></a>代码复用的手段</h2><ul>\n<li>函数重载</li>\n<li>类的继承，动态 </li>\n<li>借口</li>\n</ul>\n<h1 id=\"题外话\"><a href=\"#题外话\" class=\"headerlink\" title=\"题外话\"></a>题外话</h1><h2 id=\"构造函数使用初始化列表来初始化字段\"><a href=\"#构造函数使用初始化列表来初始化字段\" class=\"headerlink\" title=\"构造函数使用初始化列表来初始化字段\"></a>构造函数使用初始化列表来初始化字段</h2><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\">Line::Line( <span class=\"keyword\">double</span> len): length(len)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Object is being created, length = \"</span> &lt;&lt; len &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面的语法等同于如下语法：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\">Line::Line( <span class=\"keyword\">double</span> len)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    length = len;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Object is being created, length = \"</span> &lt;&lt; len &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在不同的字段使用逗号进行分隔，如下所示：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\">C::C( <span class=\"keyword\">double</span> a, <span class=\"keyword\">double</span> b, <span class=\"keyword\">double</span> c): X(a), Y(b), Z(c)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  ....</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"模板（Template）\"><a href=\"#模板（Template）\" class=\"headerlink\" title=\"模板（Template）\"></a>模板（Template）</h1><h2 id=\"函数模板\"><a href=\"#函数模板\" class=\"headerlink\" title=\"函数模板\"></a>函数模板</h2><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Created by Zhenglin Li on 2020/9/23.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"iostream\"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"function\">T <span class=\"title\">sum</span><span class=\"params\">(T <span class=\"built_in\">array</span>[], <span class=\"keyword\">int</span> <span class=\"built_in\">size</span>)</span> </span>&#123;</span><br><span class=\"line\">    T s = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">size</span>; ++i) &#123;</span><br><span class=\"line\">        s += <span class=\"built_in\">array</span>[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a1[<span class=\"number\">5</span>] = &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> a2[<span class=\"number\">3</span>] = &#123;<span class=\"number\">1.1</span>, <span class=\"number\">2.2</span>, <span class=\"number\">3.3</span>&#125;;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; sum(a1, <span class=\"number\">5</span>) &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; sum(a2, <span class=\"number\">3</span>) &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; sum(a2, <span class=\"number\">1</span>, <span class=\"number\">3</span>) &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>函数模板的重载</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Created by Zhenglin Li on 2020/9/23.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"iostream\"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"function\">T <span class=\"title\">sum</span><span class=\"params\">(T <span class=\"built_in\">array</span>[], <span class=\"keyword\">int</span> <span class=\"built_in\">size</span>)</span> </span>&#123;</span><br><span class=\"line\">    T s = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">size</span>; ++i) &#123;</span><br><span class=\"line\">        s += <span class=\"built_in\">array</span>[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"function\">T <span class=\"title\">sum</span><span class=\"params\">(T <span class=\"built_in\">array</span>[], <span class=\"keyword\">int</span> from, <span class=\"keyword\">int</span> to)</span> </span>&#123;</span><br><span class=\"line\">    T s = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = from - <span class=\"number\">1</span>; i &lt;= to - <span class=\"number\">1</span>; ++i) &#123;</span><br><span class=\"line\">        s += <span class=\"built_in\">array</span>[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a1[<span class=\"number\">5</span>] = &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> a2[<span class=\"number\">3</span>] = &#123;<span class=\"number\">1.1</span>, <span class=\"number\">2.2</span>, <span class=\"number\">3.3</span>&#125;;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; sum(a1, <span class=\"number\">5</span>) &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; sum(a2, <span class=\"number\">3</span>) &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; sum(a2, <span class=\"number\">1</span>, <span class=\"number\">3</span>) &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"类模板\"><a href=\"#类模板\" class=\"headerlink\" title=\"类模板\"></a>类模板</h2><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Created by Zhenglin Li on 2020/9/23.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"iostream\"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"comment\">//模板</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Vector</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    T x;</span><br><span class=\"line\">    T y;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    Vector(T x = <span class=\"number\">0</span>, T y = <span class=\"number\">0</span>) : x(x), y(y) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">friend</span> ostream &amp;<span class=\"keyword\">operator</span>&lt;&lt;(ostream &amp;o, <span class=\"keyword\">const</span> Vector&lt;T&gt; &amp;v) &#123;</span><br><span class=\"line\">        o &lt;&lt; <span class=\"string\">\"&lt;\"</span> &lt;&lt; v.x &lt;&lt; <span class=\"string\">\", \"</span> &lt;&lt; v.y &lt;&lt; <span class=\"string\">\"&gt;\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//真正的类，要&lt;&gt;</span></span><br><span class=\"line\">    <span class=\"function\">Vector&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">x</span><span class=\"params\">(<span class=\"number\">1</span>,<span class=\"number\">2</span>)</span></span>;</span><br><span class=\"line\">    Vector&lt;<span class=\"keyword\">double</span>&gt; *p = <span class=\"keyword\">new</span> Vector&lt;<span class=\"keyword\">double</span>&gt;(<span class=\"number\">1.1</span>,<span class=\"number\">2.2</span>);</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; x &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; *p &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"标准模板库（STL）\"><a href=\"#标准模板库（STL）\" class=\"headerlink\" title=\"标准模板库（STL）\"></a>标准模板库（STL）</h2><ul>\n<li>Standard Template Library</li>\n<li>很多容器</li>\n<li>很多算法</li>\n</ul>\n"},{"title":"Python爬虫实战（二）教务处首页","url":"/2020/08/15/Python%E7%88%AC%E8%99%AB%E5%AE%9E%E6%88%98%EF%BC%88%E4%BA%8C%EF%BC%89%E6%95%99%E5%8A%A1%E5%A4%84%E9%A6%96%E9%A1%B5/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\css\\APlayer.min.css\"><script src=\"\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\js\\Meting.min.js\"></script><h1 id=\"功能\"><a href=\"#功能\" class=\"headerlink\" title=\"功能\"></a>功能</h1><p>爬取四川大学教务处首页的通知，并邮件推送</p>\n<p>github链接：<a href=\"https://github.com/ZhengLin-Li/leaning-spider-scu-jwc\" target=\"_blank\" rel=\"noopener\">https://github.com/ZhengLin-Li/leaning-spider-scu-jwc</a></p>\n<h1 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h1><h2 id=\"一、crawl-py\"><a href=\"#一、crawl-py\" class=\"headerlink\" title=\"一、crawl.py\"></a>一、crawl.py</h2><ol>\n<li>利用<code>requests</code>库,拿到页面的response对象</li>\n<li>利用<code>BeautifulSoup</code>库解析拿到的文档树</li>\n<li>把数据文件保存进<code>data.txt</code>文件中</li>\n</ol>\n<h2 id=\"二、send-email-py\"><a href=\"#二、send-email-py\" class=\"headerlink\" title=\"二、send_email.py\"></a>二、send_email.py</h2><ol>\n<li>引入<code>SMTP</code>,<code>Header</code>,<code>MIMEText</code>库</li>\n<li>利用固定格式发送电子邮件</li>\n</ol>\n<h1 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h1><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">import requests</span><br><span class=\"line\">from bs4 import BeautifulSoup</span><br><span class=\"line\"></span><br><span class=\"line\">response &#x3D; requests.get(&#39;http:&#x2F;&#x2F;jwc.scu.edu.cn&#x2F;&#39;)</span><br><span class=\"line\">page &#x3D; response.content.decode()</span><br><span class=\"line\"># print(page)</span><br><span class=\"line\"></span><br><span class=\"line\">soup &#x3D; BeautifulSoup(page, &#39;lxml&#39;)</span><br><span class=\"line\">tag &#x3D; soup.find_all(class_&#x3D;&#39;list-llb-list&#39;)</span><br><span class=\"line\"># print(tag)</span><br><span class=\"line\"></span><br><span class=\"line\">result &#x3D; &#39;&#39;</span><br><span class=\"line\">for each in tag:</span><br><span class=\"line\">    result +&#x3D; each.text</span><br><span class=\"line\"># print(result)</span><br><span class=\"line\"></span><br><span class=\"line\">with open(&#39;data.txt&#39;, &#39;w&#39;, encoding&#x3D;&#39;utf8&#39;) as fp:</span><br><span class=\"line\">    for each in tag:</span><br><span class=\"line\">        text &#x3D; each.text</span><br><span class=\"line\">        fp.write(text)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">from smtplib import SMTP</span><br><span class=\"line\">from email.header import Header</span><br><span class=\"line\">from email.mime.text import MIMEText</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def main():</span><br><span class=\"line\">    # 请自行修改下面的邮件发送者和接收者</span><br><span class=\"line\">    sender &#x3D; &#39;xxxxxxxxx@qq.com&#39;  # 发送者的邮箱地址</span><br><span class=\"line\">    receivers &#x3D; [&#39;xxxxxxxxxx@qq.com&#39;]  # 接收者的邮箱地址</span><br><span class=\"line\">    message &#x3D; MIMEText(open(&#39;data.txt&#39;).read(), _subtype&#x3D;&#39;plain&#39;, _charset&#x3D;&#39;utf-8&#39;)</span><br><span class=\"line\">    message[&#39;From&#39;] &#x3D; Header(&#39;Your Old Friend&#39;, &#39;utf-8&#39;)  # 邮件的发送者</span><br><span class=\"line\">    message[&#39;To&#39;] &#x3D; Header(&#39;Darling Jay&#39;, &#39;utf-8&#39;)   # 邮件的接收者</span><br><span class=\"line\">    message[&#39;Subject&#39;] &#x3D; Header(&#39;To darling Jay&#39;, &#39;utf-8&#39;) # 邮件的标题</span><br><span class=\"line\">    smtper &#x3D; SMTP(&#39;smtp.qq.com&#39;)</span><br><span class=\"line\">    # 请自行修改下面的登录口令</span><br><span class=\"line\"></span><br><span class=\"line\">    smtper.login(sender, &#39;xxxxxxxxxxxxxxxx&#39;)  # QQ邮箱smtp的授权码</span><br><span class=\"line\">    smtper.sendmail(sender, receivers, message.as_string())</span><br><span class=\"line\">    print(&#39;邮件发送完成!&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n","categories":["Python爬虫"],"tags":["Python","爬虫","实战"]},{"title":"c++初探（二）","url":"/2020/09/17/c++%E5%88%9D%E6%8E%A2%EF%BC%88%E4%BA%8C%EF%BC%89/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\css\\APlayer.min.css\"><script src=\"\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\js\\Meting.min.js\"></script><h1 id=\"指针\"><a href=\"#指针\" class=\"headerlink\" title=\"指针\"></a>指针</h1><p><strong>指针占用空间</strong>：所有指针类型在32位操作系统下是4个字节</p>\n<p><strong>空指针</strong>：指针变量指向内存中编号为0的空间，用途：初始化指针变量， 空指针指向的内存是不可以访问的</p>\n<p><strong>野指针</strong>：指针变量指向非法的内存空间</p>\n<p>空指针和野指针都不是我们申请的空间，因此不要访问。</p>\n<h1 id=\"const修饰指针\"><a href=\"#const修饰指针\" class=\"headerlink\" title=\"const修饰指针\"></a>const修饰指针</h1><p>const修饰指针有三种情况</p>\n<ol>\n<li>const修饰指针 — 常量指针</li>\n<li>const修饰常量 — 指针常量</li>\n<li>const即修饰指针，又修饰常量</li>\n</ol>\n<p>示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> b = <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//const修饰的是指针，指针指向可以改，指针指向的值不可以更改</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"keyword\">int</span> * p1 = &amp;a; </span><br><span class=\"line\">\tp1 = &amp;b; <span class=\"comment\">//正确</span></span><br><span class=\"line\">\t<span class=\"comment\">//*p1 = 100;  报错</span></span><br><span class=\"line\">\t</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//const修饰的是常量，指针指向不可以改，指针指向的值可以更改</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> * <span class=\"keyword\">const</span> p2 = &amp;a;</span><br><span class=\"line\">\t<span class=\"comment\">//p2 = &amp;b; //错误</span></span><br><span class=\"line\">\t*p2 = <span class=\"number\">100</span>; <span class=\"comment\">//正确</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//const既修饰指针又修饰常量</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"keyword\">int</span> * <span class=\"keyword\">const</span> p3 = &amp;a;</span><br><span class=\"line\">\t<span class=\"comment\">//p3 = &amp;b; //错误</span></span><br><span class=\"line\">\t<span class=\"comment\">//*p3 = 100; //错误</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>看const右侧紧跟着的是指针还是常量, 是指针就是常量指针，是常量就是指针常量</p>\n</blockquote>\n<h1 id=\"指针和数组\"><a href=\"#指针和数组\" class=\"headerlink\" title=\"指针和数组\"></a>指针和数组</h1><p>示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> arr[] = &#123; <span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>,<span class=\"number\">10</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> * p = arr;  <span class=\"comment\">//指向数组的指针,arr就是数组的首地址，数组名arr就是一个指针</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"第一个元素： \"</span> &lt;&lt; arr[<span class=\"number\">0</span>] &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"指针访问第一个元素： \"</span> &lt;&lt; *p &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"comment\">//利用指针遍历数组</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; *p &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t\tp++;<span class=\"comment\">//往后偏移4个字节</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>当数组名传入到函数作为参数时，被退化为指向首元素的指针</p>\n</blockquote>\n<h1 id=\"指针和函数\"><a href=\"#指针和函数\" class=\"headerlink\" title=\"指针和函数\"></a>指针和函数</h1><p>作用：利用指针作函数参数，可以修改实参的值</p>\n<p>示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//值传递</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">swap1</span><span class=\"params\">(<span class=\"keyword\">int</span> a ,<span class=\"keyword\">int</span> b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> temp = a;</span><br><span class=\"line\">\ta = b; </span><br><span class=\"line\">\tb = temp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//地址传递</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">swap2</span><span class=\"params\">(<span class=\"keyword\">int</span> * p1, <span class=\"keyword\">int</span> *p2)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> temp = *p1;</span><br><span class=\"line\">\t*p1 = *p2;</span><br><span class=\"line\">\t*p2 = temp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> b = <span class=\"number\">20</span>;</span><br><span class=\"line\">\tswap1(a, b); <span class=\"comment\">// 值传递不会改变实参</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tswap2(&amp;a, &amp;b); <span class=\"comment\">//地址传递会改变实参</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"a = \"</span> &lt;&lt; a &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"b = \"</span> &lt;&lt; b &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>如果不想修改实参，就用值传递，如果想修改实参，就用地址传递</p>\n</blockquote>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/2020092411221147.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1BhbmRhMzI1,size_16,color_FFFFFF,t_70#pic_center\" alt=\"\"></p>\n<h1 id=\"内存模型\"><a href=\"#内存模型\" class=\"headerlink\" title=\"内存模型\"></a>内存模型</h1><p>C++程序在执行时，将内存大方向划分为<strong>4个区域</strong></p>\n<ul>\n<li><p>代码区：存放函数体的二进制代码，由操作系统进行管理的</p>\n</li>\n<li><p>全局区：存放全局变量和静态变量以及常量</p>\n</li>\n<li><p>栈区：由编译器自动分配释放, 存放函数的参数值,局部变量等</p>\n</li>\n<li><p>堆区：由程序员分配和释放,若程序员不释放,程序结束时由操作系统回收</p>\n</li>\n</ul>\n<h1 id=\"程序运行前\"><a href=\"#程序运行前\" class=\"headerlink\" title=\"程序运行前\"></a>程序运行前</h1><p>   在程序编译后，生成了exe可执行程序，<strong>未执行该程序前</strong>分为两个区域</p>\n<p>   <strong>代码区：</strong></p>\n<p>   存放 CPU 执行的机器指令</p>\n<p>   代码区是<strong>共享</strong>的，共享的目的是对于频繁被执行的程序，只需要在内存中有一份代码即可</p>\n<p>   代码区是<strong>只读</strong>的，使其只读的原因是防止程序意外地修改了它的指令</p>\n<p>   <strong>全局区：</strong></p>\n<p>   全局变量和静态变量存放在此.</p>\n<p>   全局区还包含了常量区, 字符串常量和其他常量也存放在此.</p>\n<p>   ==该区域的数据在程序结束后由操作系统释放==.</p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://github.com/ZhengLin-Li/Cpp-0-1-Resource/blob/master/%E7%AC%AC3%E9%98%B6%E6%AE%B5-C++%E6%A0%B8%E5%BF%83%E7%BC%96%E7%A8%8B%20%E8%B5%84%E6%96%99/%E8%AE%B2%E4%B9%89/assets/1545017602518.png?raw=true\" alt=\"\"></p>\n<p>总结：</p>\n<ul>\n<li>C++中在程序运行前分为全局区和代码区</li>\n<li>代码区特点是共享和只读</li>\n<li>全局区中存放全局变量、静态变量、常量</li>\n<li>常量区中存放 const修饰的全局常量 和 字符串常量</li>\n<li>const修饰的局部常量在栈中</li>\n</ul>\n<h1 id=\"程序运行后\"><a href=\"#程序运行后\" class=\"headerlink\" title=\"程序运行后\"></a>程序运行后</h1><p> <strong>栈区：</strong></p>\n<p> 由编译器自动分配释放, 存放函数的参数值,局部变量等</p>\n<p> 注意事项：不要返回局部变量的地址，栈区开辟的数据由编译器自动释放</p>\n<p> <strong>堆区：</strong></p>\n<p> 由程序员分配释放,若程序员不释放,程序结束时由操作系统回收</p>\n<p> 在C++中主要利用new在堆区开辟内存</p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;<span class=\"function\"><span class=\"keyword\">int</span>* <span class=\"title\">func</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>* a = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>(<span class=\"number\">10</span>);  <span class=\"comment\">//指针a指向的是new出来的对象的地址</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> a;  <span class=\"comment\">//即使函数（在栈中）的空间被回收，依然返回了new出来的对象的地址</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> *p = func();  <span class=\"comment\">//指针p指向new出来的对象的地址</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; *p &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; *p &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; *p &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    system(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>总结：</strong></p>\n<p>堆区数据由程序员管理开辟和释放</p>\n<p>堆区数据利用new关键字进行开辟内存</p>\n<h1 id=\"new操作符\"><a href=\"#new操作符\" class=\"headerlink\" title=\"new操作符\"></a>new操作符</h1><p> C++中利用==new==操作符在堆区开辟数据</p>\n<p> 堆区开辟的数据，由程序员手动开辟，手动释放，释放利用操作符 ==delete==</p>\n<p> 语法：<code>new 数据类型</code></p>\n<p> 利用new创建的数据，会返回该数据对应的类型的指针</p>\n<h1 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h1><h1 id=\"基本使用\"><a href=\"#基本使用\" class=\"headerlink\" title=\"基本使用\"></a>基本使用</h1><p>*<em>作用： *</em>给变量起别名</p>\n<p><strong>语法：</strong> <code>数据类型 &amp;别名 = 原名</code></p>\n<h1 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h1><ul>\n<li>引用必须初始化</li>\n<li>引用在初始化后，不可以改变</li>\n</ul>\n<h1 id=\"本质\"><a href=\"#本质\" class=\"headerlink\" title=\"本质\"></a>本质</h1><p>本质：<strong>引用的本质在c++内部实现是一个指针常量.</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\">/发现是引用，转换为 <span class=\"keyword\">int</span>* <span class=\"keyword\">const</span> ref = &amp;a;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"keyword\">int</span>&amp; ref)</span></span>&#123;</span><br><span class=\"line\">\tref = <span class=\"number\">100</span>; <span class=\"comment\">// ref是引用，转换为*ref = 100</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//自动转换为 int* const ref = &amp;a; 指针常量是指针指向不可改，也说明为什么引用不可更改</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span>&amp; ref = a; </span><br><span class=\"line\">\tref = <span class=\"number\">20</span>; <span class=\"comment\">//内部发现ref是引用，自动帮我们转换为: *ref = 20;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"a:\"</span> &lt;&lt; a &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"ref:\"</span> &lt;&lt; ref &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">\tfunc(a);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>结论：C++推荐用引用技术，因为语法方便，引用本质是指针常量，但是所有的指针操作编译器都帮我们做了</p>\n<h1 id=\"常量引用\"><a href=\"#常量引用\" class=\"headerlink\" title=\"常量引用\"></a>常量引用</h1><p><strong>作用：</strong>常量引用主要用来修饰形参，防止误操作</p>\n<p>在函数形参列表中，可以加==const修饰形参==，防止形参改变实参</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//引用使用的场景，通常用来修饰形参</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">showValue</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">int</span>&amp; v)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//v += 10;</span></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; v &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//int&amp; ref = 10;  引用本身需要一个合法的内存空间，因此这行错误</span></span><br><span class=\"line\">\t<span class=\"comment\">//加入const就可以了，编译器优化代码，int temp = 10; const int&amp; ref = temp;</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"keyword\">int</span>&amp; ref = <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//ref = 100;  //加入const后不可以修改变量</span></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; ref &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//函数中利用常量引用防止误操作修改实参</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">\tshowValue(a);</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"函数提高\"><a href=\"#函数提高\" class=\"headerlink\" title=\"函数提高\"></a>函数提高</h1><h1 id=\"函数默认参数\"><a href=\"#函数默认参数\" class=\"headerlink\" title=\"函数默认参数\"></a>函数默认参数</h1><p>在C++中，函数的形参列表中的形参是可以有默认值的。</p>\n<p>语法：<code>返回值类型 函数名 （参数= 默认值）{}</code></p>\n<p>注意事项:</p>\n<ul>\n<li><p>如果某个位置参数有默认值，那么从这个位置往后，从左向右，必须都要有默认值</p>\n</li>\n<li><p>如果函数声明有默认值，函数实现的时候就不能有默认参数</p>\n</li>\n<li><p>区分函数声明，函数实现，函数调用</p>\n</li>\n</ul>\n<h1 id=\"函数占位参数\"><a href=\"#函数占位参数\" class=\"headerlink\" title=\"函数占位参数\"></a>函数占位参数</h1><p>C++中函数的形参列表里可以有占位参数，用来做占位，调用函数时必须填补该位置</p>\n<p><strong>语法：</strong> <code>返回值类型 函数名 (数据类型){}</code></p>\n<p>在现阶段函数的占位参数存在意义不大，但是后面的课程中会用到该技术</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//函数占位参数 ，占位参数也可以有默认参数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span>)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"this is func\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"函数重载\"><a href=\"#函数重载\" class=\"headerlink\" title=\"函数重载\"></a>函数重载</h1><p><strong>作用：</strong>函数名可以相同，提高复用性</p>\n<p><strong>函数重载满足条件：</strong></p>\n<ul>\n<li>同一个作用域下</li>\n<li>函数名称相同</li>\n<li>函数参数<strong>类型不同</strong> 或者 <strong>个数不同</strong> 或者 <strong>顺序不同</strong></li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//函数重载注意事项</span></span><br><span class=\"line\"><span class=\"comment\">//1、引用作为重载条件</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"keyword\">int</span> &amp;a)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"func (int &amp;a) 调用 \"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">int</span> &amp;a)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"func (const int &amp;a) 调用 \"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//2、函数重载碰到函数默认参数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">func2</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b = <span class=\"number\">10</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"func2(int a, int b = 10) 调用\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">func2</span><span class=\"params\">(<span class=\"keyword\">int</span> a)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"func2(int a) 调用\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">\tfunc(a); <span class=\"comment\">//调用无const</span></span><br><span class=\"line\">\tfunc(<span class=\"number\">10</span>);<span class=\"comment\">//调用有const</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//func2(10); //碰到默认参数产生歧义，需要避免</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"类和对象\"><a href=\"#类和对象\" class=\"headerlink\" title=\"类和对象\"></a>类和对象</h1><h1 id=\"封装\"><a href=\"#封装\" class=\"headerlink\" title=\"封装\"></a>封装</h1><h1 id=\"struct和class区别\"><a href=\"#struct和class区别\" class=\"headerlink\" title=\"struct和class区别\"></a>struct和class区别</h1><p>在C++中 struct和class唯一的<strong>区别</strong>就在于 <strong>默认的访问权限不同</strong></p>\n<p>区别：</p>\n<ul>\n<li>struct 默认权限为公共</li>\n<li>class 默认权限为私有</li>\n</ul>\n<h1 id=\"对象的初始化和清理\"><a href=\"#对象的初始化和清理\" class=\"headerlink\" title=\"对象的初始化和清理\"></a>对象的初始化和清理</h1><h1 id=\"构造函数和析构函数\"><a href=\"#构造函数和析构函数\" class=\"headerlink\" title=\"构造函数和析构函数\"></a>构造函数和析构函数</h1><p><strong>构造函数语法：</strong><code>类名(){}</code></p>\n<p>程序在调用对象时候会自动调用构造，无须手动调用,而且只会调用一次</p>\n<p><strong>析构函数语法：</strong> <code>~类名(){}</code></p>\n<h1 id=\"构造函数调用\"><a href=\"#构造函数调用\" class=\"headerlink\" title=\"构造函数调用\"></a>构造函数调用</h1><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1、构造函数分类</span></span><br><span class=\"line\"><span class=\"comment\">// 按照参数分类分为 有参和无参构造   无参又称为默认构造函数</span></span><br><span class=\"line\"><span class=\"comment\">// 按照类型分类分为 普通构造和拷贝构造</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"comment\">//无参（默认）构造函数</span></span><br><span class=\"line\">\tPerson() &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"无参构造函数!\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//有参构造函数</span></span><br><span class=\"line\">\tPerson(<span class=\"keyword\">int</span> a) &#123;</span><br><span class=\"line\">\t\tage = a;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"有参构造函数!\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//拷贝构造函数</span></span><br><span class=\"line\">\tPerson(<span class=\"keyword\">const</span> Person&amp; p) &#123;</span><br><span class=\"line\">\t\tage = p.age;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"拷贝构造函数!\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//析构函数</span></span><br><span class=\"line\">\t~Person() &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"析构函数!\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> age;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//2、构造函数的调用</span></span><br><span class=\"line\"><span class=\"comment\">//调用无参构造函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tPerson p; <span class=\"comment\">//调用无参构造函数</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//调用有参的构造函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test02</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//2.1  括号法，常用</span></span><br><span class=\"line\">\t<span class=\"function\">Person <span class=\"title\">p1</span><span class=\"params\">(<span class=\"number\">10</span>)</span></span>;</span><br><span class=\"line\">\t<span class=\"comment\">//注意1：调用无参构造函数不能加括号，如果加了编译器认为这是一个函数声明</span></span><br><span class=\"line\">\t<span class=\"comment\">//Person p2();</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//2.2 显式法</span></span><br><span class=\"line\">\tPerson p2 = Person(<span class=\"number\">10</span>); </span><br><span class=\"line\">\tPerson p3 = Person(p2);</span><br><span class=\"line\">\t<span class=\"comment\">//Person(10)单独写就是匿名对象  当前行结束之后，马上析构</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//2.3 隐式转换法</span></span><br><span class=\"line\">\tPerson p4 = <span class=\"number\">10</span>; <span class=\"comment\">// Person p4 = Person(10); </span></span><br><span class=\"line\">\tPerson p5 = p4; <span class=\"comment\">// Person p5 = Person(p4); </span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//注意2：不能利用 拷贝构造函数 初始化匿名对象 编译器认为是对象声明</span></span><br><span class=\"line\">\t<span class=\"comment\">//Person p5(p4);</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\ttest01();</span><br><span class=\"line\">\t<span class=\"comment\">//test02();</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"拷贝构造函数调用时机\"><a href=\"#拷贝构造函数调用时机\" class=\"headerlink\" title=\"拷贝构造函数调用时机\"></a>拷贝构造函数调用时机</h1><p>C++中拷贝构造函数调用时机通常有三种情况</p>\n<ul>\n<li>使用一个已经创建完毕的对象来初始化一个新对象</li>\n<li>值传递的方式给函数参数传值(作为函数参数)</li>\n<li>以值方式返回局部对象(作为函数返回值)</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\tPerson() &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"无参构造函数!\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t\tmAge = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tPerson(<span class=\"keyword\">int</span> age) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"有参构造函数!\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t\tmAge = age;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tPerson(<span class=\"keyword\">const</span> Person&amp; p) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"拷贝构造函数!\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t\tmAge = p.mAge;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//析构函数在释放内存之前调用</span></span><br><span class=\"line\">\t~Person() &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"析构函数!\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> mAge;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//1. 使用一个已经创建完毕的对象来初始化一个新对象</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\">Person <span class=\"title\">man</span><span class=\"params\">(<span class=\"number\">100</span>)</span></span>; <span class=\"comment\">//p对象已经创建完毕</span></span><br><span class=\"line\">\t<span class=\"function\">Person <span class=\"title\">newman</span><span class=\"params\">(man)</span></span>; <span class=\"comment\">//调用拷贝构造函数</span></span><br><span class=\"line\">\tPerson newman2 = man; <span class=\"comment\">//拷贝构造</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//Person newman3;</span></span><br><span class=\"line\">\t<span class=\"comment\">//newman3 = man; //不是调用拷贝构造函数，赋值操作</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//2. 值传递的方式给函数参数传值</span></span><br><span class=\"line\"><span class=\"comment\">//相当于Person p1 = p;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">doWork</span><span class=\"params\">(Person p1)</span> </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test02</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tPerson p; <span class=\"comment\">//无参构造函数</span></span><br><span class=\"line\">\tdoWork(p);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//3. 以值方式返回局部对象</span></span><br><span class=\"line\"><span class=\"function\">Person <span class=\"title\">doWork2</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tPerson p1;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; (<span class=\"keyword\">int</span> *)&amp;p1 &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> p1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test03</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tPerson p = doWork2();</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; (<span class=\"keyword\">int</span> *)&amp;p &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//test01();</span></span><br><span class=\"line\">\t<span class=\"comment\">//test02();</span></span><br><span class=\"line\">\ttest03();</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"构造函数调用规则\"><a href=\"#构造函数调用规则\" class=\"headerlink\" title=\"构造函数调用规则\"></a>构造函数调用规则</h1><p>默认情况下，c++编译器至少给一个类添加3个函数</p>\n<p>1．默认构造函数(无参，函数体为空)</p>\n<p>2．默认析构函数(无参，函数体为空)</p>\n<p>3．默认拷贝构造函数，对属性进行值拷贝</p>\n<p>构造函数调用规则如下：</p>\n<ul>\n<li>如果用户定义有参构造函数，c++不在提供默认无参构造，但是会提供默认拷贝构造</li>\n<li>如果用户定义拷贝构造函数，c++不会再提供其他构造函数</li>\n</ul>\n<h1 id=\"深拷贝与浅拷贝\"><a href=\"#深拷贝与浅拷贝\" class=\"headerlink\" title=\"深拷贝与浅拷贝\"></a>深拷贝与浅拷贝</h1><p>浅拷贝：简单的赋值拷贝操作</p>\n<p>深拷贝：在堆区重新申请空间，进行拷贝操作</p>\n<p>如果属性有在堆区开辟的，一定要自己提供拷贝构造函数，防止浅拷贝带来的问题</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"comment\">//无参（默认）构造函数</span></span><br><span class=\"line\">\tPerson() &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"无参构造函数!\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//有参构造函数</span></span><br><span class=\"line\">\tPerson(<span class=\"keyword\">int</span> age ,<span class=\"keyword\">int</span> <span class=\"built_in\">height</span>) &#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"有参构造函数!\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tm_age = age;</span><br><span class=\"line\">\t\tm_height = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>(<span class=\"built_in\">height</span>);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//拷贝构造函数  </span></span><br><span class=\"line\">\tPerson(<span class=\"keyword\">const</span> Person&amp; p) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"拷贝构造函数!\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">//如果不利用深拷贝在堆区创建新内存，会导致浅拷贝带来的重复释放堆区问题</span></span><br><span class=\"line\">\t\tm_age = p.m_age;</span><br><span class=\"line\">\t\tm_height = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>(*p.m_height);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//析构函数</span></span><br><span class=\"line\">\t~Person() &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"析构函数!\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (m_height != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">delete</span> m_height;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> m_age;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span>* m_height;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\">Person <span class=\"title\">p1</span><span class=\"params\">(<span class=\"number\">18</span>, <span class=\"number\">180</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\">Person <span class=\"title\">p2</span><span class=\"params\">(p1)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"p1的年龄： \"</span> &lt;&lt; p1.m_age &lt;&lt; <span class=\"string\">\" 身高： \"</span> &lt;&lt; *p1.m_height &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"p2的年龄： \"</span> &lt;&lt; p2.m_age &lt;&lt; <span class=\"string\">\" 身高： \"</span> &lt;&lt; *p2.m_height &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\ttest01();</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"初始化列表\"><a href=\"#初始化列表\" class=\"headerlink\" title=\"初始化列表\"></a>初始化列表</h1><p><strong>作用：</strong>用来初始化属性</p>\n<p><strong>语法：</strong><code>构造函数()：属性1(值1),属性2（值2）... {}</code></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\">Person(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b, <span class=\"keyword\">int</span> c) :m_A(a), m_B(b), m_C(c) &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"类对象作为类成员\"><a href=\"#类对象作为类成员\" class=\"headerlink\" title=\"类对象作为类成员\"></a>类对象作为类成员</h1><p>C++类中的成员可以是另一个类的对象，我们称该成员为 对象成员</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span> &#123;</span>&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    A a；</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当类中成员是其他类对象时，我们称该成员为 对象成员<br>构造的顺序是 ：先调用对象成员的构造，再调用本类构造；析构顺序与构造相反</p>\n<h1 id=\"静态成员\"><a href=\"#静态成员\" class=\"headerlink\" title=\"静态成员\"></a>静态成员</h1><p>静态成员就是在成员变量和成员函数前加上关键字static</p>\n<p>静态成员分为：</p>\n<ul>\n<li>静态成员变量<ul>\n<li>所有对象共享同一份数据</li>\n<li>在编译阶段分配内存</li>\n<li>类内声明，类外初始化</li>\n</ul>\n</li>\n<li>静态成员函数<ul>\n<li>所有对象共享同一个函数</li>\n<li>静态成员函数只能访问静态成员变量</li>\n</ul>\n</li>\n</ul>\n<p>两种访问方式：<br>1、通过对象</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\">p1.func();</span><br></pre></td></tr></table></figure>\n\n<p>2、通过类名</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\">Person::func();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"C-对象模型和this指针\"><a href=\"#C-对象模型和this指针\" class=\"headerlink\" title=\"C++对象模型和this指针\"></a>C++对象模型和this指针</h3><h4 id=\"成员变量和成员函数分开存储\"><a href=\"#成员变量和成员函数分开存储\" class=\"headerlink\" title=\"成员变量和成员函数分开存储\"></a>成员变量和成员函数分开存储</h4><p>在C++中，类内的成员变量和成员函数分开存储</p>\n<p>只有非静态成员变量才属于类的对象上</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\tPerson() &#123;</span><br><span class=\"line\">\t\tmA = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//非静态成员变量占对象空间</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> mA;</span><br><span class=\"line\">\t<span class=\"comment\">//静态成员变量不占对象空间</span></span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">int</span> mB; </span><br><span class=\"line\">\t<span class=\"comment\">//函数也不占对象空间，所有函数共享一个函数实例</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">func</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"mA:\"</span> &lt;&lt; <span class=\"keyword\">this</span>-&gt;mA &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//静态成员函数也不占对象空间</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">sfunc</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"this指针\"><a href=\"#this指针\" class=\"headerlink\" title=\"this指针\"></a>this指针</h4><p>我们知道在C++中成员变量和成员函数是分开存储的</p>\n<p>每一个非静态成员函数只会诞生一份函数实例，也就是说多个同类型的对象会共用一块代码</p>\n<p>那么问题是：这一块代码是如何区分那个对象调用自己的呢？</p>\n<p>c++通过提供特殊的对象指针，this指针，解决上述问题。<strong>this指针指向被调用的成员函数所属的对象</strong></p>\n<p>this指针是隐含每一个非静态成员函数内的一种指针</p>\n<p>this指针不需要定义，直接使用即可</p>\n<p>this指针的用途：</p>\n<ul>\n<li>当形参和成员变量同名时，可用this指针来区分</li>\n<li>在类的非静态成员函数中返回对象本身，可使用<code>return *this</code>，这里<code>this</code>是指向本对象的指针，<code>*</code>是取值运算符，<code>*this</code>是本对象本身</li>\n</ul>\n<h4 id=\"空指针访问成员函数\"><a href=\"#空指针访问成员函数\" class=\"headerlink\" title=\"空指针访问成员函数\"></a>空指针访问成员函数</h4><p>C++中空指针也是可以调用成员函数的，但是也要注意有没有用到this指针</p>\n<p>如果用到this指针，需要加以判断保证代码的健壮性</p>\n<h4 id=\"const修饰成员函数\"><a href=\"#const修饰成员函数\" class=\"headerlink\" title=\"const修饰成员函数\"></a>const修饰成员函数</h4><p><strong>常函数：</strong></p>\n<ul>\n<li>成员函数后加const后我们称为这个函数为<strong>常函数</strong></li>\n<li>常函数内不可以修改成员属性</li>\n<li>成员属性声明时加关键字mutable后，在常函数中依然可以修改</li>\n</ul>\n<p><strong>常对象：</strong></p>\n<ul>\n<li>声明对象前加const称该对象为常对象</li>\n<li>常对象只能调用常函数</li>\n</ul>\n<p>​    this指针的本质是一个指针常量，指针的指向不可修改，编译器中相当于</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\">Person * <span class=\"keyword\">const</span> <span class=\"keyword\">this</span>;</span><br></pre></td></tr></table></figure>\n\n<p>​    如果想让指针指向的值也不可以修改，需要声明常函数，编译器中相当于</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Person * <span class=\"keyword\">const</span> <span class=\"keyword\">this</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"友元\"><a href=\"#友元\" class=\"headerlink\" title=\"友元\"></a>友元</h3><p>生活中你的家有客厅(Public)，有你的卧室(Private)</p>\n<p>客厅所有来的客人都可以进去，但是你的卧室是私有的，也就是说只有你能进去</p>\n<p>但是呢，你也可以允许你的好闺蜜好基友进去。</p>\n<p>在程序里，有些私有属性 也想让类外特殊的一些函数或者类进行访问，就需要用到友元的技术</p>\n<p>友元的目的就是让一个函数或者类 访问另一个类中私有成员</p>\n<p>友元的关键字为 ==friend==</p>\n<p>友元的三种实现</p>\n<ul>\n<li>全局函数做友元（让这个全局函数可以访问另一个类中私有成员）</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//告诉编译器 goodGay全局函数 是 Building类的好朋友，可以访问类中的私有内容，class中</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">friend</span> <span class=\"keyword\">void</span> <span class=\"title\">goodGay</span><span class=\"params\">(Building * building)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>类做友元（让这个类可以访问另一个类中私有成员）</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//告诉编译器 goodGay类是Building类的好朋友，可以访问到Building类中私有内容，class中</span></span><br><span class=\"line\"><span class=\"keyword\">friend</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">goodGay</span>;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>成员函数做友元（让这个成员函数可以访问另一个类中私有成员）</li>\n</ul>\n<h2 id=\"模板\"><a href=\"#模板\" class=\"headerlink\" title=\"模板\"></a>模板</h2><p>模板就是建立<strong>通用的模具</strong>，大大<strong>提高复用性</strong></p>\n<h3 id=\"函数模板\"><a href=\"#函数模板\" class=\"headerlink\" title=\"函数模板\"></a>函数模板</h3><ul>\n<li>C++另一种编程思想称为 ==泛型编程== ，主要利用的技术就是模板</li>\n<li>C++提供两种模板机制:<strong>函数模板</strong>和<strong>类模板</strong></li>\n</ul>\n<h4 id=\"函数模板语法\"><a href=\"#函数模板语法\" class=\"headerlink\" title=\"函数模板语法\"></a>函数模板语法</h4><p>函数模板作用：</p>\n<p>建立一个通用函数，其函数返回值类型和形参类型可以不具体制定，用一个<strong>虚拟的类型</strong>来代表。</p>\n<p><strong>语法：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\">函数声明或定义</span><br></pre></td></tr></table></figure>\n\n<p><strong>解释：</strong></p>\n<p>template — 声明创建模板</p>\n<p>typename — 表面其后面的符号是一种数据类型，可以用class代替</p>\n<p>T — 通用的数据类型，名称可以替换，通常为大写字母</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//利用模板提供通用的交换函数</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">mySwap</span><span class=\"params\">(T&amp; a, T&amp; b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tT temp = a;</span><br><span class=\"line\">\ta = b;</span><br><span class=\"line\">\tb = temp;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//利用模板实现交换</span></span><br><span class=\"line\"><span class=\"comment\">//1、自动类型推导</span></span><br><span class=\"line\">mySwap(a, b);</span><br><span class=\"line\"><span class=\"comment\">//2、显示指定类型</span></span><br><span class=\"line\">mySwap&lt;<span class=\"keyword\">int</span>&gt;(a, b);</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<p>参考：<a href=\"https://github.com/ZhengLin-Li/Cpp-0-1-Resource/blob/master/%E7%AC%AC1%E9%98%B6%E6%AE%B5C%2B%2B%20%E5%8C%A0%E5%BF%83%E4%B9%8B%E4%BD%9C%20%E4%BB%8E0%E5%88%B01%E5%85%A5%E9%97%A8/C%2B%2B%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%E8%AE%B2%E4%B9%89/C%2B%2B%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8.md\" target=\"_blank\" rel=\"noopener\">https://github.com/ZhengLin-Li/Cpp-0-1-Resource/blob/master/%E7%AC%AC1%E9%98%B6%E6%AE%B5C%2B%2B%20%E5%8C%A0%E5%BF%83%E4%B9%8B%E4%BD%9C%20%E4%BB%8E0%E5%88%B01%E5%85%A5%E9%97%A8/C%2B%2B%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%E8%AE%B2%E4%B9%89/C%2B%2B%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8.md</a></p>\n"},{"title":"my-first-blog","url":"/2020/06/16/my-first-blog/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\css\\APlayer.min.css\"><script src=\"\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\js\\Meting.min.js\"></script><h1 id=\"my-first-Blog\"><a href=\"#my-first-Blog\" class=\"headerlink\" title=\"my first Blog\"></a>my first Blog</h1><p>各位好，欢迎来到我的Blog。</p>\n<p>本博客采用hexo框架，GitHub、gitee、coding托管，现为butterfly主题。</p>\n<p>这是我的第一篇博客。</p>\n","categories":["个人博客"]},{"title":"hexo butterfly折腾心得","url":"/2020/08/11/hexo%20butterfly%E6%8A%98%E8%85%BE%E5%BF%83%E5%BE%97/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\css\\APlayer.min.css\"><script src=\"\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\js\\Meting.min.js\"></script><p>魔改了两天的butterfly主题，说下心得吧</p>\n<h1 id=\"我的博客\"><a href=\"#我的博客\" class=\"headerlink\" title=\"我的博客\"></a>我的博客</h1><p>首先给各位观众老爷们看下效果<br><a href=\"https://zhenglin-li.github.io/\" target=\"_blank\" rel=\"noopener\">https://zhenglin-li.github.io/</a><br><a href=\"http://9pshr3.coding-pages.com/\">http://9pshr3.coding-pages.com/</a><br>这两个一样的，第二个速度快</p>\n<h1 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h1><ol>\n<li><p>butterfly主题官方的参考文档：<a href=\"https://demo.jerryc.me/\" target=\"_blank\" rel=\"noopener\">https://demo.jerryc.me/</a></p>\n</li>\n<li><p>0基础从hexo开始的参考文档：<a href=\"https://www.jianshu.com/p/a1a4ebf0e5fc\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/a1a4ebf0e5fc</a></p>\n</li>\n<li><p>0基础从hexo开始的参考文档：<a href=\"https://blog.csdn.net/weixin_42429718/article/details/105723193\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/weixin_42429718/article/details/105723193</a></p>\n</li>\n<li><p>音乐页面的参考文档：<a href=\"https://blog.csdn.net/qq_46435629/article/details/106295515\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/qq_46435629/article/details/106295515</a></p>\n</li>\n<li><p>hexo douban的使用参考文档：<a href=\"https://github.com/mythsman/hexo-douban\" target=\"_blank\" rel=\"noopener\">https://github.com/mythsman/hexo-douban</a></p>\n</li>\n<li><p>在butterfy中使用iconfont图标：<a href=\"https://blog.csdn.net/u012208219/article/details/106883012/\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/u012208219/article/details/106883012/</a></p>\n</li>\n</ol>\n<h1 id=\"坑\"><a href=\"#坑\" class=\"headerlink\" title=\"坑\"></a>坑</h1><ol>\n<li><p>刚开始改主题配置文件的时候，一定要记得修改的是<code>blog根目录/source/_data</code>下的<code>butterfly.yml</code>，没有你就创建一个，然后把本来的配置文件里的代码复制过去再进行修改</p>\n</li>\n<li><p>参考文档里面对增加音乐界面的描述不是很清楚，可以参考<a href=\"https://blog.csdn.net/qq_46435629/article/details/106295515\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/qq_46435629/article/details/106295515</a></p>\n</li>\n<li><p>在hexo douban的使用中</p>\n<ol>\n<li><p>书籍电影游戏页面分别对应books、movies、games</p>\n</li>\n<li><p>注意这里不用hexo new page books，hexo douban会自动生成的</p>\n</li>\n<li><p>hexo douban是利用爬虫来实现的，每日在终端（powershell或git bash）输入<code>hexo douban -bgm</code>多次会触发豆瓣的反爬虫机制，导致获取不到数据的情况，等过一天就好了<br>附报错提示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">   INFO  0 books have been loaded in 1336 ms, because you are offline \t\tor your network is bad</span><br><span class=\"line\">INFO  0 movies have been loaded in 1409 ms, because you are offline \tor your network is bad</span><br><span class=\"line\">INFO  0 games have been loaded in 1360 ms, because you are offline \t\tor your network is bad</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n<li><p>在butterfy中使用iconfont图标：<a href=\"https://blog.csdn.net/u012208219/article/details/106883012/\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/u012208219/article/details/106883012/</a></p>\n</li>\n</ol>\n","categories":["个人博客"]},{"title":"mysql 安装教程和注意事项","url":"/2020/07/19/mysql%E5%AE%89%E8%A3%85/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\css\\APlayer.min.css\"><script src=\"\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\js\\Meting.min.js\"></script><h1 id=\"mysql-安装教程和注意事项\"><a href=\"#mysql-安装教程和注意事项\" class=\"headerlink\" title=\"mysql 安装教程和注意事项\"></a>mysql 安装教程和注意事项</h1><h2 id=\"下载MySql\"><a href=\"#下载MySql\" class=\"headerlink\" title=\"下载MySql\"></a>下载MySql</h2><p>官网下载地址：<a href=\"https://dev.mysql.com/downloads/mysql/，\" target=\"_blank\" rel=\"noopener\">https://dev.mysql.com/downloads/mysql/，</a> 我选的第一个版本。</p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://i.loli.net/2020/07/19/yiSjxTZ1ncPz3AH.png\" alt=\"image-20200719173654976\"></p>\n<h2 id=\"解压和配置\"><a href=\"#解压和配置\" class=\"headerlink\" title=\"解压和配置\"></a>解压和配置</h2><p>我是直接解压到D盘，总之路径不能有中文，解压到指定文件目录。</p>\n<ol>\n<li><p>打开解压后的MySql文件在根目录下创建my.ini (mysql配置文件)。</p>\n</li>\n<li><p>新建文本文件输入以下内容,并修改文件名为my.ini</p>\n</li>\n<li><p>注意里面的basedir和datadir字段要视安装位置而定</p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">[mysql]</span><br><span class=\"line\"> </span><br><span class=\"line\"># 设置mysql客户端默认字符集</span><br><span class=\"line\"> </span><br><span class=\"line\">default-character-set&#x3D;utf8</span><br><span class=\"line\"> </span><br><span class=\"line\">[mysqld]</span><br><span class=\"line\"> </span><br><span class=\"line\">#设置3306端口</span><br><span class=\"line\"> </span><br><span class=\"line\">port &#x3D; 3306</span><br><span class=\"line\"> </span><br><span class=\"line\"># 设置mysql的安装目录</span><br><span class=\"line\"> </span><br><span class=\"line\">basedir&#x3D;D:\\mysql-8.0.21-winx64</span><br><span class=\"line\"> </span><br><span class=\"line\"># 设置mysql数据库的数据的存放目录</span><br><span class=\"line\"> </span><br><span class=\"line\">datadir&#x3D;D:\\mysql-8.0.21-winx64\\data</span><br><span class=\"line\"> </span><br><span class=\"line\"># 允许最大连接数</span><br><span class=\"line\"> </span><br><span class=\"line\">max_connections&#x3D;200</span><br><span class=\"line\"> </span><br><span class=\"line\"># 服务端使用的字符集默认为8比特编码的latin1字符集</span><br><span class=\"line\"> </span><br><span class=\"line\">character-set-server&#x3D;utf8</span><br><span class=\"line\"> </span><br><span class=\"line\"># 创建新表时将使用的默认存储引擎</span><br><span class=\"line\"> </span><br><span class=\"line\">default-storage-engine&#x3D;INNODB</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li><p>找到CMD命令提示符，右键以管理员身份运行</p>\n<p>如下图</p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://i.loli.net/2020/07/19/beTQEgw1HdWI2GA.png\" alt=\"\"></p>\n</li>\n</ol>\n<p>​             进入mysql子目录bin，如D: 进入D盘，cd 文件夹名 打开文件夹等操作不再赘述。</p>\n<p>​             在bin下依次输入:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysqld --install</span><br></pre></td></tr></table></figure>\n\n<pre><code>(安装) </code></pre><p>​             </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysqld --initialize</span><br></pre></td></tr></table></figure>\n\n<pre><code>（初始化）</code></pre><p>​        </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">net start mysql</span><br></pre></td></tr></table></figure>\n\n<p>​              （运行）</p>\n<p>如果出现“发生系统错误2”的提示，我的解决方法是：</p>\n<p>在<strong>管理员命令行窗口</strong>下，进入<strong>安装的mysql的bin</strong>目录下：</p>\n<p><strong>1.  mysql -remove</strong></p>\n<p><strong>2.  mysql -install</strong></p>\n<p><strong>3.  net start mysql</strong></p>\n<p><strong>(4. net stop mysql (关闭mysql))</strong></p>\n<h2 id=\"配置环境变量\"><a href=\"#配置环境变量\" class=\"headerlink\" title=\"配置环境变量\"></a>配置环境变量</h2><ol>\n<li>直接搜索环境变量进入到页面</li>\n<li>点击系统变量的Path，编辑Path。</li>\n<li>点击新建，把bin目录加入其中。</li>\n</ol>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://i.loli.net/2020/07/20/eORgKXBpbGaZ5YV.png\" alt=\"\"></p>\n<h2 id=\"重设密码\"><a href=\"#重设密码\" class=\"headerlink\" title=\"重设密码\"></a>重设密码</h2><p>这一步花了我很长时间，是因为在my.ini文件中加入mysqld –skip-grant-tables跳过密码验证的方法在mysql8.0中已失效，使用使用以下步骤重设密码</p>\n<ol>\n<li>打开命令窗口cmd，输入命令：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">net stop mysql</span><br></pre></td></tr></table></figure>\n\n<p>停止MySQL服务，</p>\n<ol start=\"2\">\n<li>开启跳过密码验证登录的MySQL服务</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysqld --console --skip-grant-tables --shared-memory</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>再打开一个新的cmd，无密码登录MySQL，输入登录命令：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql -u root -p</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>密码置为空，命令如下：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">use mysql</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">update user set authentication_string&#x3D;&#39;&#39; where user&#x3D;&#39;root&#39;;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>退出mysql，执行命令：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">quit</span><br></pre></td></tr></table></figure>\n\n\n\n<ol start=\"6\">\n<li><p>关闭以-console –skip-grant-tables –shared-memory 启动的MySQL服务，</p>\n</li>\n<li><p>打开命令框，输入：net start mysql 启动MySQL服务，一管理员的身份运行cmd。</p>\n</li>\n<li><p>步骤4密码已经置空，所以无密码状态登录MySQL，输入登录命令：mysql -u root -p</p>\n</li>\n<li><p>修改密码，如下图：</p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;新密码&#39;;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"10\">\n<li>验证更改后密码正确登录</li>\n</ol>\n<p>输入quit，退出当前登录，输入登录命令：mysql -u root -p</p>\n<p>输入密码，成功登录，到此，重置密码结束。</p>\n","categories":["数据库"],"tags":["mysql","数据库"]},{"title":"二叉树的遍历","url":"/2020/09/16/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86%EF%BC%88%E5%89%8D%E5%BA%8F%E3%80%81%E4%B8%AD%E5%BA%8F%E3%80%81%E5%90%8E%E5%BA%8F%E3%80%81%E5%B7%B2%E7%9F%A5%E5%89%8D%E4%B8%AD%E5%BA%8F%E6%B1%82%E5%90%8E%E5%BA%8F%E3%80%81%E5%B7%B2%E7%9F%A5%E4%B8%AD%E5%90%8E%E5%BA%8F%E6%B1%82%E5%89%8D%E5%BA%8F%EF%BC%89/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\css\\APlayer.min.css\"><script src=\"\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\js\\Meting.min.js\"></script><p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img2018.cnblogs.com/blog/1590962/201903/1590962-20190306170951841-1886726002.jpg\" alt=\"\"></p>\n<p>之前的一篇随笔（<a href=\"https://www.cnblogs.com/lanhaicode/p/10358736.html\" target=\"_blank\" rel=\"noopener\">二叉树、前序遍历、中序遍历、后序遍历</a>）只对二叉树的遍历进行了笼统的描述，这篇随笔重点对前、中、后序的遍历顺序进行分析</p>\n<h1 id=\"二叉树的遍历\"><a href=\"#二叉树的遍历\" class=\"headerlink\" title=\"二叉树的遍历\"></a>二叉树的遍历</h1><p>二叉树的深度优先遍历可细分为前序遍历、中序遍历、后序遍历，这三种遍历可以用递归实现（本篇随笔主要分析递归实现），也可使用非递归实现的</p>\n<p>前序遍历：根节点-&gt;左子树-&gt;右子树<strong>（根-&gt;左-&gt;右）</strong></p>\n<p>中序遍历：左子树-&gt;根节点-&gt;右子树<strong>（左-&gt;根-&gt;右）</strong></p>\n<p>后序遍历：左子树-&gt;右子树-&gt;根节点<strong>（左-&gt;右-&gt;根）</strong></p>\n<p>在进行已知两种遍历顺序求另一种遍历顺序前，先看一下不同遍历顺序对应的代码</p>\n<p><strong>前序遍历</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"> 1 &#x2F;* 以递归方式 前序遍历二叉树 *&#x2F;</span><br><span class=\"line\"> 2 void PreOrderTraverse(BiTree t, int level)</span><br><span class=\"line\"> 3 &#123;</span><br><span class=\"line\"> 4     if (t &#x3D;&#x3D; NULL)    </span><br><span class=\"line\"> 5     &#123;</span><br><span class=\"line\"> 6         return ;</span><br><span class=\"line\"> 7     &#125;</span><br><span class=\"line\"> 8     printf(&quot;data &#x3D; %c level &#x3D; %d\\n &quot;, t-&gt;data, level);</span><br><span class=\"line\"> 9     PreOrderTraverse(t-&gt;lchild, level + 1);</span><br><span class=\"line\">10     PreOrderTraverse(t-&gt;rchild, level + 1);</span><br><span class=\"line\">11 &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>中序遍历</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"> 1 &#x2F;* 以递归方式 中序遍历二叉树 *&#x2F;</span><br><span class=\"line\"> 2 void PreOrderTraverse(BiTree t, int level)</span><br><span class=\"line\"> 3 &#123;</span><br><span class=\"line\"> 4     if (t &#x3D;&#x3D; NULL)    </span><br><span class=\"line\"> 5     &#123;</span><br><span class=\"line\"> 6         return ;</span><br><span class=\"line\"> 7     &#125;</span><br><span class=\"line\"> 8     PreOrderTraverse(t-&gt;lchild, level + 1);</span><br><span class=\"line\"> 9     printf(&quot;data &#x3D; %c level &#x3D; %d\\n &quot;, t-&gt;data, level);</span><br><span class=\"line\">10     PreOrderTraverse(t-&gt;rchild, level + 1);</span><br><span class=\"line\">11 &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>后序遍历</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"> 1 &#x2F;* 以递归方式 后序遍历二叉树 *&#x2F;</span><br><span class=\"line\"> 2 void PreOrderTraverse(BiTree t, int level)</span><br><span class=\"line\"> 3 &#123;</span><br><span class=\"line\"> 4     if (t &#x3D;&#x3D; NULL)    </span><br><span class=\"line\"> 5     &#123;</span><br><span class=\"line\"> 6         return ;</span><br><span class=\"line\"> 7     &#125;</span><br><span class=\"line\"> 8     PreOrderTraverse(t-&gt;lchild, level + 1);</span><br><span class=\"line\"> 9     PreOrderTraverse(t-&gt;rchild, level + 1);</span><br><span class=\"line\">10     printf(&quot;data &#x3D; %c level &#x3D; %d\\n &quot;, t-&gt;data, level);</span><br><span class=\"line\">11 &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p> 三种遍历方式对应的代码几乎相同，只是一条语句的位置发生了变化</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">printf(&quot;data &#x3D; %c level &#x3D; %d\\n &quot;, t-&gt;data, level);</span><br></pre></td></tr></table></figure>\n\n<p> 只看文字和代码来理解遍历的过程是比较困难的，建议读者亲自去遍历，为了理清遍历的过程下面上题</p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img2018.cnblogs.com/blog/1590962/201903/1590962-20190306194614674-1602895543.png\" alt=\"\"></p>\n<p>（图片来源：<a href=\"https://www.cnblogs.com/xinchrome/p/4905608.html）\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/xinchrome/p/4905608.html）</a></p>\n<h2 id=\"前序遍历\"><a href=\"#前序遍历\" class=\"headerlink\" title=\"前序遍历\"></a>前序遍历</h2><p>前序的遍历的特点，根节点-&gt;左子树-&gt;右子树，注意看前序的遍历的代码printf语句是放在两条递归语句之前的，所以先<strong>访问根节点G，打印G</strong>，然后访问左子树D，此时左子树D又作为根节点，<strong>打印D，</strong>再访问D的左子树A</p>\n<p>A又作为根节点，<strong>打印A，</strong>A没有左子树或者右子树，函数调用结束返回到D节点（此时已经打印出来的有：<strong>GDA</strong>）D节点的左子树已经递归完成，现在递归访问右子树F，F作为根节点，<strong>打印F，</strong>F有左子树访问左子树E，E作为</p>\n<p>根节点，<strong>打印E，</strong>（此时已经打印出来的有：<strong>GDAFE</strong>），E没有左子树和右子树，函数递归结束返回F节点，F的左子树已经递归完成了，但没有右子树，所以函数递归结束，返回D节点，D节点的左子树和右子树递归全部完成，</p>\n<p>函数递归结束返回G节点，访问G节点的右子树M，M作为根节点，<strong>打印M，</strong>访问M的左子树H，H作为根节点，<strong>打印H，</strong>（此时已经打印出来的有：<strong>GDAFEMH</strong>）H没有左子树和右子树，函数递归结束，返回M节点，M节点的左子树已经</p>\n<p>递归完成，访问右子树Z，Z作为根节点，<strong>打印Z，</strong>Z没有左子树和右子树，函数递归结束，返回M节点，M节点的左子树右子树递归全部完成，函数递归结束，返回G节点，G节点的左右子树递归全部完成，整个二叉树的遍历就结束了</p>\n<p>（MGJ，终于打完了··）</p>\n<p><strong>前序遍历结果：GDAFEMHZ</strong></p>\n<p><strong>总结一下前序遍历步骤</strong></p>\n<p>第一步：<strong>打印该节点（再三考虑还是把访问根节点这句话去掉了）</strong></p>\n<p>第二步：访问左子树，返回到第一步（注意：返回到第一步的意思是将根节点的左子树作为<strong>新的根节点</strong>，就好比图中D是G的左子树但是D也是A节点和F节点的根节点）</p>\n<p>第三步：访问右子树，返回到第一步</p>\n<p>第四步：结束递归，返回到上一个节点</p>\n<p> <strong>前序遍历的另一种表述：</strong></p>\n<p><strong>（1）访问根节点</strong></p>\n<p><strong>（2）前序遍历左子树</strong></p>\n<p><strong>（3）前序遍历右子树</strong></p>\n<p><strong>（在完成第2,3步的时候，也是要按照前序遍历二叉树的规则完成）</strong></p>\n<p><strong>前序遍历结果：GDAFEMHZ</strong></p>\n<h2 id=\"中序遍历（详细遍历过程就不再赘述了，-┬＿┬-）\"><a href=\"#中序遍历（详细遍历过程就不再赘述了，-┬＿┬-）\" class=\"headerlink\" title=\"中序遍历（详细遍历过程就不再赘述了，(┬＿┬)）\"></a>中序遍历（详细遍历过程就不再赘述了，(┬＿┬)）</h2><h2 id=\"中序遍历步骤\"><a href=\"#中序遍历步骤\" class=\"headerlink\" title=\"中序遍历步骤\"></a>中序遍历步骤</h2><p>第一步：访问该节点左子树</p>\n<p>第二步：若该节点有左子树，则返回第一步，<strong>否则打印该节点</strong></p>\n<p>第三步：若该节点有右子树，则返回第一步，<strong>否则结束递归并返回上一节点</strong></p>\n<p>（按我自己理解的中序就是：先左到底，左到不能在左了就停下来并打印该节点，然后返回到该节点的上一节点，并打印该节点，然后再访问该节点的右子树，再左到不能再左了就停下来）</p>\n<p><strong>中序遍历的另一种表述：</strong></p>\n<p><strong>（1）中序遍历左子树</strong></p>\n<p><strong>（2）访问根节点</strong></p>\n<p><strong>（3）中序遍历右子树</strong></p>\n<p><strong>（在完成第1，3步的时候，要按照中序遍历的规则来完成）</strong></p>\n<p><strong>所以该图的中序遍历为：ADEFGHMZ</strong></p>\n<h2 id=\"后序遍历步骤\"><a href=\"#后序遍历步骤\" class=\"headerlink\" title=\"后序遍历步骤\"></a>后序遍历步骤</h2><p>第一步：访问左子树</p>\n<p>第二步：若该节点有左子树，返回第一步</p>\n<p>第三步：若该节点有右子树，返回第一步，<strong>否则打印该节点并返回上一节点</strong></p>\n<p> <strong>后序遍历的另一种表述：</strong></p>\n<p><strong>（1）后序遍历左子树</strong></p>\n<p><strong>（2）后序遍历右子树</strong></p>\n<p><strong>（3）访问根节点</strong></p>\n<p><strong>（在完成1,2步的时候，依然要按照后序遍历的规则来完成）</strong></p>\n<p><strong>该图的后序遍历为：AEFDHZMG</strong></p>\n<p> （读者如果在纸上遍历二叉树的时候，仍然容易将顺序搞错建议再回去看一下三种不同遍历对应的代码）</p>\n<h1 id=\"重构二叉树\"><a href=\"#重构二叉树\" class=\"headerlink\" title=\"重构二叉树\"></a>重构二叉树</h1><h1 id=\"第一种：已知前序遍历、中序遍历求后序遍历\"><a href=\"#第一种：已知前序遍历、中序遍历求后序遍历\" class=\"headerlink\" title=\"第一种：已知前序遍历、中序遍历求后序遍历\"></a>第一种：已知前序遍历、中序遍历求后序遍历</h1><p>前序遍历：ABCDEF</p>\n<p>中序遍历：CBDAEF</p>\n<p>在进行分析前读者需要知道不同遍历结果的特点</p>\n<p><strong>1、前序遍历的第一元素是整个二叉树的根节点</strong></p>\n<p><strong>2、中序遍历中根节点的左边的元素是左子树，根节点右边的元素是右子树</strong></p>\n<p><strong>3、后序遍历的最后一个元素是整个二叉树的根节点</strong></p>\n<p><strong>（如果读者不明白上述三个特点，建议再回去看一下三种不同遍历对应的代码，并在纸上写出一个简单的二叉树的三种不同的遍历结果，以加深对三种不同遍历的理解）</strong></p>\n<p>用上面这些特点来分析遍历结果，</p>\n<p><strong>第一步：</strong>先看前序遍历<strong>A</strong>肯定是根节点<img src= \"/img/loading.gif\" data-lazy-src=\"https://img2018.cnblogs.com/blog/1590962/201903/1590962-20190308110049685-131632486.png\" alt=\"\"></p>\n<p><strong>第二步：</strong>确认了根节点，再来看中序遍历，中序遍历中根节点A的左边是<strong>CBD</strong>，右边是<strong>EF</strong>，所有可以确定二叉树既有左子树又有右子树<img src= \"/img/loading.gif\" data-lazy-src=\"https://img2018.cnblogs.com/blog/1590962/201903/1590962-20190308111832076-64554868.png\" alt=\"\"></p>\n<p><strong>第三步：</strong>先来分析左子树<strong>CBD，</strong>那么CBD谁来做A的左子树呢？这个时候<strong>不能</strong>直接用中序遍历的特点（左-&gt;根-&gt;右）得出左子树应该是这个样子<img src= \"/img/loading.gif\" data-lazy-src=\"https://img2018.cnblogs.com/blog/1590962/201903/1590962-20190308104123264-1263028885.png\" alt=\"\"></p>\n<p>因为有两种情况都满足中序遍历为<strong>CBD<img src= \"/img/loading.gif\" data-lazy-src=\"https://img2018.cnblogs.com/blog/1590962/201903/1590962-20190308104526312-43746275.png\" alt=\"\"></strong>无法直接根据中序遍历来直接得出左子树的结构，这个时候就要返回到前序遍历中去</p>\n<p>观察前序遍历<strong>ABCDEF，</strong>左子树<strong>CBD</strong>在前序遍历中的顺序是<strong>BCD，</strong>意味着<strong>B</strong>是左子树的根节点（这么说可能不太好理解，换个说法就是B是A的左子树）,得出这个结果是因为如果一个二叉树的根节点有左子树，那么</p>\n<p>这个左子树一定在前序遍历中一定紧跟着根节点（这个是用前序遍历的特点（根-&gt;左-&gt;右）得出的）,到这里就可以确认<strong>B</strong>是左子树的根节点<img src= \"/img/loading.gif\" data-lazy-src=\"https://img2018.cnblogs.com/blog/1590962/201903/1590962-20190308111823897-778383099.png\" alt=\"\"></p>\n<p><strong>第四步：</strong>再观察中序遍历<strong>CBDAEF，</strong>B元素左边是<strong>C</strong>右边是<strong>D</strong>，说明B节点既有左子树又有右子树，左右子树只有一个元素就可以直接确定了，不用再返回去观察前序遍历<img src= \"/img/loading.gif\" data-lazy-src=\"https://img2018.cnblogs.com/blog/1590962/201903/1590962-20190308111608228-371713643.png\" alt=\"\"></p>\n<p><strong>第五步：</strong>到这里左子树的重建就已经完成了，现在重建右子树，因为重建右子树的过程和左子树的过程一模一样，步骤就不像上面写这么细了（(┬＿┬)），观察中序遍历右子树为<strong>EF</strong>，再观察前序遍历<strong>ABCDEF</strong>中右子树</p>\n<p>的顺序为<strong>EF</strong>，所以E为A的右子树，再观察中序便利中<strong>E</strong>只有右边有<strong>F</strong>，所有F为E的右子树，最后得到的二叉树是这个样子的</p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img2018.cnblogs.com/blog/1590962/201903/1590962-20190308112146891-622698790.png\" alt=\"\">所有求得的后序遍历为：<strong>CDBFEA</strong></p>\n<p>总结一下上述步骤： 先观察前序遍历找到根节点-&gt;观察中序遍历将根节点左边归为左子树元素，右边归为右子树元素（可能会出现只有左子树或者右子树的情况）-&gt;观察前序遍历中左\\右子树几个元素的顺序，最靠前的为左\\右子树的根节点-&gt;重复前面的步骤</p>\n<h1 id=\"第二种：已知中序遍历、后序遍历求前序遍历（题还是上面这道）\"><a href=\"#第二种：已知中序遍历、后序遍历求前序遍历（题还是上面这道）\" class=\"headerlink\" title=\"第二种：已知中序遍历、后序遍历求前序遍历（题还是上面这道）\"></a>第二种：已知中序遍历、后序遍历求前序遍历（题还是上面这道）</h1><p>中序遍历：CBDAEF</p>\n<p>后序遍历为：CDBFEA</p>\n<p>仍然是根据不同遍历方式结果的特点来重构二叉树，过程很相似这里就不详细说了，后序遍历的最后一个元素A是根节点，在中序遍历中以根节点A作为分界将元素分为左子树（<strong>CBD</strong>）和右子树（<strong>EF</strong>），再观察后序遍历中左子树的顺序是CDB</p>\n<p>，可以判断出B是左子树的根节点（因为后序遍历是：左-&gt;右-&gt;根），再观察中序遍历，B元素左边是C右边是D，说明B节点既有左子树又有右子树，左右子树只有一个元素就可以直接确定了，不用再返回去观察后序遍历，左子树重建完成，</p>\n<p>现在来看右子树，右子树有两个元素<strong>EF，</strong>观察后序遍历E在F的后面，所以E是右子树的根节点，然后看中序遍历中E只有右边一个F元素了，即F是E的右子树，此时整个二叉树重构完成</p>\n<p>总结一下上述步骤：先观察后序遍历找到根节点-&gt;观察中序遍历将根节点左边归为左子树元素，右边归为右子树元素（可能会出现只有左子树或者右子树的情况）-&gt;观察后序遍历中左\\右子树几个元素的顺序，最靠后的为左\\右子树的根节点-&gt;重复前面的步骤</p>\n<h1 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h1><p>已知前序遍历、后序遍历无法求出中序遍历（因为由前序后序重构出来的二叉树不止一种）</p>\n<p>举个栗子<img src= \"/img/loading.gif\" data-lazy-src=\"https://img2018.cnblogs.com/blog/1590962/201903/1590962-20190308141438270-1859838531.png\" alt=\"\">左图这两种二叉树前序（<strong>BEFA</strong>）和后序（<strong>AFEB</strong>）一样，但对应的中序遍历结果不一样（左边的是AFEB右边的是BEFA），所以仅靠前序后序是无法重构出唯一的二叉树</p>\n"},{"title":"reset.css","url":"/2020/08/04/reset-css/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\css\\APlayer.min.css\"><script src=\"\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\js\\Meting.min.js\"></script><p>css的重置样式表分享：reset.css</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\">html5doctor.com Reset Stylesheet</span></span><br><span class=\"line\"><span class=\"comment\">Time:2020.8.4</span></span><br><span class=\"line\"><span class=\"comment\">Author: Zhenglin Li</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"selector-tag\">html</span>, <span class=\"selector-tag\">body</span>, <span class=\"selector-tag\">div</span>, <span class=\"selector-tag\">span</span>, <span class=\"selector-tag\">object</span>, <span class=\"selector-tag\">iframe</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">h1</span>, <span class=\"selector-tag\">h2</span>, <span class=\"selector-tag\">h3</span>, <span class=\"selector-tag\">h4</span>, <span class=\"selector-tag\">h5</span>, <span class=\"selector-tag\">h6</span>, <span class=\"selector-tag\">p</span>, <span class=\"selector-tag\">blockquote</span>, <span class=\"selector-tag\">pre</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">abbr</span>, <span class=\"selector-tag\">address</span>, <span class=\"selector-tag\">cite</span>, <span class=\"selector-tag\">code</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">del</span>, <span class=\"selector-tag\">dfn</span>, <span class=\"selector-tag\">em</span>, <span class=\"selector-tag\">img</span>, <span class=\"selector-tag\">ins</span>, <span class=\"selector-tag\">kbd</span>, <span class=\"selector-tag\">q</span>, <span class=\"selector-tag\">samp</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">small</span>, <span class=\"selector-tag\">strong</span>, <span class=\"selector-tag\">sub</span>, <span class=\"selector-tag\">sup</span>, <span class=\"selector-tag\">var</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">b</span>, <span class=\"selector-tag\">i</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">dl</span>, <span class=\"selector-tag\">dt</span>, <span class=\"selector-tag\">dd</span>, <span class=\"selector-tag\">ol</span>, <span class=\"selector-tag\">ul</span>, <span class=\"selector-tag\">li</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">fieldset</span>, <span class=\"selector-tag\">form</span>, <span class=\"selector-tag\">label</span>, <span class=\"selector-tag\">legend</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">table</span>, <span class=\"selector-tag\">caption</span>, <span class=\"selector-tag\">tbody</span>, <span class=\"selector-tag\">tfoot</span>, <span class=\"selector-tag\">thead</span>, <span class=\"selector-tag\">tr</span>, <span class=\"selector-tag\">th</span>, <span class=\"selector-tag\">td</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">article</span>, <span class=\"selector-tag\">aside</span>, <span class=\"selector-tag\">canvas</span>, <span class=\"selector-tag\">details</span>, <span class=\"selector-tag\">figcaption</span>, <span class=\"selector-tag\">figure</span>, </span><br><span class=\"line\"><span class=\"selector-tag\">footer</span>, <span class=\"selector-tag\">header</span>, <span class=\"selector-tag\">hgroup</span>, <span class=\"selector-tag\">menu</span>, <span class=\"selector-tag\">nav</span>, <span class=\"selector-tag\">section</span>, <span class=\"selector-tag\">summary</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">time</span>, <span class=\"selector-tag\">mark</span>, <span class=\"selector-tag\">audio</span>, <span class=\"selector-tag\">video</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">outline</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>:<span class=\"number\">100%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">vertical-align</span>:baseline;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>:transparent;</span><br><span class=\"line\">    <span class=\"attribute\">box-sizing</span>:border-box;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">line-height</span>:<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-pseudo\">:focus</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">outline</span>: <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">article</span>,<span class=\"selector-tag\">aside</span>,<span class=\"selector-tag\">canvas</span>,<span class=\"selector-tag\">details</span>,<span class=\"selector-tag\">figcaption</span>,<span class=\"selector-tag\">figure</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">footer</span>,<span class=\"selector-tag\">header</span>,<span class=\"selector-tag\">hgroup</span>,<span class=\"selector-tag\">menu</span>,<span class=\"selector-tag\">nav</span>,<span class=\"selector-tag\">section</span>,<span class=\"selector-tag\">summary</span> &#123; </span><br><span class=\"line\">    <span class=\"attribute\">display</span>:block;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">ul</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">list-style</span>:none;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">blockquote</span>, <span class=\"selector-tag\">q</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">quotes</span>:none;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">blockquote</span><span class=\"selector-pseudo\">:before</span>, <span class=\"selector-tag\">blockquote</span><span class=\"selector-pseudo\">:after</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">q</span><span class=\"selector-pseudo\">:before</span>, <span class=\"selector-tag\">q</span><span class=\"selector-pseudo\">:after</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>:<span class=\"string\">''</span>;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>:none;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">a</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>:<span class=\"number\">100%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">vertical-align</span>:baseline;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>:transparent;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">ins</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>:<span class=\"number\">#ff9</span>;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>:<span class=\"number\">#000</span>;</span><br><span class=\"line\">    <span class=\"attribute\">text-decoration</span>:none;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">mark</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>:<span class=\"number\">#ff9</span>;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>:<span class=\"number\">#000</span>; </span><br><span class=\"line\">    <span class=\"attribute\">font-style</span>:italic;</span><br><span class=\"line\">    <span class=\"attribute\">font-weight</span>:bold;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">del</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">text-decoration</span>: line-through;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">abbr</span><span class=\"selector-attr\">[title]</span>, <span class=\"selector-tag\">dfn</span><span class=\"selector-attr\">[title]</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">border-bottom</span>:<span class=\"number\">1px</span> dotted <span class=\"number\">#000</span>;</span><br><span class=\"line\">    <span class=\"attribute\">cursor</span>:help;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">table</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">border-collapse</span>:collapse;</span><br><span class=\"line\">    <span class=\"attribute\">border-spacing</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">hr</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>:block;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>:<span class=\"number\">1px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>:<span class=\"number\">0</span>;   </span><br><span class=\"line\">    <span class=\"attribute\">border-top</span>:<span class=\"number\">1px</span> solid <span class=\"number\">#cccccc</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>:<span class=\"number\">1em</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">input</span>, <span class=\"selector-tag\">select</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">vertical-align</span>:middle;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","categories":["前端"],"tags":["资源分享"]},{"title":"八大排序算法详解","url":"/2020/09/16/%E5%85%AB%E5%A4%A7%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\css\\APlayer.min.css\"><script src=\"\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\js\\Meting.min.js\"></script><p><a href=\"https://www.cnblogs.com/l199616j/p/10742603.html\" target=\"_blank\" rel=\"noopener\">八大排序算法详解（动图演示 思路分析 实例代码java 复杂度分析 适用场景）</a></p>\n<h1 id=\"一、分类\"><a href=\"#一、分类\" class=\"headerlink\" title=\"一、分类\"></a><strong>一、分类</strong></h1><h2 id=\"1-内部排序和外部排序\"><a href=\"#1-内部排序和外部排序\" class=\"headerlink\" title=\"1.内部排序和外部排序　\"></a><strong>1.内部排序和外部排序</strong>　</h2><ul>\n<li><strong>内部排序</strong>：待排序记录存放在计算机随机存储器中（说简单点，就是内存）进行的排序过程。</li>\n<li><strong>外部排序</strong>：待排序记录的数量很大，以致于内存不能一次容纳全部记录，所以在排序过程中需要对外存进行访问的排序过程。</li>\n</ul>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img2018.cnblogs.com/blog/1258817/201904/1258817-20190420100103564-1484547501.png\" alt=\"\"></p>\n<h2 id=\"2-比较类排序和非比较排序\"><a href=\"#2-比较类排序和非比较排序\" class=\"headerlink\" title=\"2.比较类排序和非比较排序\"></a><strong>2.比较类排序和非比较排序</strong></h2><ul>\n<li><strong>比较类排序</strong>：通过比较来决定元素间的相对次序，由于其时间复杂度不能突破O(nlogn)，因此也称为非线性时间比较类排序。</li>\n<li><strong>非比较类排序</strong>：不通过比较来决定元素间的相对次序，它可以突破基于比较排序的时间下界，以线性时间运行，因此也称为线性时间非比较类排序。<br><img src= \"/img/loading.gif\" data-lazy-src=\"https://img2018.cnblogs.com/blog/1258817/201904/1258817-20190420193244916-2091485181.png\" alt=\"\"></li>\n</ul>\n<h1 id=\"二、复杂度分析，算法稳定性和适用场景\"><a href=\"#二、复杂度分析，算法稳定性和适用场景\" class=\"headerlink\" title=\"二、复杂度分析，算法稳定性和适用场景\"></a><strong>二、复杂度分析，算法稳定性和适用场景</strong></h1><ul>\n<li><strong>稳定</strong>：如果a原本在b前面，而a=b，排序之后a仍然在b的前面。</li>\n<li><strong>不稳定</strong>：如果a原本在b的前面，而a=b，排序之后 a 可能会出现在 b 的后面。</li>\n<li><strong>时间复杂度</strong>：对排序数据的总的操作次数。反映当n变化时，操作次数呈现什么规律。</li>\n<li><strong>空间复杂度：</strong>是指算法在计算机内执行时所需存储空间的度量，它也是数据规模n的函数。 </li>\n</ul>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img2018.cnblogs.com/blog/1258817/201904/1258817-20190420193530213-2111577377.png\" alt=\"\"></p>\n<h1 id=\"三、八大排序算法详解\"><a href=\"#三、八大排序算法详解\" class=\"headerlink\" title=\"三、八大排序算法详解\"></a><strong>三、八大排序算法详解</strong></h1><h2 id=\"1-选择排序\"><a href=\"#1-选择排序\" class=\"headerlink\" title=\"1.选择排序\"></a><strong>1.选择排序</strong></h2><p><strong>1.1 动图演示</strong></p>\n<p><strong>1.2 思路分析</strong></p>\n<p><strong>1.</strong> <strong>第一个跟后面的所有数相比，</strong>如果小于（或小于）第一个数的时候，暂存较小数的下标，第一趟结束后，将第一个数，与暂存的那个最小数进行交换，第一个数就是最小（或最大的数）</p>\n<p><strong>2.</strong> 下标移到第二位，第二个数跟后面的所有数相比，一趟下来，确定第二小（或第二大）的数</p>\n<p>重复以上步骤</p>\n<p>直到指针移到倒数第二位，确定倒数第二小（或倒数第二大）的数，那么最后一位也就确定了，排序完成。</p>\n<p><strong>1.3 复杂度分析</strong></p>\n<p><strong>1.</strong> 不管原始数组是否有序，<strong>时间复杂度都是O（n2）</strong>，</p>\n<p>因为没一个数都要与其他数比较一次，（n-1）2次，分解：n2-2n+1, 去掉低次幂和常数，剩下n2,所以最后的时间复杂度是n2</p>\n<p><strong>2. 空间复杂度是O（1）</strong>,因为只定义了两个辅助变量，与n的大小无关，所以空间复杂度为O（1）</p>\n<p> <strong>1.4 Java 代码如下：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">import java.util.Arrays;</span><br><span class=\"line\">public class Main &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        int[] n &#x3D; new int[]&#123;1,6,3,8,33,27,66,9,7,88&#125;;</span><br><span class=\"line\">        int temp,index &#x3D; -1;</span><br><span class=\"line\">        for (int i &#x3D; 0; i &lt; n.length-1; i++) &#123;</span><br><span class=\"line\">            index&#x3D;i;</span><br><span class=\"line\">            &#x2F;&#x2F;如果大于，暂存较小的数的下标</span><br><span class=\"line\">            for (int j &#x3D; i+1; j &lt;n.length; j++) &#123;</span><br><span class=\"line\">                if(n[index]&gt;n[j])&#123;</span><br><span class=\"line\">                    index &#x3D; j;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            &#x2F;&#x2F;&#x2F;&#x2F;将一趟下来求出的最小数，与这个数交换</span><br><span class=\"line\">            if(index&gt;0)&#123;</span><br><span class=\"line\">                temp &#x3D; n[i];</span><br><span class=\"line\">                n[i] &#x3D; n[index];</span><br><span class=\"line\">                n[index] &#x3D; temp;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.println(Arrays.toString(n));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(Arrays.toString(n));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n<h2 id=\"2-冒泡排序\"><a href=\"#2-冒泡排序\" class=\"headerlink\" title=\"2. 冒泡排序\"></a><strong>2. 冒泡排序</strong></h2><p><strong>2.1 动图演示</strong></p>\n<p><strong>2.2 思路分析</strong></p>\n<p><strong>1.</strong> <strong>相邻两个数两两相比</strong>，n[i]跟n[j+1]比，如果n[i]&gt;n[j+1]，则将连个数进行交换，**<br>**</p>\n<p>\\2. j++, 重复以上步骤，第一趟结束后，最大数就会被确定在最后一位，这就是冒泡排序又称大（小）数沉底，</p>\n<p>\\3. i++,重复以上步骤，直到i=n-1结束，排序完成。</p>\n<p><strong>2.3 复杂度分析</strong></p>\n<p><strong>1.</strong> 不管原始数组是否有序，<strong>时间复杂度都是O（n2）</strong>，</p>\n<p>因为没一个数都要与其他数比较一次，（n-1）2次，分解：n2+2n-1, 去掉低次幂和常数，剩下n2,所以最后的时间复杂度是n2</p>\n<p><strong>2. 空间复杂度是O（1）</strong>,因为只定义了一个辅助变量，与n的大小无关，所以空间复杂度为O（1）</p>\n<p><strong>2.4 选择排序和冒泡排序的比较</strong></p>\n<p>\\1. 时间负责度都是O（n2）</p>\n<p>\\2. 空间复杂度都是O（1）</p>\n<p>\\3. 选择排序是从第一位开始确定最大或最小的数，保证前面的数都是有序的，且都比后面的数小或大，</p>\n<p>　 冒泡排序是从最后一位开始确定最大或最小的数，保证后面的数都是有序的且都大于或小于前面的数。</p>\n<p><strong>2.5 Java 代码如下</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">import java.util.Arrays;</span><br><span class=\"line\">public class 冒泡 &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        int[] n &#x3D; new int[]&#123;1,6,3,8,33,27,66,9,7,88&#125;;</span><br><span class=\"line\">        int temp;</span><br><span class=\"line\">        for (int i &#x3D; 0; i &lt; n.length-1; i++) &#123;</span><br><span class=\"line\">            for (int j &#x3D; 0; j &lt;n.length-1; j++) &#123;</span><br><span class=\"line\">                if(n[j]&gt;n[j+1])&#123;</span><br><span class=\"line\">                    temp &#x3D; n[j];</span><br><span class=\"line\">                    n[j] &#x3D; n[j+1];</span><br><span class=\"line\">                    n[j+1] &#x3D; temp;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(Arrays.toString(n));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n<h2 id=\"3-直接插入排序\"><a href=\"#3-直接插入排序\" class=\"headerlink\" title=\"3. 直接插入排序\"></a><strong>3. 直接插入排序</strong></h2><p><strong>3.1 动图演示</strong></p>\n<p><strong>3.2 思路分析</strong></p>\n<p>例如从<strong>小到大</strong>排序:</p>\n<p><strong>1.</strong> 从第二位开始遍历，</p>\n<p><strong>2.</strong> 当前数（第一趟是第二位数）<strong>与前面的数依次比较，如果前面的数大于当前数，则将这个数放在当前数的位置上，当前数的下标-1</strong>，**<br>**</p>\n<p><strong>3. 重复以上步骤，直到当前数不大于前面的某一个数为止，这时，将当前数，放到这个位置，</strong></p>\n<p>　　1-3步就是保证当前数的前面的数都是有序的，内层循环的目的就是将当前数插入到前面的有序序列里</p>\n<p><strong>4.</strong> 重复以上3步，直到遍历到最后一位数，并将最后一位数插入到合适的位置，插入排序结束。</p>\n<p>根据思路分析，每一趟的执行流程如下图所示：</p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img2018.cnblogs.com/blog/1258817/201903/1258817-20190325151805019-1065720478.png\" alt=\"\"></p>\n<p><strong>3.3 复杂度分析</strong></p>\n<p><strong>1. 时间复杂度：</strong>插入算法，就是保证前面的序列是有序的，只需要把当前数插入前面的某一个位置即可。</p>\n<p>   所以如果数组本来就是有序的，则数组的<strong>最好情况下时间复杂度为O（n）</strong></p>\n<p>   如果数组恰好是倒=倒序，比如原始数组是5 4 3 2 1，想要排成从小到大，则每一趟前面的数都要往后移，一共要执行n-1 + n-2 + … + 2 + 1 = n * (n-1) / 2 = <strong>0.5 * n2 - 0.5 * n</strong>次，去掉低次幂及系数，所以<strong>最坏情况下时间复杂度为O（n2）</strong></p>\n<p>  平均时间复杂度(n+n2 )/2，所以<strong>平均时间复杂度为O（n2）</strong></p>\n<p><strong>2. 空间复杂度：</strong>插入排序算法，只需要两个变量暂存当前数，以及下标，与n的大小无关，所以<strong>空间复杂度为：O（1）</strong></p>\n<p><strong>3.4 Java 代码如下</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">import java.util.Arrays;</span><br><span class=\"line\">public class insertSort &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        int[] n &#x3D; new int[]&#123;20,12,15,1,5,49,58,24,578,211,20,214,78,35,125,789,11&#125;;</span><br><span class=\"line\">        int temp &#x3D; 0,j;</span><br><span class=\"line\">        for (int i &#x3D; 1; i &lt; n.length; i++) &#123;</span><br><span class=\"line\">            temp &#x3D; n[i];</span><br><span class=\"line\">            for (j &#x3D; i; j &gt;0; j--) &#123;</span><br><span class=\"line\">                &#x2F;&#x2F;如果当前数前面的数大于当前数，则把前面的数向后移一个位置</span><br><span class=\"line\">                if(n[j-1]&gt;temp)&#123;</span><br><span class=\"line\">                    n[j] &#x3D; n[j-1];</span><br><span class=\"line\">                    </span><br><span class=\"line\">                    &#x2F;&#x2F;第一个数已经移到第二个数，将当前数放到第一个位置，这一趟结束</span><br><span class=\"line\">                    if(j&#x3D;&#x3D;1)&#123;</span><br><span class=\"line\">                        n[j-1] &#x3D; temp;</span><br><span class=\"line\">                        break;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;else&#123;&#x2F;&#x2F;如果不大于，将当前数放到j的位置，这一趟结束</span><br><span class=\"line\">                </span><br><span class=\"line\">                    n[j] &#x3D; temp;</span><br><span class=\"line\">                    break;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.println(Arrays.toString(n));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(Arrays.toString(n));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n<h2 id=\"4-快速排序\"><a href=\"#4-快速排序\" class=\"headerlink\" title=\"4. 快速排序\"></a><strong>4. 快速排序</strong></h2><p><strong>4.1 动图演示</strong></p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img2018.cnblogs.com/blog/1258817/201903/1258817-20190325195811497-310078615.jpg\" alt=\"\"></p>\n<p><strong>4.2 思路分析</strong></p>\n<p>快速排序的思想就是，选一个数作为基数（这里我选的是第一个数），大于这个基数的放到右边，小于这个基数的放到左边，等于这个基数的数可以放到左边或右边，看自己习惯，这里我是放到了左边，</p>\n<p>一趟结束后，将基数放到中间分隔的位置，第二趟将数组从基数的位置分成两半，分割后的两个的数组继续重复以上步骤，选基数，将小数放在基数左边，将大数放到基数的右边，在分割数组，，，直到数组不能再分为止，排序结束。</p>\n<p>例如从<strong>小到大</strong>排序:</p>\n<p><strong>1.</strong> 第一趟，第一个数为基数temp，设置两个指针left = 0，right = n.length，</p>\n<p>　　①从right开始与基数temp比较，如果n[right]&gt;基数temp，则right指针向前移一位，继续与基数temp比较，直到不满足n[right]&gt;基数temp</p>\n<p>　　②将n[right]赋给n[left]</p>\n<p>　　③从left开始与基数temp比较，如果n[left]&lt;=基数temp，则left指针向后移一位，继续与基数temp比较，直到不满足n[left]&lt;=基数temp</p>\n<p>　　④将n[left]赋给n[rigth]</p>\n<p>　　⑤重复①-④步，直到left==right结束，将基数temp赋给n[left]</p>\n<p><strong>2.</strong> 第二趟，将数组从中间分隔，每个数组再进行第1步的操作，然后再将分隔后的数组进行分隔再快排，</p>\n<p><strong>3.</strong> 递归重复分隔快排，直到数组不能再分，也就是只剩下一个元素的时候，结束递归，排序完成</p>\n<p>根据思路分析，第一趟的执行流程如下图所示：</p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img2018.cnblogs.com/blog/1258817/201903/1258817-20190325222933746-500131356.png\" alt=\"\"></p>\n<p><strong>4.3 复杂度分析</strong></p>\n<p><strong>1. 时间复杂度：</strong></p>\n<p>最坏情况就是每一次取到的元素就是数组中最小/最大的，这种情况其实就是冒泡排序了(每一次都排好一个元素的顺序)</p>\n<p>这种情况时间复杂度就好计算了，就是冒泡排序的时间复杂度：T[n] = n * (n-1) = n^2 + n;</p>\n<p><strong>最好情况下是O(nlog2n)，推导过程如下：</strong></p>\n<p><strong>（</strong>递归算法的时间复杂度公式：<strong>T[n] = aT[n/b] + f(n)</strong> <strong>）</strong></p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img2018.cnblogs.com/blog/1258817/201903/1258817-20190326191158640-601403776.png\" alt=\"\"></p>\n<p>所以<strong>平均时间复杂度为O（nlog2n）</strong></p>\n<p><strong>2. 空间复杂度：</strong></p>\n<p>　　快速排序使用的空间是O(1)的，也就是个常数级；而真正消耗空间的就是递归调用了，因为每次递归就要保持一些数据：</p>\n<p>　　最优的情况下空间复杂度为:<strong>O(log2n)</strong>；每一次都平分数组的情况</p>\n<p>　　最差的情况下空间复杂度为：<strong>O( n )</strong>；退化为冒泡排序的情况</p>\n<p>所以<strong>平均空间复杂度为O（log2n）</strong></p>\n<p> <strong>4.4 Java 代码如下</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">import java.util.Arrays;</span><br><span class=\"line\">public class quick&#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        int[] arr &#x3D; new int[]&#123;10,6,3,8,33,27,66,9,7,88&#125;;</span><br><span class=\"line\">&#x2F;&#x2F;        int[] arr &#x3D; new int[]&#123;1,3,2&#125;;</span><br><span class=\"line\">        f(arr,0,arr.length-1);</span><br><span class=\"line\">        System.out.println(Arrays.toString(arr));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public static void f(int[] arr,int start,int end)&#123;</span><br><span class=\"line\">        &#x2F;&#x2F;直到start&gt;&#x3D;end时结束递归</span><br><span class=\"line\">        if(start&lt;end)&#123;</span><br><span class=\"line\">            int left &#x3D; start;</span><br><span class=\"line\">            int right &#x3D; end;</span><br><span class=\"line\">            int temp &#x3D; arr[start];</span><br><span class=\"line\">            </span><br><span class=\"line\">            while(left&lt;right)&#123;</span><br><span class=\"line\">                </span><br><span class=\"line\">                &#x2F;&#x2F;右面的数字大于标准数时，右边的数的位置不变，指针向左移一个位置</span><br><span class=\"line\">                while(left&lt;right &amp;&amp; arr[right]&gt;temp)&#123;</span><br><span class=\"line\">                    right--;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                </span><br><span class=\"line\">                </span><br><span class=\"line\">                &#x2F;&#x2F;右边的数字及下标小于或等于基本数，将右边的数放到左边</span><br><span class=\"line\">                if(left&lt;right) &#123;</span><br><span class=\"line\">                     arr[left] &#x3D; arr[right];</span><br><span class=\"line\">                     left++;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                </span><br><span class=\"line\">                &#x2F;&#x2F;&#x2F;&#x2F;左边的数字小于或等于标准数时，左边的数的位置不变，指针向右移一个位置</span><br><span class=\"line\">                while(left&lt;right &amp;&amp; arr[left]&lt;&#x3D;temp)&#123;</span><br><span class=\"line\">                    left++;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                </span><br><span class=\"line\">                &#x2F;&#x2F;左边的数字大于基本数，将左边的数放到右边</span><br><span class=\"line\">                arr[right] &#x3D; arr[left];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">            &#x2F;&#x2F;一趟循环结束，此时left&#x3D;right，将基数放到这个重合的位置，</span><br><span class=\"line\">            arr[left] &#x3D; temp;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#x2F;&#x2F;将数组从left位置分为两半，继续递归下去进行排序</span><br><span class=\"line\">            f(arr,start,left);</span><br><span class=\"line\">            f(arr,left+1,end);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n<h2 id=\"5-归并排序\"><a href=\"#5-归并排序\" class=\"headerlink\" title=\"5. 归并排序\"></a><strong>5. 归并排序</strong></h2><p><strong>5.1 动图演示</strong></p>\n<p><strong>5.2 思路分析</strong></p>\n<p>归并排序就是递归得将原始数组递归对半分隔，直到不能再分（只剩下一个元素）后，开始从最小的数组向上归并排序</p>\n<p>\\1. 向上归并排序的时候，需要一个暂存数组用来排序，</p>\n<p>\\2. 将待合并的两个数组，从第一位开始比较，小的放到暂存数组，指针向后移，</p>\n<p>\\3. 直到一个数组空，这时，不用判断哪个数组空了，直接将两个数组剩下的元素追加到暂存数组里，</p>\n<p>\\4. 再将暂存数组排序后的元素放到原数组里，两个数组合成一个，这一趟结束。</p>\n<p><strong>根据思路分析，每一趟的执行流程如下图所示：</strong></p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img2018.cnblogs.com/blog/1258817/201903/1258817-20190326213950253-1393118004.png\" alt=\"\"></p>\n<p><strong>5.3 复杂度分析</strong></p>\n<p><strong>1. 时间复杂度：</strong>递归算法的时间复杂度公式：<strong>T[n] = aT[n/b] + f(n)</strong> **<br>**</p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img2018.cnblogs.com/blog/1258817/201903/1258817-20190326191158640-601403776.png\" alt=\"\"></p>\n<p>无论原始数组是否是有序的，都要递归分隔并向上归并排序，所以<strong>时间复杂度始终是O（nlog2n）</strong></p>\n<p><strong>2. 空间复杂度：</strong></p>\n<p>　　每次两个数组进行归并排序的时候，都会利用一个长度为n的数组作为辅助数组用于保存合并序列，所以<strong>空间复杂度为O（n）</strong></p>\n<p> <strong>5.4 Java 代码如下</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">import java.util.Arrays;</span><br><span class=\"line\"></span><br><span class=\"line\">public class Main &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        int[] arr &#x3D; new int[]&#123;3,6,4,7,5,2&#125;;</span><br><span class=\"line\">        merge(arr,0,arr.length-1);</span><br><span class=\"line\">        System.out.println(Arrays.toString(arr));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#x2F;&#x2F;归并</span><br><span class=\"line\">    public static void merge(int[] arr,int low,int high)&#123;</span><br><span class=\"line\">        int center &#x3D; (high+low)&#x2F;2;</span><br><span class=\"line\">        if(low&lt;high)&#123;</span><br><span class=\"line\">            &#x2F;&#x2F;递归，直到low&#x3D;&#x3D;high，也就是数组已不能再分了，</span><br><span class=\"line\">            merge(arr,low,center);</span><br><span class=\"line\">            merge(arr,center+1,high);</span><br><span class=\"line\">            </span><br><span class=\"line\">            &#x2F;&#x2F;当数组不能再分，开始归并排序</span><br><span class=\"line\">            mergeSort(arr,low,center,high);</span><br><span class=\"line\">            System.out.println(Arrays.toString(arr));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#x2F;&#x2F;排序</span><br><span class=\"line\">    public static void mergeSort(int[] arr,int low,int center,int high)&#123;</span><br><span class=\"line\">        &#x2F;&#x2F;用于暂存排序后的数组的临时数组</span><br><span class=\"line\">        int[] tempArr &#x3D; new int[arr.length];</span><br><span class=\"line\">        int i &#x3D; low,j &#x3D; center+1;</span><br><span class=\"line\">        </span><br><span class=\"line\">        &#x2F;&#x2F;临时数组的下标</span><br><span class=\"line\">        int index &#x3D; 0;</span><br><span class=\"line\">        </span><br><span class=\"line\">        &#x2F;&#x2F;循环遍历两个数组的数字，将小的插入到临时数组里</span><br><span class=\"line\">        while(i&lt;&#x3D;center &amp;&amp; j&lt;&#x3D; high)&#123;</span><br><span class=\"line\">            </span><br><span class=\"line\">            &#x2F;&#x2F;左边数组的数小，插入到新数组</span><br><span class=\"line\">            if(arr[i]&lt;arr[j])&#123;</span><br><span class=\"line\">                tempArr[index] &#x3D; arr[i];</span><br><span class=\"line\">                i++;</span><br><span class=\"line\">            &#125;else&#123;&#x2F;&#x2F;右边数组的数小，插入到新数组</span><br><span class=\"line\">                tempArr[index] &#x3D; arr[j];</span><br><span class=\"line\">                j++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            index++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        &#x2F;&#x2F;处理左半边数组多余的数据，将左半边多余的数据直接追加的临时数组的后面</span><br><span class=\"line\">        while(i&lt;&#x3D;center)&#123;</span><br><span class=\"line\">            tempArr[index] &#x3D; arr[i];</span><br><span class=\"line\">            i++;</span><br><span class=\"line\">            index++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        &#x2F;&#x2F;处理右半边数组多余的数据，将右半边多余的数据直接追加的临时数组的后面</span><br><span class=\"line\">        while(j&lt;&#x3D; high)&#123;</span><br><span class=\"line\">            tempArr[index] &#x3D; arr[j];</span><br><span class=\"line\">            j++;</span><br><span class=\"line\">            index++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        &#x2F;&#x2F;将临时数组中的数据重新放进原数组</span><br><span class=\"line\">        for (int k &#x3D; 0; k &lt; index; k++) &#123;</span><br><span class=\"line\">            arr[k+low] &#x3D; tempArr[k];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n<h2 id=\"6-基数排序\"><a href=\"#6-基数排序\" class=\"headerlink\" title=\"6. 基数排序\"></a><strong>6. 基数排序</strong></h2><p><strong>6.1 动图演示</strong></p>\n<p><strong>6.2 思路分析</strong></p>\n<p>基数排序第i趟将待排数组里的每个数的i位数放到tempj（j=1-10）队列中，然后再从这十个队列中取出数据，重新放到原数组里，直到i大于待排数的最大位数。</p>\n<p>1.数组里的数最大位数是n位，就需要排n趟，例如数组里最大的数是3位数，则需要排3趟。</p>\n<p>2.若数组里共有m个数，则需要十个长度为m的数组tempj（j=0-9）用来暂存i位上数为j的数，例如，第1趟，各位数为0的会被分配到temp0数组里，各位数为1的会被分配到temp1数组里……</p>\n<p>3.分配结束后，再依次从tempj数组中取出数据，遵循先进先进原则，例如对数组{1，11，2，44，4}，进行第1趟分配后，temp1={1,11}，temp2={2}，temp4={44，4}，依次取出元素后{1，11，2，44，4}，第一趟结束</p>\n<p>4.循环到n趟后结束，排序完成</p>\n<p><strong>根据思路分析，每一趟的执行流程如下图所示：</strong></p>\n<p>通过基数排序对数组{53, 3, 542, 748, 14, 214, 154, 63, 616}：</p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img2018.cnblogs.com/blog/1258817/201904/1258817-20190418154706937-1683821955.png\" alt=\"\"></p>\n<p><strong>6.3 复杂度分析</strong></p>\n<p><strong>1. 时间复杂度：**</strong><br>**</p>\n<p>每一次关键字的桶分配都需要O(n)的时间复杂度，而且分配之后得到新的关键字序列又需要O(n)的时间复杂度。</p>\n<p>假如待排数据可以分为d个关键字，则基数排序的时间复杂度将是O(d*2n) ，当然d要远远小于n，因此基本上还是线性级别的。</p>\n<p>系数2可以省略，且无论数组是否有序，都需要从个位排到最大位数，所以<strong>时间复杂度始终为O(d*n)</strong> 。其中，n是数组长度，d是最大位数。</p>\n<p><strong>2. 空间复杂度：</strong> </p>\n<p>　　基数排序的<strong>空间复杂度为O(n+k)</strong>，其中k为桶的数量，需要分配n个数。</p>\n<p><strong>6.4 Java 代码如下</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">import java.util.Arrays;</span><br><span class=\"line\">public class Main &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        int[] arr &#x3D; new int[]&#123;10,6,3,8,33,27,66,9,7,88&#125;;</span><br><span class=\"line\">        radixSort(arr);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static void radixSort(int[] arr) &#123;</span><br><span class=\"line\">        &#x2F;&#x2F;求出待排数的最大数</span><br><span class=\"line\">        int maxLength&#x3D;0;</span><br><span class=\"line\">        for (int i &#x3D; 0; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">            if(maxLength&lt;arr[i])</span><br><span class=\"line\">                maxLength &#x3D; arr[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        &#x2F;&#x2F;根据最大数求最大长度</span><br><span class=\"line\">        maxLength &#x3D; (maxLength+&quot;&quot;).length();</span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F;用于暂存数据的数组</span><br><span class=\"line\">        int[][] temp &#x3D; new int[10][arr.length];</span><br><span class=\"line\">        &#x2F;&#x2F;用于记录temp数组中每个桶内存的数据的数量</span><br><span class=\"line\">        int[] counts &#x3D; new int[10];</span><br><span class=\"line\">        &#x2F;&#x2F;用于记录每个数的i位数</span><br><span class=\"line\">        int num &#x3D; 0;</span><br><span class=\"line\">        &#x2F;&#x2F;用于取的元素需要放的位置</span><br><span class=\"line\">        int index &#x3D; 0;</span><br><span class=\"line\">        &#x2F;&#x2F;根据最大长度决定排序的次数</span><br><span class=\"line\">        for (int i &#x3D; 0,n&#x3D;1; i &lt; maxLength; i++,n*&#x3D;10) &#123;</span><br><span class=\"line\">            for (int j &#x3D; 0; j &lt; arr.length; j++) &#123;</span><br><span class=\"line\">                num &#x3D; arr[j]&#x2F;n%10;</span><br><span class=\"line\">                temp[num][counts[num]] &#x3D; arr[j];</span><br><span class=\"line\">                counts[num]++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">            &#x2F;&#x2F;从temp中取元素重新放到arr数组中</span><br><span class=\"line\">            for (int j &#x3D; 0; j &lt; counts.length; j++) &#123;</span><br><span class=\"line\">                for (int j2 &#x3D; 0; j2 &lt; counts[j]; j2++) &#123;</span><br><span class=\"line\">                    arr[index] &#x3D; temp[j][j2];</span><br><span class=\"line\">                    index++;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                counts[j]&#x3D;0;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            index&#x3D;0;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(Arrays.toString(arr));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n<h2 id=\"7-希尔（shell）排序\"><a href=\"#7-希尔（shell）排序\" class=\"headerlink\" title=\"7. 希尔（shell）排序\"></a><strong>7. 希尔（shell）排序</strong></h2><p><strong>7.1 动图演示</strong></p>\n<p><strong>7.2 思路分析</strong></p>\n<blockquote>\n<p><strong>希尔排序是把记录按下标的一定增量分组，对每组使用直接插入排序算法排序；随着增量逐渐减少，每组包含的关键词越来越多，当增量减至1时，整个文件恰被分成一组，算法便终止。</strong></p>\n</blockquote>\n<p>　　简单插入排序很循规蹈矩，不管数组分布是怎么样的，依然一步一步的对元素进行比较，移动，插入，比如[5,4,3,2,1,0]这种倒序序列，数组末端的0要回到首位置很是费劲，比较和移动元素均需n-1次。</p>\n<p>　　而希尔排序在数组中采用跳跃式分组的策略，通过某个增量将数组元素划分为若干组，然后分组进行插入排序，随后逐步缩小增量，继续按组进行插入排序操作，直至增量为1。希尔排序通过这种策略使得整个数组在初始阶段达到从宏观上看基本有序，小的基本在前，大的基本在后。然后缩小增量，到增量为1时，其实多数情况下只需微调即可，不会涉及过多的数据移动。</p>\n<p>　　来看下希尔排序的基本步骤，在此选择增量gap=length/2，缩小增量继续以gap = gap/2的方式，这种增量选择可以用一个序列来表示，{n/2,(n/2)/2…1}，称为<strong>增量序列</strong>。希尔排序的增量序列的选择与证明是个数学难题，选择的这个增量序列是比较常用的，也是希尔建议的增量，称为希尔增量，但其实这个增量序列不是最优的。此处做示例使用希尔增量。</p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://images2015.cnblogs.com/blog/1024555/201611/1024555-20161128110416068-1421707828.png\" alt=\"\"></p>\n<p><strong>7.3 复杂度分析</strong></p>\n<p><strong>1. 时间复杂度：</strong>最坏情况下，每两个数都要比较并交换一次，则<strong>最坏情况下的时间复杂度为O（n2）</strong>, 最好情况下，数组是有序的，不需要交换，只需要比较，则<strong>最好情况下的时间复杂度为O（n）。</strong></p>\n<p>经大量人研究，希尔排序的<strong>平均时间复杂度为O（n1.3）</strong>（这个我也不知道咋来的，书上和博客上都这样说，也没找到个具体的依据，，，）。</p>\n<p><strong>2. 空间复杂度：</strong>希尔排序，只需要一个变量用于两数交换，与n的大小无关，所以<strong>空间复杂度为：O（1）。</strong></p>\n<p><strong>7.4 Java 代码如下</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">import java.util.Arrays;</span><br><span class=\"line\"></span><br><span class=\"line\">public class shell &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        int[] arr &#x3D; new int[]&#123;10,6,3,8,33,27,66,9,7,88&#125;;</span><br><span class=\"line\">        shellSort(arr);</span><br><span class=\"line\">        System.out.println(Arrays.toString(arr));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    private static void shellSort(int[] arr) &#123;</span><br><span class=\"line\">        int temp;</span><br><span class=\"line\">        &#x2F;&#x2F;控制增量序列,增量序列为1的时候为最后一趟</span><br><span class=\"line\">        for (int i &#x3D; arr.length&#x2F;2; i &gt;0; i&#x2F;&#x3D;2) &#123;</span><br><span class=\"line\">            &#x2F;&#x2F;根据增量序列，找到每组比较序列的最后一个数的位置</span><br><span class=\"line\">            for (int j &#x3D; i; j &lt; arr.length; j++) &#123;</span><br><span class=\"line\">                &#x2F;&#x2F;根据该比较序列的最后一个数的位置，依次向前执行插入排序</span><br><span class=\"line\">                for (int k &#x3D; j-i; k &gt;&#x3D;0; k-&#x3D;i) &#123;</span><br><span class=\"line\">                    if(arr[k]&gt;arr[k+i])&#123;</span><br><span class=\"line\">                        temp &#x3D; arr[k];</span><br><span class=\"line\">                        arr[k]  &#x3D; arr[k+i];</span><br><span class=\"line\">                        arr[k+i] &#x3D; temp;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n<h2 id=\"8-堆排序\"><a href=\"#8-堆排序\" class=\"headerlink\" title=\"8. 堆排序\"></a><strong>8. 堆排序</strong></h2><p><strong>8.1 动图演示</strong></p>\n<p><strong>8.2 思路分析</strong></p>\n<p>　　先来了解下堆的相关概念：堆是具有以下性质的完全二叉树：每个结点的值都大于或等于其左右孩子结点的值，称为大顶堆；或者每个结点的值都小于或等于其左右孩子结点的值，称为小顶堆。如下图：</p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://images2015.cnblogs.com/blog/1024555/201612/1024555-20161217182750011-675658660.png\" alt=\"\"></p>\n<p>同时，我们对堆中的结点按层进行编号，将这种逻辑结构映射到数组中就是下面这个样子</p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://images2015.cnblogs.com/blog/1024555/201612/1024555-20161217182857323-2092264199.png\" alt=\"\"></p>\n<p>该数组从逻辑上讲就是一个堆结构，我们用简单的公式来描述一下堆的定义就是：</p>\n<p><strong>大顶堆：arr[i] &gt;= arr[2i+1] &amp;&amp; arr[i] &gt;= arr[2i+2]</strong>  </p>\n<p><strong>小顶堆：arr[i] &lt;= arr[2i+1] &amp;&amp; arr[i] &lt;= arr[2i+2]</strong>  </p>\n<p>了解了这些定义。接下来看看堆排序的基本思想及基本步骤：</p>\n<p>堆排序基本思想及步骤</p>\n<blockquote>\n<p>　　堆排序的基本思想是：将待排序序列构造成一个大顶堆，此时，整个序列的最大值就是堆顶的根节点。将其与末尾元素进行交换，此时末尾就为最大值。然后将剩余n-1个元素重新构造成一个堆，这样会得到n个元素的次小值。如此反复执行，便能得到一个有序序列了</p>\n</blockquote>\n<p><strong>步骤一 构造初始堆。将给定无序序列构造成一个大顶堆（一般升序采用大顶堆，降序采用小顶堆)。</strong></p>\n<p>　　a.假设给定无序序列结构如下</p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://images2015.cnblogs.com/blog/1024555/201612/1024555-20161217192038651-934327647.png\" alt=\"\"></p>\n<p>2.此时我们从最后一个非叶子结点开始（叶结点自然不用调整，第一个非叶子结点 arr.length/2-1=5/2-1=1，也就是下面的6结点），从左至右，从下至上进行调整。</p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://images2015.cnblogs.com/blog/1024555/201612/1024555-20161217192209433-270379236.png\" alt=\"\"></p>\n<p>4.找到第二个非叶节点4，由于[4,9,8]中9元素最大，4和9交换。</p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://images2015.cnblogs.com/blog/1024555/201612/1024555-20161217192854636-1823585260.png\" alt=\"\"></p>\n<p>这时，交换导致了子根[4,5,6]结构混乱，继续调整，[4,5,6]中6最大，交换4和6。</p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://images2015.cnblogs.com/blog/1024555/201612/1024555-20161217193347886-1142194411.png\" alt=\"\"></p>\n<p>此时，我们就将一个无需序列构造成了一个大顶堆。</p>\n<p><strong>步骤二 将堆顶元素与末尾元素进行交换，使末尾元素最大。然后继续调整堆，再将堆顶元素与末尾元素交换，得到第二大元素。如此反复进行交换、重建、交换。</strong></p>\n<p>a.将堆顶元素9和末尾元素4进行交换</p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://images2015.cnblogs.com/blog/1024555/201612/1024555-20161217194207620-1455153342.png\" alt=\"\"></p>\n<p>b.重新调整结构，使其继续满足堆定义</p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://images2015.cnblogs.com/blog/1024555/201612/1024555-20161218153110495-1280388728.png\" alt=\"\"></p>\n<p>c.再将堆顶元素8与末尾元素5进行交换，得到第二大元素8.</p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://images2015.cnblogs.com/blog/1024555/201612/1024555-20161218152929339-1114983222.png\" alt=\"\"></p>\n<p>后续过程，继续进行调整，交换，如此反复进行，最终使得整个序列有序</p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://images2015.cnblogs.com/blog/1024555/201612/1024555-20161218152348229-935654830.png\" alt=\"\"></p>\n<p>再简单总结下堆排序的基本思路：</p>\n<p>　　<strong>a.将无序序列构建成一个堆，根据升序降序需求选择大顶堆或小顶堆;</strong></p>\n<p>　　<strong>b.将堆顶元素与末尾元素交换，将最大元素”沉”到数组末端;</strong></p>\n<p>　　<strong>c.重新调整结构，使其满足堆定义，然后继续交换堆顶元素与当前末尾元素，反复执行调整+交换步骤，直到整个序列有序。</strong></p>\n<p><strong>8.3 复杂度分析</strong></p>\n<p><strong>1. 时间复杂度：</strong>堆排序是一种选择排序，整体主要由构建初始堆+交换堆顶元素和末尾元素并重建堆两部分组成。其中构建初始堆经推导复杂度为O(n)，在交换并重建堆的过程中，需交换n-1次，而重建堆的过程中，根据完全二叉树的性质，[log2(n-1),log2(n-2)…1]逐步递减，近似为nlogn。所以堆排序时间复杂度最好和最坏情况下都是<strong>O(nlogn)</strong>级。</p>\n<p><strong>2. 空间复杂度：</strong>堆排序不要任何辅助数组，只需要一个辅助变量，所占空间是常数与n无关，所以<strong>空间复杂度为O(1)</strong>。</p>\n<p><strong>8.4 Java 代码如下</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">import java.util.Arrays;</span><br><span class=\"line\">public class duipaixu &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        int[] arr &#x3D; new int[]&#123;4,6,8,5,9&#125;;</span><br><span class=\"line\">        int length &#x3D; arr.length;</span><br><span class=\"line\">        &#x2F;&#x2F;从最后一个非叶节点开始构建大顶堆</span><br><span class=\"line\">        for (int i &#x3D; arr.length&#x2F;2-1; i &gt;&#x3D;0; i--) &#123;</span><br><span class=\"line\">            maximumHeap(i,arr,length);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        &#x2F;&#x2F;从最小的叶子节点开始与根节点进行交换并重新构建大顶堆</span><br><span class=\"line\">        for (int i &#x3D; arr.length-1; i &gt;&#x3D;0; i--) &#123;</span><br><span class=\"line\">&#x2F;&#x2F;            System.out.println(Arrays.toString(arr));</span><br><span class=\"line\">            swap(arr,0,i);</span><br><span class=\"line\">            length--;</span><br><span class=\"line\">            maximumHeap(0,arr,length);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(Arrays.toString(arr));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#x2F;&#x2F;构建大顶堆</span><br><span class=\"line\">    public static void maximumHeap(int i,int[] arr,int length)&#123;</span><br><span class=\"line\">        int temp &#x3D; arr[i];</span><br><span class=\"line\">        for (int j &#x3D; i*2+1; j &lt; length; j&#x3D;j*2+1) &#123;</span><br><span class=\"line\">            &#x2F;&#x2F;如果右孩子大于做孩子，则指向右孩子</span><br><span class=\"line\">            if(j+1&lt;length &amp;&amp; arr[j+1]&gt;arr[j])&#123;</span><br><span class=\"line\">                j++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            &#x2F;&#x2F;如果最大的孩子大于当前节点，则将大孩子赋给当前节点，修改当前节点为其大孩子节点，再向下走。</span><br><span class=\"line\">            if(arr[j]&gt;temp)&#123;</span><br><span class=\"line\">                arr[i] &#x3D; arr[j];</span><br><span class=\"line\">                i &#x3D; j;</span><br><span class=\"line\">            &#125;else&#123;</span><br><span class=\"line\">                break;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        &#x2F;&#x2F;将temp放到最终位置</span><br><span class=\"line\">        arr[i] &#x3D; temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#x2F;&#x2F;交换</span><br><span class=\"line\">    public static void swap(int[] arr,int i,int j)&#123;</span><br><span class=\"line\">        int temp &#x3D; arr[i];</span><br><span class=\"line\">        arr[i] &#x3D; arr[j];</span><br><span class=\"line\">        arr[j] &#x3D; temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"删除github上仓库里的文件","url":"/2020/08/18/%E5%88%A0%E9%99%A4github%E4%B8%8A%E4%BB%93%E5%BA%93%E9%87%8C%E7%9A%84%E6%96%87%E4%BB%B6/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\css\\APlayer.min.css\"><script src=\"\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\js\\Meting.min.js\"></script><h1 id=\"一-删除已有仓库\"><a href=\"#一-删除已有仓库\" class=\"headerlink\" title=\"一.删除已有仓库\"></a>一.删除已有仓库</h1><p>如果我们想要删除Github中没有用的仓库，应该如何去做呢？</p>\n<p>进入到我们需要删除的仓库里面，找到“settings”即仓库设置,<br>然后，在仓库设置里拉到最底部，找到“Danger Zone”即危险区域,<br>点击“Delete this repository”这样就可以删除该仓库了。</p>\n<h1 id=\"二-删除Github中的某个文件或文件夹\"><a href=\"#二-删除Github中的某个文件或文件夹\" class=\"headerlink\" title=\"二.删除Github中的某个文件或文件夹\"></a>二.删除Github中的某个文件或文件夹</h1><p>我们知道，在Github上我们只能删除仓库，并不能删除文件或者文件夹，所以只能用命令来解决。</p>\n<h2 id=\"1-新建文件夹\"><a href=\"#1-新建文件夹\" class=\"headerlink\" title=\"1. 新建文件夹\"></a>1. 新建文件夹</h2><p>在桌面上新建一个文件夹<code>delete</code>，其实在哪里建叫什么名都可以</p>\n<h2 id=\"2-git-bash-here\"><a href=\"#2-git-bash-here\" class=\"headerlink\" title=\"2. git bash here\"></a>2. <code>git bash here</code></h2><p>在新建的文件夹里右键<code>git bash here</code>打开终端，并执行<code>git init</code>初始化仓库</p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://i.loli.net/2020/08/18/6qcP7g1FWEJZnvY.png\" alt=\"\"></p>\n<h2 id=\"3-git-clone-lt-你的地址-gt\"><a href=\"#3-git-clone-lt-你的地址-gt\" class=\"headerlink\" title=\"3. git clone &lt;你的地址&gt;\"></a>3. <code>git clone &lt;你的地址&gt;</code></h2><p>找到github上要删除的仓库地址，并复制，在终端里输入<code>git clone &lt;你的地址&gt;</code><br><img src= \"/img/loading.gif\" data-lazy-src=\"https://i.loli.net/2020/08/18/PKmY8O756IDc4sr.png\" alt=\"\"></p>\n<h2 id=\"4-git-bash-here\"><a href=\"#4-git-bash-here\" class=\"headerlink\" title=\"4. git bash here\"></a>4. <code>git bash here</code></h2><p>然后你会发现多了一个文件夹，打开之，并在该文件夹下右键<code>git bash here</code>打开终端，注意这里是一个新的终端了<br><img src= \"/img/loading.gif\" data-lazy-src=\"https://i.loli.net/2020/08/18/PKmY8O756IDc4sr.png\" alt=\"\"><br><img src= \"/img/loading.gif\" data-lazy-src=\"https://i.loli.net/2020/08/18/PKmY8O756IDc4sr.png\" alt=\"\"></p>\n<h2 id=\"5-dir\"><a href=\"#5-dir\" class=\"headerlink\" title=\"5. dir\"></a>5. <code>dir</code></h2><p>在终端里输入<code>dir</code>查看此文件夹下的文件和目录（文件夹）</p>\n<h2 id=\"6-git-rm-lt-filename-gt\"><a href=\"#6-git-rm-lt-filename-gt\" class=\"headerlink\" title=\"6.git rm &lt;filename&gt;\"></a>6.<code>git rm &lt;filename&gt;</code></h2><p>删除本地仓库文件 <code>git rm &lt;filename&gt;</code>，<code>&lt;filename&gt;</code>是你要删除的文件名字</p>\n<h2 id=\"7-git-rm-r-lt-filename-gt-，-lt-filename-gt\"><a href=\"#7-git-rm-r-lt-filename-gt-，-lt-filename-gt\" class=\"headerlink\" title=\"7. git rm -r &lt;filename&gt;，&lt;filename&gt;\"></a>7. <code>git rm -r &lt;filename&gt;</code>，<code>&lt;filename&gt;</code></h2><p>文件夹的删除和文件不一样，需要多一个参数，如下<br>删除本地仓库文件夹 <code>git rm -r &lt;filename&gt;</code>，<code>&lt;filename&gt;</code>是你要删除的文件夹名字<br><img src= \"/img/loading.gif\" data-lazy-src=\"https://i.loli.net/2020/08/18/f45za73j8PFqGZm.png\" alt=\"\"></p>\n<h2 id=\"8-git-commit-m-quot-备注-quot\"><a href=\"#8-git-commit-m-quot-备注-quot\" class=\"headerlink\" title=\"8. git commit -m &quot;备注&quot;\"></a>8. <code>git commit -m &quot;备注&quot;</code></h2><p>删除完你需要删除的文件和文件夹以后，在终端里提交本次修改<code>git commit -m &quot;备注&quot;</code><br><img src= \"/img/loading.gif\" data-lazy-src=\"https://i.loli.net/2020/08/18/hmP58SUoFCuvzqw.png\" alt=\"\"></p>\n<h2 id=\"9-git-checkout\"><a href=\"#9-git-checkout\" class=\"headerlink\" title=\"9. git checkout\"></a>9. <code>git checkout</code></h2><p>把删除的文件恢复到最新版本 <code>git checkout</code></p>\n<h2 id=\"10-git-push\"><a href=\"#10-git-push\" class=\"headerlink\" title=\"10. git push\"></a>10. <code>git push</code></h2><p>将本地内容推送到远程仓库 <code>git push</code></p>\n<h2 id=\"11-大功告成！\"><a href=\"#11-大功告成！\" class=\"headerlink\" title=\"11. 大功告成！\"></a>11. 大功告成！</h2><p>刷新github仓库 看到选定删除的文件没有了。</p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://i.loli.net/2020/08/18/uXqeW94l7HsZUNb.png\" alt=\"\"></p>\n","categories":["git"],"tags":["git","github"]},{"title":"发文Demo","url":"/2020/08/11/%E5%8F%91%E6%96%87Demo/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\css\\APlayer.min.css\"><script src=\"\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\js\\Meting.min.js\"></script><h1 id=\"链接合集\"><a href=\"#链接合集\" class=\"headerlink\" title=\"链接合集\"></a>链接合集</h1><p>github：<br>我的邮箱：<a href=\"mailto:1125806272@qq.com\">1125806272@qq.com</a><br>我的博客：<a href=\"http://9pshr3.coding-pages.com/\">http://9pshr3.coding-pages.com/</a><br>或<a href=\"https://zhenglin-li.github.io/\" target=\"_blank\" rel=\"noopener\">https://zhenglin-li.github.io/</a><br>我的csdn：<a href=\"https://me.csdn.net/Panda325\" target=\"_blank\" rel=\"noopener\">https://me.csdn.net/Panda325</a><br>我的简书：<a href=\"https://www.jianshu.com/u/e2d945027d3f\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/u/e2d945027d3f</a><br>我的今日头条：<a href=\"https://www.toutiao.com/c/user/4004188138/#mid=1592553312231438\" target=\"_blank\" rel=\"noopener\">https://www.toutiao.com/c/user/4004188138/#mid=1592553312231438</a><br>我的博客园：<a href=\"https://www.cnblogs.com/zhenglin-li/\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/zhenglin-li/</a></p>\n<h1 id=\"git-bash一条龙\"><a href=\"#git-bash一条龙\" class=\"headerlink\" title=\"git bash一条龙\"></a>git bash一条龙</h1><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo clean &amp;&amp; hexo douban -bgm &amp;&amp; hexo g &amp;&amp; hexo deploy &amp;&amp; hexo s</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo clean &amp;&amp; hexo g &amp;&amp; hexo deploy &amp;&amp; hexo s</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h1 id=\"Front-matter\"><a href=\"#Front-matter\" class=\"headerlink\" title=\"Front-matter\"></a>Front-matter</h1><p>Front-matter 是档案最上方以 — 分隔的区域，用于指定个别档案的变数。</p>\n<p>如果标注可选的参数，可根据自己需要添加，不用全部都写在 markdown 里</p>\n<h2 id=\"Page-Front-matter\"><a href=\"#Page-Front-matter\" class=\"headerlink\" title=\"Page Front-matter\"></a>Page Front-matter</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title:</span><br><span class=\"line\">date:</span><br><span class=\"line\">updated:</span><br><span class=\"line\">type:</span><br><span class=\"line\">comments:</span><br><span class=\"line\">description:</span><br><span class=\"line\">keywords:</span><br><span class=\"line\">top_img:</span><br><span class=\"line\">mathjax:</span><br><span class=\"line\">katex:</span><br><span class=\"line\">aside:</span><br><span class=\"line\">aplayer：</span><br><span class=\"line\">highlight_shrink：</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n<hr>\n<table>\n<thead>\n<tr>\n<th>写法</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>title</td>\n<td>【必需】页面标题</td>\n</tr>\n<tr>\n<td>date</td>\n<td>【必需】页面创建日期</td>\n</tr>\n<tr>\n<td>type</td>\n<td>【必需】标籤、分类和友情链接三个页面需要配置</td>\n</tr>\n<tr>\n<td>updated</td>\n<td>【可选】页面更新日期</td>\n</tr>\n<tr>\n<td>description</td>\n<td>【可选】页面描述</td>\n</tr>\n<tr>\n<td>keywords</td>\n<td>【可选】页面关键字</td>\n</tr>\n<tr>\n<td>comments</td>\n<td>【可选】显示页面评论模块 (默认 true)</td>\n</tr>\n<tr>\n<td>top_img</td>\n<td>【可选】页面顶部图片</td>\n</tr>\n<tr>\n<td>mathjax</td>\n<td>【可选】显示 mathjax (当设置 mathjax 的 per_page: false 时，才需要配置，默认 false)</td>\n</tr>\n<tr>\n<td>katex</td>\n<td>【可选】显示 katex (当设置 katex 的 per_page: false 时，才需要配置，默认 false)</td>\n</tr>\n<tr>\n<td>aside</td>\n<td>【可选】显示侧边栏 (默认 true)</td>\n</tr>\n<tr>\n<td>aplayer</td>\n<td>【可选】在需要的页面加载 aplayer 的 js 和 css, 请参考文章下面的音乐 配置</td>\n</tr>\n<tr>\n<td>highlight_shrink</td>\n<td>【可选】配置代码框是否展开 (true/false)(默认为设置中 highlight_shrink 的配</td>\n</tr>\n</tbody></table>\n<h2 id=\"Post-Front-matter\"><a href=\"#Post-Front-matter\" class=\"headerlink\" title=\"Post Front-matter\"></a>Post Front-matter</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title:</span><br><span class=\"line\">date:</span><br><span class=\"line\">updated:</span><br><span class=\"line\">tags:</span><br><span class=\"line\">categories:</span><br><span class=\"line\">keywords:</span><br><span class=\"line\">description:</span><br><span class=\"line\">top_img:</span><br><span class=\"line\">comments：</span><br><span class=\"line\">cover:  </span><br><span class=\"line\">toc:  </span><br><span class=\"line\">toc_number:</span><br><span class=\"line\">auto_open:</span><br><span class=\"line\">copyright:</span><br><span class=\"line\">copyright_author:</span><br><span class=\"line\">copyright_author_href:</span><br><span class=\"line\">copyright_url:</span><br><span class=\"line\">copyright_info:</span><br><span class=\"line\">mathjax:</span><br><span class=\"line\">katex:</span><br><span class=\"line\">aplayer：</span><br><span class=\"line\">highlight_shrink：</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>写法</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>title</td>\n<td>【必需】文章标题</td>\n</tr>\n<tr>\n<td>date</td>\n<td>【必需】文章创建日期</td>\n</tr>\n<tr>\n<td>updated</td>\n<td>【可选】文章更新日期</td>\n</tr>\n<tr>\n<td>tags</td>\n<td>【可选】文章标籤</td>\n</tr>\n<tr>\n<td>categories</td>\n<td>【可选】文章分类</td>\n</tr>\n<tr>\n<td>keywords</td>\n<td>【可选】文章关键字</td>\n</tr>\n<tr>\n<td>description</td>\n<td>【可选】文章描述</td>\n</tr>\n<tr>\n<td>top_img</td>\n<td>【可选】文章顶部图片</td>\n</tr>\n<tr>\n<td>cover</td>\n<td>【可选】文章缩略图 (如果没有设置 top_img, 文章页顶部将显示缩略图，可设为 false / 图</td>\n</tr>\n<tr>\n<td>comments</td>\n<td>【可选】显示文章评论模块 (默认 true)</td>\n</tr>\n<tr>\n<td>toc</td>\n<td>【可选】显示文章 TOC (默认为设置中 toc 的 enable 配置)</td>\n</tr>\n<tr>\n<td>toc_number</td>\n<td>【可选】显示 toc_number (默认为设置中 toc 的 number 配置)</td>\n</tr>\n<tr>\n<td>auto_open</td>\n<td>【可选】是否自动打开 TOC (默认为设置中 toc 的 auto_open 配置)</td>\n</tr>\n<tr>\n<td>copyright</td>\n<td>【可选】显示文章版权模块 (默认为设置中 post_copyright 的 enable 配置)</td>\n</tr>\n<tr>\n<td>copyright_author</td>\n<td>【可选】文章版权模块的文章作者</td>\n</tr>\n<tr>\n<td>copyright_author_href</td>\n<td>【可选】文章版权模块的文章作者链接</td>\n</tr>\n<tr>\n<td>copyright_url</td>\n<td>【可选】文章版权模块的文章连结链接</td>\n</tr>\n<tr>\n<td>copyright_info</td>\n<td>【可选】文章版权模块的版权声明文字</td>\n</tr>\n<tr>\n<td>mathjax</td>\n<td>【可选】显示 mathjax (当设置 mathjax 的 per_page: false 时，才需要配置，默认 false)</td>\n</tr>\n<tr>\n<td>katex</td>\n<td>【可选】显示 katex (当设置 katex 的 per_page: false 时，才需要配置，默认 false)</td>\n</tr>\n<tr>\n<td>aplayer</td>\n<td>【可选】在需要的页面加载 aplayer 的 js 和 css, 请参考文章下面的音乐 配置</td>\n</tr>\n<tr>\n<td>highlight_shrink</td>\n<td>【可选】配置代码框是否展开 (true/false)(默认为设置中 highlight_shrink 的配置)</td>\n</tr>\n</tbody></table>\n<h1 id=\"插入视频\"><a href=\"#插入视频\" class=\"headerlink\" title=\"插入视频\"></a>插入视频</h1><div style=\"position: relative; width: 100%; height: 0; padding-bottom: 75%;\">\n    <iframe src=\"//player.bilibili.com/player.html?aid=77217003&bvid=BV1XJ411X7Ud&cid=132187550&page=101\"  scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\" style=\"position: absolute; width: 100%; height: 100%; left: 0; top: 0;\"></iframe>\n</div>\n\n\n","categories":["个人博客"]},{"title":"吴恩达机器学习","url":"/2020/08/11/%E5%90%B4%E6%81%A9%E8%BE%BE%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\css\\APlayer.min.css\"><script src=\"\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\js\\Meting.min.js\"></script>"},{"title":"大一实训","url":"/2020/07/14/%E5%A4%A7%E4%B8%80%E5%AE%9E%E8%AE%AD/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\css\\APlayer.min.css\"><script src=\"\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\js\\Meting.min.js\"></script><p>好了，又到了全校放假而计软网实训的时候了，我选的是超市信息管理系统。</p>\n<p>链接如下：</p>\n<p><a href=\"https://github.com/ZhengLin-Li/Practical-training-in-2020\" target=\"_blank\" rel=\"noopener\">https://github.com/ZhengLin-Li/Practical-training-in-2020</a></p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://i.loli.net/2020/07/23/HYDmIMiQ2szgEc3.png\" alt=\"image-20200723142936009\"></p>\n<p>实习总结：</p>\n<p>对于软件工程专业来说，实习的重要性不言而喻。虽然大一暑假的这次实训也算不上实习，但我还是获益良多，下面我来做个简短的总结。</p>\n<p>本次实训工作的具体内容有和小组成员们讨论并完善完善需求规约以及填写项目设计报告，并在此基础上进行代码的编写。</p>\n<p>自项目开始之初，我就热情饱满，以认真负责的态度努力完成自己负责的各项任务。我能严格要求自己，主动完成组长交给我的各项任务。众所周知，一个软件的完成需要团队默契的配合，我自己出现的失误可能会使整个团队进度受到影响。因此在实训的这段时间里，我与小组内其他成员积极沟通，互相协助解决问题。从而在项目基本完成的情况下又进行了多方面的改善，达到了预定的目标。</p>\n<p>通过这次实训，我了解到了明确需求的重要性，良好团队沟通和代码规范的必要性，以及体会到了软件行业确实需要不断的学习才能跟上时代的步伐。在本次实训开始前，我就初略的看完了链表，本想着水到渠成，结果纸上得来终觉浅，实操起来接问题百出，于是我明白了编程要勤于实践。这次实训我另外一个收获就是了解了在企业中是如何通过团队合作的方式来协力完成某个项目的开发。培养了我的软件开发思维，让我在编写代码和完善文档时更具有条理。</p>\n<p>这次实训也暴露出我自身的一些问题：c语言基础不够扎实，撰写文档的经验不足，团队交流有些生疏等等。我在这次实训中着重关注了这些问题并加以改进，已有明显进步。也很感谢实训老师这十天的辛苦付出与耐心讲解，为我的代码提出了很多实用的意见，也指出了我不足，使我能够找准方向提升自己。</p>\n<p>日期：2020.7.22</p>\n","categories":["实训"],"tags":["实训","C语言"]},{"title":"地平线：零之曙光","url":"/2020/08/15/%E5%9C%B0%E5%B9%B3%E7%BA%BF%EF%BC%9A%E9%9B%B6%E4%B9%8B%E6%9B%99%E5%85%89/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\css\\APlayer.min.css\"><script src=\"\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\js\\Meting.min.js\"></script><h1 id=\"图集\"><a href=\"#图集\" class=\"headerlink\" title=\"图集\"></a>图集</h1><p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img.3dmgame.com/uploads/allimg/170222/316-1F222162218.jpg\" alt=\"\"></p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img.3dmgame.com/uploads/allimg/170222/316-1F222162217.jpg\" alt=\"\"></p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img.3dmgame.com/uploads/allimg/170222/316-1F222162216-50.jpg\" alt=\"\"></p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img.3dmgame.com/uploads/allimg/170222/316-1F222162215.jpg\" alt=\"\"></p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img.3dmgame.com/uploads/allimg/170222/316-1F222162214-50.jpg\" alt=\"\"></p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img.3dmgame.com/uploads/allimg/170222/316-1F222162214.jpg\" alt=\"\"></p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img.3dmgame.com/uploads/allimg/170222/316-1F222162216.jpg\" alt=\"\"></p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img.3dmgame.com/uploads/allimg/160621/317-160621135640.jpg\" alt=\"\"></p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img.3dmgame.com/uploads/allimg/160621/317-160621135641-50.jpg\" alt=\"\"></p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img.3dmgame.com/uploads/allimg/160621/317-160621135642.jpg\" alt=\"\"></p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img.3dmgame.com/uploads/allimg/160621/317-160621135643.jpg\" alt=\"\"></p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img.3dmgame.com/uploads/allimg/160621/317-160621135643-50.jpg\" alt=\"\"></p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img.3dmgame.com/uploads/allimg/160621/317-160621135644.jpg\" alt=\"\"></p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img.3dmgame.com/uploads/allimg/160621/317-160621135405.jpg\" alt=\"\"></p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img.3dmgame.com/uploads/allimg/160621/317-160621135407.jpg\" alt=\"\"></p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img.3dmgame.com/uploads/allimg/160621/317-160621135407-50.jpg\" alt=\"\"></p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img.3dmgame.com/uploads/allimg/160621/317-160621135408.jpg\" alt=\"\"></p>\n<h1 id=\"原声带\"><a href=\"#原声带\" class=\"headerlink\" title=\"原声带\"></a>原声带</h1><p><a href=\"http://pan.baidu.com/s/1eS9T9HC\" target=\"_blank\" rel=\"noopener\">http://pan.baidu.com/s/1eS9T9HC</a></p>\n<p>或</p>\n<p><a href=\"https://dl2.wdk6534.com/Laosiji/3DMGAME-Horizon_Zero_Dawn_(Original_Soundtrack)-WEB-2017[320Kbps].rar\" target=\"_blank\" rel=\"noopener\">https://dl2.wdk6534.com/Laosiji/3DMGAME-Horizon_Zero_Dawn_(Original_Soundtrack)-WEB-2017[320Kbps].rar</a></p>\n","categories":["游戏"],"tags":["游戏"]},{"title":"小镇做题家没错，错的是世界","url":"/2020/07/29/%E5%B0%8F%E9%95%87%E5%81%9A%E9%A2%98%E5%AE%B6/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\css\\APlayer.min.css\"><script src=\"\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\js\\Meting.min.js\"></script><h1 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"1\"></a><strong>1</strong></h1><p>最近小镇做题家这个词冒了出来，作为后浪的反面。</p>\n<p>小镇做题家代表了那些出身贫苦，读书努力，依靠高考进入了一所比较好的大学，有一个相对不错的学历，但面对社会依然单薄无力拘谨的形象。</p>\n<p>我回想自己的生活中，似乎是遇到过这些朋友的。</p>\n<p>读中学时有一个同学，努力上进，埋头苦读，在我们翘课打球的时候，他在做题，在我们网吧CS五黑的时候，他在做题，在我们唱K宵夜吹牛皮的时候，他还在写题，他是那种典型的别人家的孩子，老师的最爱，校长的希望。</p>\n<p>有一说一，我是校长我也喜欢人家，毕竟这是行走的KPI。</p>\n<p>人人都爱KPI。</p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"http://p3-tt.byteimg.com/large/pgc-image/3d8ffe037c294ecb97e94a5a972f2616?from=pc\" alt=\"小镇做题家没错，错的是世界\"></p>\n<p>工作之后，我遇到过这么一个实习生，说是实习生，但是看起来似乎比我还要大，半路从生物转行计算机，某985毕业，浑身上下带着一股“老实人”的气息，正儿八经的老实人。</p>\n<p>我说的不是牛顿老师。</p>\n<p>只是这人虽然老实，但老实的并不可爱，也不好用。</p>\n<p>脑回路异乎寻常的直，跟他沟通存在一定门槛，对于工作难以变通，同时也不知道到处去问，我不认为这是他的错误，毕竟谁也不敢说刚上班就有经验，但确实也不喜欢和他合作，因为会给我自己增加非常多的工作量。</p>\n<p>他的野心很明显，想在大城市待下来，但接人待物确实存在问题，喜欢抱怨，并且逢人就强调自己一定要留下来，所以最后尽管我给他写了转正推荐，但拒绝他来我的组，他去了别的更缺人的组，后来我离职，就断了联系。</p>\n<p>人不是坏人，也没什么坏心思，很努力，很肯付出，但有时候就是战战兢兢，不得其法。</p>\n<p>一提起小镇做题家，我第一时间就想到了他们。</p>\n<h1 id=\"2\"><a href=\"#2\" class=\"headerlink\" title=\"2\"></a><strong>2</strong></h1><p>小镇做题家是指那些村镇出生，学习优秀但因缺乏视野和资源导致生活不如意的青年，本质上是一种自嘲的称谓。</p>\n<p>但要区分清楚，不是所有小镇出身大城市工作的年轻人都叫小镇做题家。</p>\n<p>你小镇出身，大城市流水线拼手机，送外卖，剪头发，这叫入城务工青年。</p>\n<p>你小镇出身，娶/嫁了个富二代，从此衣食无忧，这叫人生赢家。</p>\n<p>你小镇出生，清北毕业，先上班后创业，门店开遍全国，纳斯达克上市，问鼎福布斯，这叫莫欺少年穷。</p>\n<p>你小镇出身，学校还行，工作正常，稳扎稳打，赚了点小钱，这叫芸芸众生。</p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"http://p6-tt.byteimg.com/large/pgc-image/3d20be349fdd4d298db432ed9901827d?from=pc\" alt=\"小镇做题家没错，错的是世界\"></p>\n<p>如果你仔细观察，你可以发现，小镇做题家基本包含了所有与奋斗相关的美德。</p>\n<p>尽管经济条件一般，原生家庭物质生活匮乏导致童年见识缺失，在成长路上家庭也无法提供额外的资源和助力，在初高中时依附于“题海战术”、取得优异成绩，从而脱离农村、小镇考入一流名校进入大城市。</p>\n<p>辛苦三年早起晚睡千辛万苦从小镇刷题考上大学后，才发现来自城市的同学因为丰富的教学资源，高中悠闲度过。</p>\n<p>当他们早早的觉醒危机意识，在大学里开始制定学籍计划，希望复刻自己在高中时的成功时，但发现自己思维、眼界、见识都远弱于他人。</p>\n<p>而因为教育资源的落后，以及家庭资源的局限，自己既没有同学那样悠闲的生活，除了纸面上的学习成绩之外，音乐、才艺、运动甚至连人际交往等各类技能都是欠缺的。</p>\n<p>别人的四年叫青春，他们的四年叫大学。</p>\n<p>这其实并不好笑。</p>\n<h1 id=\"3\"><a href=\"#3\" class=\"headerlink\" title=\"3\"></a><strong>3</strong></h1><p>小镇做题家往往入学即巅峰，然后就是被各种暴打，尤其是在面对就业时，会发现自己前四年积累的那些证书，那些学分对面试、工作没有想象中的给力。</p>\n<p>最后企业选了你那个大二就在家人帮助开始实习，做出过好几个实操项目的同学。</p>\n<p>或者更直接一些有资源的。</p>\n<p>这不能怪企业现实，毕竟公司是要赚钱的，这年头大家都不容易，很多老板其实甚至可以说是在给员工打工。</p>\n<p>不是所有人都能骗到投资人接盘的。</p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"http://p6-tt.byteimg.com/large/pgc-image/8251aec8f0384b4f801d109dc57cc514?from=pc\" alt=\"小镇做题家没错，错的是世界\"></p>\n<p>工作之后，好不容易留在了大城市，一线行业。</p>\n<p>但工作不上不下，既比不过那些资源型同学，也比不过本地城市中产。</p>\n<p>既没有六个钱包给他助力，也没有开公司的父母等着他回家继承家产。</p>\n<p>做题家们逐渐开始发现自己面临的尴尬，有的过了很久才发现自己选错了行业，浪费数年时间；</p>\n<p>有的因为谨小慎微，做事犹犹豫豫，不够机灵常常错失良机；</p>\n<p>有的做着一份没有未来的工作，因为害怕转行的风险，日渐绝望。</p>\n<p>简单的来说，在以成绩作为唯一标准的高考前阶段，他们用成绩吊打了一众同学，当高考结束开始拼实操能力的时候，他们却开始反向被世界吊打。</p>\n<p>某种程度上，这证明了地球是圆的。</p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"http://p6-tt.byteimg.com/large/pgc-image/d65766abdb7543b8960b5db1d2d186de?from=pc\" alt=\"小镇做题家没错，错的是世界\"></p>\n<h1 id=\"4\"><a href=\"#4\" class=\"headerlink\" title=\"4\"></a><strong>4</strong></h1><p><strong>小镇做题家真的是失败者吗？</strong></p>\n<p>很明显不是。</p>\n<p>刷题也是有门槛的，就像我，想刷题都刷不来，我当年不知道多羡慕他们。</p>\n<p>那小镇做题家是目光短浅吗？</p>\n<p>很明显也不是。</p>\n<p>小镇做题家其实早早认识到了人生的残酷和自身没有资源可以依靠这个事实，选择了“刷题”这样一条艰辛但高效的道路，并几年如一日的坚持下来，达成了目标。</p>\n<p>自制力强大，执行力爆表。</p>\n<p>刷题这件事情，可真不是谁都能搞定的。</p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"http://p6-tt.byteimg.com/large/pgc-image/85bccde2e0f9436b90c0c48da3378757?from=pc\" alt=\"小镇做题家没错，错的是世界\"></p>\n<p>能吃苦，能认识到现实，看起来是很好，但这里面会有一个负面循环。</p>\n<p>物质的匮乏，导致他们没有条件去增长见识，大量的时间在刷题上，和刷题占用了他们太多的时间资源，导致他们没有时间自行发展其他软性技能。</p>\n<p>实现人生成功→要有好学历→没钱没资源→只能刷题→刷题导致思维僵化→成为做题家→做题家难以成功。</p>\n<p>形成了一个逻辑上的死循环。</p>\n<p>出生于农村城镇，因为原生家庭物质生活匮乏，无法给做题家们带来助力。</p>\n<p>小镇做题家的名头就是这样来的。</p>\n<p>现实只能让他们刷题，不刷题没有出路，但这个社会没有给你继续刷题的机会。</p>\n<p>所以我从来不会看不起小镇做题家，因为错的不是他们，真的是这个世界。</p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"http://p6-tt.byteimg.com/large/pgc-image/277a022a7876484cae83538b37fa0140?from=pc\" alt=\"小镇做题家没错，错的是世界\"></p>\n<h1 id=\"5\"><a href=\"#5\" class=\"headerlink\" title=\"5\"></a><strong>5</strong></h1><p>另外，讲道理，刷题家们的失败，是相对于城市中产而言的，相对于老家的务工青年，他们的生活条件和上升通道是要强得多。</p>\n<p>导致做题家失败的原因是资源的不足+社会化程度低，可以说是非战之罪。</p>\n<p>这种资源不光是指金钱，也指人脉、信息。</p>\n<p>比如中产家庭的父母，可以在子女报考专业的时候给一些指导意见，可以给子女介绍实习，可以帮助子女内推工作。</p>\n<p>而做题家们的父母要不就是农民，要不就是小城市打工仔，别说什么给资源，别在你报专业的时候跟你憋出一句21世纪是生物的世纪就算帮忙了。</p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"http://p6-tt.byteimg.com/large/pgc-image/8cbf6f5f6de642e186e41e52a02a7dfa?from=pc\" alt=\"小镇做题家没错，错的是世界\"></p>\n<p>这是直接原因，那么根本原因是什么呢？</p>\n<p>是“信息差”。</p>\n<p>做题家们对抗人生的策略是用时间换空间。</p>\n<p>这个策略是没问题的，但问题在于，社会性的“成功”是多因素导致的，但做题家们能做的事情却是单一的。</p>\n<p>高考前成功的唯一考量因素是“成绩”，</p>\n<p>高考后最大的考量因素是“经济”，是“资源”。</p>\n<p>成绩的成功是单一的，时间只需要花在六个科目上，“经济”的成功是多因素的，你要把时间花在性价比最高的因素上。</p>\n<p>后者比前者的门槛，高了太多。</p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"http://p6-tt.byteimg.com/large/pgc-image/b05239685f94453c8ed12df16e931571?from=pc\" alt=\"小镇做题家没错，错的是世界\"></p>\n<p>打个比方，企业挑选员工的条件，是找合适的人，有过相关行业实习经验，容易沟通，实操能力强；</p>\n<p>企业晋升员工的条件是有管理能力，做出过成绩，能服众。</p>\n<p>而做题家能提供的只有，学习成绩好，善于应试。</p>\n<p>企业不需要应试能力，社会也不需要应试能力，因为这些换不来金钱。</p>\n<p>而这种信息差导致的认知的偏差，就会最终导致“努力错了方向”。</p>\n<p>产生这种“我明明已经很努力了，为什么还是这么失败”的结局。</p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"http://p1-tt.byteimg.com/large/pgc-image/f1399dbd1fad4683a6e8435987b548e9?from=pc\" alt=\"小镇做题家没错，错的是世界\"></p>\n<h1 id=\"6\"><a href=\"#6\" class=\"headerlink\" title=\"6\"></a><strong>6</strong></h1><p>做题家们痛苦的根源是跳出了自己的圈层，看到了更大的世界，而手头上的资源和以往的成功经验却难以支撑他们在正确的路上更进一步。</p>\n<p>俗话说，不努力还好，一努力才发现自己是个废物，这才是最痛苦的。</p>\n<p>但，小镇做题家是废物吗？</p>\n<p>当然不是。</p>\n<p>看一下小镇做题家的开局难度就知道。</p>\n<p>物资的匮乏，教育资源跟不上，必须靠堆时间刷题找补。</p>\n<p>出身地与外界接触少，很多人大学毕业后才第一次离开自己家的小镇眼界窄。</p>\n<p>面临学业、就业等人生重大抉择没人能够提供建议，帮自己避雷，容易进坑。</p>\n<p>没有家庭资源兜底，没有退路，容错极低，面临选择只能选择短期保底，致使长期失利。</p>\n<p>这四点加在一起堪称深渊开局，甚至如果婴儿有意识有的选，面对这种投胎都恨不得当场去世。</p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"http://p1-tt.byteimg.com/large/pgc-image/144977d0af524f9fa649dd165d27572a?from=pc\" alt=\"小镇做题家没错，错的是世界\"></p>\n<p>但人家是怎么做的？</p>\n<p>认识到了开局难度，知道自己所处的劣势，于是早早的认准了“刷题”这样一条单调高效且成功率最高的路，忍受着孤独和无奈一路杀了上去，最后顶着一身白装跟那些满身时装的rmb玩家同台竞技。</p>\n<p>在开局两只手的情况下，靠刷题刷成了社会中上水平收入，你们别笑，按绝对比例来说大部分白领学历，收入都是社会中上水平，哪怕仅在城市中，也不拖后腿。</p>\n<p>尽管做题家们经常自嘲自己被家境、社会环境、生存压力压垮，努力半生无所作为。</p>\n<p>但从绝对比例来说，小镇做题家依然是人生中的强者。</p>\n<p>强者是什么？</p>\n<p>从绝对意义来说，是强于大多数人，从相对意义来说，是强于昨天的自己。</p>\n<p>无论是哪一点，他们都做到了。</p>\n<p>尤其是考虑到他们的起点，更是值得尊敬。</p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"http://p6-tt.byteimg.com/large/pgc-image/773332dc12fd47bb9f2909980bc6a159?from=pc\" alt=\"小镇做题家没错，错的是世界\"></p>\n<h1 id=\"7\"><a href=\"#7\" class=\"headerlink\" title=\"7\"></a><strong>7</strong></h1><p>在小镇做题家这个话题底下，我看到一句话是我很讨厌的。</p>\n<p>“同样出身小镇，有的人依然对知识抱有无功利的兴趣，有的人则完全只把读书当成敲门砖。”</p>\n<p>对小镇做题家极尽鄙夷。</p>\n<p>这是一句完全正确的废话，是“何不食肉糜”的现代版本。</p>\n<p>读书如果不是作为敲门砖，那么世界上99%的人不会去读书。</p>\n<p>读书就是不如王者荣耀有趣，这很正常。</p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"http://p1-tt.byteimg.com/large/pgc-image/49083ade1e074fe29ce633ceb17ff9f7?from=pc\" alt=\"小镇做题家没错，错的是世界\"></p>\n<p>确实承认，书籍文化有文化传承、探索知识的作用，但在社层面上的意义在于给社会输出一批具有良好学历水平和工作能力的专向人才。</p>\n<p>对个人的意义在于让自己拥有获得工作，获得更好生活的能力。</p>\n<p>对知识抱有兴趣的完全可以自己自学，或者向着专业领域冲就行了，完全不冲突。</p>\n<p>更何况，面对一个缺乏资源独自战斗，只是为了获得跟后浪们同台竞技的年轻人，你好意思跟他说，你不要那么功利？</p>\n<p>功利有错吗？功利没错，功利是他们获得更好生活的唯一方式，功利是他们对抗这个世界的唯一方式。</p>\n<p>在你们指责别人功利前，请别忘了有许多人光是活着就已经拼尽了全力。</p>\n<p>有人耗费整个青春，只是为了证明他不比你差。</p>\n<p>谁喜欢功利的世界呢，但很多时候他们没的选。</p>\n<p>其实，我们也没得选。</p>\n","categories":["读书"]},{"title":"彻底搞定c指针","url":"/2020/10/07/%E5%BD%BB%E5%BA%95%E6%90%9E%E5%AE%9AC%E6%8C%87%E9%92%88/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\css\\APlayer.min.css\"><script src=\"\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\js\\Meting.min.js\"></script><h1 id=\"指针常量和常量指针\"><a href=\"#指针常量和常量指针\" class=\"headerlink\" title=\"指针常量和常量指针\"></a>指针常量和常量指针</h1><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> i = <span class=\"number\">20</span>; </span><br><span class=\"line\"><span class=\"keyword\">int</span> <span class=\"keyword\">const</span> i = <span class=\"number\">20</span>; </span><br><span class=\"line\"><span class=\"comment\">//它们是完全相同的。这一点我们是要清楚。总之，你务必要记住 const 与int 哪个写前都不影响语义。</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> *pi;</span><br><span class=\"line\"><span class=\"keyword\">int</span> <span class=\"keyword\">const</span> *pi;</span><br><span class=\"line\"><span class=\"comment\">//上面两种写法是一样的，所指向的值不可变，指向可变</span></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">1）const 修饰的是整个*pi（注意是*pi 而不是 pi）。所以*pi 是常量，是不能被重新赋值的。</span></span><br><span class=\"line\"><span class=\"comment\">2）pi 前并没有用 const 修饰，所以 pi 是指针变量，能被赋值重新指向另一内存地址的。</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> *<span class=\"keyword\">const</span> pi;</span><br><span class=\"line\"><span class=\"comment\">//指向不可变，所指向的值可变</span></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">1）pi 因为有了 const 的修饰，所以只是一个指针常量：也就是说 pi 值是不可修改的（即 pi 不可以重新指向其他变量了）</span></span><br><span class=\"line\"><span class=\"comment\">2）整个*pi 的前面没有 const 的修饰。也就是说，*pi 是变量而不是常量，所以我们可以通过*pi 来修改它所指向的变量的值</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> * <span class=\"keyword\">const</span> i;</span><br><span class=\"line\"><span class=\"comment\">//指向、所指向的值均不可变</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"C-语言中函数参数的传递\"><a href=\"#C-语言中函数参数的传递\" class=\"headerlink\" title=\"C 语言中函数参数的传递\"></a>C 语言中函数参数的传递</h1><h2 id=\"值传递\"><a href=\"#值传递\" class=\"headerlink\" title=\"值传递\"></a>值传递</h2><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"stdio.h\"</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Exchg1</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> tmp;</span><br><span class=\"line\">    tmp = x;</span><br><span class=\"line\">    x = y;</span><br><span class=\"line\">    y = tmp;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"x = %d, y = %d\\n\"</span>, x, y);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a = <span class=\"number\">4</span>,b = <span class=\"number\">6</span>;</span><br><span class=\"line\">    Exchg1(a, b);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"a = %d, b = %d\\n\"</span>, a, b);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>程序输出的结果是：</p>\n<p>x = 6, y = 4. </p>\n<p>a = 4, b = 6. </p>\n<p>一个预备的常识</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> a = <span class=\"number\">4</span>; </span><br><span class=\"line\"><span class=\"keyword\">int</span> x; </span><br><span class=\"line\">x = a; </span><br><span class=\"line\">x = x + <span class=\"number\">3</span>;</span><br></pre></td></tr></table></figure>\n\n<p> a = 4、x = 7</p>\n<p>Exchg1(a, b)时所完成的操作代码如下所示。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> x = a; <span class=\"comment\">/* ← */</span> </span><br><span class=\"line\"><span class=\"keyword\">int</span> y = b; <span class=\"comment\">/* ← 注意这里，头两行是调用函数时的隐含操作 */</span> </span><br><span class=\"line\"><span class=\"keyword\">int</span> tmp; </span><br><span class=\"line\">tmp = x; </span><br><span class=\"line\">x = y; </span><br><span class=\"line\">y = tmp;</span><br></pre></td></tr></table></figure>\n\n<p>请注意在调用执行 Exchg1 函数的操作中我人为地加上了头两句：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> x = a; </span><br><span class=\"line\"><span class=\"keyword\">int</span> y = b;</span><br></pre></td></tr></table></figure>\n\n<p>这是调用函数时的两个隐含动作。它确实存在，现在我只不过把它显式地写了出来而已。问题一下就清晰起来啦。（看到这里，现在你认为函数里面交换操作的是 a、b 变量或者只是 x、y 变量呢？）</p>\n<p>原来 ，其实函数在调用时是隐含地把实参 a、b 的值分别赋值给了 x、y，之后在你写的Exchg1函数体内再也没有对 a、b 进行任何的操作了。交换的只是 x、y变量。并不是a、b。当然a、b的值没有改变啦！函数只是把a、b的值通过赋值传递给了** <strong>x**</strong>、<strong><strong>y</strong></strong>，函数里头操作的只是x、y的值并不是a、b的值。这就是所谓的参数的值传递了。</p>\n<p>正是因为它隐含了那两个的赋值操作，才让我们产生前述的迷惑（以为 a、b 已经代替了 x、y，对 x、y 的操作就是对 a、b 的操作了，这是一个错误的观点啊！）。</p>\n<h2 id=\"地址传递\"><a href=\"#地址传递\" class=\"headerlink\" title=\"地址传递\"></a>地址传递</h2><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Exchg2</span><span class=\"params\">(<span class=\"keyword\">int</span> *px, <span class=\"keyword\">int</span> *py)</span> </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123; </span><br><span class=\"line\">\t<span class=\"keyword\">int</span> tmp = *px; </span><br><span class=\"line\">\t*px = *py; </span><br><span class=\"line\">\t*py = tmp; </span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"*px = %d, *py = %d.\\n\"</span>, *px, *py); </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">main() </span><br><span class=\"line\">&#123; </span><br><span class=\"line\">\t<span class=\"keyword\">int</span> a = <span class=\"number\">4</span>; </span><br><span class=\"line\">\t<span class=\"keyword\">int</span> b = <span class=\"number\">6</span>; </span><br><span class=\"line\">\tExchg2(&amp;a, &amp;b); </span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"a = %d, b = %d.\\n”, a, b); </span></span><br><span class=\"line\"><span class=\"string\">\treturn(0); </span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>它的输出结果是：</p>\n<p>*px = 6, *py = 4.<br>a = 6, b = 4. </p>\n<p>看函数的接口部分：Exchg2(int *px, int *py)，请注意：参数 px、py 都是指针。</p>\n<p>再看调用处：Exchg2(&amp;a, &amp;b); </p>\n<p>它将 a 的地址（&amp;a）代入到 px，b 的地址（&amp;b）代入到 py。同上面的值传递一样，函数调用时作了两个隐含的操作：将&amp;a，&amp;b 的值赋值给了 px、py。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">px = &amp;a; </span><br><span class=\"line\">py = &amp;b;</span><br></pre></td></tr></table></figure>\n\n<p>呵呵！我们发现，其实它与值传递并没有什么不同，只不过这里是将 a、b的地址值传递给了 px、py，而不是传递的 a、b 的内容，</p>\n<p>整个 Exchg2 函数调用是如下执行的： </p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">px = &amp;a; <span class=\"comment\">/* ← */</span> </span><br><span class=\"line\">py = &amp;b; <span class=\"comment\">/* ← 请注意这两行，它是调用 Exchg2 的隐含动作。*/</span> </span><br><span class=\"line\"><span class=\"keyword\">int</span> tmp = *px; </span><br><span class=\"line\">*px = *py; </span><br><span class=\"line\">*py = tmp; </span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"*px =%d, *py = %d.\\n\"</span>, *px, *py);</span><br></pre></td></tr></table></figure>\n\n<p>这样，有了头两行的隐含赋值操作。我们现在已经可以看出，指针px、py的值已经分别是a、b变量的地址值了。接下来，对<em>px、</em>py的操作当然也就是对a、b变量本身的操作了。所以函数里头的交换就是对 a、b 值的交换了，</p>\n<p>这就是所谓的地址传递（传递 a、b 的地址给了 px、py），你现在明白了吗？</p>\n<h2 id=\"c-引用传递\"><a href=\"#c-引用传递\" class=\"headerlink\" title=\"c++引用传递\"></a>c++引用传递</h2><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Exchg3</span><span class=\"params\">(<span class=\"keyword\">int</span> &amp;x, <span class=\"keyword\">int</span> &amp;y)</span> <span class=\"comment\">/* 注意定义处的形式参数的格式与值传递不同 */</span> </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">int</span> tmp = x; <span class=\"number\">27</span>x = y;</span><br><span class=\"line\">y = tmp;</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"x = %d, y = %d.\\n\"</span>, x, y);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">int</span> a = <span class=\"number\">4</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> b = <span class=\"number\">6</span>;</span><br><span class=\"line\">Exchg3(a, b); <span class=\"comment\">/*注意：这里调用方式与值传递一样*/</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"a = %d, b = %d.\\n”, a, b);</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">输出结果：</span></span><br><span class=\"line\"><span class=\"string\">x = 6, y = 4.</span></span><br><span class=\"line\"><span class=\"string\">a = 6, b = 4.</span></span><br><span class=\"line\"><span class=\"string\">/*</span></span><br></pre></td></tr></table></figure>\n\n<p>这个输出结果与值传递不同。与值传递相比，代码格式上只有一处是不同的，即在定义处：<br>Exchg3(int &amp;x, int &amp;y)<br>但是我们发现 a 与 b 的值发生了对调。这说明了 Exchg3(a, b)里头修改的是 a、b 变量，而不只是修改 x、y 了。<br>我们先看 Exchg3 函数的定义处Exchg3(int &amp;x, int &amp;y)。参数 x、y 是 int 的变量，调用时我们可以像值传递（如： Exchg1(a, b); ）一样调<br>用函数（如： Exchg3(a, b);）。但是 x、y 前都有一个符号“&amp;”（不是取地址的作用）。有了这个，调用 Exchg3 时函数会将 a、b 分别代替了 x、y 了，我们称：x、y分别引用了 a、b 变量。这样函数里头操作的其实就是实参 a、b 本身了，也就是说函数里是可以直接修改到 a、b 的值了。</p>\n<p>最后对值传递与引用传递作一个比较：<br>1）在函数定义格式上有不同： 值传递在定义处是：Exchg1(int x, int y); 引用传递在这义处是：Exchg3(int &amp;x, int &amp;y);<br>2）调用时有相同的格式： 值传递：Exchg1(a, b); 引用传递：Exchg3(a, b);<br>3）功能上是不同的：<br>值传递的函数里操作的不是 a、b 变量本身，只是将 a、b 值赋给了 x、y。 函数里操作的只是 x、y 变量而不是 a、b，显示 a、b 的值不会被 Exchg1 函数 所修改。<br>引用传递 Exchg3(a, b)函数里是用 a、b 分别代替了 x、y。函数里操作 的就是 a、b 变量的本身，因此 a、b 的值可在函数里被修改的。</p>\n<h1 id=\"指向另一指针地址的指针\"><a href=\"#指向另一指针地址的指针\" class=\"headerlink\" title=\"指向另一指针地址的指针\"></a>指向另一指针地址的指针</h1><p>看下面代码： </p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">short <span class=\"keyword\">int</span> i = <span class=\"number\">50</span>;</span><br><span class=\"line\">short <span class=\"keyword\">int</span> *pi = &amp;i;</span><br><span class=\"line\">short <span class=\"keyword\">int</span> **ppi = &amp;pi; <span class=\"comment\">/* 这是一个指向指针的指针，注意有两个“*”号 */</span></span><br></pre></td></tr></table></figure>\n\n<p>第一句：short int **ppi; —— 声明了一个指针变量 ppi，这个 ppi 是用来存储（或称指向）一个short int * 类型指针变量的地址。</p>\n<p>第二句：&amp;pi 那就是取 pi 的地址，**ppi = &amp;pi 就是把 pi 的地址赋给 了 ppi。即将地址值 9 赋值给 ppi。如下图：</p>\n<p>内存地址→ 5       6             7                  8                 9   10            11       12      </p>\n<p>——–+——————————————————————————————————————–</p>\n<p> |               50                |                   |                   |         5          |         9          |</p>\n<p>|         short int i            |                   |                   | short int <em>pi   |short int *</em>ppi|</p>\n<p>从图中看出，指针变量 ppi 的内容就是指针变量 pi 的起始地址。于是…… ppi 的值是多少呢？—— 9。 <em>ppi 的值是多少呢？—— 5，即 pi 的值。 *</em>ppi 的值是多少呢？——50，即 i 的值，也是*pi 的值。 呵呵！不用我说太多了，我相信你应明白这种指针了吧！</p>\n<h1 id=\"一个应用实例\"><a href=\"#一个应用实例\" class=\"headerlink\" title=\"一个应用实例\"></a>一个应用实例</h1><p>一个应用实例<br>（1）设计一个函数：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">find1</span><span class=\"params\">(<span class=\"keyword\">char</span> <span class=\"built_in\">array</span>[], <span class=\"keyword\">char</span> search, <span class=\"keyword\">char</span> *pa)</span></span></span><br></pre></td></tr></table></figure>\n\n<p>要求：这个函数参数中的数组 array 是以 0 值为结束的字符串，要求在字符串 array 中查找字符是参数 search 里的字符。如果找到，函数通过第三个参数 （pa）返回值为 array 字符串中第一个找到的字符的地址。如果没找到，则为 pa 为 0。<br>设计：依题意，实现代码如下。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">find1</span><span class=\"params\">(<span class=\"keyword\">char</span> <span class=\"built_in\">array</span>[], <span class=\"keyword\">char</span> search, <span class=\"keyword\">char</span> *pa)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; *(<span class=\"built_in\">array</span> + i) != <span class=\"string\">'\\0'</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (*(<span class=\"built_in\">array</span> + i) == search) &#123;</span><br><span class=\"line\">            pa = <span class=\"built_in\">array</span> + i;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (*(<span class=\"built_in\">array</span> + i) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            pa = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>你觉得这个函数能实现所要求的功能吗？<br>调试：<br>我下面调用这个函数试试。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> str[] = &#123;<span class=\"string\">\"afsdfsdfdf\\0\"</span>&#125;;<span class=\"comment\">/* 待查找的字符串 */</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> a = <span class=\"string\">'d'</span>;<span class=\"comment\">/* 设置要查找的字符 */</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> *p = <span class=\"number\">0</span>; <span class=\"comment\">/* 如果查找到后指针 p 将指向字符串中查找到的第 1 个字符的地址。 */</span></span><br><span class=\"line\">    find1(str, a, p); <span class=\"comment\">/* 调用函数以实现所要操作。 */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"number\">0</span> == p) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"Not Find! \\n\"</span>); <span class=\"comment\">/* 如果没找到则输出此句 */</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"Find! p = %d\"</span>, p); <span class=\"comment\">/* 如果找到则输出此句*/</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>分析：<br>上面代码，你认为会是输出什么呢？<br>运行试试。<br>唉！怎么输出的是：Not Find!<br>而不是“Find!，……”。<br>明明 a 值为’d’，而 str 字符串的第四个字符是’d’，应该找得到呀！<br>再看函数定义处：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">find1</span><span class=\"params\">(<span class=\"keyword\">char</span> <span class=\"built_in\">array</span>[], <span class=\"keyword\">char</span> search, <span class=\"keyword\">char</span> *pa)</span></span></span><br></pre></td></tr></table></figure>\n\n<p>看调用处：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">find1(str, a, p);</span><br></pre></td></tr></table></figure>\n\n<p>依我在第伍篇的分析方法，函数调用时会对每一个参数进行一个隐含的赋值操作。<br>整个调用如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">array</span> = str;</span><br><span class=\"line\">search = a;</span><br><span class=\"line\">pa = p; <span class=\"comment\">/* 请注意：以上三句是调用时隐含的动作。*/</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> i;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(i =<span class=\"number\">0</span>; *(<span class=\"built_in\">array</span>+i) != <span class=\"string\">'\\0'</span>; i++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (*(<span class=\"built_in\">array</span>+i) == search)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tpa = <span class=\"built_in\">array</span> + i;</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (*(<span class=\"built_in\">array</span>+i)==<span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tpa=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>哦！参数 pa 与参数 search 的传递并没有什么不同，都是值传递嘛（小语：地址传递其实就是地址值传递嘛）！所以对形参变量 pa 值（当然值是一个地址值）的修改并不会改变实参变量 p 值，因此 p 的值并没有改变(即 p 的指向并没有被改变)。<br>修正：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">find2</span><span class=\"params\">(<span class=\"keyword\">char</span> <span class=\"built_in\">array</span>[], <span class=\"keyword\">char</span> search, <span class=\"keyword\">char</span> **ppa)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (i=<span class=\"number\">0</span>; *(<span class=\"built_in\">array</span> + i) != <span class=\"number\">0</span>; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(*(<span class=\"built_in\">array</span> + i) == search)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">        \t*ppa = <span class=\"built_in\">array</span> + i;</span><br><span class=\"line\">        \t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(*(<span class=\"built_in\">array</span> + i) == <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">       \t    *ppa = <span class=\"number\">0</span>;</span><br><span class=\"line\">       \t    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>主函数的调用处改如下： </p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">find2(str, a, &amp;p);</span><br></pre></td></tr></table></figure>\n\n<p>调用函数以实现所要操作。<br>再分析：<br>这样调用函数时的整个操作变成如下： </p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">array</span> = str; search = a; ppa = &amp;p; <span class=\"comment\">/* 请注意：以上三句是调用时隐含的动作。 */</span> <span class=\"keyword\">int</span> i;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; *(<span class=\"built_in\">array</span> + i) != <span class=\"number\">0</span>; i++) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (*(<span class=\"built_in\">array</span> + i) == search) &#123;</span><br><span class=\"line\">\t\t*ppa = <span class=\"built_in\">array</span> + i <span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (*(<span class=\"built_in\">array</span>+i)==<span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t*ppa=<span class=\"number\">0</span>; <span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t&#125; \t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p>看明白了吗？ ppa 指向指针 p 的地址。 对*ppa 的修改就是对 p 值的修改。 你自行去调试。<br>经过修改后的程序就可以完成所要的功能了。 看懂了这个例子，也就达到了本篇所要求的目的。</p>\n<h1 id=\"函数指针\"><a href=\"#函数指针\" class=\"headerlink\" title=\"函数指针\"></a>函数指针</h1><h2 id=\"什么是函数指针\"><a href=\"#什么是函数指针\" class=\"headerlink\" title=\"什么是函数指针\"></a>什么是函数指针</h2><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"stdio.h\"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">MyFun</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, x);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> *argv[])</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> (*FunP)(<span class=\"keyword\">int</span>) = MyFun;</span><br><span class=\"line\">    MyFun(<span class=\"number\">10</span>);</span><br><span class=\"line\">    (*FunP)(<span class=\"number\">20</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>有了 FunP 指针变量后，我们就可以对它赋值指向 MyFun，然后通过 FunP来调用 MyFun 函数了。看我如何通过 FunP 指针变量来调用 MyFun 函数的：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"stdio.h\"</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">MyFun</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span>;</span><br><span class=\"line\"><span class=\"keyword\">void</span> (*FunP)(<span class=\"keyword\">int</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> *argv[])</span> </span>&#123;</span><br><span class=\"line\">    MyFun(<span class=\"number\">10</span>); <span class=\"comment\">/* 这是直接调用 MyFun 函数 */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    FunP = &amp;MyFun; <span class=\"comment\">/* 将 MyFun 函数的地址赋给 FunP 变量 */</span></span><br><span class=\"line\">    FunP = MyFun; <span class=\"comment\">/* 将 MyFun 函数的地址赋给 FunP 变量 */</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    (*FunP)(<span class=\"number\">20</span>);<span class=\"comment\">/* （★）这是通过函数指针变量 FunP 来调用MyFun 函数的。 */</span></span><br><span class=\"line\">    FunP(<span class=\"number\">20</span>); <span class=\"comment\">/* （★）这是通过函数指针变量来调用 MyFun 函数的。*/</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">MyFun</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, x);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>1）其实，MyFun 的函数名与 FunP 函数指针都是一样的，即都是函数指针。<br>MyFun 函数名是一个函数指针常量，而 FunP 是一个函数数指针变量，这是它 们的关系。 </p>\n<p>2）但函数名调用如果都得如(*MyFun)(10)这样，那书写与读起来都是不 方便和不习惯的。所以 C 语言的设计者们才会设计成又可允许 MyFun(10)这种 形式地调用（这样方便多了并与数学中的函数形式一样，不是吗？）。 </p>\n<p>3）为统一起见，FunP 函数指针变量也可以 FunP(10)的形式来调用。 </p>\n<p>4）赋值时，即可FunP = &amp;MyFun形式，也可FunP = MyFun。 </p>\n<p>上述代码的写法，随便你爱怎么着！<br>请这样理解吧！这可是有助于你对函数指针的应用喽！ 最后 ——<br>补充说明一点，在函数的声明处：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">MyFun</span><span class=\"params\">(<span class=\"keyword\">int</span>)</span></span>; <span class=\"comment\">/*不能写成 void (*MyFun)(int)。*/</span> </span><br><span class=\"line\"><span class=\"keyword\">void</span> (*FunP)(<span class=\"keyword\">int</span>); <span class=\"comment\">/*不能写成 void FunP(int)。*/</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"定义某一函数的指针类型\"><a href=\"#定义某一函数的指针类型\" class=\"headerlink\" title=\"定义某一函数的指针类型\"></a>定义某一函数的指针类型</h2><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"stdio.h\"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">MyFun</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">typedef</span> <span class=\"title\">void</span> <span class=\"params\">(*FunType)</span><span class=\"params\">(<span class=\"keyword\">int</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">FunType FunP; <span class=\"comment\">/*然后用 FunType 类型来声明全局 FunP 变量*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> *argv[])</span> </span>&#123;</span><br><span class=\"line\">    FunType FunP;</span><br><span class=\"line\">    MyFun(<span class=\"number\">10</span>);</span><br><span class=\"line\">    FunP = &amp;MyFun;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">MyFun</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, x);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>定义一个名为 FunType 函数指针类型，而不是一个 FunType 变量。 然后，<code>FunType FunP</code>这句就如<code>PINT px;</code>一样地声明一个 FunP<br>变量。</p>\n<h2 id=\"函数指针作为某个函数的参数\"><a href=\"#函数指针作为某个函数的参数\" class=\"headerlink\" title=\"函数指针作为某个函数的参数\"></a>函数指针作为某个函数的参数</h2><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"stdio.h\"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">MyFun1</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">MyFun2</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">MyFun3</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">typedef</span> <span class=\"title\">int</span> <span class=\"params\">(*FunType)</span><span class=\"params\">(<span class=\"keyword\">int</span>)</span></span>; <span class=\"comment\">/* ②. 定义一个函数指针类型 FunType,只要函数类型（参数和返回值）相同就可以只用之来定义 */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">CallMyFun</span><span class=\"params\">(FunType fp, <span class=\"keyword\">int</span> x)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> *argv[])</span> </span>&#123;</span><br><span class=\"line\">    CallMyFun(MyFun1, <span class=\"number\">10</span>); <span class=\"comment\">/* ⑤. 通过 CallMyFun 函数分别 调用三个不同的函数 */</span></span><br><span class=\"line\">    CallMyFun(MyFun2, <span class=\"number\">20</span>);</span><br><span class=\"line\">    CallMyFun(MyFun3, <span class=\"number\">30</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">CallMyFun</span><span class=\"params\">(FunType fp, <span class=\"keyword\">int</span> x)</span> <span class=\"comment\">/* ③. 参数 fp 的类型是FunType。*/</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    fp(x);<span class=\"comment\">/* ④. 通过 fp 的指针执行传递进来的函数，注意 fp 所指 的函数是有一个参数的。 */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">MyFun1</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> <span class=\"comment\">/* ①. 这是个有一个参数的函数，以下两个函数也相同。 */</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"函数 MyFun1 中输出：%d\\n\"</span>, x);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">MyFun2</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"函数 MyFun2 中输出：%d\\n\"</span>, x);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">MyFun3</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"函数 MyFun3 中输出：%d\\n\"</span>, x);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输出结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">函数 MyFun1 中输出：10</span><br><span class=\"line\">函数 MyFun2 中输出：20</span><br><span class=\"line\">函数 MyFun3 中输出：30</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"函数类型\"><a href=\"#函数类型\" class=\"headerlink\" title=\"函数类型\"></a>函数类型</h2><p>函数指针只要返回值和参数相同就可以指向</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> (*p1)(<span class=\"keyword\">int</span>) ; <span class=\"comment\">// 可以指向函数的类型是空返回值且一个int类型的参数</span></span><br><span class=\"line\"><span class=\"keyword\">double</span> (*p2)(<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>) ; <span class=\"comment\">// 可以指向函数的类型是double类型的返回值且两个int类型的参数</span></span><br></pre></td></tr></table></figure>\n\n"},{"title":"微信小程序云开发学习笔记（一）云数据库","url":"/2020/08/17/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%BA%91%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89%E4%BA%91%E6%95%B0%E6%8D%AE%E5%BA%93/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\css\\APlayer.min.css\"><script src=\"\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\js\\Meting.min.js\"></script><p>微信小程序和后台交互扫盲：<a href=\"https://www.bilibili.com/video/BV1jt411E7au\" target=\"_blank\" rel=\"noopener\">https://www.bilibili.com/video/BV1jt411E7au</a></p>\n<p>云开发：<a href=\"https://www.bilibili.com/video/BV1pE411C7Ca?from=search&amp;seid=14303234966957086491\" target=\"_blank\" rel=\"noopener\">https://www.bilibili.com/video/BV1pE411C7Ca?from=search&amp;seid=14303234966957086491</a></p>\n<p>云开发学习代码： D:\\code is here\\微信小程序云开发学习</p>\n<p><a href=\"https://github.com/ZhengLin-Li/learning-miniapp-coulddevelopment\" target=\"_blank\" rel=\"noopener\">https://github.com/ZhengLin-Li/learning-miniapp-coulddevelopment</a></p>\n<p>云开发配置的环境：cloud-learning</p>\n<div style=\"position: relative; width: 100%; height: 0; padding-bottom: 75%;\">\n    <iframe src=\"//player.bilibili.com/player.html?aid=71382448&bvid=BV1pE411C7Ca&cid=123683867&page=16\"  scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\" style=\"position: absolute; width: 100%; height: 100%; left: 0; top: 0;\"></iframe>\n</div>\n\n\n<h1 id=\"云开发环境初始化准备\"><a href=\"#云开发环境初始化准备\" class=\"headerlink\" title=\"云开发环境初始化准备\"></a>云开发环境初始化准备</h1><h2 id=\"需要：\"><a href=\"#需要：\" class=\"headerlink\" title=\"需要：\"></a>需要：</h2><p>APPID</p>\n<h2 id=\"操作：\"><a href=\"#操作：\" class=\"headerlink\" title=\"操作：\"></a>操作：</h2><ol>\n<li><p>在创建项目时，填入APPID并选择不使用云函数</p>\n</li>\n<li><p>进入到开发者页面，点击左上角的云开发并选择开通</p>\n</li>\n<li><p>设置云开发环境名称，可以任意填写</p>\n</li>\n<li><p>在<code>project.config.json</code>中加入字段<code>&quot;cloudfunctionRoot&quot;:&quot;cloud&quot;</code></p>\n</li>\n<li><p>在打开的云开发控制台中点击设置，新建一个环境ID</p>\n</li>\n<li><p><code>app.js</code>中删除所有代码，只保留<code>env</code>即环境ID</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">App(&#123;</span><br><span class=\"line\">  onLaunch: function () &#123;</span><br><span class=\"line\">    &#x2F;&#x2F;云开发环境初始化</span><br><span class=\"line\">    wx.cloud.init(&#123;</span><br><span class=\"line\">      env:&quot;cloud-learning-i44qm&quot;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200817153256182.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1BhbmRhMzI1,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在project.config.json中加入字段&quot;cloudfunctionRoot&quot;:&quot;cloud&quot;\"><br><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200817153332529.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1BhbmRhMzI1,size_16,color_FFFFFF,t_70#pic_center\" alt=\"app.js中删除所有代码，只保留\"></p>\n</li>\n<li><p>在根目录下创建文件夹（目录）<code>cloud</code></p>\n</li>\n</ol>\n<h1 id=\"云数据库\"><a href=\"#云数据库\" class=\"headerlink\" title=\"云数据库\"></a>云数据库</h1><h2 id=\"新增固定的数据\"><a href=\"#新增固定的数据\" class=\"headerlink\" title=\"新增固定的数据\"></a>新增固定的数据</h2><p>效果：通过点击一个按键可以向云数据库中新增固定字段的内容</p>\n<p>实现：</p>\n<ol>\n<li>在<code>index.wxml</code>中，加入如下代码</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;button bindtap&#x3D;&quot;addData&quot;&gt;新增数据&lt;&#x2F;button&gt;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>点击云开发–&gt;数据库–&gt;创建集合<code>testlist</code></li>\n<li>在<code>index.js</code>中加入如下代码</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">const DB &#x3D; wx.cloud.database().collection(&quot;testlist&quot;)</span><br><span class=\"line\">Page(&#123;</span><br><span class=\"line\">  addData()&#123;</span><br><span class=\"line\">    console.log(&#39;调用添加数据的方法&#39;)</span><br><span class=\"line\">    DB.add(&#123;</span><br><span class=\"line\">      data:&#123;</span><br><span class=\"line\">        name:&#39;panda bear&#39;,</span><br><span class=\"line\">        price:9999</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      success(res) &#123;</span><br><span class=\"line\">        console.log(&quot;成功&quot;, res)</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      fail(res) &#123;</span><br><span class=\"line\">        console.log(&quot;失败&quot;, res)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>测试：点击新增数据按钮，发现控制台上有相应输出，再进入到云开发的数据库页面，发现上述字段已新增</p>\n<h2 id=\"新增用户输入的不确定数据\"><a href=\"#新增用户输入的不确定数据\" class=\"headerlink\" title=\"新增用户输入的不确定数据\"></a>新增用户输入的不确定数据</h2><p>效果：用户通过输入想新增的数据并点击确定新增按键，即可向云数据库中新增用户想新增的数据</p>\n<p>实现：</p>\n<ol>\n<li>在<code>index.wxml</code>中加入如下代码</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;input placeholder&#x3D;&quot;输入名字&quot; bindinput&#x3D;&quot;addName&quot;&gt;&lt;&#x2F;input&gt;</span><br><span class=\"line\">&lt;text&gt;\\n&lt;&#x2F;text&gt;</span><br><span class=\"line\">&lt;input placeholder&#x3D;&quot;输入年龄&quot; bindinput&#x3D;&quot;addAge&quot;&gt;&lt;&#x2F;input&gt;</span><br><span class=\"line\">&lt;text&gt;\\n&lt;&#x2F;text&gt;</span><br><span class=\"line\">&lt;button bindtap&#x3D;&quot;addData&quot; type&#x3D;&quot;primary&quot;&gt;新增数据&lt;&#x2F;button&gt;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>在<code>index.js</code>中加入如下代码</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">const DB &#x3D; wx.cloud.database().collection(&quot;list&quot;)</span><br><span class=\"line\">let name &#x3D; &#39;&#39;</span><br><span class=\"line\">let age &#x3D; &#39;&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">Page(&#123;</span><br><span class=\"line\">  addName(event)&#123;</span><br><span class=\"line\">    &#x2F;&#x2F;console.log(event.detail.value)</span><br><span class=\"line\">    name &#x3D; event.detail.value</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  addAge(event)&#123;</span><br><span class=\"line\">    &#x2F;&#x2F;console.log(event.detail.value)</span><br><span class=\"line\">    age &#x3D; event.detail.value</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  addData() &#123;</span><br><span class=\"line\">    console.log(&#39;调用添加数据的方法&#39;)</span><br><span class=\"line\">    DB.add(&#123;</span><br><span class=\"line\">      data: &#123;</span><br><span class=\"line\">        name: name,</span><br><span class=\"line\">        age: age</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      success(res) &#123;</span><br><span class=\"line\">        console.log(&quot;添加数据成功&quot;, res)</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      fail(res) &#123;</span><br><span class=\"line\">        console.log(&quot;添加数据失败&quot;, res)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>测试：输入数据后，点击新增数据按钮，发现控制台上有相应输出，再进入到云开发的数据库页面，发现输入的字段已新增</p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200817153642239.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1BhbmRhMzI1,size_16,color_FFFFFF,t_70#pic_center\" alt=\"输入数据后，点击新增数据按钮\"><br><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/2020081715371567.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1BhbmRhMzI1,size_16,color_FFFFFF,t_70#pic_center\" alt=\"控制台上有相应输出\"><br><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200817153801918.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1BhbmRhMzI1,size_16,color_FFFFFF,t_70#pic_center\" alt=\"再进入到云开发的数据库页面，发现输入的字段已新增\"></p>\n<h2 id=\"查找已有的数据\"><a href=\"#查找已有的数据\" class=\"headerlink\" title=\"查找已有的数据\"></a>查找已有的数据</h2><p>效果：通过点击一个按键可以查询云数据库中的内容</p>\n<p>实现：</p>\n<ol>\n<li>在<code>index.wxml</code>中，加入如下代码</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;button bindtap&#x3D;&quot;getData&quot;&gt;查询数据&lt;&#x2F;button&gt;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>在<code>index.js</code>中加入如下代码</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">const DB &#x3D; wx.cloud.database().collection(&quot;testlist&quot;)</span><br><span class=\"line\">Page(&#123;</span><br><span class=\"line\">  getData() &#123;</span><br><span class=\"line\">    console.log(&#39;调用查询数据的方法&#39;)</span><br><span class=\"line\">    DB.get(&#123;</span><br><span class=\"line\">      success(res)&#123;</span><br><span class=\"line\">        console.log(&#39;查询数据成功&#39;,res)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>测试：点击查询数据按钮，发现控制台上有相应输出</p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjAvMDgvMTcvTkdIVHpBcVhjeXcyTXJuLnBuZw?x-oss-process=image/format,png\" alt=\"\"></p>\n<h2 id=\"通过ID删除数据\"><a href=\"#通过ID删除数据\" class=\"headerlink\" title=\"通过ID删除数据\"></a>通过ID删除数据</h2><p>效果：用户通过输入想删除数据的ID并点击确定删除按键，即可删除云数据库中用户想删除的数据</p>\n<p>实现：</p>\n<ol>\n<li>在<code>index.wxml</code>中加入如下代码</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;input placeholder&#x3D;&quot;要删除数据的ID&quot; bindinput&#x3D;&quot;delDataInput&quot;&gt;&lt;&#x2F;input&gt;</span><br><span class=\"line\">&lt;text&gt;\\n&lt;&#x2F;text&gt;</span><br><span class=\"line\">&lt;button bindtap&#x3D;&quot;delData&quot; type&#x3D;&quot;primary&quot;&gt;删除数据&lt;&#x2F;button&gt;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>在<code>index.js</code>中加入如下代码</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">const DB &#x3D; wx.cloud.database().collection(&quot;list&quot;)</span><br><span class=\"line\">let id &#x3D; &#39;&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">Page(&#123;</span><br><span class=\"line\">  delDataInput(event)&#123;</span><br><span class=\"line\">    &#x2F;&#x2F;console.log(event.detail.value)</span><br><span class=\"line\">    id &#x3D; event.detail.value</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  delData() &#123;</span><br><span class=\"line\">    console.log(&#39;调用删除数据的方法&#39;)</span><br><span class=\"line\">    DB.doc(id).remove(&#123;</span><br><span class=\"line\">      success(res) &#123;</span><br><span class=\"line\">        console.log(&#39;删除数据成功&#39;, res.data)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>测试：输入想删除数据的ID后（注意不要带有引号””），点击确定删除按键，发现控制台上有相应输出，再进入到云开发的数据库页面，发现输入id对应的该条数据已删除<br><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200817154308889.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1BhbmRhMzI1,size_16,color_FFFFFF,t_70#pic_center\" alt=\"删除前\"><br><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200817154330814.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1BhbmRhMzI1,size_16,color_FFFFFF,t_70#pic_center\" alt=\"删除后\"></p>\n<h2 id=\"通过属性删除数据\"><a href=\"#通过属性删除数据\" class=\"headerlink\" title=\"通过属性删除数据\"></a>通过属性删除数据</h2><p>效果：用户通过输入想删除数据的name的值并点击确定删除按键，即可删除云数据库中用户想删除的数据</p>\n<p>实现：</p>\n<ol>\n<li>在<code>index.wxml</code>中加入如下代码</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;input placeholder&#x3D;&quot;输入要删除数据的name&quot; bindinput&#x3D;&quot;delDataInputName&quot;&gt;&lt;&#x2F;input&gt;</span><br><span class=\"line\">&lt;text&gt;\\n&lt;&#x2F;text&gt;</span><br><span class=\"line\">&lt;button bindtap&#x3D;&quot;delDataByProperty&quot; type&#x3D;&quot;primary&quot;&gt;通过属性删除&lt;&#x2F;button&gt;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>在<code>index.js</code>中加入如下代码</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">const DB &#x3D; wx.cloud.database().collection(&quot;list&quot;)</span><br><span class=\"line\">let nameDelete &#x3D; &#39;&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">Page(&#123;</span><br><span class=\"line\">  delDataInputName(event)&#123;</span><br><span class=\"line\">    &#x2F;&#x2F;console.log(event.detail.value)</span><br><span class=\"line\">    nameDelete &#x3D; event.detail.value</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  </span><br><span class=\"line\">  delDataByProperty() &#123;</span><br><span class=\"line\">    console.log(&#39;调用属性删除数据的方法&#39;)</span><br><span class=\"line\">    DB.where(&#123;</span><br><span class=\"line\">      name: nameDelete</span><br><span class=\"line\">    &#125;).remove(&#123;</span><br><span class=\"line\">      success(res) &#123;</span><br><span class=\"line\">        console.log(&#39;删除数据成功&#39;, res.data)</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      fail(res) &#123;</span><br><span class=\"line\">        console.log(&quot;删除数据失败&quot;, res)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>测试：输入想删除数据的name的值后（注意不要带有引号””），点击确定删除按键，发现控制台上有相应输出，再进入到云开发的数据库页面，发现输入的想删除数据的name的值对应的该条数据已删除<br><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200817154708242.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1BhbmRhMzI1,size_16,color_FFFFFF,t_70#pic_center\" alt=\"删除前\"><br><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200817154729966.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1BhbmRhMzI1,size_16,color_FFFFFF,t_70#pic_center\" alt=\"删除后\"><br>另：<br>如果<code>name</code>为<code>abcd</code>的有多个数据，则全部name为abcd的数据都会被删除，如下图：<br><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200817155152692.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1BhbmRhMzI1,size_16,color_FFFFFF,t_70#pic_center\" alt=\"全部name为abcd的数据都会被删除\"></p>\n<h2 id=\"修改更新数据\"><a href=\"#修改更新数据\" class=\"headerlink\" title=\"修改更新数据\"></a>修改更新数据</h2><p>更新有两个，updata和set，分别为：<br>update：局部更新一个或多个记录<br>set：替换更新一个记录<br>此处演示update</p>\n<p>效果：用户通过输入数据ID以及修改后的name的值并点击修改更新数据按键，即可修改更新数据云数据库中用户想修改更新数据的数据</p>\n<p>实现：</p>\n<ol>\n<li>在<code>index.wxml</code>中加入如下代码</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;input placeholder&#x3D;&quot;输入要更新的数据的ID&quot; bindinput&#x3D;&quot;updateID&quot;&gt;&lt;&#x2F;input&gt;</span><br><span class=\"line\">&lt;input placeholder&#x3D;&quot;输入更新后的name的值&quot; bindinput&#x3D;&quot;updateValue&quot;&gt;&lt;&#x2F;input&gt;</span><br><span class=\"line\">&lt;button bindtap&#x3D;&quot;updateData&quot; type&#x3D;&quot;primary&quot;&gt;修改更新数据&lt;&#x2F;button&gt;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>在<code>index.js</code>中加入如下代码</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">const DB &#x3D; wx.cloud.database().collection(&quot;list&quot;)</span><br><span class=\"line\">let updateID &#x3D; &#39;&#39;</span><br><span class=\"line\">let updateValue &#x3D; &#39;&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">Page(&#123;</span><br><span class=\"line\">  updateID(event) &#123;</span><br><span class=\"line\">    console.log(event.detail.value)</span><br><span class=\"line\">    updateID &#x3D; event.detail.value</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  updateValue(event) &#123;</span><br><span class=\"line\">    console.log(event.detail.value)</span><br><span class=\"line\">    updateValue &#x3D; event.detail.value</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  </span><br><span class=\"line\">  updateData() &#123;</span><br><span class=\"line\">    console.log(&#39;调用修改更新数据的方法&#39;)</span><br><span class=\"line\">    DB.doc(updateID).update(&#123;</span><br><span class=\"line\">      data: &#123;</span><br><span class=\"line\">        name: updateValue</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      success(res) &#123;</span><br><span class=\"line\">        console.log(&#39;修改更新数据成功&#39;, res.data)</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      fail(res) &#123;</span><br><span class=\"line\">        console.log(&quot;修改更新数据失败&quot;, res)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>测试：输入数据ID以及修改后的name的值并点击修改更新数据按键，发现控制台上有相应输出，再进入到云开发的数据库页面，数据已修改更新<br><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200817164257555.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1BhbmRhMzI1,size_16,color_FFFFFF,t_70#pic_center\" alt=\"修改更新数据前\"><br><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200817164315864.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1BhbmRhMzI1,size_16,color_FFFFFF,t_70#pic_center\" alt=\"修改更新数据后\"></p>\n<h1 id=\"小程序云开发数据库的增删改查已经全部完成！\"><a href=\"#小程序云开发数据库的增删改查已经全部完成！\" class=\"headerlink\" title=\"小程序云开发数据库的增删改查已经全部完成！\"></a>小程序云开发数据库的增删改查已经全部完成！</h1>","categories":["微信小程序"],"tags":["入门","微信小程序云开发"]},{"title":"微信小程序云开发学习笔记（三）云存储","url":"/2020/08/17/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%BA%91%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89%E4%BA%91%E5%AD%98%E5%82%A8/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\css\\APlayer.min.css\"><script src=\"\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\js\\Meting.min.js\"></script><h1 id=\"一、小程序云存储简介\"><a href=\"#一、小程序云存储简介\" class=\"headerlink\" title=\"一、小程序云存储简介\"></a>一、小程序云存储简介</h1><p>云开发提供了一块存储空间，提供了上传文件到云端、带权限管理的云端下载能力，开发者可以在小程序端和云函数端通过 API 使用云存储功能。</p>\n<p>在小程序端可以分别调用 <code>wx.cloud.uploadFile</code> 和 <code>wx.cloud.downloadFile</code> 完成上传和下载云文件操作</p>\n<h1 id=\"二、选择并上传图片\"><a href=\"#二、选择并上传图片\" class=\"headerlink\" title=\"二、选择并上传图片\"></a>二、选择并上传图片</h1><h2 id=\"使用的API：\"><a href=\"#使用的API：\" class=\"headerlink\" title=\"使用的API：\"></a>使用的API：</h2><ol>\n<li><p><a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/media/image/wx.chooseImage.html\" target=\"_blank\" rel=\"noopener\">wx.chooseImage</a></p>\n</li>\n<li><p><a href=\"https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/storage/uploadFile/client.uploadFile.html\" target=\"_blank\" rel=\"noopener\">wx.cloud.uploadFile</a></p>\n</li>\n</ol>\n<h2 id=\"实现步骤\"><a href=\"#实现步骤\" class=\"headerlink\" title=\"实现步骤\"></a>实现步骤</h2><h3 id=\"1-初始化云环境\"><a href=\"#1-初始化云环境\" class=\"headerlink\" title=\"1. 初始化云环境\"></a>1. 初始化云环境</h3><p>在app.js中指定云开发环境，其中<code>env</code>是你自己指定的环境ID</p>\n<p><code>app.js</code>中的代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">App(&#123;</span><br><span class=\"line\">  onLaunch: function () &#123;</span><br><span class=\"line\">    wx.cloud.init(&#123;</span><br><span class=\"line\">      env: &quot;cloud-learning-i44qm&quot;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-新建一个pageuploadImg用于测试\"><a href=\"#2-新建一个pageuploadImg用于测试\" class=\"headerlink\" title=\"2. 新建一个pageuploadImg用于测试\"></a>2. 新建一个page<code>uploadImg</code>用于测试</h3><h3 id=\"3-uploadImg-wxml中，\"><a href=\"#3-uploadImg-wxml中，\" class=\"headerlink\" title=\"3. uploadImg.wxml中，\"></a>3. <code>uploadImg.wxml</code>中，</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;button bindtap&#x3D;&quot;handleTap&quot;&gt;上传&lt;&#x2F;button&gt;</span><br><span class=\"line\">&lt;image src&#x3D;&quot;&#123;&#123;URL&#125;&#125;&quot;&gt;&lt;&#x2F;image&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-uploadImg-js中（版本一）\"><a href=\"#4-uploadImg-js中（版本一）\" class=\"headerlink\" title=\"4. uploadImg.js中（版本一）\"></a>4. <code>uploadImg.js</code>中（版本一）</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Page(&#123;</span><br><span class=\"line\">  data:&#123;</span><br><span class=\"line\">    URL:&#39;&#39;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  handleTap() &#123;</span><br><span class=\"line\">    let that &#x3D; this</span><br><span class=\"line\">    console.log(&quot;点击了上传按钮&quot;)</span><br><span class=\"line\">    wx.chooseImage(&#123;</span><br><span class=\"line\">      count: 1,</span><br><span class=\"line\">      sizeType: [&#39;original&#39;, &#39;compressed&#39;],</span><br><span class=\"line\">      sourceType: [&#39;album&#39;, &#39;camera&#39;],</span><br><span class=\"line\">      success(res) &#123;</span><br><span class=\"line\">        console.log(&quot;选择成功&quot;, res)</span><br><span class=\"line\">        that.upload(res.tempFilePaths[0])</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  upload(imgUrl) &#123;</span><br><span class=\"line\">    wx.cloud.uploadFile(&#123;</span><br><span class=\"line\">      cloudPath: new Date().getTime() +&#39;.png&#39;,    &#x2F;&#x2F;防止文件名重复，使用时间戳</span><br><span class=\"line\">      filePath: imgUrl, &#x2F;&#x2F; 文件路径</span><br><span class=\"line\">      success: res &#x3D;&gt; &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; get resource ID</span><br><span class=\"line\">        console.log(&quot;上传成功&quot;,res)</span><br><span class=\"line\">        this.setData(&#123;</span><br><span class=\"line\">          URL: res.fileID</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      fail: err &#x3D;&gt; &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; handle error</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-uploadImg-js中（版本二）\"><a href=\"#5-uploadImg-js中（版本二）\" class=\"headerlink\" title=\"5. uploadImg.js中（版本二）\"></a>5. <code>uploadImg.js</code>中（版本二）</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Page(&#123;</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    imgURL:&#39;&#39;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  selectAndUpload() &#123;</span><br><span class=\"line\">    let that &#x3D; this</span><br><span class=\"line\">    wx.chooseImage(&#123;</span><br><span class=\"line\">      count: 1,</span><br><span class=\"line\">      sizeType: [&#39;original&#39;, &#39;compressed&#39;],</span><br><span class=\"line\">      sourceType: [&#39;album&#39;, &#39;camera&#39;],</span><br><span class=\"line\">      success: res &#x3D;&gt; &#123;</span><br><span class=\"line\">        console.log(&#39;choose successfully&#39;,res)</span><br><span class=\"line\">        wx.cloud.uploadFile(&#123;</span><br><span class=\"line\">          cloudPath: new Date().getTime() + &#39;.png&#39;,</span><br><span class=\"line\">          filePath: res.tempFilePaths[0], &#x2F;&#x2F; 文件路径</span><br><span class=\"line\">          success: function (res) &#123;</span><br><span class=\"line\">            console.log(&#39;upload successfully&#39;, res)</span><br><span class=\"line\">            that.setData(&#123;</span><br><span class=\"line\">              imgURL: res.fileID</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          fail(res) &#123;</span><br><span class=\"line\">            console.log(&#39;upload failed&#39;, res)</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      fail(res) &#123;</span><br><span class=\"line\">        console.log(&#39;choose failed&#39;, res)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"6-查看控制台和模拟器，我们发现如下输出：\"><a href=\"#6-查看控制台和模拟器，我们发现如下输出：\" class=\"headerlink\" title=\"6. 查看控制台和模拟器，我们发现如下输出：\"></a>6. 查看控制台和模拟器，我们发现如下输出：</h3><p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200819222757284.png#pic_center\" alt=\"在这里插入图片描述\"><br><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/2020081923020121.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1BhbmRhMzI1,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h1 id=\"三、选择并上传视频\"><a href=\"#三、选择并上传视频\" class=\"headerlink\" title=\"三、选择并上传视频\"></a>三、选择并上传视频</h1><h2 id=\"使用的API：-1\"><a href=\"#使用的API：-1\" class=\"headerlink\" title=\"使用的API：\"></a>使用的API：</h2><ol>\n<li><p><a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/media/video/wx.chooseVideo.html\" target=\"_blank\" rel=\"noopener\">wx.chooseVideo</a></p>\n</li>\n<li><p><a href=\"https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/storage/uploadFile/client.uploadFile.html\" target=\"_blank\" rel=\"noopener\">wx.cloud.uploadFile</a></p>\n</li>\n</ol>\n<h2 id=\"实现步骤-1\"><a href=\"#实现步骤-1\" class=\"headerlink\" title=\"实现步骤\"></a>实现步骤</h2><p>同上，把图片API相关代码换为如下即可</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">wx.chooseVideo(&#123;</span><br><span class=\"line\">  sourceType: [&#39;album&#39;,&#39;camera&#39;],</span><br><span class=\"line\">  maxDuration: 600,</span><br><span class=\"line\">  camera: &#39;back&#39;,</span><br><span class=\"line\">  success(res) &#123;</span><br><span class=\"line\">    console.log(res.tempFilePath)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"四、选择并上传多媒体文件（图片-视频）\"><a href=\"#四、选择并上传多媒体文件（图片-视频）\" class=\"headerlink\" title=\"四、选择并上传多媒体文件（图片+视频）\"></a>四、选择并上传多媒体文件（图片+视频）</h1><h2 id=\"使用的API：-2\"><a href=\"#使用的API：-2\" class=\"headerlink\" title=\"使用的API：\"></a>使用的API：</h2><ol>\n<li><p><a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/media/video/wx.chooseMedia.html\" target=\"_blank\" rel=\"noopener\">wx.chooseMedia</a></p>\n</li>\n<li><p><a href=\"https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/storage/uploadFile/client.uploadFile.html\" target=\"_blank\" rel=\"noopener\">wx.cloud.uploadFile</a></p>\n</li>\n</ol>\n<h2 id=\"实现步骤-2\"><a href=\"#实现步骤-2\" class=\"headerlink\" title=\"实现步骤\"></a>实现步骤</h2><p>同上，把图片API相关代码换为如下即可</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">wx.chooseMedia(&#123;</span><br><span class=\"line\">  count: 9,</span><br><span class=\"line\">  mediaType: [&#39;image&#39;,&#39;video&#39;],</span><br><span class=\"line\">  sourceType: [&#39;album&#39;, &#39;camera&#39;],</span><br><span class=\"line\">  maxDuration: 300,</span><br><span class=\"line\">  camera: &#39;back&#39;,</span><br><span class=\"line\">  success(res) &#123;</span><br><span class=\"line\">    console.log(res.tempFiles.tempFilePath)</span><br><span class=\"line\">    console.log(res.tempFiles.size)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"五、实现类似朋友圈效果\"><a href=\"#五、实现类似朋友圈效果\" class=\"headerlink\" title=\"五、实现类似朋友圈效果\"></a>五、实现类似朋友圈效果</h1><h2 id=\"效果\"><a href=\"#效果\" class=\"headerlink\" title=\"效果\"></a>效果</h2><p>编辑并share页面如下：<br><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200820100623691.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1BhbmRhMzI1,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>点击分享以后，跳转到以前share过的朋友圈页面，点击左上角可以返回，如下：<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200820101912679.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1BhbmRhMzI1,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h2><p>本demo会用到微信小程序的云开发功能，包括云数据库，云存储</p>\n<h2 id=\"实现步骤-3\"><a href=\"#实现步骤-3\" class=\"headerlink\" title=\"实现步骤\"></a>实现步骤</h2><h3 id=\"1-云开发环境的初始化\"><a href=\"#1-云开发环境的初始化\" class=\"headerlink\" title=\"1. 云开发环境的初始化\"></a>1. 云开发环境的初始化</h3><p>详见：<a href=\"https://blog.csdn.net/Panda325/article/details/108117775\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/Panda325/article/details/108117775</a></p>\n<h3 id=\"2-新建page\"><a href=\"#2-新建page\" class=\"headerlink\" title=\"2. 新建page\"></a>2. 新建page</h3><p>新建两个page<code>share</code>和<code>pyq</code>，<code>share</code>用于编辑文案并选择配图，<code>pyq</code>用于查看以前发过的朋友圈<br><code>app.json</code>的<code>pages</code>字段如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&quot;pages&quot;: [</span><br><span class=\"line\">    &quot;pages&#x2F;share&#x2F;share&quot;,</span><br><span class=\"line\">    &quot;pages&#x2F;pyq&#x2F;pyq&quot;</span><br><span class=\"line\">  ],</span><br></pre></td></tr></table></figure>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200820102112926.png#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"3-share页面\"><a href=\"#3-share页面\" class=\"headerlink\" title=\"3. share页面\"></a>3. <code>share</code>页面</h3><p> <code>share</code>页面从上到下依次是：多行输入框 <code>textarea</code>，选择图片的按钮 <code>button</code>，分享按钮 <code>button</code><br> <code>share.wxml</code>如下：<br> <figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"> &lt;textarea placeholder&#x3D;&quot;输入您的文案&quot; bindblur&#x3D;&quot;bindTextAreaBlur&quot;</span><br><span class=\"line\">    value&#x3D;&quot;&#123;&#123;details&#125;&#125;&quot; class&#x3D;&#39;text&#39;&gt; &lt;&#x2F;textarea&gt;</span><br><span class=\"line\">&lt;input&gt;\\n\\n&lt;&#x2F;input&gt;</span><br><span class=\"line\">&lt;button bindtap&#x3D;&quot;seleteAndUploadPicture&quot;&gt;</span><br><span class=\"line\">&lt;image src&#x3D;&#39;https:&#x2F;&#x2F;ss0.bdstatic.com&#x2F;70cFvHSh_Q1YnxGkpoWK1HF6hhy&#x2F;it&#x2F;u&#x3D;2444066247,3899866315&amp;fm&#x3D;26&amp;gp&#x3D;0.jpg&#39;&gt;&lt;&#x2F;image&gt;</span><br><span class=\"line\">&lt;&#x2F;button&gt;</span><br><span class=\"line\">&lt;input&gt;\\n\\n&lt;&#x2F;input&gt;</span><br><span class=\"line\">&lt;button bindtap&#x3D;&quot;share&quot;&gt;分享&lt;&#x2F;button&gt;</span><br></pre></td></tr></table></figure><br>  <code>share.js</code>如下：<br> <figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">const DB &#x3D; wx.cloud.database().collection(&quot;pyq&quot;)</span><br><span class=\"line\">Page(&#123;</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    details: &#39;&#39;,</span><br><span class=\"line\">    imgURL: &#39;&#39;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  bindTextAreaBlur: function (e) &#123;</span><br><span class=\"line\">    console.log(e.detail.value);</span><br><span class=\"line\">    var that &#x3D; this;</span><br><span class=\"line\">    that.setData(&#123;</span><br><span class=\"line\">      details: e.detail.value</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  seleteAndUploadPicture() &#123;</span><br><span class=\"line\">    let that &#x3D; this</span><br><span class=\"line\">    wx.chooseImage(&#123;</span><br><span class=\"line\">      count: 1,</span><br><span class=\"line\">      sizeType: [&#39;original&#39;, &#39;compressed&#39;],</span><br><span class=\"line\">      sourceType: [&#39;album&#39;, &#39;camera&#39;],</span><br><span class=\"line\">      success: res &#x3D;&gt; &#123;</span><br><span class=\"line\">        console.log(&#39;choose successfully&#39;, res)</span><br><span class=\"line\">        that.setData(&#123;</span><br><span class=\"line\">          imgURL: res.tempFilePaths[0]</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      fail(res) &#123;</span><br><span class=\"line\">        console.log(&#39;choose failed&#39;, res)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  share() &#123;</span><br><span class=\"line\">    console.log(&#39;调用share的方法&#39;)</span><br><span class=\"line\">    let that &#x3D; this</span><br><span class=\"line\">    wx.cloud.uploadFile(&#123;</span><br><span class=\"line\">      cloudPath: new Date().getTime() + &#39;.png&#39;,</span><br><span class=\"line\">      filePath: this.data.imgURL, &#x2F;&#x2F; 文件路径</span><br><span class=\"line\">      success: function (res) &#123;</span><br><span class=\"line\">        console.log(&#39;upload successfully&#39;, res)</span><br><span class=\"line\">        that.setData(&#123;</span><br><span class=\"line\">          imgURL: res.fileID</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      fail(res) &#123;</span><br><span class=\"line\">        console.log(&#39;upload failed&#39;, res)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    DB.add(&#123;</span><br><span class=\"line\">      data: &#123;</span><br><span class=\"line\">        descption: this.data.details,</span><br><span class=\"line\">        imgURL: this.data.imgURL</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      success(res) &#123;</span><br><span class=\"line\">        console.log(&quot;share成功&quot;, res)</span><br><span class=\"line\">        wx.navigateTo(&#123;</span><br><span class=\"line\">          url: &quot;..&#x2F;..&#x2F;pages&#x2F;pyq&#x2F;pyq&quot;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        wx.showToast(&#123;</span><br><span class=\"line\">          title: &#39;成功&#39;,</span><br><span class=\"line\">          icon: &#39;success&#39;,</span><br><span class=\"line\">          duration: 2000</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      fail(res) &#123;</span><br><span class=\"line\">        console.log(&quot;share失败&quot;, res)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure><br>  <code>share.wxss</code>如下：<br> <figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">.text&#123;</span><br><span class=\"line\">  &#x2F;* height: 100rpx;</span><br><span class=\"line\">  line-height: 100rpx; *&#x2F;</span><br><span class=\"line\">  width: 100%;</span><br><span class=\"line\">  font-size: 60rpx;</span><br><span class=\"line\">  background-color: #bfa;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"4-pyq页面\"><a href=\"#4-pyq页面\" class=\"headerlink\" title=\"4. pyq页面\"></a>4. <code>pyq</code>页面</h3><p> <code>pyq.wxml</code>如下：<br> <figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;view wx:for&#x3D;&quot;&#123;&#123;array&#125;&#125;&quot;&gt;</span><br><span class=\"line\">&lt;view&gt;&#123;&#123;index&#125;&#125; : &#123;&#123;item.descption&#125;&#125;&lt;&#x2F;view&gt;</span><br><span class=\"line\">&lt;image src&#x3D;&quot;&#123;&#123;item.imgURL&#125;&#125;&quot;&gt;&lt;&#x2F;image&gt;</span><br><span class=\"line\">&lt;view&gt;\\n&lt;&#x2F;view&gt;</span><br><span class=\"line\">&lt;&#x2F;view&gt;</span><br></pre></td></tr></table></figure><br>  <code>pyq.js</code>如下：<br> <figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">const DB &#x3D; wx.cloud.database().collection(&quot;pyq&quot;)</span><br><span class=\"line\">Page(&#123;</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    array: []</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  onLoad() &#123;</span><br><span class=\"line\">    let that &#x3D; this</span><br><span class=\"line\">    DB.get(&#123;</span><br><span class=\"line\">      success(res) &#123;</span><br><span class=\"line\">        that.setData(&#123;</span><br><span class=\"line\">          array: res.data</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        for (let i &#x3D; 0; i &lt; res.data.length; i++) &#123;</span><br><span class=\"line\">          console.log(res.data[i].descption)</span><br><span class=\"line\">          console.log(res.data[i].imgURL)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure><br> <figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n","categories":["微信小程序"],"tags":["入门","微信小程序云开发"]},{"title":"微信小程序黑马优购（一）","url":"/2020/06/25/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E9%BB%91%E9%A9%AC%E4%BC%98%E8%B4%AD%EF%BC%88%E4%B8%80%EF%BC%89/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\css\\APlayer.min.css\"><script src=\"\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\js\\Meting.min.js\"></script><p>本篇博客将实时更新我学习使用微信小程序搭建范例黑马优购的过程。</p>\n<p>教程地址：<a href=\"https://www.bilibili.com/video/BV1nE41117BQ?p=47\" target=\"_blank\" rel=\"noopener\">https://www.bilibili.com/video/BV1nE41117BQ?p=47</a></p>\n<p>参考文档：<a href=\"https://www.showdoc.cc/128719739414963\" target=\"_blank\" rel=\"noopener\">https://www.showdoc.cc/128719739414963</a></p>\n<h2 id=\"一、-新建小程序项目\"><a href=\"#一、-新建小程序项目\" class=\"headerlink\" title=\"一、 新建小程序项目\"></a>一、 新建小程序项目</h2><p>打开微信开发者工具，新建小程序项目，然后执行如下操作：</p>\n<ol>\n<li><p>app.json中删除”pages/logs/logs”</p>\n</li>\n<li><p>app.json中的window字段改动如下：<code>&quot;navigationBarTitleText&quot;: &quot;黑马优购&quot;</code></p>\n</li>\n<li><p>pages中logs’文件夹删除</p>\n</li>\n<li><p>app.wxss中删除全部内容</p>\n</li>\n<li><p>app.js中删除全部代码，并在vscode中输入wx-app，即可自动补全所需必要代码，再删除globleData</p>\n</li>\n<li><p>pages中index.wxml, index.wxss删除全部语句, index.js中保留必要语句，同上在vscode中输入wx-page</p>\n</li>\n<li><p>pages/index/index.json中，新增如下：<code>&quot;navigationBarTitleText&quot;: &quot;优购首页&quot;</code></p>\n</li>\n<li><p>unils文件夹删除</p>\n<p>至此，目录结构已无冗余，接下来我们新增项目必要的文件夹和文件</p>\n</li>\n</ol>\n<p>##　二、 搭建目录结构</p>\n<p>把目录结构改为如下图所示：</p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://i.loli.net/2020/06/28/49GKD6VP7lmRfEo.png\" alt=\"image-20200625205252095\"></p>\n<p>各个目录的作用如下：</p>\n<ol>\n<li>style： 存放公共样式</li>\n<li>components： 存放组件</li>\n<li>lib： 存放第三方库</li>\n<li>untils： 自己的帮助库</li>\n<li>request： 自己的借口帮助库</li>\n</ol>\n<h2 id=\"三、-搭建项目的页面\"><a href=\"#三、-搭建项目的页面\" class=\"headerlink\" title=\"三、 搭建项目的页面\"></a>三、 搭建项目的页面</h2><p><img src= \"/img/loading.gif\" data-lazy-src=\"https://i.loli.net/2020/06/28/SZEYAydNDWfLqnK.png\" alt=\"image-20200625210001721\"></p>\n<p>在app.json中，修改pages字段，如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&quot;pages&quot;: [ &quot;pages&#x2F;index&#x2F;index&quot;,</span><br><span class=\"line\"></span><br><span class=\"line\"> &quot;pages&#x2F;category&#x2F;index&quot;,</span><br><span class=\"line\"></span><br><span class=\"line\"> &quot;pages&#x2F;goods_list&#x2F;index &quot;,</span><br><span class=\"line\"></span><br><span class=\"line\"> &quot;pages&#x2F;goods_detail&#x2F;index &quot;,</span><br><span class=\"line\"></span><br><span class=\"line\"> &quot;pages&#x2F;cart&#x2F;index&quot;,</span><br><span class=\"line\"></span><br><span class=\"line\"> &quot;pages&#x2F;collect&#x2F;index&quot;,</span><br><span class=\"line\"></span><br><span class=\"line\"> &quot;pages&#x2F;order&#x2F;index&quot;,</span><br><span class=\"line\"></span><br><span class=\"line\"> &quot;pages&#x2F;search&#x2F;index&quot;,</span><br><span class=\"line\"></span><br><span class=\"line\"> &quot;pages&#x2F;user&#x2F;index&quot;,</span><br><span class=\"line\"></span><br><span class=\"line\"> &quot;pages&#x2F;feedback&#x2F;index&quot;,</span><br><span class=\"line\"></span><br><span class=\"line\"> &quot;pages&#x2F;login&#x2F;index&quot;,</span><br><span class=\"line\"></span><br><span class=\"line\"> &quot;pages&#x2F;auth&#x2F;index&quot;,</span><br><span class=\"line\"></span><br><span class=\"line\"> &quot;pages&#x2F;pay&#x2F;index&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"> ],</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"四、-引入字体图标\"><a href=\"#四、-引入字体图标\" class=\"headerlink\" title=\"四、 引入字体图标\"></a>四、 引入字体图标</h2><ol>\n<li><p>打开阿里巴巴字体图标库，地址<a href=\"https://www.iconfont.cn/，选择图标后加入购物车。![image-20200625212648119](https://i.loli.net/2020/06/28/WEayt6IYfjlrzQD.png)\" target=\"_blank\" rel=\"noopener\">https://www.iconfont.cn/，选择图标后加入购物车。![image-20200625212648119](https://i.loli.net/2020/06/28/WEayt6IYfjlrzQD.png)</a></p>\n</li>\n<li><p>复制下图中链接在浏览器中打开，页面打开后复制页面内所有的内容。</p>\n</li>\n<li><p>在style中新建iconfont.wxss,粘贴刚才复制的全部内容。</p>\n</li>\n<li><p>在app.wxss中导入字体图标，app.wxss加入如下代码<code>@import &quot;./styles/iconfont.wxss&quot;;</code></p>\n</li>\n<li><p>用法测试：在pages/index/index.wxml中输入如下代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;view&gt;首页\t</span><br><span class=\"line\">\t&lt;text class&#x3D;&quot;iconfont incon-shoucang1&quot;&gt;&lt;&#x2F;text&gt;</span><br><span class=\"line\">&lt;&#x2F;view&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">## 五、 搭建项目tabber结构</span><br><span class=\"line\"></span><br><span class=\"line\">1. 在app.json的window字段同层级下新增如下代码：</span><br><span class=\"line\"></span><br><span class=\"line\">   &#96;&#96;&#96; </span><br><span class=\"line\">   &quot;tabBar&quot;: &#123;</span><br><span class=\"line\">       &quot;color&quot;: &quot;#999&quot;,</span><br><span class=\"line\">       &quot;selectedColor&quot;: &quot;#ff2d4a&quot;,</span><br><span class=\"line\">       &quot;backgroundColor&quot;: &quot;#fafafa&quot;,</span><br><span class=\"line\">       &quot;position&quot;: &quot;bottom&quot;,</span><br><span class=\"line\">       &quot;borderStyle&quot;: &quot;black&quot;,</span><br><span class=\"line\">       &quot;list&quot;: [</span><br><span class=\"line\">         &#123;</span><br><span class=\"line\">           &quot;pagePath&quot;: &quot;pages&#x2F;index&#x2F;index&quot;,</span><br><span class=\"line\">           &quot;text&quot;: &quot;首页&quot;,</span><br><span class=\"line\">           &quot;iconPath&quot;: &quot;icons&#x2F;home.png&quot;,</span><br><span class=\"line\">           &quot;selectedIconPath&quot;: &quot;icons&#x2F;home1.png&quot;</span><br><span class=\"line\">         &#125;,</span><br><span class=\"line\">         &#123;</span><br><span class=\"line\">           &quot;pagePath&quot;: &quot;pages&#x2F;category&#x2F;index&quot;,</span><br><span class=\"line\">           &quot;text&quot;: &quot;分类&quot;,</span><br><span class=\"line\">           &quot;iconPath&quot;: &quot;icons&#x2F;cart.png&quot;,</span><br><span class=\"line\">           &quot;selectedIconPath&quot;: &quot;icons&#x2F;cart1.png&quot;</span><br><span class=\"line\">         &#125;,</span><br><span class=\"line\">         &#123;</span><br><span class=\"line\">           &quot;pagePath&quot;: &quot;pages&#x2F;cart&#x2F;index&quot;,</span><br><span class=\"line\">           &quot;text&quot;: &quot;购物车&quot;,</span><br><span class=\"line\">           &quot;iconPath&quot;: &quot;icons&#x2F;category.png&quot;,</span><br><span class=\"line\">           &quot;selectedIconPath&quot;: &quot;icons&#x2F;category1.png&quot;</span><br><span class=\"line\">         &#125;,</span><br><span class=\"line\">         &#123;</span><br><span class=\"line\">           &quot;pagePath&quot;: &quot;pages&#x2F;user&#x2F;index&quot;,</span><br><span class=\"line\">           &quot;text&quot;: &quot;我的&quot;,</span><br><span class=\"line\">           &quot;iconPath&quot;: &quot;icons&#x2F;me.png&quot;,</span><br><span class=\"line\">           &quot;selectedIconPath&quot;: &quot;icons&#x2F;me1.png&quot;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">       ]</span><br><span class=\"line\">     &#125;,</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>各字段说明详见开发者文档。</p>\n</li>\n</ol>\n<h2 id=\"六、初始化页面样式\"><a href=\"#六、初始化页面样式\" class=\"headerlink\" title=\"六、初始化页面样式\"></a>六、初始化页面样式</h2><ol>\n<li><p>在app.wxss中加入如下代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">page,view,text,swiper,swiper-item,image,navigator&#123;</span><br><span class=\"line\">  padding: 0;</span><br><span class=\"line\">  margin: 0;</span><br><span class=\"line\">  box-sizing: border-box;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;* </span><br><span class=\"line\">  主题颜色 </span><br><span class=\"line\">  支持变量</span><br><span class=\"line\">*&#x2F;</span><br><span class=\"line\">page&#123;</span><br><span class=\"line\">  --themeColor:#eb4450;</span><br><span class=\"line\">  font-size: 28rpx;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用主题颜色</p>\n<p>在index.wxss中加入如下代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;* pages&#x2F;index&#x2F;index.wxss *&#x2F;</span><br><span class=\"line\">view&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;* 使用主题颜色 *&#x2F;</span><br><span class=\"line\"></span><br><span class=\"line\">  color:var(--themeColor);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n","categories":["微信小程序"],"tags":["入门","黑马优购"]},{"title":"微信小程序云开发学习笔记（二）云函数","url":"/2020/08/17/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%BA%91%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89%E4%BA%91%E5%87%BD%E6%95%B0/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\css\\APlayer.min.css\"><script src=\"\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\js\\Meting.min.js\"></script><h1 id=\"一、创建一个云开发的小程序\"><a href=\"#一、创建一个云开发的小程序\" class=\"headerlink\" title=\"一、创建一个云开发的小程序\"></a>一、创建一个云开发的小程序</h1><h2 id=\"1-如下图所示创建小程序\"><a href=\"#1-如下图所示创建小程序\" class=\"headerlink\" title=\"1. 如下图所示创建小程序\"></a>1. 如下图所示创建小程序</h2><p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200818084851626.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1BhbmRhMzI1,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"2-删除无关文件\"><a href=\"#2-删除无关文件\" class=\"headerlink\" title=\"2. 删除无关文件\"></a>2. 删除无关文件</h2><p>删除前：<br><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/2020081808502252.png#pic_center\" alt=\"在这里插入图片描述\"><br>删除后：<br><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200818085156316.png#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"3-删除无关代码\"><a href=\"#3-删除无关代码\" class=\"headerlink\" title=\"3. 删除无关代码\"></a>3. 删除无关代码</h2><p><code>index.wxml</code> <code>index.wxss</code> 内的代码全部清空，<code>index.js</code>保留如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Page(&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200818085442731.png#pic_center\" alt=\"在这里插入图片描述\"><br><code>app.json</code>删除无关代码，如下：<br><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200818085748146.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1BhbmRhMzI1,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"4-配置云函数存储目录\"><a href=\"#4-配置云函数存储目录\" class=\"headerlink\" title=\"4. 配置云函数存储目录\"></a>4. 配置云函数存储目录</h2><p>在<code>project.config.json</code>中新增如下代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&quot;cloudfunctionRoot&quot;:&quot;cloud&quot;,</span><br></pre></td></tr></table></figure>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200818085851769.png#pic_center\" alt=\"在这里插入图片描述\"><br>在根目录下创建同名文件夹，发现其有云朵标识<br><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200818085949202.png#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"5-云开发环境初始化\"><a href=\"#5-云开发环境初始化\" class=\"headerlink\" title=\"5. 云开发环境初始化\"></a>5. 云开发环境初始化</h2><p>点击云开发—&gt;设置，复制你的环境ID<br><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200818090314311.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1BhbmRhMzI1,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>在<code>app.js</code>中，删除所有代码，并新增如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">App(&#123;</span><br><span class=\"line\">  onLaunch: function () &#123;</span><br><span class=\"line\">    wx.cloud.init(&#123;</span><br><span class=\"line\">      env:&quot;cloud-learning-i44qm&quot;&#x2F;&#x2F;你的环境ID</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200818092006170.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1BhbmRhMzI1,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"6-创建并上传一个云函数\"><a href=\"#6-创建并上传一个云函数\" class=\"headerlink\" title=\"6. 创建并上传一个云函数\"></a>6. 创建并上传一个云函数</h2><p>我们以最简单的求和函数为例<br><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200818092045766.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1BhbmRhMzI1,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>输入<code>add</code>并回车<br><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200818092133669.png#pic_center\" alt=\"在这里插入图片描述\"><br>在上图的<code>index.js</code>中改变代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 云函数入口文件</span><br><span class=\"line\">const cloud &#x3D; require(&#39;wx-server-sdk&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\">cloud.init()</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 云函数入口函数</span><br><span class=\"line\">exports.main &#x3D; async (event, context) &#x3D;&gt; &#123;</span><br><span class=\"line\">  let a &#x3D; event.a;</span><br><span class=\"line\">  let b &#x3D; event.b;</span><br><span class=\"line\">  return a+b;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>写完代码后，记得 Ctrl+s 保存，然后点击如下图所示：<br><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200818092500381.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1BhbmRhMzI1,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>出现下图，则上传成功<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200818092523660.png#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"7-使用云函数\"><a href=\"#7-使用云函数\" class=\"headerlink\" title=\"7. 使用云函数\"></a>7. 使用云函数</h2><p>以下皆在page下的index页面操作<br><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200818093124592.png#pic_center\" alt=\"在这里插入图片描述\"><br><code>index.wxml</code>中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;button bindtap&#x3D;&quot;getSum&quot;&gt;云函数的求和运算&lt;&#x2F;button&gt;</span><br></pre></td></tr></table></figure>\n<p><code>index.js</code>中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Page(&#123;</span><br><span class=\"line\">  getSum() &#123;</span><br><span class=\"line\">    wx.cloud.callFunction(&#123;</span><br><span class=\"line\">      name:&quot;add&quot;,</span><br><span class=\"line\">      data:&#123;</span><br><span class=\"line\">        a:5,</span><br><span class=\"line\">        b:6</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      success(res)&#123;</span><br><span class=\"line\">        console.log(&quot;请求成功！&quot;, res)</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      fail(res)&#123;</span><br><span class=\"line\">        console.log(&quot;请求失败！&quot;,res)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<ol start=\"8\">\n<li>测试云函数调用是否成功<br><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200818093350787.png#pic_center\" alt=\"在这里插入图片描述\"><h2 id=\"8-进阶测试\"><a href=\"#8-进阶测试\" class=\"headerlink\" title=\"8. 进阶测试\"></a>8. 进阶测试</h2><code>index.wxml</code>中<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;input bindinput&#x3D;&quot;handleInput1&quot; placeholder&#x3D;&quot;数字1&quot;&gt;&lt;&#x2F;input&gt;</span><br><span class=\"line\">&lt;input bindinput&#x3D;&quot;handleInput2&quot; placeholder&#x3D;&quot;数字2&quot;&gt;&lt;&#x2F;input&gt;</span><br><span class=\"line\">&lt;button bindtap&#x3D;&quot;getSum&quot;&gt;云函数的求和运算&lt;&#x2F;button&gt;</span><br></pre></td></tr></table></figure>\n<code>index.js</code>中<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">let a &#x3D; 0</span><br><span class=\"line\">let b &#x3D; 0</span><br><span class=\"line\"></span><br><span class=\"line\">Page(&#123;</span><br><span class=\"line\">  handleInput1(event) &#123;</span><br><span class=\"line\">    &#x2F;&#x2F;console.log(event.detail.value)</span><br><span class=\"line\">    a &#x3D; event.detail.value</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  handleInput2(event) &#123;</span><br><span class=\"line\">    &#x2F;&#x2F;console.log(event.detail.value)</span><br><span class=\"line\">    b &#x3D; event.detail.value</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  getSum() &#123;</span><br><span class=\"line\">    wx.cloud.callFunction(&#123;</span><br><span class=\"line\">      name: &quot;add&quot;,</span><br><span class=\"line\">      data: &#123;</span><br><span class=\"line\">        a: a - &#39;&#39;,</span><br><span class=\"line\">        b: b - &#39;&#39;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      success(res) &#123;</span><br><span class=\"line\">        console.log(&quot;请求成功！&quot;, res)</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      fail(res) &#123;</span><br><span class=\"line\">        console.log(&quot;请求失败！&quot;, res)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200818094114663.png#pic_center\" alt=\"在这里插入图片描述\"></p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/2020081809405454.png#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h1 id=\"二、使用云函数获取用户openid\"><a href=\"#二、使用云函数获取用户openid\" class=\"headerlink\" title=\"二、使用云函数获取用户openid\"></a>二、使用云函数获取用户openid</h1><h2 id=\"1-创建一个新的页面getopenid\"><a href=\"#1-创建一个新的页面getopenid\" class=\"headerlink\" title=\"1. 创建一个新的页面getopenid\"></a>1. 创建一个新的页面<code>getopenid</code></h2><p>如下图：<br><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200818095349654.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1BhbmRhMzI1,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"2-创建云函数getopenid\"><a href=\"#2-创建云函数getopenid\" class=\"headerlink\" title=\"2. 创建云函数getopenid\"></a>2. 创建云函数<code>getopenid</code></h2><p>里面的代码不用改动，使用默认的就可以<br><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200818095617698.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1BhbmRhMzI1,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"3-getopenid-wxml\"><a href=\"#3-getopenid-wxml\" class=\"headerlink\" title=\"3. getopenid.wxml\"></a>3. <code>getopenid.wxml</code></h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;button bindtap&#x3D;&quot;getopenid&quot;&gt;getopenid&lt;&#x2F;button&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-getopenid-js\"><a href=\"#4-getopenid-js\" class=\"headerlink\" title=\"4. getopenid.js\"></a>4. <code>getopenid.js</code></h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Page(&#123;</span><br><span class=\"line\">  onLoad()&#123;</span><br><span class=\"line\">    wx.cloud.callFunction(&#123;</span><br><span class=\"line\">      name:&quot;getopenid&quot;,</span><br><span class=\"line\">      data:&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      success(res) &#123;</span><br><span class=\"line\">        console.log(&quot;获取openid成功！&quot;, res)</span><br><span class=\"line\">        console.log(&quot;openid是：&quot;, res.result.openid)</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      fail(res) &#123;</span><br><span class=\"line\">        console.log(&quot;获取openid失败！&quot;, res)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-测试\"><a href=\"#5-测试\" class=\"headerlink\" title=\"5. 测试\"></a>5. 测试</h2><p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200818095738693.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1BhbmRhMzI1,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h1 id=\"二、通过云数据库API获取云数据库数据\"><a href=\"#二、通过云数据库API获取云数据库数据\" class=\"headerlink\" title=\"二、通过云数据库API获取云数据库数据\"></a>二、通过云数据库API获取云数据库数据</h1><h2 id=\"1-新建测试数据\"><a href=\"#1-新建测试数据\" class=\"headerlink\" title=\"1. 新建测试数据\"></a>1. 新建测试数据</h2><p>在云数据库中随便新建几条数据<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200818101955175.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1BhbmRhMzI1,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"2-新建测试页面\"><a href=\"#2-新建测试页面\" class=\"headerlink\" title=\"2. 新建测试页面\"></a>2. 新建测试页面</h2><p>新建页面<code>cloudfunctionVSdatabaseAPI</code><br><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200818101632569.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1BhbmRhMzI1,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"3-创建测试按键\"><a href=\"#3-创建测试按键\" class=\"headerlink\" title=\"3. 创建测试按键\"></a>3. 创建测试按键</h2><p><code>cloudfunctionVSdatabaseAPI.wxml</code>中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;button bindtap&#x3D;&quot;shujuku&quot;&gt;数据库API获取数据&lt;&#x2F;button&gt;</span><br></pre></td></tr></table></figure>\n<p><code>cloudfunctionVSdatabaseAPI.js</code>中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Page(&#123;</span><br><span class=\"line\">  shujuku()&#123;</span><br><span class=\"line\">    wx.cloud.database().collection(&quot;pk&quot;).get(&#123;</span><br><span class=\"line\">      success(res) &#123;</span><br><span class=\"line\">        console.log(&quot;数据库API获取数据成功！&quot;, res)</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      fail(res) &#123;</span><br><span class=\"line\">        console.log(&quot;数据库API获取数据失败！&quot;, res)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-测试\"><a href=\"#4-测试\" class=\"headerlink\" title=\"4. 测试\"></a>4. 测试</h2><p>点击按键<code>数据库API获取数据</code>，发现控制台如下输出：<br><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200818103343412.png#pic_center\" alt=\"在这里插入图片描述\"><br>此时，我们发现数据库中明明有数据但通过数据库API获取不到，为什么呢？<br><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200818103445206.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1BhbmRhMzI1,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>原因是权限不够，如果我们更新权限，让所有用户都可以获取，会怎么样呢？<br><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200818103554484.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1BhbmRhMzI1,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200818103609591.png#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"5-结论\"><a href=\"#5-结论\" class=\"headerlink\" title=\"5. 结论\"></a>5. 结论</h2><p>可以看到，我们现在获取到了想要的数据，我们也发现了通过数据库API获取数据的局限性。</p>\n<h1 id=\"三、通过云函数获取云数据库数据\"><a href=\"#三、通过云函数获取云数据库数据\" class=\"headerlink\" title=\"三、通过云函数获取云数据库数据\"></a>三、通过云函数获取云数据库数据</h1><h2 id=\"1-云数据库就可以直接获取数据库里的数据，为什么这么做？\"><a href=\"#1-云数据库就可以直接获取数据库里的数据，为什么这么做？\" class=\"headerlink\" title=\"1. 云数据库就可以直接获取数据库里的数据，为什么这么做？\"></a>1. 云数据库就可以直接获取数据库里的数据，为什么这么做？</h2><p><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200818100024885.png#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"2-说明\"><a href=\"#2-说明\" class=\"headerlink\" title=\"2. 说明\"></a>2. 说明</h2><p>本例延续上例中的<code>cloudfunctionVSdatabaseAPI</code>页面</p>\n<h2 id=\"3-创建云函数\"><a href=\"#3-创建云函数\" class=\"headerlink\" title=\"3. 创建云函数\"></a>3. 创建云函数</h2><p>利用上述方法创建云函数<code>cloudfunctionVSdatabaseAPI</code><br><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200818104300955.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1BhbmRhMzI1,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br>云函数<code>cloudfunctionVSdatabaseAPI.js</code>中的代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 云函数入口文件</span><br><span class=\"line\">const cloud &#x3D; require(&#39;wx-server-sdk&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\">cloud.init()</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 云函数入口函数</span><br><span class=\"line\">exports.main &#x3D; async (event, context) &#x3D;&gt; &#123;</span><br><span class=\"line\">  return cloud.database().collection(&quot;pk&quot;).get();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>记得上传并部署，注意这里没有<code>wx.</code><br>云函数调用：<code>cloud.database().collection(&quot;pk&quot;).get();</code><br>本地调用：<code>wx.cloud.database().collection(&quot;pk&quot;).get();</code></p>\n<h2 id=\"4-创建测试按键\"><a href=\"#4-创建测试按键\" class=\"headerlink\" title=\"4. 创建测试按键\"></a>4. 创建测试按键</h2><p><code>cloudfunctionVSdatabaseAPI.wxml</code>中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;button bindtap&#x3D;&quot;shujuku&quot;&gt;数据库API获取数据&lt;&#x2F;button&gt;</span><br><span class=\"line\">&lt;button bindtap&#x3D;&quot;yunhanshu&quot;&gt;云函数获取数据&lt;&#x2F;button&gt;</span><br></pre></td></tr></table></figure>\n<p><code>cloudfunctionVSdatabaseAPI.js</code>中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Page(&#123;</span><br><span class=\"line\">  shujuku()&#123;</span><br><span class=\"line\">    wx.cloud.database().collection(&quot;pk&quot;).get(&#123;</span><br><span class=\"line\">      success(res) &#123;</span><br><span class=\"line\">        console.log(&quot;数据库API获取数据成功！&quot;, res)</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      fail(res) &#123;</span><br><span class=\"line\">        console.log(&quot;数据库API获取数据失败！&quot;, res)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  yunhanshu()&#123;</span><br><span class=\"line\">    wx.cloud.callFunction(&#123;</span><br><span class=\"line\">      name:&quot;cloudfunctionVSdatabaseAPI&quot;,</span><br><span class=\"line\">      success(res) &#123;</span><br><span class=\"line\">        console.log(&quot;云函数获取数据成功！&quot;, res)</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      fail(res) &#123;</span><br><span class=\"line\">        console.log(&quot;云函数获取数据失败！&quot;, res)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-测试-1\"><a href=\"#5-测试-1\" class=\"headerlink\" title=\"5. 测试\"></a>5. 测试</h2><p>首先更改云数据库的权限为仅创建者可读写<br><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200818105244679.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1BhbmRhMzI1,size_16,color_FFFFFF,t_70#pic_center\" alt=\"\"><br>点击两个按键<br><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200818105303589.png#pic_center\" alt=\"在这里插入图片描述\"><br>控制台输出如下：同样的，数据库API不可以获取到数据，而云函数可以<br><img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200818105333789.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1BhbmRhMzI1,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"6-注意事项\"><a href=\"#6-注意事项\" class=\"headerlink\" title=\"6. 注意事项\"></a>6. 注意事项</h2><p>如果你的云开发有多套环境，在初始化时应指明，如下：<br>在下图文件中<img src= \"/img/loading.gif\" data-lazy-src=\"https://img-blog.csdnimg.cn/20200818105730727.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1BhbmRhMzI1,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 云函数入口文件</span><br><span class=\"line\">const cloud &#x3D; require(&#39;wx-server-sdk&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\">cloud.init(&#123;</span><br><span class=\"line\">  env: &quot;cloud-learning-i44qm&quot;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 云函数入口函数</span><br><span class=\"line\">exports.main &#x3D; async (event, context) &#x3D;&gt; &#123;</span><br><span class=\"line\">  return cloud.database().collection(&quot;pk&quot;).get();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"7-云函数调用数据库的应用\"><a href=\"#7-云函数调用数据库的应用\" class=\"headerlink\" title=\"7. 云函数调用数据库的应用\"></a>7. 云函数调用数据库的应用</h2><p>短信发送，邮件发送，复杂数据运算</p>\n<p>我的邮箱：<a href=\"mailto:1125806272@qq.com\">1125806272@qq.com</a><br>我的博客：<a href=\"http://9pshr3.coding-pages.com/\">http://9pshr3.coding-pages.com/</a><br>或<a href=\"https://zhenglin-li.github.io/\" target=\"_blank\" rel=\"noopener\">https://zhenglin-li.github.io/</a><br>我的csdn：<a href=\"https://me.csdn.net/Panda325\" target=\"_blank\" rel=\"noopener\">https://me.csdn.net/Panda325</a><br>我的简书：<a href=\"https://www.jianshu.com/u/e2d945027d3f\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/u/e2d945027d3f</a><br>我的今日头条：<a href=\"https://www.toutiao.com/c/user/4004188138/#mid=1592553312231438\" target=\"_blank\" rel=\"noopener\">https://www.toutiao.com/c/user/4004188138/#mid=1592553312231438</a><br>我的博客园：<a href=\"https://www.cnblogs.com/zhenglin-li/\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/zhenglin-li/</a></p>\n","categories":["微信小程序"],"tags":["入门","微信小程序云开发"]},{"title":"解决GitHub下载速度慢的方法","url":"/2020/08/18/%E8%A7%A3%E5%86%B3GitHub%E4%B8%8B%E8%BD%BD%E9%80%9F%E5%BA%A6%E6%85%A2%E7%9A%84%E6%96%B9%E6%B3%95/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\css\\APlayer.min.css\"><script src=\"\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\js\\Meting.min.js\"></script><h2 id=\"GitHub下载慢的问题\"><a href=\"#GitHub下载慢的问题\" class=\"headerlink\" title=\"GitHub下载慢的问题\"></a>GitHub下载慢的问题</h2><p>很多小伙伴说啊这个GitHub的下载速度很慢，那么本期视屏我给大家准备了几个可以提升速度的方法非常的简单</p>\n<h2 id=\"码云\"><a href=\"#码云\" class=\"headerlink\" title=\"码云\"></a>码云</h2><p>码云作为国内的代码托管厂商，速度是非常快的，我们可以使用码云来作为中转站</p>\n<h2 id=\"使用cnpmjs镜像\"><a href=\"#使用cnpmjs镜像\" class=\"headerlink\" title=\"使用cnpmjs镜像\"></a>使用cnpmjs镜像</h2><p>这个方法更加的简单,只需要修改你的路径<code>github.com</code>为<code>github.com.cnpmjs.org</code></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 之前</span></span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/ZhengLin-Li/leaning-spider-scu-jwc.git</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用cnpmjs</span></span><br><span class=\"line\">git <span class=\"built_in\">clone</span>  https://github.com.cnpm.org/ZhengLin-Li/leaning-spider-scu-jwc.git</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"使用jsdelivr加速\"><a href=\"#使用jsdelivr加速\" class=\"headerlink\" title=\"使用jsdelivr加速\"></a>使用jsdelivr加速</h2><p>jsdelivr可免费提供CDN加速，我们一般用来给自己的博客加速，或者制作一个免费的图床</p>\n<p>同样的它也可以加速我们的GitHub，当我们要快速获取项目中的某个文件的时候就可以使用这个方式</p>\n<p>它的使用也非常简单，我们将<code>github.com</code>修改为<code>cdn.jsdelivr.net</code>同时将<code>/blob/</code>修改为<code>@</code></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 之前</span></span><br><span class=\"line\">https://github.com/vuejs/vue/blob/dev/README.md</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用jsdelivr</span></span><br><span class=\"line\">https://cdn.jsdelivr.net/gh/vuejs/vue@dev/README.md</span><br></pre></td></tr></table></figure>\n\n<p>此时速度就非常快了</p>\n","categories":["git"],"tags":["git","github"]},{"title":"浅析动物农场","url":"/2020/06/28/%E6%B5%85%E6%9E%90%E5%8A%A8%E7%89%A9%E5%86%9C%E5%9C%BA/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\css\\APlayer.min.css\"><script src=\"\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\js\\Meting.min.js\"></script><h1 id=\"书籍资源\"><a href=\"#书籍资源\" class=\"headerlink\" title=\"书籍资源\"></a>书籍资源</h1><p>动物农场（译文经典版）epub格式电子书</p>\n<p>链接：<a href=\"https://pan.baidu.com/s/10fNbTN1_zJokyxZQFQ6eVw\" target=\"_blank\" rel=\"noopener\">https://pan.baidu.com/s/10fNbTN1_zJokyxZQFQ6eVw</a><br>提取码：tm3g </p>\n<p>动物农场的后浪问题：<a href=\"https://mp.weixin.qq.com/s?srcid=&amp;scene=22&amp;sharer_sharetime=1588998963415&amp;mid=2247485320&amp;sharer_shareid=ded2fc85fa0f2a75c0e6cd17d67c6c3c&amp;sn=463c7495c61e4dc5c73263aba10fe5e9&amp;idx=1&amp;__biz=MzIxMzc2NjY0NA%3D%3D&amp;chksm=97b09f13a0c71605556b92facfc1ba46e4742b9d8b903071a8df735fe8b004bc0ab4d851e498&amp;mpshare=1#rd\" target=\"_blank\" rel=\"noopener\">https://mp.weixin.qq.com/s?srcid=&amp;scene=22&amp;sharer_sharetime=1588998963415&amp;mid=2247485320&amp;sharer_shareid=ded2fc85fa0f2a75c0e6cd17d67c6c3c&amp;sn=463c7495c61e4dc5c73263aba10fe5e9&amp;idx=1&amp;__biz=MzIxMzc2NjY0NA%3D%3D&amp;chksm=97b09f13a0c71605556b92facfc1ba46e4742b9d8b903071a8df735fe8b004bc0ab4d851e498&amp;mpshare=1#rd</a></p>\n<h1 id=\"人物关系\"><a href=\"#人物关系\" class=\"headerlink\" title=\"人物关系\"></a>人物关系</h1><ol>\n<li><p>老少校——也就是那头曾经获奖的公猪，昔年他参展时的报名是维林敦帅哥，在农场里真可谓德高望重，每一只动物都不惜少睡个把小时，十分乐意来听听他要讲些什么。</p>\n</li>\n<li><p>三条狗，分别叫做蓝铃铛、杰茜和钳爪。</p>\n</li>\n<li><p>两匹拉套干重活的马，一匹叫拳击手，一匹叫紫苜蓿，紫苜蓿是一匹母性洋溢的壮实雌马，现在步入其中年期，在生育过四胎之后，她再也没能重塑自己昔日的体态风韵。拳击手则是个庞然大物，几乎有六英尺高，论力气顶得上寻常的马两匹合起来那么大。顺着他鼻梁长就白白的一道毛色，使他的相貌总有那么点儿傻里傻气，而他的智能也确实算不上出类拔萃，不过凭着其坚忍不拔的性格和惊天动地的干劲，他还是到处赢得大家的尊敬。</p>\n</li>\n<li><p>白山羊慕莉尔和驴子本杰明。后者在农场里算得上最资深的动物，脾气也是最坏的。他难得说话，一旦开口通常会发表一些冷嘲热讽的怪论，例如他会说上帝赐给他尾巴以便驱赶苍蝇，然而他宁愿尾巴和苍蝇都不要。在农场的动物中，惟独他从来不笑。倘若被问到这是为什么，他会说他看不出来有什么值得一笑。不过，他对拳击手倒是佩服得五体投地，尽管并不公开承认这一点；他俩每每一块儿到果园后面的一小块牧地去共度星期天，互相紧挨着吃草，可就是从不搭话。</p>\n</li>\n<li><p>失去了母亲的小鸭有气无力地细声叫着鱼贯而入，一边左顾右盼，想找一块他们不至于被踩踏的地方。紫苜蓿用她一条巨大的前腿权当一堵墙，把小鸭子围拢来</p>\n</li>\n<li><p>给琼斯先生拉双轮轻便车的莫丽，那匹长得挺俊、却相当愚蠢的白母马</p>\n</li>\n<li><p>末了一个来到的是一只猫，她照例环视四周，先看看哪儿最暖和，最后生生地从拳击手和紫苜蓿之间挤了进去；少校讲话时她从头至尾一直在那里发出轻微的呜噜声表示心满意足，少校说些什么她连一句也没在听。</p>\n</li>\n<li><p>摩西——那是一只驯化了的乌鸦</p>\n<p>有些动物的名字，在英文里是有含义的。<br>比如克洛弗含义是“苜蓿”，博克塞是“拳击手”,三头猪的名字，分别是斯诺鲍尔、斯奎勒和拿破仑。<br>斯诺鲍尔，Snowball，无论造反夺取政权还是其后捍卫政权，他都身先士卒；他又是七大戒律的起草人和风车工程的设计者，属于动物农场上有理想有干法的最高领导人之一。后来，在与拿破仑单挑的斗争中大败，被拿破仑定性为“卖国贼”（多么熟悉的欲加之罪啊）。在拿破仑成为独裁者后，动物农场的阶级斗争随之开始。只要破坏活动发生了，十之有九会归罪斯诺鲍尔。连老实巴交的奶牛们都会表态说：“斯诺鲍尔悄悄溜进了她们的牛圈，在她们睡觉时把她们的牛奶挤没了。”然而，斯诺鲍尔被驱逐出了农场后，是生是死都早是个问题了。<br>斯奎勒，squealer，英文词根等于汉语的“哇哇叫”“尖声叫”“号叫”等意；加了er，名词化，相当于汉语里的“尖叫的动物”，俚语里有“告密者”的意思。他陪伴在拿破仑左右，上蹿下跳，叽哩哇啦，他的言行是纳粹政权里的戈培尔式的，一个很独特的角色，巧舌如簧、颠倒黑白是他的拿手好戏，他始终如一的基调是：<br>“正是为了你们的利益，我们才喝牛奶，吃那些苹果。你们知道，如果我们猪猡对你们玩忽职守，会发生什么情况吗？琼斯会回来！是的，琼斯会回来！千真万确，同志们。”<br>特供怎么建立的？特权怎么产生的？腐败怎么发生的？这就是理论基础。在极权主义社会里，这样的宣传部长式的角色，在古今中外的历史上确实是史无前例的。审查书籍的刀笔吏有的，审查作品的内务大臣有的，但是企图控制、指挥、统一、支配人的思想的宣传部长，却是二十世纪纳粹政权才发明出来的。名叫宣传部长，实际上是传声筒。什么领袖讲话啦、二百五方针啦、各种指示啦、红头文件啦，五花八门，而中心只有一个：我说好就是好，不好也好；我说坏就是坏，不坏也坏。你们敢不听吗？……剿灭自由思想的方式方法无所不用其极。然而，但凡有一分真诚，是人就相信，思想是控制不了的。控制思想的结果，只能是双重思想泛滥成灾。动物农场这个动物社会，最后一步步走向堕落，宣传部长斯奎勒心知肚明，所以他狐假虎威，后来不得不随时带着两条猛犬出入各种宣传场合。<br>“拿破仑”这个名字，嗨，怎么说呢，不管法国那个小个子皇帝在法国历史上发挥过什么有益的作用，但是在自由知识分子的心目中，他只是一个专制者，一个风光一时的皇帝。奥威尔用这个名字的用意，这点是很清楚的。动物农场上的这个拿破仑，奥威尔描写他的形象，使用的文字与描写劳模博克塞的字数相当，说他“体格硕大，长相狰狞”，“平素不大爱说话，但是以凡事自有主张而出名”。创建动物农场初期，他对斯诺鲍尔的各种计划和各种委员会没有兴趣，只说“教育青少年比给那些成年人干任何事情都重要”。他从娃娃抓起的教育，就是豢养那九条猛犬，为他日后驱逐斯诺鲍尔、独揽大权打下了军队加警察的坚实基础。关于修建风车的投票大会，是拿破仑和斯诺鲍尔你死我活的关键战役，斯诺鲍尔滔滔不绝地讲了大半天修建风车的光明前景，广大动物都被动员起来了，但是拿破仑一句“瞎扯淡”就否定了，随着他“扯尖嗓门儿一声怪叫”，九只猛犬一起扑向斯诺鲍尔，斯诺鲍尔只得落荒而逃，从此在动物农场上消失。拿破仑的专政从此拉开了序幕。斯诺鲍尔被驱逐的第三个星期日，拿破仑出尔反尔，宣布修建风车。要修就要大跃进，加班加点，谁缺席把谁的“食物配额减掉一半”。他的一项新政策是“动物农场要和邻近的农场进行贸易活动”。紧接着他带领猪们住进了琼斯的农场住宅，放风说这是“领袖”的工作需要。住上了人的住宅，就要睡人的床，在人的厨房进食，在人的客厅接待客人。为了显示动物农场的富足，他下令弄虚作假，用沙子装满粮仓。为了和外界进行贸易，他下令把母鸡的蛋统统收缴，连孵小鸡的蛋也不留……群众不服吗？召开群众大会，他带着九条猛犬主持会议，只要他“扯尖嗓子叫了一声”，那些猛犬就向特定目标扑去，拉出来示众，在他们坦白了“罪过”之后，那些猛犬就“立即把他们的喉咙咬断”……四只有独立看法的猪死了，三只试图护蛋闹事的鸡死了，一只隐藏过一穗玉米的鹅死了，一只往水池里尿过尿的羊死了，另两只谋杀了“特别忠于拿破仑的老公羊”的羊也死了……“就这样，坦白和处决的故事整了一起又一起，后来一堆尸体摞在了拿破仑的蹄子旁，空气里充满了血腥味儿。这是自从赶走琼斯后闻所未闻的。”……大清洗之后，拿破仑树立了自己的绝对权威，却也让他感到风声鹤唳，“四只猛犬夜间守卫在他的床边，每个床角一只猛犬，一只名叫品克耶的小猪被委以重任，负责品尝拿破仑吃的所有食物，生怕食物里有毒”……<br>拿破仑这个形象，我没觉得可气可恨，还觉得他直接而专横得可爱。他就是一只大权独揽的伯克郡大公猪，兽性即本性，如同动物世界里的狮子逮住猎物一口咬断喉咙那样痛痛快快，无须人的花花肠子弯弯绕，只要一副造反者大获成功的形象，打下江山就要独享江山，杀害同类就要亲临现场，寡人御榻岂能容他人打瞌睡，我是流氓我怕谁？于是乎，“到了四月份，动物农场宣布成立共和国，这下很有必要选出一位总统。候选人只有一个，拿破仑，因此就一致当选了”。于是乎，“地契虽然在他的名下，但是为猪们所共同享有”。于是乎，“小猪全是黑白花斑，因为拿破仑是农场上唯一的种猪，大家很容易猜出来谁是小猪的父亲”。于是乎，“原来一只猪站在后腿上行走了”……<br>猪乎？人乎？<br>人乎？猪乎？</p>\n</li>\n</ol>\n<h1 id=\"浅析\"><a href=\"#浅析\" class=\"headerlink\" title=\"浅析\"></a>浅析</h1><p>小说里涉及狗、马、山羊、驴子、乌鸦和猪，这些动物有名有姓，算角色；绵羊、奶牛、猫、鸽子和成群的鸡与鹅，无名无姓，算群众演员。<br>  谁可以成为《动物农场》上的主人公呢？一般人可能会在狗身上做文章，而且写狗狗的文学作品也确实不少。不过，奥威尔似乎只给三只狗起了名字——布鲁贝尔、杰西和平彻，因为正是这三只有名有姓的狗生了九只小狗，被拿破仑包养起来，后来成了他一步步独揽大权并成功地当上独裁者的有效工具，相当于希特勒豢养的无恶不作的党卫队，从而把狗的属性写到了本质。当然，马是人类最得力的好朋友，写马的文字，古今中外，几近汗牛充栋的程度。奥威尔写了三匹有名有姓的马，每一匹马代表一种性格，而且几乎是为了给这三匹马做映衬，才写了动物农场的哲学家驴子本杰明、略识文字的白山羊缪里尔。乌鸦摩西代表鸟类，没有腿而有翅膀，来去自由的一个形象，代表没有腿的动物。我没有想到奥威尔会把猪写成主人公，有名有姓的有四只；一只称为少校的老公猪，没有名字，但是十章容量的小说，作者用了几乎整整一章写少校的讲话，其核心价值是“人是所有动物的老爷”“所有人都是敌人”“所有动物都是同志”。待到动物们揭竿而起，把庄园农庄攻打下来，建立了政权，开始筹建乌托邦了，正是根据少校临终前的这番讲话的核心价值，归纳出了神圣的宪章性质的“七大戒律”：<br>　　一、凡是两条腿走路的都是敌人。<br>　　二、凡是四条腿走路的，或者长翅膀的，都是朋友。<br>　　三、任何动物都不准穿衣服。<br>　　四、任何动物都不准在床上睡觉。<br>　　五、任何动物都不准喝酒。<br>　　六、任何动物都不准杀害其他动物。<br>　　七、所有动物都生而平等。<br>　　这七大戒律最后围绕着独裁者拿破仑转圈圈，越转越小，把他舒舒服服地包裹起来，起先虽然只是在特定戒律上抠字眼地稍加涂改，但内容却发生了根本改变，比如第四条“任何动物都不准在床上睡觉”涂改成了“任何动物都不准在有被褥的床上睡觉”；动物在柴火窝里睡觉，充其量铺盖一些麦秸或杂草，铺了被褥睡觉就是人的行为了。又比如第五条“任何动物都不准喝酒”涂改成了“任何动物不得饮酒过度”。喝酒是享乐，酗酒则是堕落，这更是人的行为。动物们造反夺取政权，与人不共戴天，夺取政权后却偷偷摸摸地向人的生活靠近，而这样的更改戒律，又都是为了适应统治阶级和独裁者的一步步腐化和享受。到了最后，更具深刻寓意的是，七大戒律最后剩下了三行字，归纳成了一条规定：<br>  所有的动物生而平等，但是一些动物生来要比，另一些动物更平等。<br>写到这里，我又想起奥威尔另外一句深刻的语句：<br>  如果你们有你们的低等动物感到满意，那么我们有我们的低等阶级感到满意。<br>　　<br>  动物们造反，就是造琼斯的反。琼斯是庄园农庄的农场主，因为酗酒，渐渐对农场疏于管理，最终导致动物们揭竿而起，一举夺得庄园农庄，改名动物农场，成立了史无前例的动物当家的乌托邦。建立乌托邦是一回事儿，维持乌托邦是另一回事儿。乌托邦即“无托邦”，没有任何依托为依据，统治者便可以随心所欲地重塑他们心目中的无托邦。理想一个个破灭，怪事、丑事和恶事一起又一起地发生。贫穷始终像恶魔一样挥之不去，定量配给成了习以为常的分配制度。每当下层动物们发生重大疑问而发出不同声音、而统治者又理屈词穷时，统治阶级强词夺理的最后一根稻草就是：你们不想让琼斯回来吧。奥威尔是要用他笔下的动物形象来揭示人类极权主义的恐怖、丑陋和罪恶，不只是新旧社会的问题。在动物农场这个社会里，动物是主要角色，人是配角，却不可或缺。<br>  三匹有名有姓的马——博克塞、克洛弗和莫丽。莫丽是一匹年轻的牝马，爱捯饬，爱显摆，总忘不了在鬃毛上系一条彩带。动物农场走上集体道路后，她是集体活动中最爱迟到早退的主儿，干活儿也是磨洋工的时候多，卖力气干活儿的时候少，究其原因似乎主要是她吃不到她爱吃的一样东西——糖。中国古圣人说“食色性也”，把“食”放在第一位，无比正确。无论动物还是人类，从小挨饿而不得不觅食的主儿，一定比饱食终日的主儿要机灵得多，智慧得多。作者写莫丽的文字很有限，但是一个最有远见的问题却由她提了出来：造反之后还有糖吃吗？莫丽受不了苦，喜欢过甜蜜的日子，提出这个问题仅仅是因为她的胃，但是这个问题却是全书中最有远见的，类似鲁迅的“娜拉出走后怎么办？”莫丽是个现实主义者，看见造反后的日子每况愈下，定量配给都难以保障，吃糖成了奢望，便悄悄地溜之大吉，跑到别的农场去给人拉马车，从而过上了她有糖吃的甜蜜的生活，意味深长。<br>  克洛弗也是一匹牝马，总是陪伴在博克塞的身边。在劳动中她拼力劳作，试图减轻博克塞的劳动强度；在生活上她关心博克塞的冷暖，尤其在博克塞的蹄子受伤之后。和她的名字克洛弗一样，在英语里是“苜蓿”，又称“三叶草”，她恨不得让博克塞吃下肚子变得更强壮，有一个健康强大的身体，顶得住繁重的体力劳动。她是作者心目中的下等阶级的贤妻良母，不过作品赋予她的另一项使命似乎更重要：她是在动物农场每次发生重大变故后，唯一一个使用记忆的角色。她是文盲，脑子也不是很好使，但是她有心，有记忆，每当遇到疑惑不解的问题，就求教驴子本杰明或者白山羊缪里尔，或者帮助她回忆过去的事实，或者到“七大戒律”前面求证。记忆是奥威尔追究极权主义实质的重要依据，在《动物农场》里只是通过克洛弗这个动物角色进行了比较浅层的探讨，在动物们的身上似乎也只能写到为止，而只有在《一九八四》一书里人成为角色后，才能系统地揭示。尽管如此，克洛弗这匹善良的母马，留给人的印象足够深刻的。正是这匹善良的母马，在动物农场发生触目惊心的“大清洗”之后，作者给她来了画龙点睛之笔：“克洛弗望着山坡，不禁泪水盈眶。如果她能讲出她的思绪，千言万语汇成一句话：他们多年前费尽艰辛推翻人类，他们追求的目的可不是目前的样子……他们盼到一个谁都不敢讲心里话的时代，那些凶猛的狂吠的猛犬横行，而你不得不目睹你的同志在坦白了莫须有的罪过后统统被撕成了碎片。”随着年龄老去，克洛弗的记忆也变成了碎片，尤其目睹博克塞被送往屠宰场之后。<br>  就下层阶级而言，博克塞是作者着墨最多的一个形象：第一章写到动物们在一次秘密会议上粉墨登场，只对博克塞交代得最具体，描写也最多，用了大约一百零几个字。在六万字一部小说里，作者惜墨如金，这样刻画形象的篇幅算是很大了，而就这一百多个字来看，作者还有重点，那就是：他鼻梁上有一道白毛，他因此看上去有几分傻相，而实际上他也不是一流脑子。这匹身架高大到足有两匹普通马相加的个头与力量的大牡马，何止不具备一流智商，连把字母表认到D的智商都没有。他就知道干活儿，动物农场一半的活儿都是他干的，尤其在建设风车这样的超级工程中，他就是中流砥柱，而他也是在这项工程中被累垮的。<br>  从早到晚，他拉啊，拽啊，哪里有最累的活儿，他就出现在哪里。他早和一只打鸣的公鸡达成协议，请他早上提前半小时叫他起来，赶在别人前面，把那些最需要力气的活儿自愿干完，赶在日常的活儿开始之前。<br>动物农场是集体农庄，集体农庄上的劳模就是这个样子。如今，年纪五十岁开外的人，只要在这样的生产形式下干过活儿的人，这样的形象是再熟悉不过的，是一种既让人爱戴又让人可怜甚至遭人憎恨的形象。在我心目中最接近博克塞似的人物，是我们村里的一个我应该叫叔叔的农人，在我们村做了多年劳模，干活儿真的是披星戴月，积劳成疾。他最著名的事迹是他一大早上地，睡眼惺忪，经常胳肢窝夹了一个扫炕的笤帚，到了地头才明白把笤帚误当成了小勾锄。在生产队和公社组织的劳模讲用会上，他一次又一次讲起这些个事实，把一个农民很丢人的事实讲成了光荣事迹。当然，他的讲用材料是地方御用文人舞文弄墨的结果。在小说中，博克塞这样的劳模，与其说干活儿卖力是特色，不如说“他鼻梁上有一道白毛，他因此看上去有几分傻相”更含意味。博克塞的座右铭是：“拿破仑一贯正确，我会更加努力干活儿。”博克塞这样的劳模悲剧的一面，是要大家一起跟他学得愚蠢起来，殉道般地听任统治者恣意摆布。<br>  这样的形象之所以还受下层动物普遍尊重，劳动好是一个方面，品德底线是另一个方面。博克塞有良知，讲诚实，而正因这两点，在动物农场几个需要统一思想的场合里他表示了不同声音，便差一点成为大清洗的对象，多亏他力大无穷，眼见“三只猛犬……气汹汹扑来，用他的大蹄子迎住他们，在空中把一只猛犬踢中，一下子把他死死地踩在地上”。在一个控制脑力也控制体力的极权体制里，强有力的武力是一种绝对牵制，这也是独裁者必要时拉拢武夫的根本原因。博克塞不用独裁者拉拢，因他一生唯独裁者命是听，他最后走进了一辆前往屠宰场的货车，对上面“艾尔弗雷德·西蒙兹，马匹屠夫以及皮胶熬制人”的广告视而不见，不只是因为他不识字，更是因为他一辈子只会盲从。<br>  关于劳模博克塞的结局，官方说用货车送他去养老院了，而民众根据货车上的广告而断定是把他送进屠宰场了。作者给出的说法是：“听说猪们不知从什么地方弄来一笔钱，又为他们自己购买了一箱威士忌。”读者很容易忽略这个细节，而译者是想方设法让译文突出这样的信息：辛劳一生的博克塞的血肉钱，为猪们换来了威士忌！<br>  生活潦倒的琼斯到底没有回来，但是比琼斯更残忍的人还是回来过的。<br>群众是多数，多数总是最难对付的，而统治者对付多数最好的办法就是愚弄加欺骗。绵羊、奶牛、猫、鸽子和成群的鸡与鹅是动物农场上的群众，猫喜欢独来独往，鸽子可以飞来飞去做哨兵，奶牛越多就越有统治阶级的奶喝，这样，鸡、鹅和绵羊这类多数就成了更低一级的基本群众了，而这三种动物又有区别：鸡与鹅可以下蛋，供统治者享用，而绵羊只有杀身才能成仁。就人类而言，猪羊任其宰割，在家畜中命是最贱的。如今猪做了统治者，绵羊们不需要杀身成仁了，但必须为统治者服务，成为吹鼓手才算有了与压迫深反抗重相应的主人翁地位。于是，在动物农场宣传部长斯奎勒的专门指导和调教下，绵羊们成了群众动物中争先恐后充当墙头草的喽啰。每到群众性的阶级斗争大会或者领导互相倾轧的核心会议的关键时刻，绵羊们都会气势如虹地喊出：四条腿好，两条腿坏。这是政治形势的需要，因此在政治形势需要他们改换口径的时候，他们又会毫不犹豫地喊出“四条腿好，两条腿更好”的口号。这不是绵羊的脑子转弯快，而是绵羊任人宰割的天性决定的。群众在造反活动、游行示威、公审大会等场合确实声势浩大、势不可当，但是在分而治之的情况下，尤其利益相关之时，哪怕因为蝇头小利，他们又是最容易充当墙头草的。<br>  奥威尔一生同情下等阶级，对动物农场的群众动物的批评，温和而有分寸，基本是幽默式的讽刺笔触。在星期天的群众大会上，宣传部长斯奎勒“用蹄子夹住一张长长的纸条，给他们念出来一大串数字，表明每一级食物生产按照大好形势看来，都增加百分之二百、百分之三百或者百分之五百不等”；这样的形势报告做过，群众就得表态，一只母鸡因此会扯尖嗓子说：<br>  在我们的领袖拿破仑同志的英明领导下，我六天下了五个鸡蛋。<br>  奶牛们在饮水池边，一边大口喝水，一边由衷地赞扬说：感谢拿破仑同志的英明领导，这水喝来是多么甜啊！<br>  绵羊们在隆重的胜利大会结束时，则会咩咩地引吭高歌，合唱文人墨客精心修改过的《英格兰动物之歌》：<br>  无父的动物们的朋友！<br>  幸福的源头！<br>  食桶的主！啊，我的灵魂会面临<br>  大火，只要我注视您<br>  安详的威严的目光，如同天空的太阳，<br>  拿破仑同志！<br>  在极权体制下生活过的人们，对这样的表达是耳熟能详的，但是对生活在英格兰这样一片自由土地上的奥威尔来说，能形象地准确地写出这样的文字，不能不令人叹服。</p>\n","categories":["读书"],"tags":["社科"]},{"title":"Wolfram Alpha 算微积分指令集合","url":"/2020/06/29/Wolfram-Alpha-%E7%AE%97%E5%BE%AE%E7%A7%AF%E5%88%86%E6%8C%87%E4%BB%A4%E9%9B%86%E5%90%88/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\css\\APlayer.min.css\"><script src=\"\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\js\\Meting.min.js\"></script><h1 id=\"一、Wolfram-Alpha介绍\"><a href=\"#一、Wolfram-Alpha介绍\" class=\"headerlink\" title=\"一、Wolfram Alpha介绍\"></a>一、Wolfram Alpha介绍</h1><p>Wolfram Alpha网址：<a href=\"https://www.wolframalpha.com/\" target=\"_blank\" rel=\"noopener\">https://www.wolframalpha.com/</a></p>\n<p>WolframAlpha是开发计算数学应用软件的沃尔夫勒姆研究公司开发出的新一代的搜索引擎，能根据问题直接给出答案的网站，用户在搜索框键入需要查询的问题后，该搜索引擎将直接向用户返回答案。</p>\n<p>它是基于 Wolfram 早期旗舰产品 <a href=\"https://baike.baidu.com/item/Mathematica\" target=\"_blank\" rel=\"noopener\">Mathematica</a>，一款囊括了计算机代数、符号和数值计算、可视化和统计功能的计算平台和工具包开发的。其数据来源包括学术网站和出版物、商业网站和公司、科学机构等等。</p>\n<h1 id=\"二、计算微积分（图片版）\"><a href=\"#二、计算微积分（图片版）\" class=\"headerlink\" title=\"二、计算微积分（图片版）\"></a>二、计算微积分（图片版）</h1><p>那么怎么使用Wolfram Alpha来计算微积分呢？</p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://i.loli.net/2020/06/29/iRwNft9jPGu3Yna.gif\" alt=\"\"></p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://i.loli.net/2020/06/29/QKNiA9V4lF5ehjH.gif\" alt=\"view_1_DGFPSw0wdoOatkCLh_ffwwmdwdHiFZTi3DpqnHqkJf0=\"></p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://i.loli.net/2020/06/29/U2xfBstVX7YnMzJ.gif\" alt=\"wKh2ClzcsvWAdBmEAAEWkzPRifs071\"></p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"https://i.loli.net/2020/07/23/bOAtU8WTQGYXvxE.png\" alt=\"image008\"></p>\n<p>说明： 点击公式进入WolframAlpha网页，然后将其中的函数换成需要计算函数即可。</p>\n<p><a href=\"http://www.wolfram.com/\" target=\"_blank\" rel=\"noopener\">http://www.wolfram.com/</a></p>\n<h1 id=\"三、计算微积分（表格版）\"><a href=\"#三、计算微积分（表格版）\" class=\"headerlink\" title=\"三、计算微积分（表格版）\"></a>三、计算微积分（表格版）</h1><table>\n<thead>\n<tr>\n<th><strong>求极限</strong></th>\n<th><a href=\"http://www.wolframalpha.com/input/?i=+lim+sin2x%2F(e^x-1)%2C+x->0\" target=\"_blank\" rel=\"noopener\">lim sin2x/(e^x-1), x-&gt;0</a></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><a href=\"http://www.wolframalpha.com/input/?i=lim+arctan(1%2Fx)+as+x->0%2B\" target=\"_blank\" rel=\"noopener\">lim arctan(1/x) as x-&gt;0+</a>   <a href=\"http://www.wolframalpha.com/input/?i=+lim+exp(1%2Fx)+as+x->0-\" target=\"_blank\" rel=\"noopener\">lim exp(1/x) as x-&gt;0-</a></td>\n<td>单侧极限</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"http://www.wolframalpha.com/input/?i=lim+x^2sin(3%2Fx^2)\" target=\"_blank\" rel=\"noopener\">lim x^2sin(3/x^2)) , x-&gt;oo</a>+%2C+x-&gt;oo)   <a href=\"http://www.wolframalpha.com/input/?i=lim+arctan(x)%2C+x->-oo\" target=\"_blank\" rel=\"noopener\">lim arctan(x), x-&gt;-oo</a></td>\n<td>x 趋于无穷大：oo</td>\n<td></td>\n</tr>\n<tr>\n<td><strong>求导数</strong></td>\n<td><a href=\"http://www.wolframalpha.com/input/?i=derivative+of+(2x^2%2B3)sin(x)\" target=\"_blank\" rel=\"noopener\">derivative of (2x^2+3)sin(x)</a>   或  <a href=\"http://www.wolframalpha.com/input/?i=derivative+(2x^2%2B3)sin(x)\" target=\"_blank\" rel=\"noopener\">derivative (2x^2+3)sin(x)</a></td>\n<td>导数：derivative</td>\n</tr>\n<tr>\n<td><a href=\"http://www.wolframalpha.com/input/?i=d%2Fdx+(2x^2%2B3)sin(x)\" target=\"_blank\" rel=\"noopener\">d/dx (2x^2+3)sin(x)</a></td>\n<td>分式记号</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"http://www.wolframalpha.com/input/?i=((2x^2%2B3)sin(x))’\" target=\"_blank\" rel=\"noopener\">((2x^2+3)sin(x))’</a></td>\n<td>撇记号，最简单</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"http://www.wolframalpha.com/input/?i=derivative+of+(2x^2%2B3)sin(x)+at+x%3D3\" target=\"_blank\" rel=\"noopener\">derivative of (2x^2+3)sin(x) at x=3</a></td>\n<td>求一点的导数</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"http://www.wolframalpha.com/input/?i=d%2Fdx+(2x^2%2B3)sin(x)+at+x%3D3\" target=\"_blank\" rel=\"noopener\">d/dx (2x^2+3)sin(x) at x=3</a></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"http://www.wolframalpha.com/input/?i=((2x^2%2B3)sin(x))' target=\"_blank\" rel=\"noopener\"+at+x%3D3\">((2x^2+3)sin(x))’ at x=3</a></td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th><strong>二阶导数</strong></th>\n<th><a href=\"http://www.wolframalpha.com/input/?i=second+derivative+of+sin(2x^2%2B3)\" target=\"_blank\" rel=\"noopener\">second derivative of sin(2x^2+3)</a></th>\n<th>二阶导数：second derivative</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><a href=\"http://www.wolframalpha.com/input/?i=2nd+derivative+sin(2x^2%2B3)\" target=\"_blank\" rel=\"noopener\">2nd derivative sin(2x^2+3)</a></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"http://www.wolframalpha.com/input/?i=(sin(2x^2%2B3))' target=\"_blank\" rel=\"noopener\"'\">(sin(2x^2+3))’’</a></td>\n<td>撇记号，最简单：打两撇</td>\n<td></td>\n</tr>\n<tr>\n<td><strong>三阶导数</strong></td>\n<td><a href=\"http://www.wolframalpha.com/input/?i=(sin(2x^2%2B3))' target=\"_blank\" rel=\"noopener\"''\">(sin(2x^2+3))’’’</a></td>\n<td>撇记号，最简单：打三撇</td>\n</tr>\n<tr>\n<td><strong>10阶导数</strong></td>\n<td><a href=\"http://www.wolframalpha.com/input/?i=10th+derivative+1%2F(1%2Bx)\" target=\"_blank\" rel=\"noopener\">10th derivative 1/(1+x)</a></td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"http://www.wolframalpha.com/input/?i=d^10%2Fdx^10(1%2F(1%2Bx))\" target=\"_blank\" rel=\"noopener\">d^10/dx^10(1/(1+x))</a></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"http://www.wolframalpha.com/input/?i=(exp(x)cos(2x^2))' target=\"_blank\" rel=\"noopener\"'+at+x%3D1\">(exp(x)cos(2x^2))’’ at x=1</a></td>\n<td>x=1处的2阶导数</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"http://www.wolframalpha.com/input/?i=7th+derivative+of+1%2F(1%2Bx)+at+0\" target=\"_blank\" rel=\"noopener\">7th derivative of 1/(1+x) at 0</a></td>\n<td>0处的7阶导数</td>\n<td></td>\n</tr>\n<tr>\n<td><strong>参数方程的导数</strong></td>\n<td><a href=\"http://www.wolframalpha.com/input/?i=+(sin(t))' target=\"_blank\" rel=\"noopener\"%2F(2t^2)'\">(sin(t))’/(2t^2)’</a></td>\n<td>x=2t^2, y=sint 的导数：dy/dx</td>\n</tr>\n<tr>\n<td><a href=\"http://www.wolframalpha.com/input/?i=(cost)' target=\"_blank\" rel=\"noopener\"%2F(sin2t)'+at+t%3Dpi%2F6\">(cost)’/(sin2t)’ at t=pi/6</a></td>\n<td>x=sin2t, y=cost 在 t=pi/6 处的导数</td>\n<td></td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th><strong>隐函数的导数</strong></th>\n<th><a href=\"http://www.wolframalpha.com/input/?i=-(+d%2Fdx(+1-x*exp(y)-y+)+)%2F(+d%2Fdy(+1-x*exp(y)-y+)+)\" target=\"_blank\" rel=\"noopener\">-( d/dx( 1-x<em>exp(y)-y ) )/( d/dy( 1-x</em>exp(y)-y ) )</a></th>\n<th>方程 y=1-xe^y 的导数:dy/dx</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>求方程的根</strong></td>\n<td><a href=\"http://www.wolframalpha.com/input/?i=solve+x^3%2B1.1*x^2%2B0.9*x-1.4%3D0\" target=\"_blank\" rel=\"noopener\">solve x^3+1.1<em>x^2+0.9</em>x-1.4=0</a></td>\n<td>解方程求根（包括复根）</td>\n</tr>\n<tr>\n<td><a href=\"http://www.wolframalpha.com/input/?i=real+root+x^3%2B1.1*x^2%2B0.9*x-1.4%3D0\" target=\"_blank\" rel=\"noopener\">real root x^3+1.1<em>x^2+0.9</em>x-1.4=0</a></td>\n<td>只求实根(real root)</td>\n<td></td>\n</tr>\n<tr>\n<td><strong>求函数的驻点</strong></td>\n<td><a href=\"http://www.wolframalpha.com/input/?i=stationary+point+of+x^3-2x%2B3\" target=\"_blank\" rel=\"noopener\">stationary point of x^3-2x+3</a></td>\n<td>驻点：stationary point</td>\n</tr>\n<tr>\n<td><strong>求函数的极值</strong></td>\n<td><a href=\"http://www.wolframalpha.com/input/?i=local+min+x%2F(x^2%2B2)\" target=\"_blank\" rel=\"noopener\">local min x/(x^2+2)</a></td>\n<td>极小值：local min</td>\n</tr>\n<tr>\n<td><a href=\"http://www.wolframalpha.com/input/?i=local+max+x%2F(x^2%2B2)\" target=\"_blank\" rel=\"noopener\">local max x/(x^2+2)</a></td>\n<td>极大值：local max</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"http://www.wolframalpha.com/input/?i=local+max+2sin(2x)^2-(5%2F2)cos(x%2F2)%2C+x%3D0+to+pi\" target=\"_blank\" rel=\"noopener\">local max 2sin(2x)^2-(5/2)cos(x/2), x=0 to pi</a></td>\n<td>求指定区间内的极大值</td>\n<td></td>\n</tr>\n<tr>\n<td><strong>求函数的最值</strong></td>\n<td><a href=\"http://www.wolframalpha.com/input/?i=global+min+of+2sin(2x)^2-(5%2F2)cos(x%2F2)^2+for+1<%3Dx<%3D3\" target=\"_blank\" rel=\"noopener\">global min of 2sin(2x)^2-(5/2)cos(x/2)^2 for 1&lt;=x&lt;=3</a></td>\n<td>求指定区间内的最小值</td>\n</tr>\n<tr>\n<td><strong>求曲线的拐点</strong></td>\n<td><a href=\"http://www.wolframalpha.com/input/?i=inflection+point+of+x%2F(x^2%2B2)\" target=\"_blank\" rel=\"noopener\">inflection point of x/(x^2+2)</a></td>\n<td>拐点：inflection point</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th><strong>求不定积分</strong></th>\n<th><a href=\"http://www.wolframalpha.com/input/?i=integrate++x^2%2Bsin(x)%2B1\" target=\"_blank\" rel=\"noopener\">integrate x^2+sin(x)+1</a></th>\n<th>积分：integrate</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><a href=\"http://www.wolframalpha.com/input/?i=int+xarctan(x)\" target=\"_blank\" rel=\"noopener\">int xarctan(x)</a></td>\n<td>int：integrate 的简写</td>\n<td></td>\n</tr>\n<tr>\n<td><strong>求定积分</strong></td>\n<td><a href=\"http://www.wolframalpha.com/input/?i=integrate++x^2%2Bsin(x)%2B1+from+0+to+1+\" target=\"_blank\" rel=\"noopener\">integrate x^2+sin(x)+1 from 0 to 1</a></td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"http://www.wolframalpha.com/input/?i=int++1%2Fsqrt(1-x^2)+%2C+x%3D+0+..1%2F2\" target=\"_blank\" rel=\"noopener\">int 1/sqrt(1-x^2) , x= 0 ..1/2</a></td>\n<td>简单的格式</td>\n<td></td>\n</tr>\n<tr>\n<td><strong>求广义积分</strong></td>\n<td><a href=\"http://www.wolframalpha.com/input/?i=int++xexp(-2x)+from+0+to+oo\" target=\"_blank\" rel=\"noopener\">int xexp(-2x) from 0 to oo</a></td>\n<td>无穷大用两个o表示：oo</td>\n</tr>\n<tr>\n<td><a href=\"http://www.wolframalpha.com/input/?i=+int++1%2F(x^2%2B3)+%2C+x%3D+-oo+..+oo\" target=\"_blank\" rel=\"noopener\">int 1/(x^2+3) , x= -oo .. oo</a></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><strong>求积分变限函数</strong></td>\n<td><a href=\"http://www.wolframalpha.com/input/?i=integrate+texp(-t)+from+0+to+x+\" target=\"_blank\" rel=\"noopener\">integrate texp(-t) from 0 to x</a></td>\n<td>积分上限函数</td>\n</tr>\n<tr>\n<td><a href=\"http://www.wolframalpha.com/input/?i=d%2Fdx+(+int+texp(-t)+from+0+to+x+)\" target=\"_blank\" rel=\"noopener\">d/dx ( int texp(-t) from 0 to x )</a></td>\n<td>积分上限函数求导</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"http://www.wolframalpha.com/input/?i=F(x)%3D%3Dintegrate+texp(-t)+from+ln(x)+to+x^2\" target=\"_blank\" rel=\"noopener\">F(x)==integrate texp(-t) from ln(x) to x^2</a></td>\n<td>积分变限函数</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"http://www.wolframalpha.com/input/?i=d%2Fdx+(integrate+texp(-t)+from+ln(x)+to+x^2+)\" target=\"_blank\" rel=\"noopener\">d/dx (integrate texp(-t) from ln(x) to x^2 )</a></td>\n<td>积分变限函数求导</td>\n<td></td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th><strong>曲线与x轴之间的面积</strong></th>\n<th><a href=\"http://www.wolframalpha.com/input/?i=area+between+2-x^2+and+x-axis\" target=\"_blank\" rel=\"noopener\">area between 2-x^2 and x-axis</a></th>\n<th>曲线y=2-x^2与x轴之间的面积</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>曲线下方的面积</strong></td>\n<td><a href=\"http://www.wolframalpha.com/input/?i=area+under+3-x^2\" target=\"_blank\" rel=\"noopener\">area under 3-x^2</a></td>\n<td>曲线y=3-x^2与x轴之间的面积</td>\n</tr>\n<tr>\n<td><strong>求两曲线之间的面积</strong></td>\n<td><a href=\"http://www.wolframalpha.com/input/?i=area+between+x+and+x^2\" target=\"_blank\" rel=\"noopener\">area between x and x^2</a></td>\n<td>曲线y=x与y=x^2之间的面积</td>\n</tr>\n<tr>\n<td>求两曲线的交点</td>\n<td><a href=\"http://www.wolframalpha.com/input/?i=solve++x^2+%3D+x^3\" target=\"_blank\" rel=\"noopener\">solve x^2 = x^3</a></td>\n<td>曲线y=x^2与y=x^3的交点</td>\n</tr>\n<tr>\n<td><strong>求两曲线之间的面积</strong></td>\n<td><a href=\"http://www.wolframalpha.com/input/?i=area+between+sin(x)+and+cos(2x)+from+x%3D0+to+pi\" target=\"_blank\" rel=\"noopener\">area between sin(x) and cos(2x) from x=0 to pi</a></td>\n<td>曲线y=sinx与y=cos2x (0&lt;x&lt;pi) 之间的面积</td>\n</tr>\n<tr>\n<td><strong>旋转体的体积</strong></td>\n<td><a href=\"http://www.wolframalpha.com/input/?i=V%3Dpi*Integrate+(sin(x)^2%2C+x%3D0..2)\" target=\"_blank\" rel=\"noopener\">V=pi*Integrate (sin(x)^2, x=0..2)</a></td>\n<td>曲线y=sinx (0&lt;x&lt;2) 与x轴 之间的区域绕x轴旋转</td>\n</tr>\n<tr>\n<td><strong>旋转体的体积</strong></td>\n<td><a href=\"http://www.wolframalpha.com/input/?i=V%3Dpi*Integrate+(x^2-sin(x)^2%2C+x%3D0..pi)\" target=\"_blank\" rel=\"noopener\">V=pi*Integrate (x^2-sin(x)^2, x=0..pi)</a></td>\n<td>曲线y=x与y=sinx (0&lt;x&lt;pi) 之间的区域绕x轴旋转</td>\n</tr>\n<tr>\n<td><strong>求曲线的弧长</strong></td>\n<td><a href=\"http://www.wolframalpha.com/input/?i=int+sqrt(1%2B+(+(x^2)' target=\"_blank\" rel=\"noopener\"+)^2)%2C+x%3D1..3\">int sqrt(1+ ( (x^2)’ )^2), x=1..3</a></td>\n<td>曲线 y=x^2 (1&lt;x&lt;3) 的弧长</td>\n</tr>\n<tr>\n<td><a href=\"http://www.wolframalpha.com/input/?i=int++sqrt(+(sin(t^3))' target=\"_blank\" rel=\"noopener\"+^2%2B(t)'^2+)%2C+t%3D-1..1\">int sqrt( (sin(t^3))’ ^2+(t)’^2 ), t=-1..1</a></td>\n<td>参数曲线 x=sin(t^3), y=t (-1&lt;t&lt;1) 的弧长</td>\n<td></td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th><strong>向量的点积</strong></th>\n<th><a href=\"http://www.wolframalpha.com/input/?i=(1%2C2%2C4)+.+(-2%2C3%2C6)+\" target=\"_blank\" rel=\"noopener\">(1,2,4) . (-2,3,6)</a></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>向量的叉积</strong></td>\n<td><a href=\"http://www.wolframalpha.com/input/?i=+(1%2C2%2C4)+cross+(-2%2C3%2C6)\" target=\"_blank\" rel=\"noopener\">(1,2,4) cross (-2,3,6)</a></td>\n<td>叉积：cross</td>\n</tr>\n<tr>\n<td><strong>求偏导数</strong></td>\n<td><a href=\"http://www.wolframalpha.com/input/?i=+d%2Fdx+sin(x^2%2B2y)\" target=\"_blank\" rel=\"noopener\">d/dx sin(x^2+2y)</a></td>\n<td>对 x 求偏导数</td>\n</tr>\n<tr>\n<td><a href=\"http://www.wolframalpha.com/input/?i=d%2Fdy+sin(x^2%2B2y)\" target=\"_blank\" rel=\"noopener\">d/dy sin(x^2+2y)</a></td>\n<td>对 y 求偏导数</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"http://www.wolframalpha.com/input/?i=d%2Fdx+sin(x^2%2B2y)+at+(1%2C2)\" target=\"_blank\" rel=\"noopener\">d/dx sin(x^2+2y) at (1,2)</a></td>\n<td>在某一点的偏导数</td>\n<td></td>\n</tr>\n<tr>\n<td><strong>高阶偏导数</strong></td>\n<td><a href=\"http://www.wolframalpha.com/input/?i=d%2Fdx+d%2Fdx+x^3*y^2+-+3*x*y^3+-+x*y+%2B+1\" target=\"_blank\" rel=\"noopener\">d/dx d/dx x^3<em>y^2 - 3</em>x<em>y^3 - x</em>y + 1</a></td>\n<td>对 x 的二阶偏导数</td>\n</tr>\n<tr>\n<td><a href=\"http://www.wolframalpha.com/input/?i=d%2Fdy+d%2Fdx+x^3*y^2+-+3*x*y^3+-+x*y+%2B+1\" target=\"_blank\" rel=\"noopener\">d/dy d/dx x^3<em>y^2 - 3</em>x<em>y^3 - x</em>y + 1</a></td>\n<td>混合偏导数</td>\n<td></td>\n</tr>\n<tr>\n<td><strong>隐函数的偏导数</strong></td>\n<td><a href=\"http://www.wolframalpha.com/input/?i=-(+d%2Fdx(+exp(z)-xyz+)+)%2F(+d%2Fdz+(exp(z)-xyz)+)\" target=\"_blank\" rel=\"noopener\">-( d/dx( exp(z)-xyz ) )/( d/dz (exp(z)-xyz) )</a></td>\n<td>方程e^z=xyz的偏导数：dz/dx</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th><strong>向量函数的导数</strong></th>\n<th><a href=\"http://www.wolframalpha.com/input/?i=(t^2%2C+4t-3%2C+2t^2-6t)' target=\"_blank\" rel=\"noopener\"\">(t^2, 4t-3, 2t^2-6t)’</a></th>\n<th>速度</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>向量函数的二阶导数</strong></td>\n<td><a href=\"http://www.wolframalpha.com/input/?i=(t^2%2C+e^t%2C+2t^3)' target=\"_blank\" rel=\"noopener\"'\">(t^2, e^t, 2t^3)’’</a></td>\n<td>加速度</td>\n</tr>\n<tr>\n<td><strong>求梯度</strong></td>\n<td><a href=\"http://www.wolframalpha.com/input/?i=grad++x^2%2Bcos(2y)+\" target=\"_blank\" rel=\"noopener\">grad x^2+cos(2y) </a></td>\n<td>二元函数的梯度</td>\n</tr>\n<tr>\n<td>用 grad 或 del 求梯度</td>\n<td><a href=\"http://www.wolframalpha.com/input/?i=del++x^2y%2Bcos(xy)%2Bxyz^2\" target=\"_blank\" rel=\"noopener\">del x^2y+cos(xy)+xyz^2</a></td>\n<td>三元函数的梯度</td>\n</tr>\n<tr>\n<td><strong>求方向导数</strong></td>\n<td><a href=\"http://www.wolframalpha.com/input/?i=+derivative+of+x^2%2Bcos(2y)+in+the+direction+(2%2C-3)+at+(1%2C2)\" target=\"_blank\" rel=\"noopener\">derivative of x^2+cos(2y) in the direction (2,-3) at (1,2)</a></td>\n<td></td>\n</tr>\n<tr>\n<td><strong>求二元函数的驻点</strong></td>\n<td><a href=\"http://www.wolframalpha.com/input/?i=stationary+point+of++x^3-y^3%2B3*x^2%2B3*y^2-9*x\" target=\"_blank\" rel=\"noopener\">stationary point of x^3-y^3+3<em>x^2+3</em>y^2-9*x</a></td>\n<td>驻点：stationary point</td>\n</tr>\n<tr>\n<td><strong>求二元函数的极值</strong></td>\n<td><a href=\"http://www.wolframalpha.com/input/?i=local+max++x^3-y^3%2B3*x^2%2B3*y^2-9*x\" target=\"_blank\" rel=\"noopener\">local max x^3-y^3+3<em>x^2+3</em>y^2-9*x</a></td>\n<td>极大值：local max</td>\n</tr>\n<tr>\n<td>或 <a href=\"http://www.wolframalpha.com/input/?i=+maximize++x^3-y^3%2B3*x^2%2B3*y^2-9*x\" target=\"_blank\" rel=\"noopener\">maximize x^3-y^3+3<em>x^2+3</em>y^2-9*x</a></td>\n<td>最大化：maximize</td>\n<td></td>\n</tr>\n<tr>\n<td><strong>求二元函数的最值</strong></td>\n<td><a href=\"http://www.wolframalpha.com/input/?i=minimize+2(xy%2B2%2Fx%2B2%2Fy)++for+x>0%2C+y>0\" target=\"_blank\" rel=\"noopener\">minimize 2(xy+2/x+2/y) for x&gt;0, y&gt;0</a></td>\n<td>最小化：minimize</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th><strong>求条件极值</strong></th>\n<th><a href=\"http://www.wolframalpha.com/input/?i=maximize+xy+on+x%2By%3D1\" target=\"_blank\" rel=\"noopener\">maximize xy on x+y=1</a></th>\n<th>求函数xy在x+y=1上的最大值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><a href=\"http://www.wolframalpha.com/input/?i=maximize++xyz+on++2*(x*y+%2B+y*z+%2B+z*x)+%3D1%2C+x>0%2Cy>0%2Cz>0+\" target=\"_blank\" rel=\"noopener\">maximize xyz on 2<em>(x</em>y + y<em>z + z</em>x) =1, x&gt;0,y&gt;0,z&gt;0</a></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"http://www.wolframalpha.com/input/?i=maximize+sqrt(x^2%2By^2%2Bz^2)+on+z%3Dx^2%2By^2+and+x%2By%2Bz%3D1\" target=\"_blank\" rel=\"noopener\">maximize sqrt(x^2+y^2+z^2) on z=x^2+y^2 and x+y+z=1</a></td>\n<td>两个约束条件</td>\n<td></td>\n</tr>\n<tr>\n<td><strong>二重积分</strong></td>\n<td><a href=\"http://www.wolframalpha.com/input/?i=int++x^2y%2Bx%2C++y%3D2..4%2C+x%3D1..3\" target=\"_blank\" rel=\"noopener\">int x^2y+x, y=2..4, x=1..3</a></td>\n<td>矩形区域</td>\n</tr>\n<tr>\n<td><a href=\"http://www.wolframalpha.com/input/?i=int++xy+%2C+x%3D1..2%2C+y%3D1..x\" target=\"_blank\" rel=\"noopener\">int xy , x=1..2, y=1..x</a></td>\n<td>先y, 后x</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"http://www.wolframalpha.com/input/?i=int++xy+%2C+y%3D-1..2%2C+x%3Dy^2..y%2B2\" target=\"_blank\" rel=\"noopener\">int xy , y=-1..2, x=y^2..y+2</a></td>\n<td>先x, 后y</td>\n<td></td>\n</tr>\n<tr>\n<td><strong>三重积分</strong></td>\n<td><a href=\"http://www.wolframalpha.com/input/?i=int++x+%2C+x%3D0..1%2C+y%3D0..(1-x)%2F2%2C+z%3D0..1-x-2y\" target=\"_blank\" rel=\"noopener\">int x , x=0..1, y=0..(1-x)/2, z=0..1-x-2y</a></td>\n<td>积分次序:：z, y,x</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th><strong>级数求和</strong></th>\n<th><a href=\"http://www.wolframalpha.com/input/?i=sum+3*(2%2F5)^n%2C+n%3D1..oo\" target=\"_blank\" rel=\"noopener\">sum 3*(2/5)^n, n=1..oo</a></th>\n<th>等比级数求和</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>用 sum 求和</td>\n<td><a href=\"http://www.wolframalpha.com/input/?i=sum+1%2Fn^2%2C+n%3D1..oo\" target=\"_blank\" rel=\"noopener\">sum 1/n^2, n=1..oo</a></td>\n<td>p-级数求和</td>\n</tr>\n<tr>\n<td><a href=\"http://www.wolframalpha.com/input/?i=sum+(-1)^(n%2B1)%2Fn^2%2C+n%3D1..oo\" target=\"_blank\" rel=\"noopener\">sum (-1)^(n+1)/n^2, n=1..oo</a></td>\n<td>交错级数求和</td>\n<td></td>\n</tr>\n<tr>\n<td><strong>幂级数的和函数</strong></td>\n<td><a href=\"http://www.wolframalpha.com/input/?i=sum+(-1)^(n%2B1)*x^(2n-1)%2F(2n-1)%2Cn%3D1...oo\" target=\"_blank\" rel=\"noopener\">sum (-1)^(n+1)*x^(2n-1)/(2n-1),n=1…oo</a></td>\n<td></td>\n</tr>\n<tr>\n<td><strong>函数的泰勒公式</strong></td>\n<td><a href=\"http://www.wolframalpha.com/input/?i=series+xsin(x)+to+order+5\" target=\"_blank\" rel=\"noopener\">series xsin(x) to order 5</a>      series：级数</td>\n<td>xsinx在x=0处的5阶泰勒公式</td>\n</tr>\n<tr>\n<td>用series 或 taylor</td>\n<td><a href=\"http://www.wolframalpha.com/input/?i=+taylor+e^x+at+x%3D1+to+order+5\" target=\"_blank\" rel=\"noopener\">taylor e^x at x=1 to order 5</a>   taylor：泰勒</td>\n<td>e^x在x=1处的5阶泰勒公式</td>\n</tr>\n<tr>\n<td><strong>解微分方程</strong></td>\n<td><a href=\"http://www.wolframalpha.com/input/?i=+y’%3D2xy\" target=\"_blank\" rel=\"noopener\">y’=2xy</a></td>\n<td>直接输入微分方程</td>\n</tr>\n<tr>\n<td><a href=\"http://www.wolframalpha.com/input/?i=y’%3De^(2x-y)%2C+y(0)%3D0\" target=\"_blank\" rel=\"noopener\">y’=e^(2x-y), y(0)=0</a></td>\n<td>求特解</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"http://www.wolframalpha.com/input/?i=(1%2Bx^2)y’’%3D2xy’%2C+y(0)%3D1%2C+y’(0)%3D3\" target=\"_blank\" rel=\"noopener\">(1+x^2)y’’=2xy’, y(0)=1, y’(0)=3</a></td>\n<td>二阶微分方程的特解</td>\n<td></td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th><strong>高阶线性微分方程</strong></th>\n<th><a href=\"http://www.wolframalpha.com/input/?i=y’’-5y’%2B6y%3Dxe^(2x)\" target=\"_blank\" rel=\"noopener\">y’’-5y’+6y=xe^(2x)</a></th>\n<th>二阶微分方程的通解</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><a href=\"http://www.wolframalpha.com/input/?i=+y’’%2By%2Bsin(2x)%3D0%2C+y(pi)%3D1%2C+y’(pi)%3D1\" target=\"_blank\" rel=\"noopener\">y’’+y+sin(2x)=0, y(pi)=1, y’(pi)=1</a></td>\n<td>二阶微分方程的特解</td>\n<td></td>\n</tr>\n<tr>\n<td><strong>作 图</strong></td>\n<td><img src= \"/img/loading.gif\" data-lazy-src=\"http://b.bst.126.net/common/portrait/face/preview/face1.gif\" alt=\"WolframAlpha 快速指南 - calculus - 高等数学\"></td>\n<td></td>\n</tr>\n<tr>\n<td><strong>一元函数图形</strong></td>\n<td><a href=\"http://www.wolframalpha.com/input/?i=+plot+y%3Dx^3-x^2-x%2B1%2C+x%3D-2..2\" target=\"_blank\" rel=\"noopener\">plot y=x^3-x^2-x+1, x=-2..2</a></td>\n<td>作图：plot</td>\n</tr>\n<tr>\n<td><a href=\"http://www.wolframalpha.com/input/?i=plot+xsinx%2Carctanx\" target=\"_blank\" rel=\"noopener\">plot xsinx,arctanx</a></td>\n<td>两条曲线</td>\n<td></td>\n</tr>\n<tr>\n<td><strong>隐函数的图形</strong></td>\n<td><a href=\"http://www.wolframalpha.com/input/?i=plot+x^3%2By^3%3D6xy\" target=\"_blank\" rel=\"noopener\">plot x^3+y^3=6xy</a></td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"http://www.wolframalpha.com/input/?i=plot+x^3%2By^3%3D6xy%2C+x%3D-4..4%2C+y%3D-4..4\" target=\"_blank\" rel=\"noopener\">plot x^3+y^3=6xy, x=-4..4, y=-4..4</a></td>\n<td>指定范围</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"http://www.wolframalpha.com/input/?i=+plot+x^2%2By^2%3D2x%2C+x%3Dy^3%2B1\" target=\"_blank\" rel=\"noopener\">plot x^2+y^2=2x, x=y^3+1</a></td>\n<td>两条曲线</td>\n<td></td>\n</tr>\n<tr>\n<td><strong>参数曲线</strong></td>\n<td><a href=\"http://www.wolframalpha.com/input/?i=parametric+plot+(t(1-sint)%2Ctcost)+from+t%3D-10+to+10\" target=\"_blank\" rel=\"noopener\">parametric plot (t(1-sint),tcost) from t=-10 to 10</a> parametric plot : 参数方程作图</td>\n<td>参数方程 x=t(1-sint), y=tcost 的图形</td>\n</tr>\n<tr>\n<td><strong>极坐标曲线</strong></td>\n<td><a href=\"http://www.wolframalpha.com/input/?i=polar+plot+1%2Bcost%2C+t%3D0..2pi\" target=\"_blank\" rel=\"noopener\">polar plot 1+cost, t=0..2pi</a>  polar plot: 极坐标作图</td>\n<td>极坐标方程 r=1+cost 的图形</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th><strong>曲面作图</strong></th>\n<th>[plot x^2+y^2, -2</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><a href=\"http://www.wolframalpha.com/input/?i=plot++sqrt(2-x^2-3y^2)\" target=\"_blank\" rel=\"noopener\">plot sqrt(2-x^2-3y^2)</a></td>\n<td></td>\n</tr>\n</tbody></table>\n","tags":["资源分享"]},{"title":"makefile","url":"/2020/10/04/makefile/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\css\\APlayer.min.css\"><script src=\"\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\js\\Meting.min.js\"></script><p><strong><em>\\</em>该篇文章为转载，是对原作者系列文章的总汇加上标注。**</strong></p>\n<p><strong><em>\\</em>支持原创，请移步陈浩大神博客：**</strong></p>\n<p><strong><em>\\</em><a href=\"http://blog.csdn.net/haoel/article/details/2886\\\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/haoel/article/details/2886\\</a>**</strong></p>\n<p><strong>*\\</strong>*<br>**<em>*</em>*makefile很重要****</p>\n<p>   什么是makefile？或许很多Winodws的程序员都不知道这个东西，因为那些Windows的IDE都为你做了这个工作，但我觉得要作一个好的和professional的程序员，makefile还是要懂。这就好像现在有这么多的HTML的编辑器，但如果你想成为一个专业人士，你还是要了解HTML的标识的含义。特别在Unix下的软件编译，你就不能不自己写makefile了，<strong>会不会写makefile，从一个侧面说明了一个人是否具备完成大型工程的能力</strong>。因为，makefile关系到了整个工程的编译规则。一个工程中的源文件不计数，其按<strong><em>\\</em>类型、功能、模块**</strong>分别放在若干个目录中，makefile定义了一系列的规则来指定，哪些文件需要先编译，哪些文件需要后编译，哪些文件需要重新编译，甚至于进行更复杂的功能操作，因为makefile就像一个Shell脚本一样，其中也可以执行操作系统的命令。makefile带来的好处就是——“自动化编译”，一旦写好，只需要一个make命令，整个工程完全自动编译，极大的提高了软件开发的效率。make是一个命令工具，是一个解释makefile中指令的命令工具，一般来说，大多数的IDE都有这个命令，比如：Delphi的make，Visual C++的nmake，Linux下GNU的make。可见，makefile都成为了一种在工程方面的编译方法。</p>\n<p>   现在讲述如何写makefile的文章比较少，这是我想写这篇文章的原因。当然，不同产商的make各不相同，也有不同的语法，但其本质都是在“文件依赖性”上做文章，这里，我仅对GNU的make进行讲述，我的环境是RedHat Linux 8.0，make的版本是3.80。必竟，这个make是应用最为广泛的，也是用得最多的。而且其还是最遵循于IEEE 1003.2-1992 标准的（POSIX.2）。</p>\n<p>  在这篇文档中，将以C/C++的源码作为我们基础，所以必然涉及一些关于C/C++的编译的知识，相关于这方面的内容，还请各位查看相关的编译器的文档。这里所默认的编译器是UNIX下的GCC和CC。</p>\n<p><strong>0.1 关于程序的编译和链接</strong></p>\n<p>  在此，我想多说关于程序编译的一些规范和方法，一般来说，无论是C、C++、还是pas，首先要把源文件编译成<strong><em>\\</em>中间代码文件**</strong>，在Windows下也就是 .obj 文件，UNIX下是 .o 文件，即 Object File，这个动作叫做<strong><em>\\</em>编译（compile）**</strong>。然后再把大量的Object File合成执行文件，这个动作叫作链接（link）。  </p>\n<pre><code>**编译时**，编译器需要的是语法的正确，函数与变量的声明的正确。对于后者，通常是你需要告诉编译器头文件的所在位置（头文件中应该只是声明，而定义应该放在C/C++文件中），只要所有的语法正确，编译器就可以编译出中间目标文件。一般来说，每个源文件都应该对应于一个中间目标文件（O文件或是OBJ文件）。 \n**链接时**，主要是链接函数和全局变量，所以，我们可以使用这些中间目标文件（O文件或是OBJ文件）来链接我们的应用程序。链接器并不管函数所在的源文件，只管函数的中间目标文件（Object File），在大多数时候，由于源文件太多，编译生成的中间目标文件太多，而在链接时需要明显地指出中间目标文件名，这对于编译很不方便，所以，我们要给中间目标文件打个包，在Windows下这种包叫“***\\*库文件”（Library File)\\****，也就是 .lib 文件，在UNIX下，是Archive File，也就是 .a 文件。</code></pre><p>   总结一下，源文件首先会生成中间目标文件，再由中间目标文件生成执行文件。在编译时，编译器只检测程序语法，和函数、变量是否被声明。如果函数未被声明，编译器会给出一个警告，但可以生成Object File。而在链接程序时，链接器会在所有的Object File中找寻函数的实现，如果找不到，那到就会报链接错误码（Linker Error），在VC下，这种错误一般是：Link 2001错误，意思说是说，链接器未能找到函数的实现。你需要指定函数的ObjectFile.</p>\n<pre><code>好，言归正传，GNU的make有许多的内容，闲言少叙，还是让我们开始吧。</code></pre><h1 id=\"1-Makefile-介绍\"><a href=\"#1-Makefile-介绍\" class=\"headerlink\" title=\"\\1 Makefile 介绍**\"></a><strong><em>\\</em>1 Makefile 介绍**</strong></h1><p>   make命令执行时，需要一个 Makefile 文件，以告诉make命令需要怎么样的去编译和链接程序。</p>\n<p>   首先，我们用一个示例来说明Makefile的书写规则。以便给大家一个感兴认识。这个示例来源于GNU的make使用手册，在这个示例中，我们的工程有8个C文件，和3个头文件，我们要写一个Makefile来告诉make命令如何编译和链接这几个文件。我们的规则是：</p>\n<p>​<br>​      1.如果这个工程没有编译过，那么我们的所有C文件都要编译并被链接。</p>\n<p>​      2.如果这个工程的某几个C文件被修改，那么我们只编译被修改的C文件，并链接目标程序。</p>\n<p>​      3.如果这个工程的头文件被改变了，那么我们需要编译引用了这几个头文件的C文件，并链接目标程序。</p>\n<p>   只要我们的Makefile写得够好，所有的这一切，我们只用一个make命令就可以完成，make命令会自动智能地根据当前的文件修改的情况来确定哪些文件需要重编译，从而自己编译所需要的文件和链接目标程序。</p>\n<h2 id=\"1-1-Makefile的规则\"><a href=\"#1-1-Makefile的规则\" class=\"headerlink\" title=\"1.1 Makefile的规则\"></a><strong>1.1 Makefile的规则</strong></h2><p>  在讲述这个Makefile之前，还是让我们先来粗略地看一看Makefile的规则。</p>\n<p>​     <strong>target… : prerequisites …</strong></p>\n<p>​     <strong>command</strong></p>\n<p>​     <strong>…</strong></p>\n<p>​     <strong>…<br>​     ——————————————————————————-</strong></p>\n<p>​    <strong>target</strong>也就是一个目标文件，可以是<strong>Object File</strong>，也可以是执行文件。还可以是一个标签（Label），对于标签这种特性，在后续的“伪目标”章节中会有叙述。</p>\n<p>​    <strong>prerequisites</strong>就是，要生成那个target所需要的文件或是目标。</p>\n<p>​    <strong>command</strong>也就是make需要执行的命令。（任意的Shell命令）</p>\n<p>​    这是一个文件的依赖关系，也就是说，target这一个或多个的目标文件依赖于prerequisites中的文件，其生成规则定义在command中。说白一点就是说，prerequisites中如果有一个以上的文件比target文件要新的话，command所定义的命令就会被执行。这就是Makefile的规则。也就是Makefile中最核心的内容。</p>\n<p>​    说到底，Makefile的东西就是这样一点，好像我的这篇文档也该结束了。呵呵。还不尽然，这是Makefile的主线和核心，但要写好一个Makefile还不够，我会以后面一点一点地结合我的工作经验给你慢慢到来。内容还多着呢。：）</p>\n<p>   【注】：在看别人写的Makefile文件时，你可能会碰到以下三个变量：$@，$^，$&lt;代表的意义分别是： </p>\n<p>​          他们三个是十分重要的三个变量，所代表的含义分别是：</p>\n<p>​          $@–目标文件，$^–所有的依赖文件，$&lt;–第一个依赖文件。</p>\n<h2 id=\"1-2-一个示例\"><a href=\"#1-2-一个示例\" class=\"headerlink\" title=\"1.2 一个示例\"></a><strong>1.2 一个示例</strong></h2><p>正如前面所说的，如果一个工程有3个头文件，和8个C文件，我们为了完成前面所述的那三个规则，我们的Makefile应该是下面的这个样子的。</p>\n<p>  edit : main.o kbd.o command.o display.o \\</p>\n<p>​     insert.o search.o files.o utils.o</p>\n<p>​      cc -o edit main.o kbd.o command.o display.o \\</p>\n<p>​           insert.o search.o files.o utils.o</p>\n<p>  main.o : main.c defs.h</p>\n<p>​      cc -c main.c</p>\n<p>  kbd.o : kbd.c defs.h command.h</p>\n<p>​      cc -c kbd.c</p>\n<p>  command.o : command.c defs.h command.h</p>\n<p>​      cc -c command.c</p>\n<p>  display.o : display.c defs.h buffer.h</p>\n<p>​      cc -c display.c</p>\n<p>  insert.o : insert.c defs.h buffer.h</p>\n<p>​      cc -c insert.c</p>\n<p>  search.o : search.c defs.h buffer.h</p>\n<p>​      cc -c search.c</p>\n<p>  files.o : files.c defs.h buffer.h command.h</p>\n<p>​      cc -c files.c</p>\n<p>  utils.o : utils.c defs.h</p>\n<p>​      cc -c utils.c</p>\n<p>  clean :</p>\n<p>​      rm edit main.o kbd.o command.o display.o \\</p>\n<p>​       insert.o search.o files.o utils.o</p>\n<p>​    <strong>反斜杠（\\）</strong>是换行符的意思。这样比较便于Makefile的易读。我们可以把这个内容保存在文件为“Makefile”或“makefile”的文件中，然后在该目录下直接输入命令“make”就可以生成执行文件edit。如果要删除执行文件和所有的中间目标文件，那么，只要简单地执行一下“make clean”就可以了。</p>\n<p>​    在这个makefile中，目标文件（target）包含：执行文件edit和中间目标文件（*.o），依赖文件（prerequisites）就是冒号后面的那些 .c 文件和 .h文件。每一个 .o 文件都有一组依赖文件，而这些 .o 文件又是执行文件 edit 的依赖文件。依赖关系的实质上就是说明了目标文件是由哪些文件生成的，换言之，目标文件是哪些文件更新的。</p>\n<p>​    在定义好依赖关系后，后续的那一行定义了如何生成目标文件的<strong><em>\\</em>操作系统命令\\</strong>，一定要以一个*<em>Tab键作为开头*</em>。记住，make并不管命令是怎么工作的，他只管执行所定义的命令**。make会比较targets文件和prerequisites文件的修改日期，如果prerequisites文件的日期要比targets文件的日期要新，或者target不存在的话，那么，make就会执行后续定义的命令。</p>\n<p>​    这里要说明一点的是，clean不是一个文件，它只不过是一个动作名字，有点像C语言中的lable一样，其冒号后什么也没有，那么，make就不会自动去找文件的依赖性，也就不会自动执行其后所定义的命令。要执行其后的命令，就要在make命令后明显得指出这个lable的名字。这样的方法非常有用，我们可以在一个makefile中定义不用的编译或是和编译无关的命令，比如程序的打包，程序的备份，等等。</p>\n<h2 id=\"1-3-make是如何工作的\"><a href=\"#1-3-make是如何工作的\" class=\"headerlink\" title=\"1.3 make是如何工作的\"></a><strong>1.3 make是如何工作的</strong></h2><p>在默认的方式下，也就是我们只输入make命令。那么，</p>\n<ol>\n<li>make会在当前目录下找名字叫“Makefile”或“makefile”的文件。</li>\n<li>如果找到，它会找文件中的第一个目标文件（target），在上面的例子中，他会找到“edit”这个文件，并把这个文件作为最终的目标文件。</li>\n<li>如果edit文件不存在，或是edit所依赖的后面的 .o 文件的文件修改时间要比edit这个文件新，那么，他就会执行后面所定义的命令来生成edit这个文件。</li>\n<li>如果edit所依赖的.o文件也存在，那么make会在当前文件中找目标为.o文件的依赖性，如果找到则再根据那一个规则生成.o文件。（这有点像一个堆栈的过程）</li>\n<li>当然，你的C文件和H文件是存在的啦，于是make会生成 .o 文件，然后再用 .o 文件声明make的终极任务，也就是执行文件edit了。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">这就是整个make的依赖性，make会一层又一层地去找文件的依赖关系，直到最终编译出第一个目标文件。在找寻的过程中，如果出现错误，比如最后被依赖的文件找不到，那么make就会直接退出，并报错，而对于所定义的命令的错误，或是编译不成功，make根本不理。make只管文件的依赖性，即，如果在我找了依赖关系之后，冒号后面的文件还是不在，那么对不起，我就不工作啦。</span><br></pre></td></tr></table></figure>\n\n<p>​    通过上述分析，我们知道，像clean这种，没有被第一个目标文件直接或间接关联，那么它后面所定义的命令将不会被自动执行，不过，我们可以显示要make执行。即命令——<strong><em>\\</em>“make clean”，以此来清除所有的目标文件，以便重编译**</strong>。</p>\n<p>   于是在我们编程中，如果这个工程已被编译过了，当我们修改了其中一个源文件，比如file.c，那么根据我们的依赖性，我们的目标file.o会被重编译（也就是在这个依性关系后面所定义的命令），于是file.o的文件也是最新的啦，于是file.o的文件修改时间要比edit要新，所以edit也会被重新链接了（详见edit目标文件后定义的命令）。</p>\n<p>而如果我们改变了“command.h”，那么，kdb.o、command.o和files.o都会被重编译，并且，edit会被重链接。</p>\n<h2 id=\"1-4-makefile中使用变量\"><a href=\"#1-4-makefile中使用变量\" class=\"headerlink\" title=\"\\1.4 makefile中使用变量**\"></a><strong><em>\\</em>1.4 makefile中使用变量**</strong></h2><p>在上面的例子中，先让我们看看edit的规则：</p>\n<p>   edit : main.o kbd.o command.o display.o \\</p>\n<p>​         insert.o search.o files.o utils.o</p>\n<p>​      cc -o edit main.o kbd.o command.o display.o \\</p>\n<p>​           insert.o search.o files.o utils.o</p>\n<p>  我们可以看到[.o]文件的字符串被重复了两次，如果我们的工程需要加入一个新的[.o]文件，那么我们需要在两个地方加（应该是三个地方，还有一个地方在clean中）。当然，我们的makefile并不复杂，所以在两个地方加也不累，但如果makefile变得复杂，那么我们就有可能会忘掉一个需要加入的地方，而导致编译失败。所以，为了makefile的易维护，在makefile中我们可以使用变量。makefile的变量也就是一个字符串，理解成C语言中的宏可能会更好。</p>\n<p>比如，我们声明一个变量，叫objects, OBJECTS, objs, OBJS, obj, 或是 OBJ，反正不管什么啦，只要能够表示obj文件就行了。我们在makefile一开始就这样定义：</p>\n<p>  objects = main.o kbd.o command.o display.o \\</p>\n<p>​       insert.o search.o files.o utils.o</p>\n<p>于是，我们就可以很方便地在我们的makefile中以<strong><em>\\</em>“$(objects)”**</strong>的方式来使用这个变量了，于是我们的改良版makefile就变成下面这个样子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">objects &#x3D; main.o kbd.o command.o display.o \\</span><br><span class=\"line\">          insert.osearch.o files.o utils.o </span><br><span class=\"line\">edit : $(objects)</span><br><span class=\"line\">        cc -o edit $(objects)</span><br><span class=\"line\">main.o : main.c defs.h</span><br><span class=\"line\">        cc -c main.c</span><br><span class=\"line\">kbd.o : kbd.c defs.h command.h</span><br><span class=\"line\">        cc -c kbd.c</span><br><span class=\"line\">command.o : command.c defs.h command.h</span><br><span class=\"line\">        cc -c command.c</span><br><span class=\"line\">display.o : display.c defs.h buffer.h</span><br><span class=\"line\">        cc -c display.c</span><br><span class=\"line\">insert.o : insert.c defs.h buffer.h</span><br><span class=\"line\">        cc -c insert.c</span><br><span class=\"line\">search.o : search.c defs.h buffer.h</span><br><span class=\"line\">        cc -c search.c</span><br><span class=\"line\">files.o : files.c defs.h buffer.h command.h</span><br><span class=\"line\">        cc -c files.c</span><br><span class=\"line\">utils.o : utils.c defs.h</span><br><span class=\"line\">        cc -c utils.c</span><br><span class=\"line\">clean :</span><br><span class=\"line\">        rm edit $(objects)</span><br></pre></td></tr></table></figure>\n\n<p>于是如果有新的 .o 文件加入，我们只需简单地修改一下 objects 变量就可以了。</p>\n<p>关于变量更多的话题，我会在后续给你一一道来。</p>\n<h2 id=\"1-5-让make自动推导\"><a href=\"#1-5-让make自动推导\" class=\"headerlink\" title=\"\\1.5 让make自动推导**\"></a><strong><em>\\</em>1.5 让make自动推导**</strong></h2><p>GNU的make很强大，它可以自动推导文件以及文件依赖关系后面的命令，于是我们就没必要去在每一个[.o]文件后都写上类似的命令，因为，我们的make会自动识别，并自己推导命令。</p>\n<p>  只要make看到一个[.o]文件，它就会自动的把[.c]文件加在依赖关系中，如果make找到一个whatever.o，那么whatever.c，就会是whatever.o的依赖文件。并且 cc -c whatever.c 也会被推导出来，于是，我们的makefile再也不用写得这么复杂。我们的是新的makefile又出炉了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">objects &#x3D; main.o kbd.o command.o display.o \\</span><br><span class=\"line\">          insert.o search.o files.o utils.o</span><br><span class=\"line\"> </span><br><span class=\"line\">edit : $(objects)</span><br><span class=\"line\">        cc -o edit $(objects)</span><br><span class=\"line\"> </span><br><span class=\"line\">main.o : defs.h</span><br><span class=\"line\">kbd.o : defs.h command.h</span><br><span class=\"line\">command.o : defs.h command.h</span><br><span class=\"line\">display.o : defs.h buffer.h</span><br><span class=\"line\">insert.o : defs.h buffer.h</span><br><span class=\"line\">search.o : defs.h buffer.h</span><br><span class=\"line\">files.o : defs.h buffer.h command.h</span><br><span class=\"line\">utils.o : defs.h</span><br><span class=\"line\"> </span><br><span class=\"line\">.PHONY : clean</span><br><span class=\"line\">clean :</span><br><span class=\"line\">        rm edit $(objects)</span><br></pre></td></tr></table></figure>\n\n<p>这种方法，也就是make的“隐晦规则”。上面文件内容中，“.PHONY”表示，clean是个伪目标文件。</p>\n<p>关于更为详细的“隐晦规则”和“伪目标文件”，我会在后续给你一一道来。</p>\n<h2 id=\"1-6-另类风格的makefile\"><a href=\"#1-6-另类风格的makefile\" class=\"headerlink\" title=\"1.6 另类风格的makefile\"></a><strong>1.6 另类风格的makefile</strong></h2><p>  即然我们的make可以自动推导命令，那么我看到那堆[.o]和[.h]的依赖就有点不爽，那么多的重复的[.h]，能不能把其收拢起来，好吧，没有问题，这个对于make来说很容易，谁叫它提供了自动推导命令和文件的功能呢？来看看最新风格的makefile吧。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">objects &#x3D; main.o kbd.o command.o display.o \\</span><br><span class=\"line\">          insert.o search.o files.o utils.o</span><br><span class=\"line\"> </span><br><span class=\"line\">edit : $(objects)</span><br><span class=\"line\">        cc -o edit $(objects)</span><br><span class=\"line\"> </span><br><span class=\"line\">$(objects) : defs.h</span><br><span class=\"line\">kbd.o command.o files.o : command.h</span><br><span class=\"line\">display.o insert.o search.o files.o : buffer.h</span><br><span class=\"line\"> </span><br><span class=\"line\">.PHONY : clean</span><br><span class=\"line\">clean :</span><br><span class=\"line\">        rm edit $(objects)</span><br></pre></td></tr></table></figure>\n\n<p>这种风格，让我们的makefile变得很简单，但我们的文件依赖关系就显得有点凌乱了。鱼和熊掌不可兼得。还看你的喜好了。我是不喜欢这种风格的，一是文件的依赖关系看不清楚，二是如果文件一多，要加入几个新的.o文件，那就理不清楚了。</p>\n<h2 id=\"1-7-清空目标文件的规则\"><a href=\"#1-7-清空目标文件的规则\" class=\"headerlink\" title=\"\\1.7 清空目标文件的规则**\"></a><strong><em>\\</em>1.7 清空目标文件的规则**</strong></h2><p>   每个Makefile中都应该写一个清空目标文件（.o和执行文件）的规则，这不仅便于重编译，也很利于保持文件的清洁。这是一个“修养”（呵呵，还记得我的《编程修养》吗）。一般的风格都是：</p>\n<p>​    clean:</p>\n<p>​      rm edit $(objects)</p>\n<p>更为稳健的做法是：</p>\n<p>​    .PHONY : clean</p>\n<p>​    clean :</p>\n<p>​        -rm edit $(objects)</p>\n<p>前面说过，.PHONY意思表示clean是一个“伪目标”，。而在rm命令前面加了一个小减号的意思就是，也许某些文件出现问题，但不要管，继续做后面的事。当然，clean的规则不要放在文件的开头，不然，这就会变成make的默认目标，相信谁也不愿意这样。不成文的规矩是——“clean从来都是放在文件的最后”。</p>\n<p>上面就是一个makefile的概貌，也是makefile的基础，下面还有很多makefile的相关细节，准备好了吗？准备好了就来。</p>\n<h1 id=\"2-Makefile-总述\"><a href=\"#2-Makefile-总述\" class=\"headerlink\" title=\"2 Makefile 总述\"></a><strong>2 Makefile 总述</strong></h1><h2 id=\"2-1-Makefile里有什么？\"><a href=\"#2-1-Makefile里有什么？\" class=\"headerlink\" title=\"\\2.1 Makefile里有什么？**\"></a><strong><em>\\</em>2.1 Makefile里有什么？**</strong></h2><p>Makefile里主要包含了<strong>*\\</strong>*五****个东西**<em>*</em>*：显式规则、隐晦规则、变量定义、文件指示和注释。****</p>\n<blockquote>\n<ol>\n<li>显式规则。显式规则说明了，如何生成一个或多的的目标文件。这是由Makefile的书写者明显指出，要生成的文件，文件的依赖文件，生成的命令。</li>\n<li>隐晦规则。由于我们的make有自动推导的功能，所以隐晦的规则可以让我们比较粗糙地简略地书写Makefile，这是由make所支持的。</li>\n<li>变量的定义。在Makefile中我们要定义一系列的变量，变量一般都是字符串，这个有点你C语言中的宏，当Makefile被执行时，其中的变量都会被扩展到相应的引用位置上。</li>\n<li>文件指示。其包括了三个部分，一个是在一个Makefile中引用另一个Makefile，就像C语言中的include一样；另一个是指根据某些情况指定Makefile中的有效部分，就像C语言中的预编译#if一样；还有就是定义一个多行的命令。有关这一部分的内容，我会在后续的部分中讲述。</li>\n<li>注释。Makefile中只有行注释，和UNIX的Shell脚本一样，其注释是用“#”字符，这个就像C/C++中的“//”一样。如果你要在你的Makefile中使用“#”字符，可以用反斜框进行转义，如：“#”。</li>\n</ol>\n</blockquote>\n<p>最后，还值得一提的是，在Makefile中的命令，必须要以[Tab]键开始。</p>\n<h2 id=\"2-2Makefile的文件名\"><a href=\"#2-2Makefile的文件名\" class=\"headerlink\" title=\"\\2.2Makefile的文件名**\"></a><strong><em>\\</em>2.2Makefile的文件名**</strong></h2><p>​    默认的情况下，make命令会在当前目录下按顺序找寻文件名为<strong>“GNUmakefile”、“makefile”、“Makefile”</strong>的文件，找到了解释这个文件。在这三个文件名中，最好使用“Makefile”这个文件名，因为，这个文件名第一个字符为大写，这样有一种显目的感觉。最好不要用“GNUmakefile”，这个文件是GNU的make识别的。有另外一些make只对全小写的“makefile”文件名敏感，但是基本上来说，大多数的make都支持“<strong>makefile”和“Makefile”</strong>这两种默认文件名。</p>\n<p>   当然，你可以使用别的文件名来书写Makefile，比如：“Make.Linux”，“Make.Solaris”，“Make.AIX”等，如果要<strong><em>\\</em>指定特定的Makefile，你可以使用make的“-f”和“–file”参数**</strong>，如：make -f Make.Linux或make –file Make.AIX。</p>\n<h2 id=\"2-3-引用其它的Makefile\"><a href=\"#2-3-引用其它的Makefile\" class=\"headerlink\" title=\"\\2.3 引用其它的Makefile**\"></a><strong><em>\\</em>2.3 引用其它的Makefile**</strong></h2><p>  在Makefile使用include关键字可以把别的Makefile包含进来，这很像C语言的#include，被包含的文件会原模原样的放在当前文件的包含位置。include的语法是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">include&lt;filename&gt;filename可以是当前操作系统Shell的文件模式（可以保含路径和通配符）</span><br></pre></td></tr></table></figure>\n\n<p><strong>在include前面可以有一些空字符，但是绝不能是[Tab]键开始。include和可以用一个或多个空格隔开。</strong>举个例子，你有这样几个Makefile：a.mk、b.mk、c.mk，还有一个文件叫foo.make，以及一个变量$(bar)，其包含了e.mk和f.mk，那么，下面的语句：</p>\n<p>  include foo.make *.mk $(bar)</p>\n<p>等价于：</p>\n<p>  include foo.make a.mk b.mk c.mk e.mk f.mk</p>\n<p>make命令开始时，会把找寻include所指出的其它Makefile，并把其内容安置在当前的位置。就好像C/C++的#include指令一样。如果文件都没有指定绝对路径或是相对路径的话，make会在当前目录下首先寻找，如果当前目录下没有找到，那么，make还会在下面的几个目录下找：</p>\n<blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">1.如果make执行时，有“-I”或“--include-dir”参数，那么make就会在这个参数所指定的目录下去寻找。</span><br><span class=\"line\">2.如果目录&#x2F;include（一般是：&#x2F;usr&#x2F;local&#x2F;bin或&#x2F;usr&#x2F;include）存在的话，make也会去找。</span><br></pre></td></tr></table></figure>\n</blockquote>\n<p>   如果有文件没有找到的话，make会生成一条警告信息，但不会马上出现致命错误。它会继续载入其它的文件，一旦完成makefile的读取，make会再重试这些没有找到，或是不能读取的文件，如果还是不行，make才会出现一条致命信息。如果你想让make不理那些无法读取的文件，而继续执行，你可以在include前加一个减号“-”。如：</p>\n<p>-include<filename></p>\n<p>其表示，无论include过程中出现什么错误，都不要报错继续执行。和其它版本make兼容的相关命令是sinclude，其作用和这一个是一样的。</p>\n<h2 id=\"2-4-环境变量-MAKEFILES\"><a href=\"#2-4-环境变量-MAKEFILES\" class=\"headerlink\" title=\"2.4 环境变量 MAKEFILES\"></a><strong>2.4 环境变量 MAKEFILES</strong></h2><p>如果你的当前环境中定义了环境变量MAKEFILES，那么，make会把这个变量中的值做一个类似于include的动作。这个变量中的值是其它的Makefile，用空格分隔。只是，它和include不同的是，从这个环境变中引入的Makefile的“目标”不会起作用，如果环境变量中定义的文件发现错误，make也会不理。</p>\n<p>但是在这里我还是建议不要使用这个环境变量，因为只要这个变量一被定义，那么当你使用make时，所有的Makefile都会受到它的影响，这绝不是你想看到的。在这里提这个事，只是为了告诉大家，也许有时候你的Makefile出现了怪事，那么你可以看看当前环境中有没有定义这个变量。</p>\n<h2 id=\"2-5-make的工作方式\"><a href=\"#2-5-make的工作方式\" class=\"headerlink\" title=\"2.5 make的工作方式\"></a>2.5 make的工作方式</h2><p><strong><em>\\</em>GNU的make工作时的执行步骤入下：（想来其它的make也是类似）**</strong></p>\n<blockquote>\n<p>\\1.    读入所有的Makefile。</p>\n<p>\\2.    读入被include的其它Makefile。</p>\n<p>\\3.    初始化文件中的变量。</p>\n<p>\\4.    推导隐晦规则，并分析所有规则。</p>\n<p>\\5.    为所有的目标文件创建依赖关系链。</p>\n<p>\\6.    根据依赖关系，决定哪些目标要重新生成。</p>\n<p>\\7.    执行生成命令。</p>\n</blockquote>\n<p>1-5步为第一个阶段，6-7为第二个阶段。第一个阶段中，如果定义的变量被使用了，那么，make会把其展开在使用的位置。但make并不会完全马上展开，make使用的是拖延战术，如果变量出现在依赖关系的规则中，那么仅当这条依赖被决定要使用了，变量才会在其内部展开。</p>\n<p>当然，这个工作方式你不一定要清楚，但是知道这个方式你也会对make更为熟悉。有了这个基础，后续部分也就容易看懂了。</p>\n<h1 id=\"3-Makefile书写规则\"><a href=\"#3-Makefile书写规则\" class=\"headerlink\" title=\"\\3 Makefile书写规则**\"></a><strong><em>\\</em>3 Makefile书写规则**</strong></h1><p> 规则包含两个部分，一个是<strong><em>\\</em>依赖关系**</strong>，一个是<strong><em>\\</em>生成目标的方法**</strong>。</p>\n<p><strong><em>\\</em>在Makefile中，规则的顺序是很重要的**</strong>，因为，<strong><em>\\</em>Makefile中只应该有一个最终目标**</strong>，其它的目标都是被这个目标所连带出来的，所以一定要让make知道你的最终目标是什么。一般来说，定义在Makefile中的目标可能会有很多，但是第一条规则中的目标将被确立为最终的目标。如果第一条规则中的目标有很多个，那么，第一个目标会成为最终的目标。make所完成的也就是这个目标。</p>\n<p>好了，还是让我们来看一看如何书写规则。</p>\n<h2 id=\"3-1-规则举例\"><a href=\"#3-1-规则举例\" class=\"headerlink\" title=\"3.1 规则举例\"></a>3.1 规则举例</h2><p> foo.o: foo.c defs.h    # foo模块</p>\n<p>​      cc -c -g foo.c</p>\n<p>看到这个例子，各位应该不是很陌生了，前面也已说过，foo.o是我们的目标，foo.c和defs.h是目标所依赖的源文件，而只有一个命令“cc -c -g foo.c”（以Tab键开头）。这个规则告诉我们两件事：</p>\n<blockquote>\n<p>\\1.    文件的依赖关系，foo.o依赖于foo.c和defs.h的文件，如果foo.c和defs.h的文件日期要比foo.o文件日期要新，或是foo.o不存在，那么依赖关系发生。</p>\n<p>\\2.    如果生成（或更新）foo.o文件。也就是那个cc命令，其说明了，如何生成foo.o这个文件。（当然foo.c文件include了defs.h文件）</p>\n</blockquote>\n<h2 id=\"3-2-规则的语法\"><a href=\"#3-2-规则的语法\" class=\"headerlink\" title=\"\\3.2 规则的语法**\"></a><strong><em>\\</em>3.2 规则的语法**</strong></h2><p>   targets : prerequisites</p>\n<p>​    command</p>\n<p>​    …</p>\n<p>或是这样：</p>\n<p>   targets : prerequisites ; command</p>\n<p>​      command</p>\n<p>​      …</p>\n<p>targets是文件名，以空格分开，可以使用通配符。一般来说，我们的目标基本上是一个文件，但也有可能是多个文件。</p>\n<p>command是命令行，如果其不与“target:prerequisites”在一行，那么，必须以[Tab键]开头，如果和prerequisites在一行，那么可以用分号做为分隔。（见上）</p>\n<p>prerequisites也就是目标所依赖的文件（或依赖目标）。如果其中的某个文件要比目标文件要新，那么，目标就被认为是“过时的”，被认为是需要重生成的。这个在前面已经讲过了。</p>\n<p>如果命令太长，你可以使用反斜框（‘\\’）作为换行符。make对一行上有多少个字符没有限制。规则告诉make两件事，文件的依赖关系和如何成成目标文件。</p>\n<p>一般来说，make会以UNIX的标准Shell，也就是/bin/sh来执行命令。</p>\n<h2 id=\"3-3-在规则中使用通配符\"><a href=\"#3-3-在规则中使用通配符\" class=\"headerlink\" title=\"\\3.3 在规则中使用通配符**\"></a><strong><em>\\</em>3.3 在规则中使用通配符**</strong></h2><p>   如果我们想定义一系列比较类似的文件，我们很自然地就想起使用通配符。make支持三各通配符：“*”，“?”和“[…]”。这是和Unix的B-Shell是相同的。</p>\n<p><strong><em>\\</em>“~”**</strong></p>\n<p>波浪号（“<del>”）字符在文件名中也有比较特殊的用途。如果是“</del>/test”，这就表示当前用户的$HOME目录下的test目录。而“~hchen/test”则表示用户hchen的宿主目录下的test目录。（这些都是Unix下的小知识了，make也支持）而在Windows或是MS-DOS下，用户没有宿主目录，那么波浪号所指的目录则根据环境变量“HOME”而定。</p>\n<p><strong>“*“</strong><br>通配符代替了你一系列的文件，如“<em>.c”表示所以后缀为c的文件。一个需要我们注意的是，如果我们的文件名中有通配符，如：“</em>”，那么可以用转义字符“\\”，如“*”来表示真实的“*”字符，而不是任意长度的字符串。</p>\n<p>好吧，还是先来看几个例子吧：</p>\n<p>  clean:</p>\n<p>​    rm -f *.o</p>\n<p>上面这个例子我不不多说了，这是操作系统Shell所支持的通配符。这是在命令中的通配符。</p>\n<p>  print: *.c</p>\n<p>​    lpr -p $?</p>\n<p>​    touch print</p>\n<p>上面这个例子说明了通配符也可以在我们的规则中，目标print依赖于所有的[.c]文件。其中的“$?”是一个自动化变量，我会在后面给你讲述。</p>\n<p>  objects = *.o</p>\n<p>上面这个例子，表示了，通符同样可以用在变量中。并不是说[<em>.o]会展开，不！objects的值就是“</em>.o”。Makefile中的变量其实就是C/C++中的宏。如果你要让通配符在变量中展开，也就是让objects的值是所有[.o]的文件名的集合，那么，你可以这样：</p>\n<p>  objects := $(wildcard *.o)</p>\n<p>这种用法由关键字“wildcard”指出，关于Makefile的关键字，我们将在后面讨论。</p>\n<h2 id=\"3-4-文件搜寻\"><a href=\"#3-4-文件搜寻\" class=\"headerlink\" title=\"3.4 文件搜寻\"></a><strong>3.4 文件搜寻</strong></h2><p>   在一些大的工程中，有大量的源文件，我们通常的做法是把这许多的源文件分类，并存放在不同的目录中。所以，当make需要去找寻文件的依赖关系时，你可以在文件前加上路径，但最好的方法是把一个路径告诉make，让make在自动去找。</p>\n<p>Makefile文件中的特殊变量“VPATH”就是完成这个功能的，如果没有指明这个变量，make只会在当前的目录中去找寻依赖文件和目标文件。如果定义了这个变量，那么，make就会在当当前目录找不到的情况下，到所指定的目录中去找寻文件了。</p>\n<p>  VPATH = src:../headers</p>\n<p>上面的的定义指定两个目录，“src”和“../headers”，make会按照这个顺序进行搜索。目录由“冒号”分隔。（当然，当前目录永远是最高优先搜索的地方）</p>\n<p>另一个设置文件搜索路径的方法是使用make的“vpath”关键字（注意，它是全小写的），这不是变量，这是一个make的关键字，这和上面提到的那个VPATH变量很类似，但是它更为灵活。它可以指定不同的文件在不同的搜索目录中。这是一个很灵活的功能。它的使用方法有三种：</p>\n<blockquote>\n<p>\\1.    vpath &lt; pattern&gt; &lt; directories&gt;   为符合模式&lt; pattern&gt;的文件指定搜索目录<directories>。</p>\n<p>\\2.    vpath &lt; pattern&gt;                清除符合模式&lt; pattern&gt;的文件的搜索目录。</p>\n<p>\\3.    vpath                         清除所有已被设置好了的文件搜索目录。</p>\n</blockquote>\n<p>vapth使用方法中的&lt; pattern&gt;需要包含“%”字符。“%”的意思是匹配零或若干字符，例如，“%.h”表示所有以“.h”结尾的文件。&lt; pattern&gt;指定了要搜索的文件集，而&lt; directories&gt;则指定了的文件集的搜索的目录。例如：</p>\n<p>  vpath %.h ../headers</p>\n<p>该语句表示，要求make在“../headers”目录下搜索所有以“.h”结尾的文件。（如果某文件在当前目录没有找到的话）</p>\n<p>我们可以连续地使用vpath语句，以指定不同搜索策略。如果连续的vpath语句中出现了相同的&lt; pattern&gt;，或是被重复了的&lt; pattern&gt;，那么，make会按照vpath语句的先后顺序来执行搜索。如：</p>\n<p>  vpath %.c foo</p>\n<p>  vpath %  blish</p>\n<p>  vpath %.c bar</p>\n<p>其表示“.c”结尾的文件，先在“foo”目录，然后是“blish”，最后是“bar”目录。</p>\n<p>  vpath %.c foo:bar</p>\n<p>  vpath %  blish</p>\n<p>而上面的语句则表示“.c”结尾的文件，先在“foo”目录，然后是“bar”目录，最后才是“blish”目录。</p>\n<h2 id=\"3-5-伪目标\"><a href=\"#3-5-伪目标\" class=\"headerlink\" title=\"3.5 伪目标\"></a><strong>3.5 伪目标</strong></h2><p>最早先的一个例子中，我们提到过一个“clean”的目标，这是一个“伪目标”，</p>\n<p>  clean:</p>\n<p>​      rm *.o temp</p>\n<p>正像我们前面例子中的“clean”一样，即然我们生成了许多文件编译文件，我们也应该提供一个清除它们的“目标”以备完整地重编译而用。 （以“make clean”来使用该目标）</p>\n<p>因为，我们并不生成“clean”这个文件。“伪目标”并不是一个文件，只是一个标签，由于“伪目标”不是文件，所以make无法生成它的依赖关系和决定它是否要执行。我们只有通过显示地指明这个“目标”才能让其生效。当然，“伪目标”的取名不能和文件名重名，不然其就失去了“伪目标”的意义了。</p>\n<p>当然，为了避免和文件重名的这种情况，我们可以使用一个特殊的标记“.PHONY”来显示地指明一个目标是“伪目标”，向make说明，不管是否有这个文件，这个目标就是“伪目标”。</p>\n<p>  .PHONY : clean</p>\n<p>只要有这个声明，不管是否有“clean”文件，要运行“clean”这个目标，只有“make clean”这样。于是整个过程可以这样写：</p>\n<p>  .PHONY: clean</p>\n<p>  clean:</p>\n<p>​      rm *.o temp</p>\n<p>伪目标一般没有依赖的文件。但是，我们也可以为伪目标指定所依赖的文件。伪目标同样可以作为“默认目标”，只要将其放在第一个。一个示例就是，如果你的Makefile需要一口气生成若干个可执行文件，但你只想简单地敲一个make完事，并且，所有的目标文件都写在一个Makefile中，那么你可以使用“伪目标”这个特性：</p>\n<p>  all : prog1 prog2 prog3</p>\n<p>  .PHONY : all</p>\n<p>  prog1 : prog1.o utils.o</p>\n<p>​      cc -o prog1 prog1.o utils.o</p>\n<p>  prog2 : prog2.o</p>\n<p>​      cc -o prog2 prog2.o</p>\n<p>  prog3 : prog3.o sort.o utils.o</p>\n<p>​      cc -o prog3 prog3.o sort.o utils.o</p>\n<p>我们知道，Makefile中的第一个目标会被作为其默认目标。我们声明了一个“all”的伪目标，其依赖于其它三个目标。由于伪目标的特性是，总是被执行的，所以其依赖的那三个目标就总是不如“all”这个目标新。所以，其它三个目标的规则总是会被决议。也就达到了我们一口气生成多个目标的目的。“.PHONY : all”声明了“all”这个目标为“伪目标”。</p>\n<p>随便提一句，从上面的例子我们可以看出，目标也可以成为依赖。所以，伪目标同样也可成为依赖。看下面的例子：</p>\n<p>  .PHONY: cleanall cleanobj cleandiff</p>\n<p>  cleanall : cleanobj cleandiff</p>\n<p>​      rm program</p>\n<p>  cleanobj :</p>\n<p>​      rm *.o</p>\n<p>  cleandiff :</p>\n<p>​      rm *.diff</p>\n<p>“makeclean”将清除所有要被清除的文件。“cleanobj”和“cleandiff”这两个伪目标有点像“子程序”的意思。我们可以输入“makecleanall”和“make cleanobj”和“makecleandiff”命令来达到清除不同种类文件的目的</p>\n<h2 id=\"3-6-多目标\"><a href=\"#3-6-多目标\" class=\"headerlink\" title=\"\\3.6 多目标**\"></a><strong><em>\\</em>3.6 多目标**</strong></h2><p>Makefile的规则中的目标可以不止一个，其支持多目标，有可能我们的多个目标同时依赖于一个文件，并且其生成的命令大体类似。于是我们就能把其合并起来。当然，多个目标的生成规则的执行命令是同一个，这可能会可我们带来麻烦，不过好在我们的可以使用一个自动化变量“$@”（关于自动化变量，将在后面讲述），这个变量表示着目前规则中所有的目标的集合，这样说可能很抽象，还是看一个例子吧。</p>\n<p>  bigoutput littleoutput : text.g</p>\n<p>​      generate text.g -$(subst output,,$@) &gt; $@</p>\n<p>  上述规则等价于：</p>\n<p>  bigoutput : text.g</p>\n<p>​      generate text.g -big &gt; bigoutput</p>\n<p>  littleoutput : text.g</p>\n<p>​      generate text.g -little &gt; littleoutput</p>\n<p>其中，-$(subst output,,$@)中的“$”表示执行一个Makefile的函数，函数名为subst，后面的为参数。关于函数，将在后面讲述。这里的这个函数是截取字符串的意思，“$@”表示目标的集合，就像一个数组，“$@”依次取出目标，并执于命令。</p>\n<h2 id=\"3-7-静态模式\"><a href=\"#3-7-静态模式\" class=\"headerlink\" title=\"3.7 静态模式\"></a><strong>3.7 静态模式</strong></h2><p>静态模式可以更加容易地定义多目标的规则，可以让我们的规则变得更加的有弹性和灵活。我们还是先来看一下语法：</p>\n<p>&lt;targets…&gt;: <target-pattern>: &lt;prereq-patterns …&gt;</p>\n<p>　　　<commands></p>\n<p>…</p>\n<p>targets定义了一系列的目标文件，可以有通配符。是目标的一个集合。</p>\n<p>target-parrtern是指明了targets的模式，也就是的目标集模式。</p>\n<p>prereq-parrterns是目标的依赖模式，它对target-parrtern形成的模式再进行一次依赖目标的定义。</p>\n<p>这样描述这三个东西，可能还是没有说清楚，还是举个例子来说明一下吧。如果我们的<target-parrtern>定义成“%.o”，意思是我们的集合中都是以“.o”结尾的，而如果我们的<prereq-parrterns>定义成“%.c”，意思是对<target-parrtern>所形成的目标集进行二次定义，其计算方法是，取<target-parrtern>模式中的“%”（也就是去掉了[.o]这个结尾），并为其加上[.c]这个结尾，形成的新集合。</p>\n<p>所以，我们的“目标模式”或是“依赖模式”中都应该有“%”这个字符，如果你的文件名中有“%”那么你可以使用反斜杠“\\”进行转义，来标明真实的“%”字符。</p>\n<p>看一个例子：</p>\n<p>  objects = foo.o bar.o</p>\n<p>  all: $(objects)</p>\n<p>  $(objects): %.o: %.c</p>\n<p>​      $(CC) -c $(CFLAGS) $&lt; -o $@</p>\n<p>上面的例子中，指明了我们的目标从$object中获取，“%.o”表明要所有以“.o”结尾的目标，也就是“foo.o bar.o”，也就是变量$object集合的模式，而依赖模式“%.c”则取模式“%.o”的“%”，也就是“foobar”，并为其加下“.c”的后缀，于是，我们的依赖目标就是“foo.cbar.c”。而命令中的“$&lt;”和“$@”则是自动化变量，“$&lt;”表示所有的依赖目标集（也就是“foo.c bar.c”），“$@”表示目标集（也褪恰癴oo.o bar.o”）。于是，上面的规则展开后等价于下面的规则：</p>\n<p>  foo.o : foo.c</p>\n<p>​      $(CC) -c $(CFLAGS) foo.c -o foo.o</p>\n<p>  bar.o : bar.c</p>\n<p>​      $(CC) -c $(CFLAGS) bar.c -o bar.o</p>\n<p>试想，如果我们的“%.o”有几百个，那种我们只要用这种很简单的“静态模式规则”就可以写完一堆规则，实在是太有效率了。“静态模式规则”的用法很灵活，如果用得好，那会一个很强大的功能。再看一个例子：</p>\n<p>  files = foo.elc bar.o lose.o</p>\n<p>  $(filter %.o,$(files)): %.o: %.c</p>\n<p>​      $(CC) -c $(CFLAGS) $&lt; -o $@</p>\n<p>  $(filter %.elc,$(files)): %.elc: %.el</p>\n<p>​      emacs -f batch-byte-compile $&lt;</p>\n<p>$(filter%.o,$(files))表示调用Makefile的filter函数，过滤“$filter”集，只要其中模式为“%.o”的内容。其的它内容，我就不用多说了吧。这个例字展示了Makefile中更大的弹性。</p>\n<h2 id=\"3-8-自动生成依赖性\"><a href=\"#3-8-自动生成依赖性\" class=\"headerlink\" title=\"\\3.8 自动生成依赖性**\"></a><strong><em>\\</em>3.8 自动生成依赖性**</strong></h2><p>在Makefile中，我们的依赖关系可能会需要包含一系列的头文件，比如，如果我们的main.c中有一句“#include “defs.h””，那么我们的依赖关系应该是：</p>\n<p>  main.o : main.c defs.h</p>\n<p>但是，如果是一个比较大型的工程，你必需清楚哪些C文件包含了哪些头文件，并且，你在加入或删除头文件时，也需要小心地修改Makefile，这是一个很没有维护性的工作。为了避免这种繁重而又容易出错的事情，我们可以使用C/C++编译的一个功能。大多数的C/C++编译器都支持一个“-M”的选项，即自动找寻源文件中包含的头文件，并生成一个依赖关系。例如，如果我们执行下面的命令：</p>\n<p>  cc -M main.c</p>\n<p>其输出是：</p>\n<p>  main.o : main.c defs.h</p>\n<p>于是由编译器自动生成的依赖关系，这样一来，你就不必再手动书写若干文件的依赖关系，而由编译器自动生成了。需要提醒一句的是，如果你使用GNU的C/C++编译器，你得用“-MM”参数，不然，“-M”参数会把一些标准库的头文件也包含进来。</p>\n<p>gcc-M main.c的输出是：</p>\n<p>  main.o: main.c defs.h /usr/include/stdio.h /usr/include/features.h \\</p>\n<p>​    /usr/include/sys/cdefs.h /usr/include/gnu/stubs.h \\</p>\n<p>​    /usr/lib/gcc-lib/i486-suse-linux/2.95.3/include/stddef.h \\</p>\n<p>​    /usr/include/bits/types.h /usr/include/bits/pthreadtypes.h \\</p>\n<p>​    /usr/include/bits/sched.h /usr/include/libio.h \\</p>\n<p>​    /usr/include/<em>G</em>config.h /usr/include/wchar.h \\</p>\n<p>​    /usr/include/bits/wchar.h /usr/include/gconv.h \\</p>\n<p>​    /usr/lib/gcc-lib/i486-suse-linux/2.95.3/include/stdarg.h \\</p>\n<p>​    /usr/include/bits/stdio_lim.h</p>\n<p>gcc-MM main.c的输出则是：</p>\n<p>  main.o: main.c defs.h</p>\n<p>那么，编译器的这个功能如何与我们的Makefile联系在一起呢。因为这样一来，我们的Makefile也要根据这些源文件重新生成，让Makefile自已依赖于源文件？这个功能并不现实，不过我们可以有其它手段来迂回地实现这一功能。GNU组织建议把编译器为每一个源文件的自动生成的依赖关系放到一个文件中，为每一个“name.c”的文件都生成一个“name.d”的Makefile文件，[.d]文件中就存放对应[.c]文件的依赖关系。</p>\n<p>于是，我们可以写出[.c]文件和[.d]文件的依赖关系，并让make自动更新或自成[.d]文件，并把其包含在我们的主Makefile中，这样，我们就可以自动化地生成每个文件的依赖关系了。</p>\n<p>这里，我们给出了一个模式规则来产生[.d]文件：</p>\n<p>  %.d: %.c</p>\n<p>​      @set -e; rm -f $@; \\</p>\n<p>​      $(CC) -M $(CPPFLAGS) $&lt; &gt; $@.</p>\n<p>; \\</p>\n<p>​      sed ‘s,</p>\n<p>.o[ :]*,\\1.o $@ : ,g’ &lt; $@.</p>\n<p>&gt; $@; \\</p>\n<p>​      rm -f $@.</p>\n<p>这个规则的意思是，所有的[.d]文件依赖于[.c]文件，“rm-f $@”的意思是删除所有的目标，也就是[.d]文件，第二行的意思是，为每个依赖文件“$&lt;”，也就是[.c]文件生成依赖文件，“$@”表示模式“%.d”文件，如果有一个C文件是name.c，那么“%”就是“name”，“</p>\n<p>”意为一个随机编号，第二行生成的文件有可能是“name.d.12345”，第三行使用sed命令做了一个替换，关于sed命令的用法请参看相关的使用文档。第四行就是删除临时文件。</p>\n<p>总而言之，这个模式要做的事就是在编译器生成的依赖关系中加入[.d]文件的依赖，即把依赖关系：</p>\n<p>  main.o : main.c defs.h</p>\n<p>转成：</p>\n<p>  main.o main.d : main.c defs.h</p>\n<p>于是，我们的[.d]文件也会自动更新了，并会自动生成了，当然，你还可以在这个[.d]文件中加入的不只是依赖关系，包括生成的命令也可一并加入，让每个[.d]文件都包含一个完赖的规则。一旦我们完成这个工作，接下来，我们就要把这些自动生成的规则放进我们的主Makefile中。我们可以使用Makefile的“include”命令，来引入别的Makefile文件（前面讲过），例如：</p>\n<p>  sources = foo.c bar.c</p>\n<p>  include $(sources:.c=.d)</p>\n<p>上述语句中的“$(sources:.c=.d)”中的“.c=.d”的意思是做一个替换，把变量$(sources)所有[.c]的字串都替换成[.d]，关于这个“替换”的内容，在后面我会有更为详细的讲述。当然，你得注意次序，因为include是按次来载入文件，最先载入的[.d]文件中的目标会成为默认目标</p>\n<h1 id=\"4-Makefile-书写命令\"><a href=\"#4-Makefile-书写命令\" class=\"headerlink\" title=\"\\4 Makefile 书写命令**\"></a><strong><em>\\</em>4 Makefile 书写命令**</strong></h1><p>   每条规则中的命令和操作系统Shell的命令行是一致的。make会一按顺序一条一条的执行命令，每条命令的开头必须以[Tab]键开头，除非，命令是紧跟在依赖规则后面的分号后的。在命令行之间中的空格或是空行会被忽略，但是如果该空格或空行是以Tab键开头的，那么make会认为其是一个空命令。</p>\n<p>我们在UNIX下可能会使用不同的Shell，但是make的命令默认是被“/bin/sh”——UNIX的标准Shell解释执行的。除非你特别指定一个其它的Shell。Makefile中，“#”是注释符，很像C/C++中的“//”，其后的本行字符都被注释。</p>\n<h2 id=\"4-1-显示命令\"><a href=\"#4-1-显示命令\" class=\"headerlink\" title=\"\\4.1 显示命令**\"></a><strong><em>\\</em>4.1 显示命令**</strong></h2><p>通常，make会把其要执行的命令行在命令执行前输出到屏幕上。当我们用“@”字符在命令行前，那么，这个命令将不被make显示出来，最具代表性的例子是，我们用这个功能来像屏幕显示一些信息。如：</p>\n<p>  @echo 正在编译XXX模块……</p>\n<p>当make执行时，会输出“正在编译XXX模块……”字串，但不会输出命令，如果没有“@”，那么，make将输出：</p>\n<p>  echo 正在编译XXX模块……</p>\n<p>  正在编译XXX模块……</p>\n<p>如果make执行时，带入make参数“-n”或“–just-print”，那么其只是显示命令，但不会执行命令，这个功能很有利于我们调试我们的Makefile，看看我们书写的命令是执行起来是什么样子的或是什么顺序的。</p>\n<p>而make参数“-s”或“–slient”则是全面禁止命令的显示。</p>\n<h2 id=\"4-2-命令执行\"><a href=\"#4-2-命令执行\" class=\"headerlink\" title=\"\\4.2 命令执行**\"></a><strong><em>\\</em>4.2 命令执行**</strong></h2><p>当依赖目标新于目标时，也就是当规则的目标需要被更新时，make会一条一条的执行其后的命令。需要注意的是，如果你要让上一条命令的结果应用在下一条命令时，你应该使用分号分隔这两条命令。比如你的第一条命令是cd命令，你希望第二条命令得在cd之后的基础上运行，那么你就不能把这两条命令写在两行上，而应该把这两条命令写在一行上，用分号分隔。如：</p>\n<p>  示例一：</p>\n<p>​    exec:</p>\n<p>​        cd /home/hchen</p>\n<p>​        pwd</p>\n<p>  示例二：</p>\n<p>​    exec:</p>\n<p>​        cd /home/hchen; pwd</p>\n<p>当我们执行“make exec”时，第一个例子中的cd没有作用，pwd会打印出当前的Makefile目录，而第二个例子中，cd就起作用了，pwd会打印出“/home/hchen”。</p>\n<p>make一般是使用环境变量SHELL中所定义的系统Shell来执行命令，默认情况下使用UNIX的标准Shell——/bin/sh来执行命令。但在MS-DOS下有点特殊，因为MS-DOS下没有SHELL环境变量，当然你也可以指定。如果你指定了UNIX风格的目录形式，首先，make会在SHELL所指定的路径中找寻命令解释器，如果找不到，其会在当前盘符中的当前目录中寻找，如果再找不到，其会在PATH环境变量中所定义的所有路径中寻找。MS-DOS中，如果你定义的命令解释器没有找到，其会给你的命令解释器加上诸如“.exe”、“.com”、“.bat”、“.sh”等后缀。</p>\n<h2 id=\"4-3-命令出错\"><a href=\"#4-3-命令出错\" class=\"headerlink\" title=\"\\4.3 命令出错**\"></a><strong><em>\\</em>4.3 命令出错**</strong></h2><p>   每当命令运行完后，make会检测每个命令的返回码，如果命令返回成功，那么make会执行下一条命令，当规则中所有的命令成功返回后，这个规则就算是成功完成了。如果一个规则中的某个命令出错了（命令退出码非零），那么make就会终止执行当前规则，这将有可能终止所有规则的执行。</p>\n<p>有些时候，命令的出错并不表示就是错误的。例如mkdir命令，我们一定需要建立一个目录，如果目录不存在，那么mkdir就成功执行，万事大吉，如果目录存在，那么就出错了。我们之所以使用mkdir的意思就是一定要有这样的一个目录，于是我们就不希望mkdir出错而终止规则的运行。</p>\n<p>为了做到这一点，忽略命令的出错，我们可以在Makefile的命令行前加一个减号“-”（在Tab键之后），标记为不管命令出不出错都认为是成功的。如：</p>\n<p> clean:</p>\n<p>​      -rm -f *.o</p>\n<p>还有一个全局的办法是，给make加上“-i”或是“–ignore-errors”参数，那么，Makefile中所有命令都会忽略错误。而如果一个规则是以“.IGNORE”作为目标的，那么这个规则中的所有命令将会忽略错误。这些是不同级别的防止命令出错的方法，你可以根据你的不同喜欢设置。</p>\n<p>还有一个要提一下的make的参数的是“-k”或是“–keep-going”，这个参数的意思是，如果某规则中的命令出错了，那么就终目该规则的执行，但继续执行其它规则。</p>\n<h2 id=\"4-4-嵌套执行make\"><a href=\"#4-4-嵌套执行make\" class=\"headerlink\" title=\"4.4 嵌套执行make\"></a><strong>4.4 嵌套执行make</strong></h2><p>​    在一些大的工程中，我们会把我们不同模块或是不同功能的源文件放在不同的目录中，我们可以在每个目录中都书写一个该目录的Makefile，这有利于让我们的Makefile变得更加地简洁，而不至于把所有的东西全部写在一个Makefile中，这样会很难维护我们的Makefile，这个技术对于我们模块编译和分段编译有着非常大的好处。<br>   例如，我们有一个子目录叫subdir，这个目录下有个Makefile文件，来指明了这个目录下文件的编译规则。那么我们总控的Makefile可以这样书写：</p>\n<p>  subsystem:</p>\n<p>​      cd subdir &amp;&amp; $(MAKE)</p>\n<p>其等价于：</p>\n<p>   subsystem:</p>\n<p>​      $(MAKE) -C subdir</p>\n<p>定义$(MAKE)宏变量的意思是，也许我们的make需要一些参数，所以定义成一个变量比较利于维护。这两个例子的意思都是先进入“subdir”目录，然后执行make命令。</p>\n<p>我们把这个Makefile叫做“总控Makefile”，总控Makefile的变量可以传递到下级的Makefile中（如果你显示的声明），但是不会覆盖下层的Makefile中所定义的变量，除非指定了“-e”参数。</p>\n<p>如果你要传递变量到下级Makefile中，那么你可以使用这样的声明：</p>\n<p>export&lt;variable …&gt;</p>\n<p>如果你不想让某些变量传递到下级Makefile中，那么你可以这样声明：</p>\n<p>unexport&lt;variable …&gt;</p>\n<p>如：</p>\n<p>​    示例一：</p>\n<p>​     export variable = value</p>\n<p>​<br> 其等价于：</p>\n<p>​     variable = value</p>\n<p>​    export variable</p>\n<p>​    其等价于：</p>\n<p>​     export variable := value</p>\n<p>​     其等价于：</p>\n<p>​    variable := value</p>\n<p>​    export variable</p>\n<p>  示例二：</p>\n<p>​    export variable += value</p>\n<p>​    其等价于：</p>\n<p>​    variable += value</p>\n<p>​    export variable</p>\n<p>   如果你要传递所有的变量，那么，只要一个export就行了。后面什么也不用跟，表示传递所有的变量。</p>\n<p>需要注意的是，有两个变量，一个是SHELL，一个是MAKEFLAGS，这两个变量不管你是否export，其总是要传递到下层Makefile中，特别是MAKEFILES变量，其中包含了make的参数信息，如果我们执行“总控Makefile”时有make参数或是在上层Makefile中定义了这个变量，那么MAKEFILES变量将会是这些参数，并会传递到下层Makefile中，这是一个系统级的环境变量。</p>\n<p>但是make命令中的有几个参数并不往下传递，它们是“-C”,“-f”,“-h”“-o”和“-W”（有关Makefile参数的细节将在后面说明），如果你不想往下层传递参数，那么，你可以这样来：</p>\n<p>  subsystem:</p>\n<p>​      cd subdir &amp;&amp; $(MAKE) MAKEFLAGS=</p>\n<p>如果你定义了环境变量MAKEFLAGS，那么你得确信其中的选项是大家都会用到的，如果其中有“-t”,“-n”,和“-q”参数，那么将会有让你意想不到的结果，或许会让你异常地恐慌。</p>\n<p>还有一个在“嵌套执行”中比较有用的参数，“-w”或是“–print-directory”会在make的过程中输出一些信息，让你看到目前的工作目录。比如，如果我们的下级make目录是“/home/hchen/gnu/make”，如果我们使用“make -w”来执行，那么当进入该目录时，我们会看到：</p>\n<p>​    make: Entering directory `/home/hchen/gnu/make’.</p>\n<p>而在完成下层make后离开目录时，我们会看到：  </p>\n<p>  make: Leaving directory `/home/hchen/gnu/make’</p>\n<p>当你使用“-C”参数来指定make下层Makefile时，“-w”会被自动打开的。如果参数中有“-s”（“–slient”）或是“–no-print-directory”，那么，“-w”总是失效的。</p>\n<h2 id=\"4-5-定义命令包\"><a href=\"#4-5-定义命令包\" class=\"headerlink\" title=\"\\4.5 定义命令包**\"></a><strong><em>\\</em>4.5 定义命令包**</strong></h2><p>如果Makefile中出现一些相同命令序列，那么我们可以为这些相同的命令序列定义一个变量。定义这种命令序列的语法以“define”开始，以“endef”结束，如：</p>\n<p>  define run-yacc</p>\n<p>  yacc $(firstword $^)</p>\n<p>  mv y.tab.c $@</p>\n<p>  endef</p>\n<p>这里，“run-yacc”是这个命令包的名字，其不要和Makefile中的变量重名。在“define”和“endef”中的两行就是命令序列。这个命令包中的第一个命令是运行Yacc程序，因为Yacc程序总是生成“y.tab.c”的文件，所以第二行的命令就是把这个文件改改名字。还是把这个命令包放到一个示例中来看看吧。</p>\n<p>  foo.c : foo.y</p>\n<p>​      $(run-yacc)</p>\n<p>我们可以看见，要使用这个命令包，我们就好像使用变量一样。在这个命令包的使用中，命令包“run-yacc”中的“$^”就是“foo.y”，“$@”就是“foo.c”（有关这种以“$”开头的特殊变量，我们会在后面介绍），make在执行命令包时，命令包中的每个命令会被依次独立执行。</p>\n<h1 id=\"使用变量\"><a href=\"#使用变量\" class=\"headerlink\" title=\"\\使用变量**\"></a><strong><em>\\</em>使用变量**</strong></h1><p>————</p>\n<p>​    在 Makefile中的定义的变量，就像是C/C++语言中的宏一样，他代表了一个文本字串，在Makefile中执行的时候其会自动原模原样地展开在所使用的地方。其与C/C++所不同的是，你可以在Makefile中改变其值。在Makefile中，变量可以使用在“目标”，“依赖目标”，“命令”或是 Makefile的其它部分中。变量的命名字可以包含字符、数字，下划线（可以是数字开头），但不应该含有“:”、“#”、“=”或是空字符（空格、回车等）。变量是大小写敏感的，“foo”、“Foo”和“FOO”是三个不同的变量名。传统的Makefile的变量名是全大写的命名方式，但我推荐使用大小写搭配的变量名，如：MakeFlags。这样可以避免和系统的变量冲突，而发生意外的事情。有一些变量是很奇怪字串，如“$&lt;”、“$@”等，这些是自动化变量，我会在后面介绍。</p>\n<h2 id=\"一、变量的基础\"><a href=\"#一、变量的基础\" class=\"headerlink\" title=\"一、变量的基础\"></a>一、变量的基础</h2><p>  变量在声明时需要给予初值，而在使用时，需要给在变量名前 <strong><em>\\</em>加上“$”符号，但最好用小括号“（）”或是大括号“{}”把变量给包括起来**</strong>。如果你要使用真实的“$”字符，那么你需要用“$$”来表示。变量可以使用在许多地方，如规则中的“目标”、“依赖”、“命令”以及新的变量中。</p>\n<p>先看一个例子：</p>\n<p>objects = program.o foo.o utils.o<br>program : $(objects)<br>cc -o program $(objects)</p>\n<p>$(objects) : defs.h</p>\n<p>变量会在使用它的地方精确地展开，就像C/C++中的宏一样，例如：</p>\n<p>foo = c<br>prog.o : prog.$(foo)<br>$(foo)$(foo) -$(foo) prog.$(foo)</p>\n<p>展开后得到：</p>\n<p>prog.o : prog.c<br>cc -c prog.c</p>\n<p>当然，千万不要在你的Makefile中这样干，这里只是举个例子来表明Makefile中的变量在使用处展开的真实样子。可见其就是一个“替代”的原理。另外，给变量加上括号完全是为了更加安全地使用这个变量，在上面的例子中，如果你不想给变量加上括号，那也可以，但我还是强烈建议你给变量加上括号。</p>\n<h2 id=\"二、变量中的变量\"><a href=\"#二、变量中的变量\" class=\"headerlink\" title=\"\\二、变量中的变量**\"></a><strong><em>\\</em>二、变量中的变量**</strong></h2><p>在定义变量的值时，我们可以使用其它变量来构造变量的值，在Makefile中有两种方式来在用变量定义变量的值。</p>\n<p>先看第一种方式，也就是简单的使用“=”号，在“=”左侧是变量，右侧是变量的值，右侧变量的值可以定义在文件的任何一处，也就是说，右侧中的变量不一定非要是已定义好<br>的值，其也可以使用后面定义的值。如：</p>\n<p>foo = $(bar)<br>bar = $(ugh)<br>ugh = Huh?</p>\n<p>all:<br>echo $(foo)</p>\n<p>我们执行“make all”将会打出变量$(foo)的值是“Huh?”（ $(foo)的值是$(bar)，$(bar)的值是$(ugh)，$(ugh)的值是“Huh?”）可见，变量是可以使用后面的变量来定义的。<br>这个功能有好的地方，也有不好的地方，好的地方是，我们可以把变量的真实值推到后面来定义，如：</p>\n<p>CFLAGS = $(include_dirs) -O<br>include_dirs = -Ifoo -Ibar</p>\n<p>当“CFLAGS”在命令中被展开时，会是“-Ifoo -Ibar -O”。但这种形式也有不好的地方<br>，那就是递归定义，如：</p>\n<p>CFLAGS = $(CFLAGS) -O</p>\n<p>或：</p>\n<p>A = $(B)<br>B = $(A)</p>\n<p>这会让make陷入无限的变量展开过程中去，当然，我们的make是有能力检测这样的定义，并会报错。还有就是如果在变量中使用函数，那么，这种方式会让我们的make运行时非常慢，更糟糕的是，他会使用得两个make的函数“wildcard”和“shell”发生不可预知的错误。因为你不会知道这两个函数会被调用多少次。</p>\n<p>为了避免上面的这种方法，我们可以使用make中的另一种用变量来定义变量的方法。这种方法使用的是“:=”操作符，如：</p>\n<p>x := foo<br>y := $(x) bar<br>x := later</p>\n<p>其等价于：</p>\n<p>y := foo bar<br>x := later</p>\n<p>值得一提的是，这种方法，前面的变量不能使用后面的变量，只能使用前面已定义好了的变量。如果是这样：</p>\n<p>y := $(x) bar<br>x := foo</p>\n<p>那么，y的值是“bar”，而不是“foo bar”。</p>\n<p>上面都是一些比较简单的变量使用了，让我们来看一个复杂的例子，其中包括了make的函数、条件表达式和一个系统变量“MAKELEVEL”的使用：</p>\n<p>ifeq (0,${MAKELEVEL})<br>cur-dir := $(shell pwd)<br>whoami := $(shell whoami)<br>host-type := $(shell arch)<br>MAKE := ${MAKE} host-type=${host-type} whoami=${whoami}<br>endif</p>\n<p>关于条件表达式和函数，我们在后面再说，对于系统变量“MAKELEVEL”，其意思是，如果我们的make有一个嵌套执行的动作（参见前面的“嵌套使用make”），那么，这个变量会记录了我们的当前Makefile的调用层数。</p>\n<p>下面再介绍两个定义变量时我们需要知道的，请先看一个例子，如果我们要定义一个变量，其值是一个空格，那么我们可以这样来：</p>\n<p>nullstring :=<br>space := $(nullstring) # end of the line</p>\n<p>nullstring 是一个Empty变量，其中什么也没有，而我们的space的值是一个空格。因为在操作符的右边是很难描述一个空格的，这里采用的技术很管用，先用一个 Empty变量来标明变量的值开始了，而后面采用“#”注释符来表示变量定义的终止，这样，我们可以定义出其值是一个空格的变量。请注意这里关于“#”的使用，注释符“#”的这种特性值得我们注意，如果我们这样定义一个变量：</p>\n<p>dir := /foo/bar # directory to put the frobs in</p>\n<p>dir这个变量的值是“/foo/bar”，后面还跟了4个空格，如果我们这样使用这样变量来指定别的目录——“$(dir)/file”那么就完蛋了。</p>\n<p>还有一个比较有用的操作符是“?=”，先看示例：</p>\n<p>FOO ?= bar</p>\n<p>其含义是，如果FOO没有被定义过，那么变量FOO的值就是“bar”，如果FOO先前被定义过，那么这条语将什么也不做，其等价于：</p>\n<p>ifeq ($(origin FOO), undefined)<br>FOO = bar<br>endif</p>\n<h2 id=\"三、变量高级用法\"><a href=\"#三、变量高级用法\" class=\"headerlink\" title=\"三、变量高级用法\"></a><strong>三、变量高级用法</strong></h2><p>这里介绍两种变量的高级使用方法，第一种是变量值的替换。</p>\n<p>我们可以替换变量中的共有的部分，其格式是“$(var:a=b)”或是“${var:a=b}”，其意思是，把变量“var”中所有以“a”字串“结尾”的“a”替换成“b”字串。这里的“结尾”意思是“空格”或是“结束符”。</p>\n<p>还是看一个示例吧：</p>\n<p>foo := a.o b.o c.o<br>bar := $(foo:.o=.c)</p>\n<p>这个示例中，我们先定义了一个“$(foo)”变量，而第二行的意思是把“$(foo)”中所有以“.o”字串“结尾”全部替换成“.c”，所以我们的“$(bar)”的值就是“a.c b.c c.c”。</p>\n<p>另外一种变量替换的技术是以“静态模式”（参见前面章节）定义的，如：</p>\n<p>foo := a.o b.o c.o<br>bar := $(foo:%.o=%.c)</p>\n<p>这依赖于被替换字串中的有相同的模式，模式中必须包含一个“%”字符，这个例子同样让$(bar)变量的值为“a.c b.c c.c”。</p>\n<p>第二种高级用法是——“把变量的值再当成变量”。先看一个例子：</p>\n<p>x = y<br>y = z<br>a := $($(x))</p>\n<p>在这个例子中，$(x)的值是“y”，所以$($(x))就是$(y)，于是$(a)的值就是“z”。（注意，是“x=y”，而不是“x=$(y)”）</p>\n<p>我们还可以使用更多的层次：</p>\n<p>x = y<br>y = z<br>z = u<br>a := $($($(x)))</p>\n<p>这里的$(a)的值是“u”，相关的推导留给读者自己去做吧。</p>\n<p>让我们再复杂一点，使用上“在变量定义中使用变量”的第一个方式，来看一个例子：</p>\n<p>x = $(y)<br>y = z<br>z = Hello<br>a := $($(x))</p>\n<p>这里的$($(x))被替换成了$($(y))，因为$(y)值是“z”，所以，最终结果是：a:=$(z)，也就是“Hello”。</p>\n<p>再复杂一点，我们再加上函数：</p>\n<p>x = variable1<br>variable2 := Hello<br>y = $(subst 1,2,$(x))<br>z = y<br>a := $($($(z)))</p>\n<p>这个例子中，“$($($(z)))”扩展为“$($(y))”，而其再次被扩展为“$($(subst 1,2,$(x)))”。$(x)的值是“variable1”，subst函数把“variable1”中的所有“1”字串替换成“2”字串，于是，“variable1”变成“variable2”，再取其值，所以，最终，$(a)的值就是$(variable2)的值—— “Hello”。（喔，好不容易）</p>\n<p>在这种方式中，或要可以使用多个变量来组成一个变量的名字，然后再取其值：</p>\n<p>first_second = Hello<br>a = first<br>b = second<br>all = $($a_$b)</p>\n<p>这里的“$a_$b”组成了“first_second”，于是，$(all)的值就是“Hello”。</p>\n<p>再来看看结合第一种技术的例子：</p>\n<p>a_objects := a.o b.o c.o<br>1_objects := 1.o 2.o 3.o</p>\n<p>sources := $($(a1)_objects:.o=.c)</p>\n<p>这个例子中，如果$(a1)的值是“a”的话，那么，$(sources)的值就是“a.c b.c c.c”；如果$(a1)的值是“1”，那么$(sources)的值是“1.c 2.c 3.c”。</p>\n<p>再来看一个这种技术和“函数”与“条件语句”一同使用的例子：</p>\n<p>ifdef do_sort<br>func := sort<br>else<br>func := strip<br>endif</p>\n<p>bar := a d b g q c</p>\n<p>foo := $($(func) $(bar))</p>\n<p>这个示例中，如果定义了“do_sort”，那么：foo := $(sort a d b g q c)，于是$(foo)的值就是“a b c d g q”，而如果没有定义“do_sort”，那么：foo := $(sort a d bg q c)，调用的就是strip函数。</p>\n<p>当然，“把变量的值再当成变量”这种技术，同样可以用在操作符的左边：</p>\n<p>dir = foo<br>$(dir)_sources := $(wildcard $(dir)/*.c)<br>define $(dir)_print<br>lpr $($(dir)_sources)<br>endef</p>\n<p>这个例子中定义了三个变量：“dir”，“foo_sources”和“foo_print”。</p>\n<p>**<br>**</p>\n<h2 id=\"四、追加变量值\"><a href=\"#四、追加变量值\" class=\"headerlink\" title=\"\\四、追加变量值**\"></a><strong><em>\\</em>四、追加变量值**</strong></h2><p>我们可以使用“+=”操作符给变量追加值，如：</p>\n<p>objects = main.o foo.o bar.o utils.o<br>objects += another.o</p>\n<p>于是，我们的$(objects)值变成：“main.o foo.o bar.o utils.o another.o”（another.o被追加进去了）</p>\n<p>使用“+=”操作符，可以模拟为下面的这种例子：</p>\n<p>objects = main.o foo.o bar.o utils.o<br>objects := $(objects) another.o</p>\n<p>所不同的是，用“+=”更为简洁。</p>\n<p>如果变量之前没有定义过，那么，“+=”会自动变成“=”，如果前面有变量定义，那么“+=”会继承于前次操作的赋值符。如果前一次的是“:=”，那么“+=”会以“:=”作为其赋值符，如：</p>\n<p>variable := value<br>variable += more</p>\n<p>等价于：</p>\n<p>variable := value<br>variable := $(variable) more</p>\n<p>但如果是这种情况：</p>\n<p>variable = value<br>variable += more</p>\n<p>由于前次的赋值符是“=”，所以“+=”也会以“=”来做为赋值，那么岂不会发生变量的递补归定义，这是很不好的，所以make会自动为我们解决这个问题，我们不必担心这个问题。</p>\n<h2 id=\"五、override-指示符\"><a href=\"#五、override-指示符\" class=\"headerlink\" title=\"\\五、override 指示符**\"></a><strong><em>\\</em>五、override 指示符**</strong></h2><p>如果有变量是通常make的命令行参数设置的，那么Makefile中对这个变量的赋值会被忽略。如果你想在Makefile中设置这类参数的值，那么，你可以使用“override”指示符。其语法是：</p>\n<p>override <variable> = <value><br>override <variable> := <value></p>\n<p>当然，你还可以追加：</p>\n<p>override <variable> += <more text></p>\n<p>对于多行的变量定义，我们用define指示符，在define指示符前，也同样可以使用ovveride指示符，如：</p>\n<p>override define foo<br>bar<br>endef</p>\n<h2 id=\"六、多行变量\"><a href=\"#六、多行变量\" class=\"headerlink\" title=\"\\六、多行变量**\"></a><strong><em>\\</em>六、多行变量**</strong></h2><p>还有一种设置变量值的方法是使用define关键字。使用define关键字设置变量的值可以有换行，这有利于定义一系列的命令（前面我们讲过“命令包”的技术就是利用这个关键字）。</p>\n<p>define 指示符后面跟的是变量的名字，而重起一行定义变量的值，定义是以endef关键字结束。其工作方式和“=”操作符一样。变量的值可以包含函数、命令、文字，或是其它变量。因为命令需要以[Tab]键开头，所以如果你用define定义的命令变量中没有以[Tab]键开头，那么make就不会把其认为是命令。</p>\n<p>下面的这个示例展示了define的用法：</p>\n<p>define two-lines<br>echo foo<br>echo $(bar)<br>endef</p>\n<h2 id=\"七、环境变量\"><a href=\"#七、环境变量\" class=\"headerlink\" title=\"\\七、环境变量**\"></a><strong><em>\\</em>七、环境变量**</strong></h2><p>make 运行时的系统环境变量可以在make开始运行时被载入到Makefile文件中，但是如果Makefile中已定义了这个变量，或是这个变量由make命令行带入，那么系统的环境变量的值将被覆盖。（如果make指定了“-e”参数，那么，系统环境变量将覆盖Makefile中定义的变量）</p>\n<p>因此，如果我们在环境变量中设置了“CFLAGS”环境变量，那么我们就可以在所有的Makefile中使用这个变量了。这对于我们使用统一的编译参数有比较大的好处。如果Makefile中定义了CFLAGS，那么则会使用Makefile中的这个变量，如果没有定义则使用系统环境变量的值，一个共性和个性的统一，很像“全局变量”和“局部变量”的特性。   当make嵌套调用时（参见前面的“嵌套调用”章节），上层Makefile中定义的变量会以系统环境变量的方式传递到下层的Makefile中。当然，默认情况下，只有通过命令行设置的变量会被传递。而定义在文件中的变量，如果要向下层 Makefile传递，则需要使用exprot关键字来声明。（参见前面章节）</p>\n<p>  当然，我并不推荐把许多的变量都定义在系统环境中，这样，在我们执行不用的Makefile时，拥有的是同一套系统变量，这可能会带来更多的麻烦。</p>\n<p>**<br>**</p>\n<h2 id=\"八、目标变量\"><a href=\"#八、目标变量\" class=\"headerlink\" title=\"\\八、目标变量**\"></a><strong><em>\\</em>八、目标变量**</strong></h2><p>前面我们所讲的在Makefile中定义的变量都是“全局变量”，在整个文件，我们都可以访问这些变量。当然，“自动化变量”除外，如“$&lt;”等这种类量的自动化变量就属于“规则型变量”，这种变量的值依赖于规则的目标和依赖目标的定义。</p>\n<p>当然，我样同样可以为某个目标设置局部变量，这种变量被称为“Target-specific Variable”，它可以和“全局变量”同名，因为它的作用范围只在这条规则以及连带规则中，所以其值也只在作用范围内有效。而不会影响规则链以外的全局变量的值。</p>\n<p>其语法是：</p>\n<p>&lt;target …&gt; : <variable-assignment></p>\n<p>&lt;target …&gt; : overide <variable-assignment></p>\n<p><variable-assignment>可以是前面讲过的各种赋值表达式，如“=”、“:=”、“+=”或是“？=”。第二个语法是针对于make命令行带入的变量，或是系统环境变量。</p>\n<p>这个特性非常的有用，当我们设置了这样一个变量，这个变量会作用到由这个目标所引发的所有的规则中去。如：</p>\n<p>prog : CFLAGS = -g<br>prog : prog.o foo.o bar.o<br>$(CC) $(CFLAGS) prog.o foo.o bar.o</p>\n<p>prog.o : prog.c<br>$(CC) $(CFLAGS) prog.c</p>\n<p>foo.o : foo.c<br>$(CC) $(CFLAGS) foo.c</p>\n<p>bar.o : bar.c<br>$(CC) $(CFLAGS) bar.c</p>\n<p>在这个示例中，不管全局的$(CFLAGS)的值是什么，在prog目标，以及其所引发的所有规则中（prog.o foo.o bar.o的规则），$(CFLAGS)的值都是“-g”</p>\n<h2 id=\"九、模式变量\"><a href=\"#九、模式变量\" class=\"headerlink\" title=\"九、模式变量\"></a><strong>九、模式变量</strong></h2><p>在GNU的make中，还支持模式变量（Pattern-specific Variable），通过上面的目标变量中，我们知道，变量可以定义在某个目标上。模式变量的好处就是，我们可以给定一种“模式”，可以把变量定义在符合这种模式的所有目标上。</p>\n<p>我们知道，make的“模式”一般是至少含有一个“%”的，所以，我们可以以如下方式给所有以[.o]结尾的目标定义目标变量：</p>\n<p>%.o : CFLAGS = -O</p>\n<p>同样，模式变量的语法和“目标变量”一样：</p>\n<p>&lt;pattern …&gt; : <variable-assignment></p>\n<p>&lt;pattern …&gt; : override <variable-assignment></p>\n<p>override同样是针对于系统环境传入的变量，或是make命令行指定的变量。</p>\n<p>使用条件判断<br>——————</p>\n<p>使用条件判断，可以让make根据运行时的不同情况选择不同的执行分支。条件表达式可以是比较变量的值，或是比较变量和常量的值。</p>\n<p>一、示例</p>\n<p>下面的例子，判断$(CC)变量是否“gcc”，如果是的话，则使用GNU函数编译目标。</p>\n<p>libs_for_gcc = -lgnu<br>normal_libs =</p>\n<p>foo: $(objects)<br>ifeq ($(CC),gcc)<br>$(CC) -o foo $(objects) $(libs_for_gcc)<br>else<br>$(CC) -o foo $(objects) $(normal_libs)<br>endif</p>\n<p>可见，在上面示例的这个规则中，目标“foo”可以根据变量“$(CC)”值来选取不同的函数库来编译程序。</p>\n<p>我们可以从上面的示例中看到三个关键字：ifeq、else和endif。ifeq的意思表示条件语句的开始，并指定一个条件表达式，表达式包含两个参数，以逗号分隔，表达式以圆括号括起。else表示条件表达式为假的情况。endif表示一个条件语句的结束，任何一个条件表达式都应该以endif结束。</p>\n<p>当我们的变量$(CC)值是“gcc”时，目标foo的规则是：</p>\n<p>foo: $(objects)<br>$(CC) -o foo $(objects) $(libs_for_gcc)</p>\n<p>而当我们的变量$(CC)值不是“gcc”时（比如“cc”），目标foo的规则是：</p>\n<p>foo: $(objects)<br>$(CC) -o foo $(objects) $(normal_libs)</p>\n<p>当然，我们还可以把上面的那个例子写得更简洁一些：</p>\n<p>libs_for_gcc = -lgnu<br>normal_libs =</p>\n<p>ifeq ($(CC),gcc)<br>libs=$(libs_for_gcc)<br>else<br>libs=$(normal_libs)<br>endif</p>\n<p>foo: $(objects)<br>$(CC) -o foo $(objects) $(libs)</p>\n<p>二、语法</p>\n<p>条件表达式的语法为：</p>\n<conditional-directive>\n<text-if-true>\nendif\n\n\n<p>以及：</p>\n<conditional-directive>\n<text-if-true>\nelse\n<text-if-false>\nendif\n\n\n<p>其中<conditional-directive>表示条件关键字，如“ifeq”。这个关键字有四个。</p>\n<p>第一个是我们前面所见过的“ifeq”</p>\n<p>ifeq (<arg1>, <arg2> )<br>ifeq ‘<arg1>‘ ‘<arg2>‘<br>ifeq “<arg1>“ “<arg2>“<br>ifeq “<arg1>“ ‘<arg2>‘<br>ifeq ‘<arg1>‘ “<arg2>“</p>\n<p>比较参数“arg1”和“arg2”的值是否相同。当然，参数中我们还可以使用make的函数。如：</p>\n<p>ifeq ($(strip $(foo)),)<br><text-if-empty><br>endif</p>\n<p>这个示例中使用了“strip”函数，如果这个函数的返回值是空（Empty），那么<text-if-empty>就生效。</p>\n<p>第二个条件关键字是“ifneq”。语法是：</p>\n<p>ifneq (<arg1>, <arg2> )<br>ifneq ‘<arg1>‘ ‘<arg2>‘<br>ifneq “<arg1>“ “<arg2>“<br>ifneq “<arg1>“ ‘<arg2>‘<br>ifneq ‘<arg1>‘ “<arg2>“</p>\n<p>其比较参数“arg1”和“arg2”的值是否相同，如果不同，则为真。和“ifeq”类似。</p>\n<p>第三个条件关键字是“ifdef”。语法是：</p>\n<p>ifdef <variable-name></p>\n<p>如果变量<variable-name>的值非空，那到表达式为真。否则，表达式为假。当然，<variable-name>同样可以是一个函数的返回值。注意，ifdef只是测试一个变量是否有值，其并不会把变量扩展到当前位置。还是来看两个例子：</p>\n<p>示例一：<br>bar =<br>foo = $(bar)<br>ifdef foo<br>frobozz = yes<br>else<br>frobozz = no<br>endif</p>\n<p>示例二：<br>foo =<br>ifdef foo<br>frobozz = yes<br>else<br>frobozz = no<br>endif</p>\n<p>第一个例子中，“$(frobozz)”值是“yes”，第二个则是“no”。</p>\n<p>第四个条件关键字是“ifndef”。其语法是：</p>\n<p>ifndef <variable-name></p>\n<p>这个我就不多说了，和“ifdef”是相反的意思。</p>\n<p>在<conditional-directive>这一行上，多余的空格是被允许的，但是不能以[Tab]键做为开始（不然就被认为是命令）。而注释符“#”同样也是安全的。“else”和“endif”也<br>一样，只要不是以[Tab]键开始就行了。</p>\n<p>特别注意的是，make是在读取Makefile时就计算条件表达式的值，并根据条件表达式的值来选择语句，所以，你最好不要把自动化变量（如“$@”等）放入条件表达式中，因为自动化变量是在运行时才有的。</p>\n<p>而且，为了避免混乱，make不允许把整个条件语句分成两部分放在不同的文件中。</p>\n<h1 id=\"使用函数\"><a href=\"#使用函数\" class=\"headerlink\" title=\"使用函数\"></a><strong>使用函数</strong></h1><p><strong>————</strong></p>\n<p>在Makefile中可以使用函数来处理变量，从而让我们的命令或是规则更为的灵活和具有智能。make所支持的函数也不算很多，不过已经足够我们的操作了。函数调用后，函数的返回值可以当做变量来使用。</p>\n<h2 id=\"一、函数的调用语法\"><a href=\"#一、函数的调用语法\" class=\"headerlink\" title=\"一、函数的调用语法\"></a>一、函数的调用语法</h2><p>函数调用，很像变量的使用，也是以“$”来标识的，其语法如下：</p>\n<p>$(<function> <arguments> )</p>\n<p>或是</p>\n<p>${<function> <arguments>}</p>\n<p>这里，<function>就是函数名，make支持的函数不多。<arguments>是函数的参数，参数间以逗号“,”分隔，而函数名和参数之间以“空格”分隔。函数调用以“$”开头，以圆括号或花括号把函数名和参数括起。感觉很像一个变量，是不是？函数中的参数可以使用变量，为了风格的统一，函数和变量的括号最好一样，如使用“$(subst a,b,$(x))”这样的形式，而不是“$(subst a,b,${x})”的形式。因为统一会更清楚，也会减少一些不必要的麻烦。</p>\n<p>还是来看一个示例：</p>\n<p>comma:= ,<br>empty:=<br>space:= $(empty) $(empty)<br>foo:= a b c<br>bar:= $(subst $(space),$(comma),$(foo))</p>\n<p>在这个示例中，$(comma)的值是一个逗号。$(space)使用了$(empty)定义了一个空格，$(foo)的值是“a b c”，$(bar)的定义用，调用了函数“subst”，这是一个替换函数，这个函数有三个参数，第一个参数是被替换字串，第二个参数是替换字串，第三个参数是替换操作作用的字串。这个函数也就是把$(foo)中的空格替换成逗号，所以$(bar)的值是“<br>a,b,c”。<br><strong><em>\\</em><br>**</strong></p>\n<h2 id=\"二、字符串处理函数\"><a href=\"#二、字符串处理函数\" class=\"headerlink\" title=\"\\二、字符串处理函数**\"></a><strong><em>\\</em>二、字符串处理函数**</strong></h2><p>$(subst <from>,<to>,<text> )</p>\n<p>名称：字符串替换函数——subst。<br>功能：把字串<text>中的<from>字符串替换成<to>。<br>返回：函数返回被替换过后的字符串。</p>\n<p>示例：</p>\n<p>$(subst ee,EE,feet on the street)，</p>\n<p>把“feet on the street”中的“ee”替换成“EE”，返回结果是“fEEt on the strEEt<br>”。</p>\n<p>$(patsubst <pattern>,<replacement>,<text> )</p>\n<p>名称：模式字符串替换函数——patsubst。<br>功能：查找<text>中的单词（单词以“空格”、“Tab”或“回车”“换行”分隔）是否符合模式<pattern>，如果匹配的话，则以<replacement>替换。这里，<pattern>可以包括通配符“%”，表示任意长度的字串。如果<replacement>中也包含“%”，那么，<replacement>中的这个“%”将是<pattern>中的那个“%”所代表的字串。（可以用“\\”来转义，以“%”来表示真实含义的“%”字符）返回：函数返回被替换过后的字符串。</p>\n<p>示例：</p>\n<p>$(patsubst %.c,%.o,x.c.c bar.c)</p>\n<p>把字串“x.c.c bar.c”符合模式[%.c]的单词替换成[%.o]，返回结果是“x.c.o bar.o”</p>\n<p>备注：</p>\n<p>这和我们前面“变量章节”说过的相关知识有点相似。如：</p>\n<p>“$(var:<pattern>=<replacement> )”<br>相当于<br>“$(patsubst <pattern>,<replacement>,$(var))”，</p>\n<p>而“$(var: <suffix>=<replacement> )”<br>则相当于<br>“$(patsubst %<suffix>,%<replacement>,$(var))”。</p>\n<p>例如有：objects = foo.o bar.o baz.o，<br>那么，“$(objects:.o=.c)”和“$(patsubst %.o,%.c,$(objects))”是一样的。</p>\n<p>$(strip <string> )</p>\n<p>名称：去空格函数——strip。<br>功能：去掉<string>字串中开头和结尾的空字符。<br>返回：返回被去掉空格的字符串值。<br>示例：</p>\n<p>$(strip a b c )</p>\n<p>把字串“a b c ”去到开头和结尾的空格，结果是“a b c”。</p>\n<p>$(findstring <find>,<in> )</p>\n<p>名称：查找字符串函数——findstring。<br>功能：在字串<in>中查找<find>字串。<br>返回：如果找到，那么返回<find>，否则返回空字符串。<br>示例：</p>\n<p>$(findstring a,a b c)<br>$(findstring a,b c)</p>\n<p>第一个函数返回“a”字符串，第二个返回“”字符串（空字符串）</p>\n<p>$(filter &lt;pattern…&gt;,<text> )</p>\n<p>名称：过滤函数——filter。<br>功能：以<pattern>模式过滤<text>字符串中的单词，保留符合模式<pattern>的单词。可<br>以有多个模式。<br>返回：返回符合模式<pattern>的字串。<br>示例：</p>\n<p>sources := foo.c bar.c baz.s ugh.h<br>foo: $(sources)<br>cc $(filter %.c %.s,$(sources)) -o foo</p>\n<p>$(filter %.c %.s,$(sources))返回的值是“foo.c bar.c baz.s”。</p>\n<p>$(filter-out &lt;pattern…&gt;,<text> )</p>\n<p>名称：反过滤函数——filter-out。<br>功能：以<pattern>模式过滤<text>字符串中的单词，去除符合模式<pattern>的单词。可<br>以有多个模式。<br>返回：返回不符合模式<pattern>的字串。<br>示例：</p>\n<p>objects=main1.o foo.o main2.o bar.o<br>mains=main1.o main2.o</p>\n<p>$(filter-out $(mains),$(objects)) 返回值是“foo.o bar.o”。</p>\n<p>$(sort <list> )</p>\n<p>名称：排序函数——sort。<br>功能：给字符串<list>中的单词排序（升序）。<br>返回：返回排序后的字符串。<br>示例：$(sort foo bar lose)返回“bar foo lose” 。<br>备注：sort函数会去掉<list>中相同的单词。</p>\n<p>$(word <n>,<text> )</p>\n<p>名称：取单词函数——word。<br>功能：取字符串<text>中第<n>个单词。（从一开始）<br>返回：返回字符串<text>中第<n>个单词。如果<n>比<text>中的单词数要大，那么返回空<br>字符串。<br>示例：$(word 2, foo bar baz)返回值是“bar”。</p>\n<p>$(wordlist <s>,<e>,<text> )</p>\n<p>名称：取单词串函数——wordlist。<br>功能：从字符串<text>中取从<s>开始到<e>的单词串。<s>和<e>是一个数字。<br>返回：返回字符串<text>中从<s>到<e>的单词字串。如果<s>比<text>中的单词数要大，那<br>么返回空字符串。如果<e>大于<text>的单词数，那么返回从<s>开始，到<text>结束的单<br>词串。<br>示例： $(wordlist 2, 3, foo bar baz)返回值是“bar baz”。</p>\n<p>$(words <text> )</p>\n<p>名称：单词个数统计函数——words。<br>功能：统计<text>中字符串中的单词个数。<br>返回：返回<text>中的单词数。<br>示例：$(words, foo bar baz)返回值是“3”。<br>备注：如果我们要取<text>中最后的一个单词，我们可以这样：$(word $(words <text><br>),<text> )。</p>\n<p>$(firstword <text> )</p>\n<p>名称：首单词函数——firstword。<br>功能：取字符串<text>中的第一个单词。<br>返回：返回字符串<text>的第一个单词。<br>示例：$(firstword foo bar)返回值是“foo”。<br>备注：这个函数可以用word函数来实现：$(word 1,<text> )。</p>\n<p>以上，是所有的字符串操作函数，如果搭配混合使用，可以完成比较复杂的功能。这里，<br>举一个现实中应用的例子。我们知道，make使用“VPATH”变量来指定“依赖文件”的搜索<br>路径。于是，我们可以利用这个搜索路径来指定编译器对头文件的搜索路径参数CFLAGS，<br>如：</p>\n<p>override CFLAGS += $(patsubst %,-I%,$(subst :, ,$(VPATH)))</p>\n<p>如果我们的“$(VPATH)”值是“src:../headers”，那么“$(patsubst %,-I%,$(subst :<br>, ,$(VPATH)))”将返回“-Isrc -I../headers”，这正是cc或gcc搜索头文件路径的参数<br>。</p>\n<h2 id=\"三、文件名操作函数\"><a href=\"#三、文件名操作函数\" class=\"headerlink\" title=\"\\三、文件名操作函数**\"></a><strong><em>\\</em>三、文件名操作函数**</strong></h2><p>下面我们要介绍的函数主要是处理文件名的。每个函数的参数字符串都会被当做一个或是<br>一系列的文件名来对待。</p>\n<p>$(dir &lt;names…&gt; )</p>\n<p>名称：取目录函数——dir。<br>功能：从文件名序列<names>中取出目录部分。目录部分是指最后一个反斜杠（“/”）之<br>前的部分。如果没有反斜杠，那么返回“./”。<br>返回：返回文件名序列<names>的目录部分。<br>示例： $(dir src/foo.c hacks)返回值是“src/ ./”。</p>\n<p>$(notdir &lt;names…&gt; )</p>\n<p>名称：取文件函数——notdir。<br>功能：从文件名序列<names>中取出非目录部分。非目录部分是指最后一个反斜杠（“/”<br>）之后的部分。<br>返回：返回文件名序列<names>的非目录部分。<br>示例： $(notdir src/foo.c hacks)返回值是“foo.c hacks”。</p>\n<p>$(suffix &lt;names…&gt; )</p>\n<p>名称：取后缀函数——suffix。<br>功能：从文件名序列<names>中取出各个文件名的后缀。<br>返回：返回文件名序列<names>的后缀序列，如果文件没有后缀，则返回空字串。<br>示例：$(suffix src/foo.c src-1.0/bar.c hacks)返回值是“.c .c”。</p>\n<p>$(basename &lt;names…&gt; )</p>\n<p>名称：取前缀函数——basename。<br>功能：从文件名序列<names>中取出各个文件名的前缀部分。<br>返回：返回文件名序列<names>的前缀序列，如果文件没有前缀，则返回空字串。<br>示例：$(basename src/foo.c src-1.0/bar.c hacks)返回值是“src/foo src-1.0/bar h<br>acks”。</p>\n<p>$(addsuffix <suffix>,&lt;names…&gt; )</p>\n<p>名称：加后缀函数——addsuffix。<br>功能：把后缀<suffix>加到<names>中的每个单词后面。<br>返回：返回加过后缀的文件名序列。<br>示例：$(addsuffix .c,foo bar)返回值是“foo.c bar.c”。</p>\n<p>$(addprefix <prefix>,&lt;names…&gt; )</p>\n<p>名称：加前缀函数——addprefix。<br>功能：把前缀<prefix>加到<names>中的每个单词后面。<br>返回：返回加过前缀的文件名序列。<br>示例：$(addprefix src/,foo bar)返回值是“src/foo src/bar”。</p>\n<p>$(join <list1>,<list2> )</p>\n<p>名称：连接函数——join。<br>功能：把<list2>中的单词对应地加到<list1>的单词后面。如果<list1>的单词个数要比&lt;<br>list2&gt;的多，那么，<list1>中的多出来的单词将保持原样。如果<list2>的单词个数要比<br><list1>多，那么，<list2>多出来的单词将被复制到<list2>中。<br>返回：返回连接过后的字符串。<br>示例：$(join aaa bbb , 111 222 333)返回值是“aaa111 bbb222 333”。</p>\n<h2 id=\"四、foreach-函数\"><a href=\"#四、foreach-函数\" class=\"headerlink\" title=\"\\四、foreach 函数**\"></a><strong><em>\\</em>四、foreach 函数**</strong></h2><p>foreach 函数和别的函数非常的不一样。因为这个函数是用来做循环用的，Makefile中的<br>foreach函数几乎是仿照于Unix标准Shell（/bin /sh）中的for语句，或是C-Shell（/bin<br>/csh）中的foreach语句而构建的。它的语法是：</p>\n<p>$(foreach <var>,<list>,<text> )</p>\n<p>这个函数的意思是，把参数<list>中的单词逐一取出放到参数<var>所指定的变量中，然后再执行<text>所包含的表达式。每一次<text>会返回一个字符串，循环过程中，<text>的所返回的每个字符串会以空格分隔，最后当整个循环结束时，<text>所返回的每个字符串所组成的整个字符串（以空格分隔）将会是foreach函数的返回值。</p>\n<p>所以，<var>最好是一个变量名，<list>可以是一个表达式，而<text>中一般会使用<var><br>这个参数来依次枚举<list>中的单词。举个例子：</p>\n<p>names := a b c d</p>\n<p>files := $(foreach n,$(names),$(n).o)</p>\n<p>上面的例子中，$(name)中的单词会被挨个取出，并存到变量“n”中，“$(n).o”每次根据“$(n)”计算出一个值，这些值以空格分隔，最后作为foreach函数的返回，所以，$(f<br>iles)的值是“a.o b.o c.o d.o”。</p>\n<p>注意，foreach中的<var>参数是一个临时的局部变量，foreach函数执行完后，参数<var>的变量将不在作用，其作用域只在foreach函数当中。</p>\n<h2 id=\"五、if-函数\"><a href=\"#五、if-函数\" class=\"headerlink\" title=\"五、if 函数\"></a><strong>五、if 函数</strong></h2><p>if函数很像GNU的make所支持的条件语句——ifeq（参见前面所述的章节），if函数的语法是：</p>\n<p>$(if <condition>,<then-part> )</p>\n<p>或是</p>\n<p>$(if <condition>,<then-part>,<else-part> )</p>\n<p>可见，if函数可以包含“else”部分，或是不含。即if函数的参数可以是两个，也可以是三个。<condition>参数是if的表达式，如果其返回的为非空字符串，那么这个表达式就相当于返回真，于是，<then-part>会被计算，否则<else-part> 会被计算。</p>\n<p>而if函数的返回值是，如果<condition>为真（非空字符串），那个<then- part>会是整个函数的返回值，如果<condition>为假（空字符串），那么<else-part>会是整个函数的返回值，此时如果<else-part>没有被定义，那么，整个函数返回空字串。</p>\n<p>所以，<then-part>和<else-part>只会有一个被计算。</p>\n<h2 id=\"六、call函数\"><a href=\"#六、call函数\" class=\"headerlink\" title=\"\\六、call函数**\"></a><strong><em>\\</em>六、call函数**</strong></h2><p>call函数是唯一一个可以用来创建新的参数化的函数。你可以写一个非常复杂的表达式，这个表达式中，你可以定义许多参数，然后你可以用call函数来向这个表达式传递参数。其语法是：</p>\n<p>$(call <expression>,<parm1>,<parm2>,<parm3>…)</p>\n<p>当 make执行这个函数时，<expression>参数中的变量，如$(1)，$(2)，$(3)等，会被参数<parm1>，<parm2>，<parm3>依次取代。而<expression>的返回值就是 call函数的返回值。例如：</p>\n<p>reverse = $(1) $(2)</p>\n<p>foo = $(call reverse,a,b)</p>\n<p>那么，foo的值就是“a b”。当然，参数的次序是可以自定义的，不一定是顺序的，如：</p>\n<p>reverse = $(2) $(1)<br>foo = $(call reverse,a,b)</p>\n<p>此时的foo的值就是“b a”。</p>\n<h2 id=\"七、origin函数\"><a href=\"#七、origin函数\" class=\"headerlink\" title=\"\\七、origin函数**\"></a><strong><em>\\</em>七、origin函数**</strong></h2><p>origin函数不像其它的函数，他并不操作变量的值，他只是告诉你你的这个变量是哪里来的？其语法是：</p>\n<p>$(origin <variable> )</p>\n<p>注意，<variable>是变量的名字，不应该是引用。所以你最好不要在<variable>中使用“$”字符。Origin函数会以其返回值来告诉你这个变量的“出生情况”，下面，是origin函<br>数的返回值:</p>\n<p>“undefined”</p>\n<p>如果<variable>从来没有定义过，origin函数返回这个值“undefined”。</p>\n<p>“default”</p>\n<p>如果<variable>是一个默认的定义，比如“CC”这个变量，这种变量我们将在后面讲述。</p>\n<p>“environment”</p>\n<p>如果<variable>是一个环境变量，并且当Makefile被执行时，“-e”参数没有被打开。</p>\n<p>“file”</p>\n<p>如果<variable>这个变量被定义在Makefile中。</p>\n<p>“command line”</p>\n<p>如果<variable>这个变量是被命令行定义的。</p>\n<p>“override”</p>\n<p>如果<variable>是被override指示符重新定义的。</p>\n<p>“automatic”</p>\n<p>如果<variable>是一个命令运行中的自动化变量。关于自动化变量将在后面讲述。</p>\n<p>这些信息对于我们编写Makefile是非常有用的，例如，假设我们有一个Makefile其包了一个定义文件Make.def，在Make.def中定义了一个变量“bletch”，而我们的环境中也有一<br>个环境变量“bletch”，此时，我们想判断一下，如果变量来源于环境，那么我们就把之重定义了，如果来源于Make.def或是命令行等非环境的，那么我们就不重新定义它。于是<br>，在我们的Makefile中，我们可以这样写：</p>\n<p>ifdef bletch</p>\n<p>ifeq “$(origin bletch)” “environment”</p>\n<p>bletch = barf, gag, etc.</p>\n<p>endif</p>\n<p>endif</p>\n<p>当然，你也许会说，使用override关键字不就可以重新定义环境中的变量了吗？为什么需要使用这样的步骤？是的，我们用override是可以达到这样的效果，可是override过于粗<br>暴，它同时会把从命令行定义的变量也覆盖了，而我们只想重新定义环境传来的，而不想重新定义命令行传来的。</p>\n<h2 id=\"八、shell函数\"><a href=\"#八、shell函数\" class=\"headerlink\" title=\"\\八、shell函数**\"></a><strong><em>\\</em>八、shell函数**</strong></h2><p>shell 函数也不像其它的函数。顾名思义，它的参数应该就是操作系统Shell的命令。它和反引号“`”是相同的功能。这就是说，shell函数把执行操作系统命令后的输出作为函数<br>返回。于是，我们可以用操作系统命令以及字符串处理命令awk，sed等等命令来生成一个变量，如：</p>\n<p>contents := $(shell cat foo)</p>\n<p>files := $(shell echo *.c)</p>\n<p>注意，这个函数会新生成一个Shell程序来执行命令，所以你要注意其运行性能，如果你的Makefile中有一些比较复杂的规则，并大量使用了这个函数，那么对于你的系统性能是有害的。特别是Makefile的隐晦的规则可能会让你的shell函数执行的次数比你想像的多得多。</p>\n<h2 id=\"九、控制make的函数\"><a href=\"#九、控制make的函数\" class=\"headerlink\" title=\"九、控制make的函数\"></a><strong>九、控制make的函数</strong></h2><p>make提供了一些函数来控制make的运行。通常，你需要检测一些运行Makefile时的运行时信息，并且根据这些信息来决定，你是让make继续执行，还是停止。</p>\n<p>$(error &lt;text …&gt; )</p>\n<p>产生一个致命的错误，&lt;text …&gt;是错误信息。注意，error函数不会在一被使用就会产生错误信息，所以如果你把其定义在某个变量中，并在后续的脚本中使用这个变量，那么也<br>是可以的。例如：</p>\n<p>示例一：</p>\n<p>ifdef ERROR_001</p>\n<p>$(error error is $(ERROR_001))</p>\n<p>endif</p>\n<p>示例二：</p>\n<p>ERR = $(error found an error!)</p>\n<p>.PHONY: err</p>\n<p>err: ; $(ERR)</p>\n<p>示例一会在变量ERROR_001定义了后执行时产生error调用，而示例二则在目录err被执行时才发生error调用。</p>\n<p>$(warning &lt;text …&gt; )</p>\n<p>这个函数很像error函数，只是它并不会让make退出，只是输出一段警告信息，而make继续执行。</p>\n<p>**<br>**</p>\n<h1 id=\"make-的运行\"><a href=\"#make-的运行\" class=\"headerlink\" title=\"make 的运行\"></a><strong>make 的运行</strong></h1><p>——————</p>\n<p>一般来说，最简单的就是直接在命令行下输入make命令，make命令会找当前目录的makefile来执行，一切都是自动的。但也有时你也许只想让 make重编译某些文件，而不是整个工程，而又有的时候你有几套编译规则，你想在不同的时候使用不同的编译规则，等等。本章节就是讲述如何使用make命令的。</p>\n<h2 id=\"一、make的退出码\"><a href=\"#一、make的退出码\" class=\"headerlink\" title=\"一、make的退出码\"></a>一、make的退出码</h2><p>make命令执行后有三个退出码：</p>\n<blockquote>\n<p>0 —— 表示成功执行。</p>\n<p>1 —— 如果make运行时出现任何错误，其返回1。</p>\n<p>2 —— 如果你使用了make的“-q”选项，并且make使得一些目标不需要更新，那么返回2。</p>\n</blockquote>\n<p>Make的相关参数我们会在后续章节中讲述。</p>\n<h2 id=\"二、指定Makefile\"><a href=\"#二、指定Makefile\" class=\"headerlink\" title=\"\\二、指定Makefile**\"></a><strong><em>\\</em>二、指定Makefile**</strong></h2><p>前面我们说过，GNU make找寻默认的Makefile的规则是在当前目录下依次找三个文件——“GNUmakefile”、“makefile”和“Makefile”。其按顺序找这三个文件，一旦找到，就<br>开始读取这个文件并执行。</p>\n<p>当前，我们也可以给make命令指定一个特殊名字的Makefile。要达到这个功能，我们要使用make的“-f”或是“–file”参数（“– makefile”参数也行）。例如，我们有个mak<br>efile的名字是“hchen.mk”，那么，我们可以这样来让make来执行这个文件：</p>\n<p>make –f hchen.mk</p>\n<p>如果在make的命令行是，你不只一次地使用了“-f”参数，那么，所有指定的makefile将会被连在一起传递给make执行。</p>\n<h2 id=\"三、指定目标\"><a href=\"#三、指定目标\" class=\"headerlink\" title=\"三、指定目标\"></a><strong>三、指定目标</strong></h2><p>一般来说，make的最终目标是makefile中的第一个目标，而其它目标一般是由这个目标连带出来的。这是make的默认行为。当然，一般来说，你的 makefile中的第一个目标是由许多个目标组成，你可以指示make，让其完成你所指定的目标。要达到这一目的很简单，需在make命令后直接跟目标的名字就可以完成（如前面提到的“make clean”形式）任何在makefile中的目标都可以被指定成终极目标，但是除了以“- ”打头，或是包含了“=”的目标，因为有这些字符的目标，会被解析成命令行参数或是变量。甚至没有被我们明确写出来的目标也可以成为make的终极目标，也就是说，只要make可以找到其隐含规则推导规则，那么这个隐含目标同样可以被指定成终极目标。</p>\n<p>有一个make的环境变量叫“MAKECMDGOALS”，这个变量中会存放你所指定的终极目标的列表，如果在命令行上，你没有指定目标，那么，这个变量是空值。这个变量可以让你使用在一些比较特殊的情形下。比如下面的例子：</p>\n<p>sources = foo.c bar.c<br>ifneq ( $(MAKECMDGOALS),clean)<br>include $(sources:.c=.d)<br>endif</p>\n<p>基于上面的这个例子，只要我们输入的命令不是“make clean”，那么makefile会自动包含“foo.d”和“bar.d”这两个makefile。</p>\n<p>使用指定终极目标的方法可以很方便地让我们编译我们的程序，例如下面这个例子：</p>\n<p>.PHONY: all<br>all: prog1 prog2 prog3 prog4</p>\n<p>从这个例子中，我们可以看到，这个makefile中有四个需要编译的程序——“prog1”， “prog2”， “prog3”和 “prog4”，我们可以使用“make all”命令来编译所有的目标<br>（如果把all置成第一个目标，那么只需执行“make”），我们也可以使用“make prog2”来单独编译目标“prog2”。</p>\n<p>即然make可以指定所有makefile中的目标，那么也包括“伪目标”，于是我们可以根据这种性质来让我们的makefile根据指定的不同的目标来完成不同的事。在Unix世界中，软件<br>发布时，特别是GNU这种开源软件的发布时，其 makefile都包含了编译、安装、打包等功能。我们可以参照这种规则来书写我们的makefile中的目标。</p>\n<blockquote>\n<p><strong>“all”</strong>        这个伪目标是所有目标的目标，其功能一般是编译所有的目标。</p>\n<p><strong>“clean”</strong>    这个伪目标功能是删除所有被make创建的文件。</p>\n<p><strong>“install”</strong>    这个伪目标功能是安装已编译好的程序，其实就是把目标执行文件拷贝到指定的目标中去。</p>\n<p><strong>“print”</strong>     这个伪目标的功能是例出改变过的源文件。</p>\n<p><strong>“tar”</strong>       这个伪目标功能是把源程序打包备份。也就是一个tar文件。</p>\n<p><strong>“dist”</strong>      这个伪目标功能是创建一个压缩文件，一般是把tar文件压成Z文件。或是gz文件。</p>\n<p><strong>“TAGS”</strong>     这个伪目标功能是更新所有的目标，以备完整地重编译使用。</p>\n<p><strong>“check”和“test”</strong>   这两个伪目标一般用来测试makefile的流程。</p>\n</blockquote>\n<p>​    当然一个项目的makefile中也不一定要书写这样的目标，这些东西都是GNU的东西，但是我想，GNU搞出这些东西一定有其可取之处（等你的UNIX下的程序文件一多时你就会发现这些功能很有用了），这里只不过是说明了，如果你要书写这种功能，最好使用这种名字命名你的目标，这样规范一些，规范的好处就是——不用解释，大家都明白。而且如果你的makefile中有这些功能，一是很实用，二是可以显得你的makefile很专业（不是那种初学者的作品）。</p>\n<h2 id=\"四、检查规则\"><a href=\"#四、检查规则\" class=\"headerlink\" title=\"\\四、检查规则**\"></a><strong><em>\\</em>四、检查规则**</strong></h2><p>有时候，我们不想让我们的makefile中的规则执行起来，我们只想检查一下我们的命令，或是执行的序列。于是我们可以使用make命令的下述参数：</p>\n<p>“-n”<br>“–just-print”<br>“–dry-run”<br>“–recon”<br>不执行参数，这些参数只是打印命令，不管目标是否更新，把规则和连带规则下的命令打印出来，但不执行，这些参数对于我们调试makefile很有用处。</p>\n<p>“-t”<br>“–touch”<br>这个参数的意思就是把目标文件的时间更新，但不更改目标文件。也就是说，make假装编译目标，但不是真正的编译目标，只是把目标变成已编译过的状态。</p>\n<p>“-q”<br>“–question”<br>这个参数的行为是找目标的意思，也就是说，如果目标存在，那么其什么也不会输出，当然也不会执行编译，如果目标不存在，其会打印出一条出错信息。</p>\n<p>“-W <file>”<br>“–what-if=<file>”<br>“–assume-new=<file>”<br>“–new-file=<file>”<br>这个参数需要指定一个文件。一般是是源文件（或依赖文件），Make会根据规则推导来运行依赖于这个文件的命令，一般来说，可以和“-n”参数一同使用，来查看这个依赖文件<br>所发生的规则命令。</p>\n<p>另外一个很有意思的用法是结合“-p”和“-v”来输出makefile被执行时的信息（这个将在后面讲述）。</p>\n<h2 id=\"五、make的参数\"><a href=\"#五、make的参数\" class=\"headerlink\" title=\"\\五、make的参数**\"></a><strong><em>\\</em>五、make的参数**</strong></h2><p>下面列举了所有GNU make 3.80版的参数定义。其它版本和产商的make大同小异，不过其它产商的make的具体参数还是请参考各自的产品文档。</p>\n<p>“-b”<br>“-m”<br>这两个参数的作用是忽略和其它版本make的兼容性。</p>\n<p>“-B”<br>“–always-make”<br>认为所有的目标都需要更新（重编译）。</p>\n<p>“-C <dir>”<br>“–directory=<dir>”<br>指定读取makefile的目录。如果有多个“-C”参数，make的解释是后面的路径以前面的作为相对路径，并以最后的目录作为被指定目录。如：“make –C ~hchen/test –C prog”<br>等价于“make –C ~hchen/test/prog”。</p>\n<p>“—debug[=<options>]”<br>输出make的调试信息。它有几种不同的级别可供选择，如果没有参数，那就是输出最简单的调试信息。下面是<options>的取值：</p>\n<blockquote>\n<p>a —— 也就是all，输出所有的调试信息。（会非常的多）</p>\n<p>b —— 也就是basic，只输出简单的调试信息。即输出不需要重编译的目标。</p>\n<p>v —— 也就是verbose，在b选项的级别之上。输出的信息包括哪个makefile被解析，不需要被重编译的依赖文件（或是依赖目标）等。</p>\n<p>i —— 也就是implicit，输出所以的隐含规则。</p>\n<p>j —— 也就是jobs，输出执行规则中命令的详细信息，如命令的PID、返回码等。</p>\n<p>m —— 也就是makefile，输出make读取makefile，更新makefile，执行makefile的信息。</p>\n</blockquote>\n<p>“-d”<br>相当于“–debug=a”。</p>\n<p>“-e”<br>“–environment-overrides”<br>指明环境变量的值覆盖makefile中定义的变量的值。</p>\n<p>“-f=<file>”<br>“–file=<file>”<br>“–makefile=<file>”<br>指定需要执行的makefile。</p>\n<p>“-h”<br>“–help”<br>显示帮助信息。</p>\n<p>“-i”<br>“–ignore-errors”<br>在执行时忽略所有的错误。</p>\n<p>“-I <dir>”<br>“–include-dir=<dir>”<br>指定一个被包含makefile的搜索目标。可以使用多个“-I”参数来指定多个目录。</p>\n<p>“-j [<jobsnum>]”<br>“–jobs[=<jobsnum>]”<br>指同时运行命令的个数。如果没有这个参数，make运行命令时能运行多少就运行多少。如果有一个以上的“-j”参数，那么仅最后一个“-j”才是有效的。（注意这个参数在MS-D<br>OS中是无用的）</p>\n<p>“-k”<br>“–keep-going”<br>出错也不停止运行。如果生成一个目标失败了，那么依赖于其上的目标就不会被执行了。</p>\n<p>“-l <load>”<br>“–load-average[=&lt;load]”<br>“—max-load[=<load>]”<br>指定make运行命令的负载。</p>\n<p>“-n”<br>“–just-print”<br>“–dry-run”<br>“–recon”<br>仅输出执行过程中的命令序列，但并不执行。</p>\n<p>“-o <file>”<br>“–old-file=<file>”<br>“–assume-old=<file>”<br>不重新生成的指定的<file>，即使这个目标的依赖文件新于它。</p>\n<p>“-p”<br>“–print-data-base”<br>输出makefile中的所有数据，包括所有的规则和变量。这个参数会让一个简单的makefile都会输出一堆信息。如果你只是想输出信息而不想执行 makefile，你可以使用“make -q<br>p”命令。如果你想查看执行makefile前的预设变量和规则，你可以使用“make –p –f /dev/null”。这个参数输出的信息会包含着你的makefile文件的文件名和行号，所以，用<br>这个参数来调试你的makefile会是很有用的，特别是当你的环境变量很复杂的时候。</p>\n<p>“-q”<br>“–question”<br>不运行命令，也不输出。仅仅是检查所指定的目标是否需要更新。如果是0则说明要更新，如果是2则说明有错误发生。</p>\n<p>“-r”<br>“–no-builtin-rules”<br>禁止make使用任何隐含规则。</p>\n<p>“-R”<br>“–no-builtin-variabes”<br>禁止make使用任何作用于变量上的隐含规则。</p>\n<p>“-s”<br>“–silent”<br>“–quiet”<br>在命令运行时不输出命令的输出。</p>\n<p>“-S”<br>“–no-keep-going”<br>“–stop”<br>取消“-k”选项的作用。因为有些时候，make的选项是从环境变量“MAKEFLAGS”中继承下来的。所以你可以在命令行中使用这个参数来让环境变量中的“-k”选项失效。</p>\n<p>“-t”<br>“–touch”<br>相当于UNIX的touch命令，只是把目标的修改日期变成最新的，也就是阻止生成目标的命令运行。</p>\n<p>“-v”<br>“–version”<br>输出make程序的版本、版权等关于make的信息。</p>\n<p>“-w”<br>“–print-directory”<br>输出运行makefile之前和之后的信息。这个参数对于跟踪嵌套式调用make时很有用。</p>\n<p>“–no-print-directory”<br>禁止“-w”选项。</p>\n<p>“-W <file>”<br>“–what-if=<file>”<br>“–new-file=<file>”<br>“–assume-file=<file>”<br>假定目标<file>需要更新，如果和“-n”选项使用，那么这个参数会输出该目标更新时的运行动作。如果没有“-n”那么就像运行UNIX的“touch”命令一样，使得<file>的修改时<br>间为当前时间。</p>\n<p>“–warn-undefined-variables”<br>只要make发现有未定义的变量，那么就输出警告信息。</p>\n<h1 id=\"隐含规则\"><a href=\"#隐含规则\" class=\"headerlink\" title=\"\\隐含规则**\"></a><strong><em>\\</em>隐含规则**</strong></h1><p><strong><em>\\</em>————**</strong></p>\n<p>在我们使用Makefile时，有一些我们会经常使用，而且使用频率非常高的东西，比如，我们编译C/C++的源程序为中间目标文件（Unix下是[.o] 文件，Windows下是[.obj]文件）。本章讲述的就是一些在Makefile中的“隐含的”，早先约定了的，不需要我们再写出来的规则。</p>\n<p>“隐含规则”也就是一种惯例，make会按照这种“惯例”心照不喧地来运行，那怕我们的Makefile中没有书写这样的规则。例如，把[.c]文件编译成[.o]文件这一规则，你根本就<br>不用写出来，make会自动推导出这种规则，并生成我们需要的[.o]文件。</p>\n<p>“隐含规则”会使用一些我们系统变量，我们可以改变这些系统变量的值来定制隐含规则的运行时的参数。如系统变量“CFLAGS”可以控制编译时的编译器参数。</p>\n<p>我们还可以通过“模式规则”的方式写下自己的隐含规则。用“后缀规则”来定义隐含规则会有许多的限制。使用“模式规则”会更回得智能和清楚，但“后缀规则”可以用来保<br>证我们Makefile的兼容性。<br>我们了解了“隐含规则”，可以让其为我们更好的服务，也会让我们知道一些“约定俗成”了的东西，而不至于使得我们在运行Makefile时出现一些我们觉得莫名其妙的东西。当<br>然，任何事物都是矛盾的，水能载舟，亦可覆舟，所以，有时候“隐含规则”也会给我们造成不小的麻烦。只有了解了它，我们才能更好地使用它。</p>\n<h2 id=\"一、使用隐含规则\"><a href=\"#一、使用隐含规则\" class=\"headerlink\" title=\"一、使用隐含规则\"></a><strong>一、使用隐含规则</strong></h2><p>如果要使用隐含规则生成你需要的目标，你所需要做的就是不要写出这个目标的规则。那么，make会试图去自动推导产生这个目标的规则和命令，如果make可以自动推导生成这个目标的规则和命令，那么这个行为就是隐含规则的自动推导。当然，隐含规则是make事先约定好的一些东西。例如，我们有下面的一个Makefile：</p>\n<p>foo : foo.o bar.o<br>cc –o foo foo.o bar.o $(CFLAGS) $(LDFLAGS)</p>\n<p>我们可以注意到，这个Makefile中并没有写下如何生成foo.o和bar.o这两目标的规则和命令。因为make的“隐含规则”功能会自动为我们自动去推导这两个目标的依赖目标和生成<br>命令。</p>\n<p>make 会在自己的“隐含规则”库中寻找可以用的规则，如果找到，那么就会使用。如果找不到，那么就会报错。在上面的那个例子中，make调用的隐含规则是，把 [.o]的目标的依赖文件置成[.c]，并使用C的编译命令“cc –c $(CFLAGS) [.c]”来生成[.o]的目标。也就是说，我们完全没有必要写下下面的两条规则：</p>\n<p>foo.o : foo.c<br>cc –c foo.c $(CFLAGS)<br>bar.o : bar.c<br>cc –c bar.c $(CFLAGS)</p>\n<p>因为，这已经是“约定”好了的事了，make和我们约定好了用C编译器“cc”生成[.o]文件的规则，这就是隐含规则。</p>\n<p>当然，如果我们为[.o]文件书写了自己的规则，那么make就不会自动推导并调用隐含规则，它会按照我们写好的规则忠实地执行。</p>\n<p>还有，在make的“隐含规则库”中，每一条隐含规则都在库中有其顺序，越靠前的则是越被经常使用的，所以，这会导致我们有些时候即使我们显示地指定了目标依赖，make也不会管。如下面这条规则（没有命令）：</p>\n<p>foo.o : foo.p</p>\n<p>依赖文件“foo.p”（Pascal程序的源文件）有可能变得没有意义。如果目录下存在了“foo.c”文件，那么我们的隐含规则一样会生效，并会通过 “foo.c”调用C的编译器生成f<br>oo.o文件。因为，在隐含规则中，Pascal的规则出现在C的规则之后，所以，make找到可以生成foo.o的 C的规则就不再寻找下一条规则了。如果你确实不希望任何隐含规则推导，那么，你就不要只写出“依赖规则”，而不写命令。</p>\n<h2 id=\"二、隐含规则一览\"><a href=\"#二、隐含规则一览\" class=\"headerlink\" title=\"二、隐含规则一览\"></a><strong>二、隐含规则一览</strong></h2><p>这里我们将讲述所有预先设置（也就是make内建）的隐含规则，如果我们不明确地写下规则，那么，make就会在这些规则中寻找所需要规则和命令。当然，我们也可以使用make的参数“-r”或“–no-builtin-rules”选项来取消所有的预设置的隐含规则。</p>\n<p>当然，即使是我们指定了“-r”参数，某些隐含规则还是会生效，因为有许多的隐含规则都是使用了“后缀规则”来定义的，所以，只要隐含规则中有“后缀列表 ”（也就一系统<br>定义在目标.SUFFIXES的依赖目标），那么隐含规则就会生效。默认的后缀列表是：.out,.a, .ln, .o, .c, .cc, .C, .p, .f, .F, .r, .y, .l, .s, .S, .mod, .sym, .def, .<br>h, .info, .dvi, .tex, .texinfo, .texi, .txinfo, .w, .ch .web, .sh, .elc, .el。具体的细节，我们会在后面讲述。</p>\n<p>还是先来看一看常用的隐含规则吧。</p>\n<p>1、编译C程序的隐含规则。<br>“<n>.o”的目标的依赖目标会自动推导为“<n>.c”，并且其生成命令是“$(CC) –c $(CPPFLAGS) $(CFLAGS)”</p>\n<p>2、编译C++程序的隐含规则。<br>“<n>.o” 的目标的依赖目标会自动推导为“<n>.cc”或是“<n>.C”，并且其生成命令是“$(CXX) –c $(CPPFLAGS) $(CFLAGS)”。（建议使用“.cc”作为C++源文件的后缀，而<br>不是“.C”）</p>\n<p>3、编译Pascal程序的隐含规则。<br>“<n>.o”的目标的依赖目标会自动推导为“<n>.p”，并且其生成命令是“$(PC) –c $(PFLAGS)”。</p>\n<p>4、编译Fortran/Ratfor程序的隐含规则。<br>“<n>.o”的目标的依赖目标会自动推导为“<n>.r”或“<n>.F”或“<n>.f”，并且其生成命令是:<br>“.f” “$(FC) –c $(FFLAGS)”<br>“.F” “$(FC) –c $(FFLAGS) $(CPPFLAGS)”<br>“.f” “$(FC) –c $(FFLAGS) $(RFLAGS)”</p>\n<p>5、预处理Fortran/Ratfor程序的隐含规则。<br>“<n>.f”的目标的依赖目标会自动推导为“<n>.r”或“<n>.F”。这个规则只是转换Ratfor或有预处理的Fortran程序到一个标准的Fortran程序。其使用的命令是：<br>“.F” “$(FC) –F $(CPPFLAGS) $(FFLAGS)”<br>“.r” “$(FC) –F $(FFLAGS) $(RFLAGS)”</p>\n<p>6、编译Modula-2程序的隐含规则。<br>“<n>.sym” 的目标的依赖目标会自动推导为“<n>.def”，并且其生成命令是：“$(M2C) $(M2FLAGS) $(DEFFLAGS)”。“&lt;n.o&gt;” 的目标的依赖目标会自动推导为“<n>.mod”，<br>并且其生成命令是：“$(M2C) $(M2FLAGS) $(MODFLAGS)”。</p>\n<p>7、汇编和汇编预处理的隐含规则。<br>“<n>.o” 的目标的依赖目标会自动推导为“<n>.s”，默认使用编译品“as”，并且其生成命令是：“$(AS) $(ASFLAGS)”。“<n>.s” 的目标的依赖目标会自动推导为“<n>.S”<br>，默认使用C预编译器“cpp”，并且其生成命令是：“$(AS) $(ASFLAGS)”。</p>\n<p>8、链接Object文件的隐含规则。<br>“<n>” 目标依赖于“<n>.o”，通过运行C的编译器来运行链接程序生成（一般是“ld”），其生成命令是：“$(CC) $(LDFLAGS) <n>.o $(LOADLIBES) $(LDLIBS)”。这个规则对<br>于只有一个源文件的工程有效，同时也对多个Object文件（由不同的源文件生成）的也有效。例如如下规则：</p>\n<p>x : y.o z.o</p>\n<p>并且“x.c”、“y.c”和“z.c”都存在时，隐含规则将执行如下命令：</p>\n<p>cc -c x.c -o x.o<br>cc -c y.c -o y.o<br>cc -c z.c -o z.o<br>cc x.o y.o z.o -o x<br>rm -f x.o<br>rm -f y.o<br>rm -f z.o</p>\n<p>如果没有一个源文件（如上例中的x.c）和你的目标名字（如上例中的x）相关联，那么，你最好写出自己的生成规则，不然，隐含规则会报错的。</p>\n<p>9、Yacc C程序时的隐含规则。</p>\n<p>“<n>.c”的依赖文件被自动推导为“n.y”（Yacc生成的文件），其生成命令是：“$(YACC) $(YFALGS)”。（“Yacc”是一个语法分析器，关于其细节请查看相关资料）</p>\n<p>10、Lex C程序时的隐含规则。<br>“<n>.c”的依赖文件被自动推导为“n.l”（Lex生成的文件），其生成命令是：“$(LEX) $(LFALGS)”。（关于“Lex”的细节请查看相关资料）</p>\n<p>11、Lex Ratfor程序时的隐含规则。<br>“<n>.r”的依赖文件被自动推导为“n.l”（Lex生成的文件），其生成命令是：“$(LEX<br>) $(LFALGS)”。</p>\n<p>12、从C程序、Yacc文件或Lex文件创建Lint库的隐含规则。<br>“<n>.ln” （lint生成的文件）的依赖文件被自动推导为“n.c”，其生成命令是：“$(LINT) $(LINTFALGS) $(CPPFLAGS) -i”。对于“<n>.y”和“<n>.l”也是同样的规则。</p>\n<h2 id=\"三、隐含规则使用的变量\"><a href=\"#三、隐含规则使用的变量\" class=\"headerlink\" title=\"三、隐含规则使用的变量\"></a>三、隐含规则使用的变量</h2><p>在隐含规则中的命令中，基本上都是使用了一些预先设置的变量。你可以在你的makefile中改变这些变量的值，或是在make的命令行中传入这些值，或是在你的环境变量中设置这些值，无论怎么样，只要设置了这些特定的变量，那么其就会对隐含规则起作用。当然，你也可以利用make的“-R”或“–no– builtin-variables”参数来取消你所定义的变量<br>对隐含规则的作用。</p>\n<p>例如，第一条隐含规则——编译C程序的隐含规则的命令是“$(CC) –c $(CFLAGS) $(CPPFLAGS)”。Make默认的编译命令是“cc”，如果你把变量“$(CC)”重定义成“gcc”，把<br>变量“$(CFLAGS)”重定义成 “-g”，那么，隐含规则中的命令全部会以“gcc –c -g $(CPPFLAGS)”的样子来执行了。</p>\n<p>我们可以把隐含规则中使用的变量分成两种：一种是命令相关的，如“CC”；一种是参数<br>相的关，如“CFLAGS”。下面是所有隐含规则中会用到的变量：</p>\n<p><strong>1、关于命令的变量。</strong></p>\n<p>AR  函数库打包程序。默认命令是“ar”。<br>AS<br>汇编语言编译程序。默认命令是“as”。<br>CC<br>C语言编译程序。默认命令是“cc”。<br>CXX<br>C++语言编译程序。默认命令是“g++”。<br>CO<br>从 RCS文件中扩展文件程序。默认命令是“co”。<br>CPP<br>C程序的预处理器（输出是标准输出设备）。默认命令是“$(CC) –E”。<br>FC<br>Fortran 和 Ratfor 的编译器和预处理程序。默认命令是“f77”。<br>GET<br>从SCCS文件中扩展文件的程序。默认命令是“get”。<br>LEX<br>Lex方法分析器程序（针对于C或Ratfor）。默认命令是“lex”。<br>PC<br>Pascal语言编译程序。默认命令是“pc”。<br>YACC<br>Yacc文法分析器（针对于C程序）。默认命令是“yacc”。<br>YACCR<br>Yacc文法分析器（针对于Ratfor程序）。默认命令是“yacc –r”。<br>MAKEINFO<br>转换Texinfo源文件（.texi）到Info文件程序。默认命令是“makeinfo”。<br>TEX<br>从TeX源文件创建TeX DVI文件的程序。默认命令是“tex”。<br>TEXI2DVI<br>从Texinfo源文件创建军TeX DVI 文件的程序。默认命令是“texi2dvi”。<br>WEAVE<br>转换Web到TeX的程序。默认命令是“weave”。<br>CWEAVE<br>转换C Web 到 TeX的程序。默认命令是“cweave”。<br>TANGLE<br>转换Web到Pascal语言的程序。默认命令是“tangle”。<br>CTANGLE<br>转换C Web 到 C。默认命令是“ctangle”。<br>RM<br>删除文件命令。默认命令是“rm –f”。</p>\n<p><strong><em>\\</em>2、关于命令参数的变量**</strong></p>\n<p>下面的这些变量都是相关上面的命令的参数。如果没有指明其默认值，那么其默认值都是<br>空。</p>\n<p>ARFLAGS<br>函数库打包程序AR命令的参数。默认值是“rv”。<br>ASFLAGS<br>汇编语言编译器参数。（当明显地调用“.s”或“.S”文件时）。<br>CFLAGS<br>C语言编译器参数。<br>CXXFLAGS<br>C++语言编译器参数。<br>COFLAGS<br>RCS命令参数。<br>CPPFLAGS<br>C预处理器参数。（ C 和 Fortran 编译器也会用到）。<br>FFLAGS<br>Fortran语言编译器参数。<br>GFLAGS<br>SCCS “get”程序参数。<br>LDFLAGS<br>链接器参数。（如：“ld”）<br>LFLAGS<br>Lex文法分析器参数。<br>PFLAGS<br>Pascal语言编译器参数。<br>RFLAGS<br>Ratfor 程序的Fortran 编译器参数。<br>YFLAGS<br>Yacc文法分析器参数。</p>\n<h2 id=\"四、隐含规则链\"><a href=\"#四、隐含规则链\" class=\"headerlink\" title=\"\\四、隐含规则链**\"></a><strong><em>\\</em>四、隐含规则链**</strong></h2><p>有些时候，一个目标可能被一系列的隐含规则所作用。例如，一个[.o]的文件生成，可能会是先被Yacc的[.y]文件先成[.c]，然后再被C的编译器生成。我们把这一系列的隐含规则<br>叫做“隐含规则链”。</p>\n<p>在上面的例子中，如果文件[.c]存在，那么就直接调用C的编译器的隐含规则，如果没有[.c]文件，但有一个[.y]文件，那么Yacc的隐含规则会被调用，生成[.c]文件，然后，再调<br>用C编译的隐含规则最终由[.c]生成[.o]文件，达到目标。</p>\n<p>我们把这种[.c]的文件（或是目标），叫做中间目标。不管怎么样，make会努力自动推导生成目标的一切方法，不管中间目标有多少，其都会执着地把所有的隐含规则和你书写的规则全部合起来分析，努力达到目标，所以，有些时候，可能会让你觉得奇怪，怎么我的目标会这样生成？怎么我的makefile发疯了？</p>\n<p>在默认情况下，对于中间目标，它和一般的目标有两个地方所不同：第一个不同是除非中间的目标不存在，才会引发中间规则。第二个不同的是，只要目标成功产生，那么，产生最终目标过程中，所产生的中间目标文件会被以“rm -f”删除。</p>\n<p>通常，一个被makefile指定成目标或是依赖目标的文件不能被当作中介。然而，你可以明显地说明一个文件或是目标是中介目标，你可以使用伪目标“.INTERMEDIATE”来强制声明。（如：.INTERMEDIATE ： mid ）</p>\n<p>你也可以阻止make自动删除中间目标，要做到这一点，你可以使用伪目标“.SECONDARY”来强制声明（如：.SECONDARY : sec）。你还可以把你的目标，以模式的方式来指定（如：%.o）成伪目标“.PRECIOUS”的依赖目标，以保存被隐含规则所生成的中间文件。</p>\n<p>在“隐含规则链”中，禁止同一个目标出现两次或两次以上，这样一来，就可防止在make自动推导时出现无限递归的情况。</p>\n<p>Make 会优化一些特殊的隐含规则，而不生成中间文件。如，从文件“foo.c”生成目标程序“foo”，按道理，make会编译生成中间文件“foo.o”，然后链接成“foo”，但在实际情况下，这一动作可以被一条“cc”的命令完成（cc –o foo foo.c），于是优化过的规<br>则就不会生成中间文件。</p>\n<p>**<br>**</p>\n<h2 id=\"五、定义模式规则\"><a href=\"#五、定义模式规则\" class=\"headerlink\" title=\"\\五、定义模式规则**\"></a><strong><em>\\</em>五、定义模式规则**</strong></h2><p>你可以使用模式规则来定义一个隐含规则。一个模式规则就好像一个一般的规则，只是在规则中，目标的定义需要有”%”字符。”%”的意思是表示一个或多个任意字符。在依赖目标中同样可以使用”%”，只是依赖目标中的”%”的取值，取决于其目标。</p>\n<p>有一点需要注意的是，”%”的展开发生在变量和函数的展开之后，变量和函数的展开发生在make载入Makefile时，而模式规则中的”%”则发生在运行时。</p>\n<p><strong>1、模式规则介绍</strong></p>\n<p>模式规则中，至少在规则的目标定义中要包含”%”，否则，就是一般的规则。目标中的”%”定义表示对文件名的匹配，”%”表示长度任意的非空字符串。例如：”%.c”表示以”.c”结尾的文件名（文件名的长度至少为3），而”s.%.c”则表示以”s.”开头，”.c”结尾的文件名（文件名的长度至少为 5）。</p>\n<p>如果”%”定义在目标中，那么，目标中的”%”的值决定了依赖目标中的”%”的值，也就是说，目标中的模式的”%”决定了依赖目标中”%”的样子。例如有一个模式规则如下：</p>\n<p>%.o : %.c ; &lt;command ……&gt;</p>\n<p>其含义是，指出了怎么从所有的[.c]文件生成相应的[.o]文件的规则。如果要生成的目标是”a.o b.o”，那么”%c”就是”a.c b.c”。</p>\n<p>一旦依赖目标中的”%”模式被确定，那么，make会被要求去匹配当前目录下所有的文件名，一旦找到，make就会规则下的命令，所以，在模式规则中，目标可能会是多个的，如果有模式匹配出多个目标，make就会产生所有的模式目标，此时，make关心的是依赖的文件名和生成目标的命令这两件事。</p>\n<p><strong>2、模式规则示例</strong></p>\n<p>下面这个例子表示了,把所有的[.c]文件都编译成[.o]文件.</p>\n<p>%.o : %.c<br>$(CC) -c $(CFLAGS) $(CPPFLAGS) $&lt; -o $@</p>\n<p>其中，”$@”表示所有的目标的挨个值，”$&lt;”表示了所有依赖目标的挨个值。这些奇怪的变<br>量我们叫”自动化变量”，后面会详细讲述。</p>\n<p>下面的这个例子中有两个目标是模式的：</p>\n<p>%.tab.c %.tab.h: %.y<br>bison -d $&lt;</p>\n<p>这条规则告诉make把所有的[.y]文件都以”bison -d <n>.y”执行，然后生成”<n>.tab.c”和”<n>.tab.h”文件。（其中，”<n>“ 表示一个任意字符串）。如果我们的执行程序”foo”依<br>赖于文件”parse.tab.o”和”scan.o”，并且文件”scan.o”依赖于文件”parse.tab.h”，如果”parse.y”文件被更新了，那么根据上述的规则，”bison -d parse.y”就会被执行一次，于<br>是，”parse.tab.o”和”scan.o”的依赖文件就齐了。（假设，”parse.tab.o” 由”parse.tab.c”生成，和”scan.o”由”scan.c”生成，而”foo”由”parse.tab.o”和”scan.o”链接生成，<br>而且foo和其[.o]文件的依赖关系也写好，那么，所有的目标都会得到满足）</p>\n<p><strong><em>\\</em>3、自动化变量**</strong></p>\n<p>在上述的模式规则中，目标和依赖文件都是一系例的文件，那么我们如何书写一个命令来完成从不同的依赖文件生成相应的目标？因为在每一次的对模式规则的解析时，都会是不同的目标和依赖文件。</p>\n<p>自动化变量就是完成这个功能的。在前面，我们已经对自动化变量有所提涉，相信你看到这里已对它有一个感性认识了。所谓自动化变量，就是这种变量会把模式中所定义的一系列的文件自动地挨个取出，直至所有的符合模式的文件都取完了。这种自动化变量只应出现在规则的命令中。</p>\n<p>下面是所有的自动化变量及其说明：</p>\n<p>$@<br>表示规则中的目标文件集。在模式规则中，如果有多个目标，那么，”$@”就是匹配于目标中模式定义的集合。</p>\n<p>$%<br>仅当目标是函数库文件中，表示规则中的目标成员名。例如，如果一个目标是”foo.a(bar.o)”，那么，”$%”就是”bar.o”，”$@”就是”foo.a”。如果目标不是函数库文件（Unix下是<br>[.a]，Windows下是[.lib]），那么，其值为空。</p>\n<p>$&lt;<br>依赖目标中的第一个目标名字。如果依赖目标是以模式（即”%”）定义的，那么”$&lt;”将是符合模式的一系列的文件集。注意，其是一个一个取出来的。</p>\n<p>$?<br>所有比目标新的依赖目标的集合。以空格分隔。</p>\n<p>$^<br>所有的依赖目标的集合。以空格分隔。如果在依赖目标中有多个重复的，那个这个变量会去除重复的依赖目标，只保留一份。</p>\n<p>$+<br>这个变量很像”$^”，也是所有依赖目标的集合。只是它不去除重复的依赖目标。</p>\n<p>$*<br>这个变量表示目标模式中”%”及其之前的部分。如果目标是”dir/a.foo.b”，并且目标的模式是”a.%.b”，那么，”$*”的值就是”dir /a.foo”。这个变量对于构造有关联的文件名是比<br>较有较。如果目标中没有模式的定义，那么”$*”也就不能被推导出，但是，如果目标文件的后缀是 make所识别的，那么”$*”就是除了后缀的那一部分。例如：如果目标是”foo.c”<br>，因为”.c”是make所能识别的后缀名，所以，”$*”的值就是”foo”。这个特性是GNU make的，很有可能不兼容于其它版本的make，所以，你应该尽量避免使用”$*”，除非是在隐含规则或是静态模式中。如果目标中的后缀是make所不能识别的，那么”$*”就是空值。</p>\n<p>当你希望只对更新过的依赖文件进行操作时，”$?”在显式规则中很有用，例如，假设有一个函数库文件叫”lib”，其由其它几个object文件更新。那么把object文件打包的比较有效<br>率的Makefile规则是：</p>\n<p>lib : foo.o bar.o lose.o win.o<br>ar r lib $?</p>\n<p>在上述所列出来的自动量变量中。四个变量（$@、$&lt;、$%、$*）在扩展时只会有一个文件，而另三个的值是一个文件列表。这七个自动化变量还可以取得文件的目录名或是在当前目录下的符合模式的文件名，只需要搭配上”D”或”F”字样。这是GNU make中老版本的特性，在新版本中，我们使用函数”dir”或”notdir”就可以做到了。”D”的含义就是Directory，就是目录，”F”的含义就是File，就是文件。</p>\n<p>下面是对于上面的七个变量分别加上”D”或是”F”的含义：</p>\n<p>$(@D)<br>表示”$@”的目录部分（不以斜杠作为结尾），如果”$@”值是”dir/foo.o”，那么”$(@D)”就是”dir”，而如果”$@”中没有包含斜杠的话，其值就是”.”（当前目录）。</p>\n<p>$(@F)<br>表示”$@”的文件部分，如果”$@”值是”dir/foo.o”，那么”$(@F)”就是”foo.o”，”$(@F)”相当于函数”$(notdir $@)”。</p>\n<p>“$(<em>D)”<br>“$(</em>F)”<br>和上面所述的同理，也是取文件的目录部分和文件部分。对于上面的那个例子，”$(<em>D)”返回”dir”，而”$(</em>F)”返回”foo”</p>\n<p>“$(%D)”<br>“$(%F)”<br>分别表示了函数包文件成员的目录部分和文件部分。这对于形同”archive(member)”形式的目标中的”member”中包含了不同的目录很有用。</p>\n<p>“$(&lt;D)”<br>“$(&lt;F)”<br>分别表示依赖文件的目录部分和文件部分。</p>\n<p>“$(^D)”<br>“$(^F)”<br>分别表示所有依赖文件的目录部分和文件部分。（无相同的）</p>\n<p>“$(+D)”<br>“$(+F)”<br>分别表示所有依赖文件的目录部分和文件部分。（可以有相同的）</p>\n<p>“$(?D)”<br>“$(?F)”</p>\n<p>分别表示被更新的依赖文件的目录部分和文件部分。</p>\n<p>最后想提醒一下的是，对于”$&lt;”，为了避免产生不必要的麻烦，我们最好给$后面的那个特定字符都加上圆括号，比如，”$(&lt; )”就要比”$&lt;”要好一些。</p>\n<p>还得要注意的是，这些变量只使用在规则的命令中，而且一般都是”显式规则”和”静态模式规则”（参见前面”书写规则”一章）。其在隐含规则中并没有意义。</p>\n<p><strong><em>\\</em>4、模式的匹配**</strong></p>\n<p>一般来说，一个目标的模式有一个有前缀或是后缀的”%”，或是没有前后缀，直接就是一个”%”。因为”%”代表一个或多个字符，所以在定义好了的模式中，我们把”%”所匹配的内容叫做”茎”，例如”%.c”所匹配的文件”test.c”中”test”就是”茎”。因为在目标和依赖目标中同时有”%”时，依赖目标的”茎”会传给目标，当做目标中的”茎”。</p>\n<p>当一个模式匹配包含有斜杠（实际也不经常包含）的文件时，那么在进行模式匹配时，目录部分会首先被移开，然后进行匹配，成功后，再把目录加回去。在进行”茎”的传递时，我们需要知道这个步骤。例如有一个模式”e%t”，文件”src/eat” 匹配于该模式，于是”src/a”就是其”茎”，如果这个模式定义在依赖目标中，而被依赖于这个模式的目标中又有个模式”c%r”，那么，目标就是”src/car”。（”茎”被传递）</p>\n<p><strong><em>\\</em>5、重载内建隐含规则**</strong></p>\n<p>你可以重载内建的隐含规则（或是定义一个全新的），例如你可以重新构造和内建隐含规则不同的命令，如：</p>\n<p>%.o : %.c<br>$(CC) -c $(CPPFLAGS) $(CFLAGS) -D$(date)</p>\n<p>你可以取消内建的隐含规则，只要不在后面写命令就行。如：</p>\n<p>%.o : %.s</p>\n<p>同样，你也可以重新定义一个全新的隐含规则，其在隐含规则中的位置取决于你在哪里写下这个规则。朝前的位置就靠前。</p>\n<h2 id=\"六、老式风格的”后缀规则”\"><a href=\"#六、老式风格的”后缀规则”\" class=\"headerlink\" title=\"\\六、老式风格的”后缀规则”**\"></a><strong><em>\\</em>六、老式风格的”后缀规则”**</strong></h2><p>后缀规则是一个比较老式的定义隐含规则的方法。后缀规则会被模式规则逐步地取代。因为模式规则更强更清晰。为了和老版本的Makefile兼容，GNU make同样兼容于这些东西。后缀规则有两种方式：”双后缀”和”单后缀”。</p>\n<p>双后缀规则定义了一对后缀：目标文件的后缀和依赖目标（源文件）的后缀。如”.c.o”相当于”%o : %c”。单后缀规则只定义一个后缀，也就是源文件的后缀。如”.c”相当于”% : %.c”。</p>\n<p>后缀规则中所定义的后缀应该是make所认识的，如果一个后缀是make所认识的，那么这个规则就是单后缀规则，而如果两个连在一起的后缀都被make所认识，那就是双后缀规则。例如：”.c”和”.o”都是make所知道。因而，如果你定义了一个规则是”.c.o”那么其就是双后缀规则，意义就是”.c” 是源文件的后缀，”.o”是目标文件的后缀。如下示例：</p>\n<p>.c.o:<br>$(CC) -c $(CFLAGS) $(CPPFLAGS) -o $@ $&lt;</p>\n<p>后缀规则不允许任何的依赖文件，如果有依赖文件的话，那就不是后缀规则，那些后缀统统被认为是文件名，如：</p>\n<p>.c.o: foo.h<br>$(CC) -c $(CFLAGS) $(CPPFLAGS) -o $@ $&lt;</p>\n<p>这个例子，就是说，文件”.c.o”依赖于文件”foo.h”，而不是我们想要的这样：</p>\n<p>%.o: %.c foo.h<br>$(CC) -c $(CFLAGS) $(CPPFLAGS) -o $@ $&lt;</p>\n<p>后缀规则中，如果没有命令，那是毫无意义的。因为他也不会移去内建的隐含规则。</p>\n<p>而要让make知道一些特定的后缀，我们可以使用伪目标”.SUFFIXES”来定义或是删除，如：</p>\n<p>.SUFFIXES: .hack .win</p>\n<p>把后缀.hack和.win加入后缀列表中的末尾。</p>\n<p>.SUFFIXES: # 删除默认的后缀<br>.SUFFIXES: .c .o .h # 定义自己的后缀</p>\n<p>先清楚默认后缀，后定义自己的后缀列表。</p>\n<p>make的参数”-r”或”-no-builtin-rules”也会使用得默认的后缀列表为空。而变量”SUFFIXE”被用来定义默认的后缀列表，你可以用”.SUFFIXES”来改变后缀列表，但请不要改变变量”SUFFIXE”的值。</p>\n<h2 id=\"七、隐含规则搜索算法\"><a href=\"#七、隐含规则搜索算法\" class=\"headerlink\" title=\"七、隐含规则搜索算法\"></a><strong>七、隐含规则搜索算法</strong></h2><p>比如我们有一个目标叫 T。下面是搜索目标T的规则的算法。请注意，在下面，我们没有提到后缀规则，原因是，所有的后缀规则在Makefile被载入内存时，会被转换成模式规则。如果目标是”archive(member)”的函数库文件模式，那么这个算法会被运行两次，第一次是找目标T，如果没有找到的话，那么进入第二次，第二次会把”member”当作T来搜索。</p>\n<blockquote>\n<p>1、把T的目录部分分离出来。叫D，而剩余部分叫N。（如：如果T是”src/foo.o”，那么，D就是”src/“，N就是”foo.o”）</p>\n<p>2、创建所有匹配于T或是N的模式规则列表。</p>\n<p>3、如果在模式规则列表中有匹配所有文件的模式，如”%”，那么从列表中移除其它的模式。</p>\n<p>4、移除列表中没有命令的规则。</p>\n<p>5、对于第一个在列表中的模式规则：</p>\n<blockquote>\n<p>1）推导其”茎”S，S应该是T或是N匹配于模式中”%”非空的部分。</p>\n</blockquote>\n<blockquote>\n<p>2）计算依赖文件。把依赖文件中的”%”都替换成”茎”S。如果目标模式中没有包含斜框字符，而把D加在第一个依赖文件的开头。</p>\n</blockquote>\n<blockquote>\n<p>3）测试是否所有的依赖文件都存在或是理当存在。（如果有一个文件被定义成另外一个规则的目标文件，或者是一个显式规则的依赖文件，那么这个文件就叫”理当存在”）</p>\n</blockquote>\n<blockquote>\n<p>4）如果所有的依赖文件存在或是理当存在，或是就没有依赖文件。那么这条规则将被采用，退出该算法。</p>\n</blockquote>\n<p>6、如果经过第5步，没有模式规则被找到，那么就做更进一步的搜索。对于存在于列表中的第一个模式规则：</p>\n<blockquote>\n<p>1）如果规则是终止规则，那就忽略它，继续下一条模式规则。</p>\n</blockquote>\n<blockquote>\n<p>2）计算依赖文件。（同第5步）</p>\n</blockquote>\n<blockquote>\n<p>3）测试所有的依赖文件是否存在或是理当存在。</p>\n</blockquote>\n<blockquote>\n<p>4）对于不存在的依赖文件，递归调用这个算法查找他是否可以被隐含规则找到。</p>\n</blockquote>\n<blockquote>\n<p>5）如果所有的依赖文件存在或是理当存在，或是就根本没有依赖文件。那么这条规则被采用，退出该算法。</p>\n</blockquote>\n<p>7、如果没有隐含规则可以使用，查看”.DEFAULT”规则，如果有，采用，把”.DEFAULT”的命令给T使用。</p>\n</blockquote>\n<p>一旦规则被找到，就会执行其相当的命令，而此时，我们的自动化变量的值才会生成。</p>\n<p>**<br>**</p>\n<h1 id=\"使用make更新函数库文件\"><a href=\"#使用make更新函数库文件\" class=\"headerlink\" title=\"\\使用make更新函数库文件**\"></a><strong><em>\\</em>使用make更新函数库文件**</strong></h1><p><strong>———————————</strong></p>\n<p>函数库文件也就是对Object文件（程序编译的中间文件）的打包文件。在Unix下，一般是由命令”ar”来完成打包工作。</p>\n<h2 id=\"一、函数库文件的成员\"><a href=\"#一、函数库文件的成员\" class=\"headerlink\" title=\"一、函数库文件的成员\"></a>一、函数库文件的成员</h2><p>一个函数库文件由多个文件组成。你可以以如下格式指定函数库文件及其组成：</p>\n<p>archive(member)</p>\n<p>这个不是一个命令，而一个目标和依赖的定义。一般来说，这种用法基本上就是为了”ar”命令来服务的。如：</p>\n<p>foolib(hack.o) : hack.o<br>ar cr foolib hack.o</p>\n<p>如果要指定多个member，那就以空格分开，如：</p>\n<p>foolib(hack.o kludge.o)</p>\n<p>其等价于：</p>\n<p>foolib(hack.o) foolib(kludge.o)</p>\n<p>你还可以使用Shell的文件通配符来定义，如：</p>\n<p>foolib(*.o)</p>\n<h2 id=\"二、函数库成员的隐含规则\"><a href=\"#二、函数库成员的隐含规则\" class=\"headerlink\" title=\"二、函数库成员的隐含规则\"></a><strong>二、函数库成员的隐含规则</strong></h2><p>当 make搜索一个目标的隐含规则时，一个特殊的特性是，如果这个目标是”a(m)”形式的，其会把目标变成”(m)”。于是，如果我们的成员是”%.o” 的模式定义，并且如果我们使用”make foo.a(bar.o)”的形式调用Makefile时，隐含规则会去找”bar.o”的规则，如果没有定义bar.o的规则，那么内建隐含规则生效，make会去找bar.c文件来生成bar.o，如果找得到的话，make执行的命令大致如下：</p>\n<p>cc -c bar.c -o bar.o<br>ar r foo.a bar.o<br>rm -f bar.o</p>\n<p>还有一个变量要注意的是”$%”，这是专属函数库文件的自动化变量，有关其说明请参见”自动化变量”一节。</p>\n<h2 id=\"三、函数库文件的后缀规则\"><a href=\"#三、函数库文件的后缀规则\" class=\"headerlink\" title=\"三、函数库文件的后缀规则\"></a><strong>三、函数库文件的后缀规则</strong></h2><p>你可以使用”后缀规则”和”隐含规则”来生成函数库打包文件，如：</p>\n<p>.c.a:<br>$(CC) $(CFLAGS) $(CPPFLAGS) -c $&lt; -o $<em>.o<br>$(AR) r $@ $</em>.o<br>$(RM) $*.o</p>\n<p>其等效于：</p>\n<p>(%.o) : %.c<br>$(CC) $(CFLAGS) $(CPPFLAGS) -c $&lt; -o $<em>.o<br>$(AR) r $@ $</em>.o<br>$(RM) $*.o</p>\n<h2 id=\"四、注意事项\"><a href=\"#四、注意事项\" class=\"headerlink\" title=\"\\四、注意事项**\"></a><strong><em>\\</em>四、注意事项**</strong></h2><p>在进行函数库打包文件生成时，请小心使用make的并行机制（”-j”参数）。如果多个ar命令在同一时间运行在同一个函数库打包文件上，就很有可以损坏这个函数库文件。所以，在make未来的版本中，应该提供一种机制来避免并行操作发生在函数打包文件上。<br>但就目前而言，你还是应该不要尽量不要使用”-j”参数。</p>\n<h1 id=\"后序\"><a href=\"#后序\" class=\"headerlink\" title=\"\\后序**\"></a><strong><em>\\</em>后序**</strong></h1><p><strong>——</strong></p>\n<p>终于到写结束语的时候了，以上基本上就是GNU make的Makefile的所有细节了。其它的产商的make基本上也就是这样的，无论什么样的make，都是以文件的依赖性为基础的，其基本是都是遵循一个标准的。这篇文档中80%的技术细节都适用于任何的make，我猜测”函数”那一章的内容可能不是其它make所支持的，而隐含规则方面，我想不同的make会有不同的实现，我没有精力来查看GNU的make和VC的nmake、BCB的make，或是别的UNIX下的make有些什么样的差别，一是时间精力不够，二是因为我基本上都是在Unix下使用make，以前在SCO Unix和IBM的AIX，现在在Linux、Solaris、HP-UX、AIX和Alpha下使用，Linux和Solaris下更多一点。不过，我可以肯定的是，在Unix下的make，无论是哪种平台，几乎都使用了Richard Stallman开发的make和cc/gcc的编译器，而且，基本上都是GNU的make（公司里所有的UNIX机器上都被装上了GNU的东西，所以，使用GNU的程序也就多了一些）。GNU的东西还是很不错的，特别是使用得深了以后，越来越觉得GNU的软件的强大，也越来越觉得GNU的在操作系统中（主要是Unix，甚至Windows）”杀伤力”。</p>\n<p>对于上述所有的make的细节，我们不但可以利用make这个工具来编译我们的程序，还可以利用make来完成其它的工作，因为规则中的命令可以是任何Shell之下的命令，所以，在Unix下，你不一定只是使用程序语言的编译器，你还可以在Makefile中书写其它的命令，如：tar、awk、mail、sed、cvs、compress、ls、rm、yacc、rpm、 ftp……等等，等等，来完成诸如”程序打包”、”程序备份”、”制作程序安装包”、”提交代码”、”使用程序模板”、”合并文件”等等五花八门的功能，文件操作，文件管理，编程开发设计，或是其它一些异想天开的东西。比如，以前在书写银行交易程序时，由于银行的交易程序基本一样，就见到有人书写了一些交易的通用程序模板，在该模板中把一些网络通讯、数据库操作的、业务操作共性的东西写在一个文件中，在这些文件中用些诸如”@@@N、###N”奇怪字串标注一些位置，然后书写交易时，只需按照一种特定的规则书写特定的处理，最后在make时，使用awk和sed，把模板中的”@@@N、###N”等字串替代成特定的程序，形成C文件，然后再编译。这个动作很像数据库的”扩展C”语言（即在C语言中用”EXEC　SQL”的样子执行SQL语句，在用 cc/gcc编译之前，需要使用”扩展C”的翻译程序，如cpre，把其翻译成标准C）。如果<br>你在使用make时有一些更为绝妙的方法，请记得告诉我啊。</p>\n<p>回头看看整篇文档，不觉记起几年前刚刚开始在Unix下做开发的时候，有人问我会不会写Makefile时，我两眼发直，根本不知道在说什么。一开始看到别人在vi中写完程序后输入”!make”时，还以为是vi的功能，后来才知道有一个Makefile在作怪，于是上网查啊查，那时又不愿意看英文，发现就根本没有中文的文档介绍Makefile，只得看别人写的Makefile，自己瞎碰瞎搞才积累了一点知识，但在很多地方完全是知其然不知所以然。后来开始从事UNIX下产品软件的开发，看到一个400人年，近200万行代码的大工程，发现要编译这样一个庞然大物，如果没有Makefile，那会是多么恐怖的一样事啊。于是横下心来，狠命地读了一堆英文文档，才觉得对其掌握了。但发现目前网上对Makefile介绍的文章还是少得那么的可怜，所以想写这样一篇文章，共享给大家，希望能对各位有所帮助。</p>\n<p>现在我终于写完了，看了看文件的创建时间，这篇技术文档也写了两个多月了。发现，自己知道是一回事，要写下来，跟别人讲述又是另外一回事，而且，现在越来越没有时间专研技术细节，所以在写作时，发现在阐述一些细节问题时很难做到严谨和精练，而且对先讲什么后讲什么不是很清楚，所以，还是参考了一些国外站点上的资料和题纲，以及一些技术书籍的语言风格，才得以完成。整篇文档的提纲是基于GNU的 Makefile技术手册的提纲来书写的，并结合了自己的工作经验，以及自己的学习历程。因为从来没有写过这么长，这么细的文档，所以一定会有很多地方存在表达问题，语言歧义或是错误。因些，我迫切地得等待各位给我指证和建议，以及任何的反馈。</p>\n<p>最后，还是利用这个后序，介绍一下自己。我目前从事于所有Unix平台下的软件研发，主要是做分布式计算/网格计算方面的系统产品软件，并且我对于下一代的计算机革命——网格计算非常地感兴趣，对于分布式计算、P2P、Web Service、J2EE技术方向也很感兴趣，同时，对于项目实施、团队管理、项目管理也小有心得，希望同样和我战斗在“技术和管理并重”的阵线上的年轻一代，能够和我多多地交流。我的MSN是：<a href=\"mailto:haoel@hotmail.com\">haoel@hotmail.com</a>（常用），QQ是：753640（不常用）。（注：请勿给我MSN的邮箱发信，由于hotmail的垃圾<br>邮件导致我拒收这个邮箱的所有来信）</p>\n<p>我欢迎任何形式的交流，无论是讨论技术还是管理，或是其它海阔天空的东西。除了政治和娱乐新闻我不关心，其它只要积极向上的东西我都欢迎！</p>\n<p>最最后，我还想介绍一下make程序的设计开发者。</p>\n<p>首当其冲的是： Richard Stallman</p>\n<p>开源软件的领袖和先驱，从来没有领过一天工资，从来没有使用过Windows操作系统。对于他的事迹和他的软件以及他的思想，我无需说过多的话，相信大家对这个人并不比我陌生，这是他的主页：<a href=\"http://www.stallman.org/\" target=\"_blank\" rel=\"noopener\">http://www.stallman.org/</a> 。</p>\n<p>第二位是：Roland McGrath</p>\n<p>个人主页是：<a href=\"http://www.frob.com/~roland/\" target=\"_blank\" rel=\"noopener\">http://www.frob.com/~roland/</a> ，下面是他的一些事迹：</p>\n<p>1） 合作编写了并维护GNU make。</p>\n<blockquote>\n<p>2） 和Thomas Bushnell一同编写了GNU Hurd。</p>\n<p>3） 编写并维护着GNU C library。</p>\n<p>4） 合作编写并维护着部分的GNU Emacs。</p>\n</blockquote>\n<p>在此，向这两位开源项目的斗士致以最真切的敬意。</p>\n"},{"title":"c++ 0--1","url":"/2020/10/10/c++%200--1/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\css\\APlayer.min.css\"><script src=\"\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\js\\Meting.min.js\"></script><h1 id=\"C-基础入门\"><a href=\"#C-基础入门\" class=\"headerlink\" title=\"C++基础入门\"></a>C++基础入门</h1><h2 id=\"1-C-初识\"><a href=\"#1-C-初识\" class=\"headerlink\" title=\"1 C++初识\"></a>1 C++初识</h2><h3 id=\"1-1-第一个C-程序\"><a href=\"#1-1-第一个C-程序\" class=\"headerlink\" title=\"1.1  第一个C++程序\"></a>1.1  第一个C++程序</h3><p>编写一个C++程序总共分为4个步骤</p>\n<ul>\n<li>创建项目</li>\n<li>创建文件</li>\n<li>编写代码</li>\n<li>运行程序</li>\n</ul>\n<h4 id=\"1-1-1-创建项目\"><a href=\"#1-1-1-创建项目\" class=\"headerlink\" title=\"1.1.1 创建项目\"></a>1.1.1 创建项目</h4><pre><code>Visual Studio是我们用来编写C++程序的主要工具，我们先将它打开</code></pre><p>![1541383178746](C:\\Users\\Zhenglin Li\\Desktop\\assets\\1541383178746.png)</p>\n<p>![1541384366413](C:\\Users\\Zhenglin Li\\Desktop\\assets\\1541384366413.png)</p>\n<h4 id=\"1-1-2-创建文件\"><a href=\"#1-1-2-创建文件\" class=\"headerlink\" title=\"1.1.2 创建文件\"></a>1.1.2 创建文件</h4><p>右键源文件，选择添加-&gt;新建项</p>\n<p>![1541383817248](C:\\Users\\Zhenglin Li\\Desktop\\assets\\1541383817248.png)</p>\n<p>给C++文件起个名称，然后点击添加即可。</p>\n<p>![1541384140042](C:\\Users\\Zhenglin Li\\Desktop\\assets\\1541384140042.png)</p>\n<h4 id=\"1-1-3-编写代码\"><a href=\"#1-1-3-编写代码\" class=\"headerlink\" title=\"1.1.3 编写代码\"></a>1.1.3 编写代码</h4><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Hello world\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-1-4-运行程序\"><a href=\"#1-1-4-运行程序\" class=\"headerlink\" title=\"1.1.4 运行程序\"></a>1.1.4 运行程序</h4><p>![1541384818688](C:\\Users\\Zhenglin Li\\Desktop\\assets\\1541384818688.png)</p>\n<h3 id=\"1-2-注释\"><a href=\"#1-2-注释\" class=\"headerlink\" title=\"1.2 注释\"></a>1.2 注释</h3><p><strong>作用</strong>：在代码中加一些说明和解释，方便自己或其他程序员程序员阅读代码</p>\n<p><strong>两种格式</strong></p>\n<ol>\n<li><strong>单行注释</strong>：<code>// 描述信息</code> <ul>\n<li>通常放在一行代码的上方，或者一条语句的末尾，==对该行代码说明==</li>\n</ul>\n</li>\n<li><strong>多行注释</strong>： <code>/* 描述信息 */</code><ul>\n<li>通常放在一段代码的上方，==对该段代码做整体说明==</li>\n</ul>\n</li>\n</ol>\n<blockquote>\n<p>提示：编译器在编译代码时，会忽略注释的内容</p>\n</blockquote>\n<h3 id=\"1-3-变量\"><a href=\"#1-3-变量\" class=\"headerlink\" title=\"1.3 变量\"></a>1.3 变量</h3><p><strong>作用</strong>：给一段指定的内存空间起名，方便操作这段内存</p>\n<p><strong>语法</strong>：<code>数据类型 变量名 = 初始值;</code></p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//变量的定义</span></span><br><span class=\"line\">\t<span class=\"comment\">//语法：数据类型  变量名 = 初始值</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"a = \"</span> &lt;&lt; a &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>注意：C++在创建变量时，必须给变量一个初始值，否则会报错</p>\n</blockquote>\n<h3 id=\"1-4-常量\"><a href=\"#1-4-常量\" class=\"headerlink\" title=\"1.4  常量\"></a>1.4  常量</h3><p><strong>作用</strong>：用于记录程序中不可更改的数据</p>\n<p>C++定义常量两种方式</p>\n<ol>\n<li><strong>#define</strong> 宏常量： <code>#define 常量名 常量值</code><ul>\n<li>==通常在文件上方定义==，表示一个常量</li>\n</ul>\n</li>\n</ol>\n<ol start=\"2\">\n<li><strong>const</strong>修饰的变量 <code>const 数据类型 常量名 = 常量值</code><ul>\n<li>==通常在变量定义前加关键字const==，修饰该变量为常量，不可修改</li>\n</ul>\n</li>\n</ol>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1、宏常量</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> day 7</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"一周里总共有 \"</span> &lt;&lt; day &lt;&lt; <span class=\"string\">\" 天\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"comment\">//day = 8;  //报错，宏常量不可以修改</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//2、const修饰变量</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"keyword\">int</span> month = <span class=\"number\">12</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"一年里总共有 \"</span> &lt;&lt; month &lt;&lt; <span class=\"string\">\" 个月份\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"comment\">//month = 24; //报错，常量是不可以修改的</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n<h3 id=\"1-5-关键字\"><a href=\"#1-5-关键字\" class=\"headerlink\" title=\"1.5 关键字\"></a>1.5 关键字</h3><p><strong>作用：</strong>关键字是C++中预先保留的单词（标识符）</p>\n<ul>\n<li><strong>在定义变量或者常量时候，不要用关键字</strong></li>\n</ul>\n<p>C++关键字如下：</p>\n<table>\n<thead>\n<tr>\n<th>asm</th>\n<th>do</th>\n<th>if</th>\n<th>return</th>\n<th>typedef</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>auto</td>\n<td>double</td>\n<td>inline</td>\n<td>short</td>\n<td>typeid</td>\n</tr>\n<tr>\n<td>bool</td>\n<td>dynamic_cast</td>\n<td>int</td>\n<td>signed</td>\n<td>typename</td>\n</tr>\n<tr>\n<td>break</td>\n<td>else</td>\n<td>long</td>\n<td>sizeof</td>\n<td>union</td>\n</tr>\n<tr>\n<td>case</td>\n<td>enum</td>\n<td>mutable</td>\n<td>static</td>\n<td>unsigned</td>\n</tr>\n<tr>\n<td>catch</td>\n<td>explicit</td>\n<td>namespace</td>\n<td>static_cast</td>\n<td>using</td>\n</tr>\n<tr>\n<td>char</td>\n<td>export</td>\n<td>new</td>\n<td>struct</td>\n<td>virtual</td>\n</tr>\n<tr>\n<td>class</td>\n<td>extern</td>\n<td>operator</td>\n<td>switch</td>\n<td>void</td>\n</tr>\n<tr>\n<td>const</td>\n<td>false</td>\n<td>private</td>\n<td>template</td>\n<td>volatile</td>\n</tr>\n<tr>\n<td>const_cast</td>\n<td>float</td>\n<td>protected</td>\n<td>this</td>\n<td>wchar_t</td>\n</tr>\n<tr>\n<td>continue</td>\n<td>for</td>\n<td>public</td>\n<td>throw</td>\n<td>while</td>\n</tr>\n<tr>\n<td>default</td>\n<td>friend</td>\n<td>register</td>\n<td>true</td>\n<td></td>\n</tr>\n<tr>\n<td>delete</td>\n<td>goto</td>\n<td>reinterpret_cast</td>\n<td>try</td>\n<td></td>\n</tr>\n</tbody></table>\n<p><code>提示：在给变量或者常量起名称时候，不要用C++得关键字，否则会产生歧义。</code></p>\n<h3 id=\"1-6-标识符命名规则\"><a href=\"#1-6-标识符命名规则\" class=\"headerlink\" title=\"1.6 标识符命名规则\"></a>1.6 标识符命名规则</h3><p><strong>作用</strong>：C++规定给标识符（变量、常量）命名时，有一套自己的规则</p>\n<ul>\n<li>标识符不能是关键字</li>\n<li>标识符只能由字母、数字、下划线组成</li>\n<li>第一个字符必须为字母或下划线</li>\n<li>标识符中字母区分大小写</li>\n</ul>\n<blockquote>\n<p>建议：给标识符命名时，争取做到见名知意的效果，方便自己和他人的阅读</p>\n</blockquote>\n<h2 id=\"2-数据类型\"><a href=\"#2-数据类型\" class=\"headerlink\" title=\"2 数据类型\"></a>2 数据类型</h2><p>C++规定在创建一个变量或者常量时，必须要指定出相应的数据类型，否则无法给变量分配内存</p>\n<h3 id=\"2-1-整型\"><a href=\"#2-1-整型\" class=\"headerlink\" title=\"2.1 整型\"></a>2.1 整型</h3><p><strong>作用</strong>：整型变量表示的是==整数类型==的数据</p>\n<p>C++中能够表示整型的类型有以下几种方式，<strong>区别在于所占内存空间不同</strong>：</p>\n<table>\n<thead>\n<tr>\n<th><strong>数据类型</strong></th>\n<th><strong>占用空间</strong></th>\n<th>取值范围</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>short(短整型)</td>\n<td>2字节</td>\n<td>(-2^15 ~ 2^15-1)</td>\n</tr>\n<tr>\n<td>int(整型)</td>\n<td>4字节</td>\n<td>(-2^31 ~ 2^31-1)</td>\n</tr>\n<tr>\n<td>long(长整形)</td>\n<td>Windows为4字节，Linux为4字节(32位)，8字节(64位)</td>\n<td>(-2^31 ~ 2^31-1)</td>\n</tr>\n<tr>\n<td>long long(长长整形)</td>\n<td>8字节</td>\n<td>(-2^63 ~ 2^63-1)</td>\n</tr>\n</tbody></table>\n<h3 id=\"2-2-sizeof关键字\"><a href=\"#2-2-sizeof关键字\" class=\"headerlink\" title=\"2.2 sizeof关键字\"></a>2.2 sizeof关键字</h3><p><strong>作用：</strong>利用sizeof关键字可以==统计数据类型所占内存大小==</p>\n<p><strong>语法：</strong> <code>sizeof( 数据类型 / 变量)</code></p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"short 类型所占内存空间为： \"</span> &lt;&lt; <span class=\"keyword\">sizeof</span>(short) &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"int 类型所占内存空间为： \"</span> &lt;&lt; <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>) &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"long 类型所占内存空间为： \"</span> &lt;&lt; <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">long</span>) &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"long long 类型所占内存空间为： \"</span> &lt;&lt; <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">long</span> <span class=\"keyword\">long</span>) &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<blockquote>\n<p><strong>整型结论</strong>：==short &lt; int &lt;= long &lt;= long long==</p>\n</blockquote>\n<h3 id=\"2-3-实型（浮点型）\"><a href=\"#2-3-实型（浮点型）\" class=\"headerlink\" title=\"2.3 实型（浮点型）\"></a>2.3 实型（浮点型）</h3><p><strong>作用</strong>：用于==表示小数==</p>\n<p>浮点型变量分为两种：</p>\n<ol>\n<li>单精度float </li>\n<li>双精度double</li>\n</ol>\n<p>两者的<strong>区别</strong>在于表示的有效数字范围不同。</p>\n<table>\n<thead>\n<tr>\n<th><strong>数据类型</strong></th>\n<th><strong>占用空间</strong></th>\n<th><strong>有效数字范围</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>float</td>\n<td>4字节</td>\n<td>7位有效数字</td>\n</tr>\n<tr>\n<td>double</td>\n<td>8字节</td>\n<td>15～16位有效数字</td>\n</tr>\n</tbody></table>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">float</span> f1 = <span class=\"number\">3.14f</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">double</span> d1 = <span class=\"number\">3.14</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; f1 &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; d1&lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"float  sizeof = \"</span> &lt;&lt; <span class=\"keyword\">sizeof</span>(f1) &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"double sizeof = \"</span> &lt;&lt; <span class=\"keyword\">sizeof</span>(d1) &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//科学计数法</span></span><br><span class=\"line\">\t<span class=\"keyword\">float</span> f2 = <span class=\"number\">3e2</span>; <span class=\"comment\">// 3 * 10 ^ 2 </span></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"f2 = \"</span> &lt;&lt; f2 &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">float</span> f3 = <span class=\"number\">3e-2</span>;  <span class=\"comment\">// 3 * 0.1 ^ 2</span></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"f3 = \"</span> &lt;&lt; f3 &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n<h3 id=\"2-4-字符型\"><a href=\"#2-4-字符型\" class=\"headerlink\" title=\"2.4 字符型\"></a>2.4 字符型</h3><p><strong>作用：</strong>字符型变量用于显示单个字符</p>\n<p><strong>语法：</strong><code>char ch = &#39;a&#39;;</code></p>\n<blockquote>\n<p>注意1：在显示字符型变量时，用单引号将字符括起来，不要用双引号</p>\n</blockquote>\n<blockquote>\n<p>注意2：单引号内只能有一个字符，不可以是字符串</p>\n</blockquote>\n<ul>\n<li>C和C++中字符型变量只占用==1个字节==。</li>\n<li>字符型变量并不是把字符本身放到内存中存储，而是将对应的ASCII编码放入到存储单元</li>\n</ul>\n<p>示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> ch = <span class=\"string\">'a'</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; ch &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">char</span>) &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//ch = \"abcde\"; //错误，不可以用双引号</span></span><br><span class=\"line\">\t<span class=\"comment\">//ch = 'abcde'; //错误，单引号内只能引用一个字符</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; (<span class=\"keyword\">int</span>)ch &lt;&lt; <span class=\"built_in\">endl</span>;  <span class=\"comment\">//查看字符a对应的ASCII码</span></span><br><span class=\"line\">\tch = <span class=\"number\">97</span>; <span class=\"comment\">//可以直接用ASCII给字符型变量赋值</span></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; ch &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>ASCII码表格：</p>\n<table>\n<thead>\n<tr>\n<th><strong>ASCII</strong>值</th>\n<th><strong>控制字符</strong></th>\n<th><strong>ASCII</strong>值</th>\n<th><strong>字符</strong></th>\n<th><strong>ASCII</strong>值</th>\n<th><strong>字符</strong></th>\n<th><strong>ASCII</strong>值</th>\n<th><strong>字符</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0</td>\n<td>NUT</td>\n<td>32</td>\n<td>(space)</td>\n<td>64</td>\n<td>@</td>\n<td>96</td>\n<td>、</td>\n</tr>\n<tr>\n<td>1</td>\n<td>SOH</td>\n<td>33</td>\n<td>!</td>\n<td>65</td>\n<td>A</td>\n<td>97</td>\n<td>a</td>\n</tr>\n<tr>\n<td>2</td>\n<td>STX</td>\n<td>34</td>\n<td>“</td>\n<td>66</td>\n<td>B</td>\n<td>98</td>\n<td>b</td>\n</tr>\n<tr>\n<td>3</td>\n<td>ETX</td>\n<td>35</td>\n<td>#</td>\n<td>67</td>\n<td>C</td>\n<td>99</td>\n<td>c</td>\n</tr>\n<tr>\n<td>4</td>\n<td>EOT</td>\n<td>36</td>\n<td>$</td>\n<td>68</td>\n<td>D</td>\n<td>100</td>\n<td>d</td>\n</tr>\n<tr>\n<td>5</td>\n<td>ENQ</td>\n<td>37</td>\n<td>%</td>\n<td>69</td>\n<td>E</td>\n<td>101</td>\n<td>e</td>\n</tr>\n<tr>\n<td>6</td>\n<td>ACK</td>\n<td>38</td>\n<td>&amp;</td>\n<td>70</td>\n<td>F</td>\n<td>102</td>\n<td>f</td>\n</tr>\n<tr>\n<td>7</td>\n<td>BEL</td>\n<td>39</td>\n<td>,</td>\n<td>71</td>\n<td>G</td>\n<td>103</td>\n<td>g</td>\n</tr>\n<tr>\n<td>8</td>\n<td>BS</td>\n<td>40</td>\n<td>(</td>\n<td>72</td>\n<td>H</td>\n<td>104</td>\n<td>h</td>\n</tr>\n<tr>\n<td>9</td>\n<td>HT</td>\n<td>41</td>\n<td>)</td>\n<td>73</td>\n<td>I</td>\n<td>105</td>\n<td>i</td>\n</tr>\n<tr>\n<td>10</td>\n<td>LF</td>\n<td>42</td>\n<td>*</td>\n<td>74</td>\n<td>J</td>\n<td>106</td>\n<td>j</td>\n</tr>\n<tr>\n<td>11</td>\n<td>VT</td>\n<td>43</td>\n<td>+</td>\n<td>75</td>\n<td>K</td>\n<td>107</td>\n<td>k</td>\n</tr>\n<tr>\n<td>12</td>\n<td>FF</td>\n<td>44</td>\n<td>,</td>\n<td>76</td>\n<td>L</td>\n<td>108</td>\n<td>l</td>\n</tr>\n<tr>\n<td>13</td>\n<td>CR</td>\n<td>45</td>\n<td>-</td>\n<td>77</td>\n<td>M</td>\n<td>109</td>\n<td>m</td>\n</tr>\n<tr>\n<td>14</td>\n<td>SO</td>\n<td>46</td>\n<td>.</td>\n<td>78</td>\n<td>N</td>\n<td>110</td>\n<td>n</td>\n</tr>\n<tr>\n<td>15</td>\n<td>SI</td>\n<td>47</td>\n<td>/</td>\n<td>79</td>\n<td>O</td>\n<td>111</td>\n<td>o</td>\n</tr>\n<tr>\n<td>16</td>\n<td>DLE</td>\n<td>48</td>\n<td>0</td>\n<td>80</td>\n<td>P</td>\n<td>112</td>\n<td>p</td>\n</tr>\n<tr>\n<td>17</td>\n<td>DCI</td>\n<td>49</td>\n<td>1</td>\n<td>81</td>\n<td>Q</td>\n<td>113</td>\n<td>q</td>\n</tr>\n<tr>\n<td>18</td>\n<td>DC2</td>\n<td>50</td>\n<td>2</td>\n<td>82</td>\n<td>R</td>\n<td>114</td>\n<td>r</td>\n</tr>\n<tr>\n<td>19</td>\n<td>DC3</td>\n<td>51</td>\n<td>3</td>\n<td>83</td>\n<td>S</td>\n<td>115</td>\n<td>s</td>\n</tr>\n<tr>\n<td>20</td>\n<td>DC4</td>\n<td>52</td>\n<td>4</td>\n<td>84</td>\n<td>T</td>\n<td>116</td>\n<td>t</td>\n</tr>\n<tr>\n<td>21</td>\n<td>NAK</td>\n<td>53</td>\n<td>5</td>\n<td>85</td>\n<td>U</td>\n<td>117</td>\n<td>u</td>\n</tr>\n<tr>\n<td>22</td>\n<td>SYN</td>\n<td>54</td>\n<td>6</td>\n<td>86</td>\n<td>V</td>\n<td>118</td>\n<td>v</td>\n</tr>\n<tr>\n<td>23</td>\n<td>TB</td>\n<td>55</td>\n<td>7</td>\n<td>87</td>\n<td>W</td>\n<td>119</td>\n<td>w</td>\n</tr>\n<tr>\n<td>24</td>\n<td>CAN</td>\n<td>56</td>\n<td>8</td>\n<td>88</td>\n<td>X</td>\n<td>120</td>\n<td>x</td>\n</tr>\n<tr>\n<td>25</td>\n<td>EM</td>\n<td>57</td>\n<td>9</td>\n<td>89</td>\n<td>Y</td>\n<td>121</td>\n<td>y</td>\n</tr>\n<tr>\n<td>26</td>\n<td>SUB</td>\n<td>58</td>\n<td>:</td>\n<td>90</td>\n<td>Z</td>\n<td>122</td>\n<td>z</td>\n</tr>\n<tr>\n<td>27</td>\n<td>ESC</td>\n<td>59</td>\n<td>;</td>\n<td>91</td>\n<td>[</td>\n<td>123</td>\n<td>{</td>\n</tr>\n<tr>\n<td>28</td>\n<td>FS</td>\n<td>60</td>\n<td>&lt;</td>\n<td>92</td>\n<td>/</td>\n<td>124</td>\n<td>|</td>\n</tr>\n<tr>\n<td>29</td>\n<td>GS</td>\n<td>61</td>\n<td>=</td>\n<td>93</td>\n<td>]</td>\n<td>125</td>\n<td>}</td>\n</tr>\n<tr>\n<td>30</td>\n<td>RS</td>\n<td>62</td>\n<td>&gt;</td>\n<td>94</td>\n<td>^</td>\n<td>126</td>\n<td>`</td>\n</tr>\n<tr>\n<td>31</td>\n<td>US</td>\n<td>63</td>\n<td>?</td>\n<td>95</td>\n<td>_</td>\n<td>127</td>\n<td>DEL</td>\n</tr>\n</tbody></table>\n<p>ASCII 码大致由以下<strong>两部分组</strong>成：</p>\n<ul>\n<li>ASCII 非打印控制字符： ASCII 表上的数字 <strong>0-31</strong> 分配给了控制字符，用于控制像打印机等一些外围设备。</li>\n<li>ASCII 打印字符：数字 <strong>32-126</strong> 分配给了能在键盘上找到的字符，当查看或打印文档时就会出现。</li>\n</ul>\n<h3 id=\"2-5-转义字符\"><a href=\"#2-5-转义字符\" class=\"headerlink\" title=\"2.5 转义字符\"></a>2.5 转义字符</h3><p><strong>作用：</strong>用于表示一些==不能显示出来的ASCII字符==</p>\n<p>现阶段我们常用的转义字符有：<code>\\n  \\\\  \\t</code></p>\n<table>\n<thead>\n<tr>\n<th><strong>转义字符</strong></th>\n<th><strong>含义</strong></th>\n<th><strong>ASCII</strong>码值（十进制）</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>\\a</td>\n<td>警报</td>\n<td>007</td>\n</tr>\n<tr>\n<td>\\b</td>\n<td>退格(BS) ，将当前位置移到前一列</td>\n<td>008</td>\n</tr>\n<tr>\n<td>\\f</td>\n<td>换页(FF)，将当前位置移到下页开头</td>\n<td>012</td>\n</tr>\n<tr>\n<td><strong>\\n</strong></td>\n<td><strong>换行(LF) ，将当前位置移到下一行开头</strong></td>\n<td><strong>010</strong></td>\n</tr>\n<tr>\n<td>\\r</td>\n<td>回车(CR) ，将当前位置移到本行开头</td>\n<td>013</td>\n</tr>\n<tr>\n<td><strong>\\t</strong></td>\n<td><strong>水平制表(HT)  （跳到下一个TAB位置）</strong></td>\n<td><strong>009</strong></td>\n</tr>\n<tr>\n<td>\\v</td>\n<td>垂直制表(VT)</td>\n<td>011</td>\n</tr>\n<tr>\n<td><strong>\\\\</strong></td>\n<td><strong>代表一个反斜线字符”&quot;</strong></td>\n<td><strong>092</strong></td>\n</tr>\n<tr>\n<td>&#39;</td>\n<td>代表一个单引号（撇号）字符</td>\n<td>039</td>\n</tr>\n<tr>\n<td>&quot;</td>\n<td>代表一个双引号字符</td>\n<td>034</td>\n</tr>\n<tr>\n<td>?</td>\n<td>代表一个问号</td>\n<td>063</td>\n</tr>\n<tr>\n<td>\\0</td>\n<td>数字0</td>\n<td>000</td>\n</tr>\n<tr>\n<td>\\ddd</td>\n<td>8进制转义字符，d范围0~7</td>\n<td>3位8进制</td>\n</tr>\n<tr>\n<td>\\xhh</td>\n<td>16进制转义字符，h范围0<del>9，a</del>f，A~F</td>\n<td>3位16进制</td>\n</tr>\n</tbody></table>\n<p>示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"\\\\\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"\\tHello\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"\\n\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n\n\n<h3 id=\"2-6-字符串型\"><a href=\"#2-6-字符串型\" class=\"headerlink\" title=\"2.6 字符串型\"></a>2.6 字符串型</h3><p><strong>作用</strong>：用于表示一串字符</p>\n<p><strong>两种风格</strong></p>\n<ol>\n<li><p><strong>C风格字符串</strong>： <code>char 变量名[] = &quot;字符串值&quot;</code></p>\n<p>示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">char</span> str1[] = <span class=\"string\">\"hello world\"</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; str1 &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<blockquote>\n<p>注意：C风格的字符串要用双引号括起来</p>\n</blockquote>\n<ol>\n<li><p><strong>C++风格字符串</strong>：  <code>string  变量名 = &quot;字符串值&quot;</code></p>\n<p>示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">string</span> str = <span class=\"string\">\"hello world\"</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; str &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ol>\n<blockquote>\n<p>注意：C++风格字符串，需要加入头文件==#include&lt;string&gt;==</p>\n</blockquote>\n<h3 id=\"2-7-布尔类型-bool\"><a href=\"#2-7-布尔类型-bool\" class=\"headerlink\" title=\"2.7 布尔类型 bool\"></a>2.7 布尔类型 bool</h3><p><strong>作用：</strong>布尔数据类型代表真或假的值 </p>\n<p>bool类型只有两个值：</p>\n<ul>\n<li>true  — 真（本质是1）</li>\n<li>false — 假（本质是0）</li>\n</ul>\n<p><strong>bool类型占==1个字节==大小</strong></p>\n<p>示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">bool</span> flag = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; flag &lt;&lt; <span class=\"built_in\">endl</span>; <span class=\"comment\">// 1</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tflag = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; flag &lt;&lt; <span class=\"built_in\">endl</span>; <span class=\"comment\">// 0</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"size of bool = \"</span> &lt;&lt; <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">bool</span>) &lt;&lt; <span class=\"built_in\">endl</span>; <span class=\"comment\">//1</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<h3 id=\"2-8-数据的输入\"><a href=\"#2-8-数据的输入\" class=\"headerlink\" title=\"2.8 数据的输入\"></a>2.8 数据的输入</h3><p><strong>作用：用于从键盘获取数据</strong></p>\n<p><strong>关键字：</strong>cin</p>\n<p><strong>语法：</strong> <code>cin &gt;&gt; 变量</code></p>\n<p>示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//整型输入</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> a = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"请输入整型变量：\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span> &gt;&gt; a;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; a &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//浮点型输入</span></span><br><span class=\"line\">\t<span class=\"keyword\">double</span> d = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"请输入浮点型变量：\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span> &gt;&gt; d;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; d &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//字符型输入</span></span><br><span class=\"line\">\t<span class=\"keyword\">char</span> ch = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"请输入字符型变量：\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span> &gt;&gt; ch;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; ch &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//字符串型输入</span></span><br><span class=\"line\">\t<span class=\"built_in\">string</span> str;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"请输入字符串型变量：\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span> &gt;&gt; str;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; str &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//布尔类型输入</span></span><br><span class=\"line\">\t<span class=\"keyword\">bool</span> flag = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"请输入布尔型变量：\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span> &gt;&gt; flag;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; flag &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> EXIT_SUCCESS;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n\n\n<h2 id=\"3-运算符\"><a href=\"#3-运算符\" class=\"headerlink\" title=\"3 运算符\"></a>3 运算符</h2><p><strong>作用：</strong>用于执行代码的运算</p>\n<p>本章我们主要讲解以下几类运算符：</p>\n<table>\n<thead>\n<tr>\n<th><strong>运算符类型</strong></th>\n<th><strong>作用</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>算术运算符</td>\n<td>用于处理四则运算</td>\n</tr>\n<tr>\n<td>赋值运算符</td>\n<td>用于将表达式的值赋给变量</td>\n</tr>\n<tr>\n<td>比较运算符</td>\n<td>用于表达式的比较，并返回一个真值或假值</td>\n</tr>\n<tr>\n<td>逻辑运算符</td>\n<td>用于根据表达式的值返回真值或假值</td>\n</tr>\n</tbody></table>\n<h3 id=\"3-1-算术运算符\"><a href=\"#3-1-算术运算符\" class=\"headerlink\" title=\"3.1 算术运算符\"></a>3.1 算术运算符</h3><p><strong>作用</strong>：用于处理四则运算 </p>\n<p>算术运算符包括以下符号：</p>\n<table>\n<thead>\n<tr>\n<th><strong>运算符</strong></th>\n<th><strong>术语</strong></th>\n<th><strong>示例</strong></th>\n<th><strong>结果</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>+</td>\n<td>正号</td>\n<td>+3</td>\n<td>3</td>\n</tr>\n<tr>\n<td>-</td>\n<td>负号</td>\n<td>-3</td>\n<td>-3</td>\n</tr>\n<tr>\n<td>+</td>\n<td>加</td>\n<td>10 + 5</td>\n<td>15</td>\n</tr>\n<tr>\n<td>-</td>\n<td>减</td>\n<td>10 - 5</td>\n<td>5</td>\n</tr>\n<tr>\n<td>*</td>\n<td>乘</td>\n<td>10 * 5</td>\n<td>50</td>\n</tr>\n<tr>\n<td>/</td>\n<td>除</td>\n<td>10 / 5</td>\n<td>2</td>\n</tr>\n<tr>\n<td>%</td>\n<td>取模(取余)</td>\n<td>10 % 3</td>\n<td>1</td>\n</tr>\n<tr>\n<td>++</td>\n<td>前置递增</td>\n<td>a=2; b=++a;</td>\n<td>a=3; b=3;</td>\n</tr>\n<tr>\n<td>++</td>\n<td>后置递增</td>\n<td>a=2; b=a++;</td>\n<td>a=3; b=2;</td>\n</tr>\n<tr>\n<td>–</td>\n<td>前置递减</td>\n<td>a=2; b=–a;</td>\n<td>a=1; b=1;</td>\n</tr>\n<tr>\n<td>–</td>\n<td>后置递减</td>\n<td>a=2; b=a–;</td>\n<td>a=1; b=2;</td>\n</tr>\n</tbody></table>\n<p><strong>示例1：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//加减乘除</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> a1 = <span class=\"number\">10</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> b1 = <span class=\"number\">3</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; a1 + b1 &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; a1 - b1 &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; a1 * b1 &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; a1 / b1 &lt;&lt; <span class=\"built_in\">endl</span>;  <span class=\"comment\">//两个整数相除结果依然是整数</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> a2 = <span class=\"number\">10</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> b2 = <span class=\"number\">20</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; a2 / b2 &lt;&lt; <span class=\"built_in\">endl</span>; </span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> a3 = <span class=\"number\">10</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> b3 = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"comment\">//cout &lt;&lt; a3 / b3 &lt;&lt; endl; //报错，除数不可以为0</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//两个小数可以相除</span></span><br><span class=\"line\">\t<span class=\"keyword\">double</span> d1 = <span class=\"number\">0.5</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">double</span> d2 = <span class=\"number\">0.25</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; d1 / d2 &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>总结：在除法运算中，除数不能为0</p>\n</blockquote>\n<p><strong>示例2：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//取模</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> a1 = <span class=\"number\">10</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> b1 = <span class=\"number\">3</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"number\">10</span> % <span class=\"number\">3</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> a2 = <span class=\"number\">10</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> b2 = <span class=\"number\">20</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; a2 % b2 &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> a3 = <span class=\"number\">10</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> b3 = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//cout &lt;&lt; a3 % b3 &lt;&lt; endl; //取模运算时，除数也不能为0</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//两个小数不可以取模</span></span><br><span class=\"line\">\t<span class=\"keyword\">double</span> d1 = <span class=\"number\">3.14</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">double</span> d2 = <span class=\"number\">1.1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//cout &lt;&lt; d1 % d2 &lt;&lt; endl;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>总结：只有整型变量可以进行取模运算</p>\n</blockquote>\n<p><strong>示例3：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//递增</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//后置递增</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">\ta++; <span class=\"comment\">//等价于a = a + 1</span></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; a &lt;&lt; <span class=\"built_in\">endl</span>; <span class=\"comment\">// 11</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//前置递增</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> b = <span class=\"number\">10</span>;</span><br><span class=\"line\">\t++b;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; b &lt;&lt; <span class=\"built_in\">endl</span>; <span class=\"comment\">// 11</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//区别</span></span><br><span class=\"line\">\t<span class=\"comment\">//前置递增先对变量进行++，再计算表达式</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> a2 = <span class=\"number\">10</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> b2 = ++a2 * <span class=\"number\">10</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; b2 &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//后置递增先计算表达式，后对变量进行++</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> a3 = <span class=\"number\">10</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> b3 = a3++ * <span class=\"number\">10</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; b3 &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>总结：前置递增先对变量进行++，再计算表达式，后置递增相反</p>\n</blockquote>\n<h3 id=\"3-2-赋值运算符\"><a href=\"#3-2-赋值运算符\" class=\"headerlink\" title=\"3.2 赋值运算符\"></a>3.2 赋值运算符</h3><p><strong>作用：</strong>用于将表达式的值赋给变量</p>\n<p>赋值运算符包括以下几个符号：</p>\n<table>\n<thead>\n<tr>\n<th><strong>运算符</strong></th>\n<th><strong>术语</strong></th>\n<th><strong>示例</strong></th>\n<th><strong>结果</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>=</td>\n<td>赋值</td>\n<td>a=2; b=3;</td>\n<td>a=2; b=3;</td>\n</tr>\n<tr>\n<td>+=</td>\n<td>加等于</td>\n<td>a=0; a+=2;</td>\n<td>a=2;</td>\n</tr>\n<tr>\n<td>-=</td>\n<td>减等于</td>\n<td>a=5; a-=3;</td>\n<td>a=2;</td>\n</tr>\n<tr>\n<td>*=</td>\n<td>乘等于</td>\n<td>a=2; a*=2;</td>\n<td>a=4;</td>\n</tr>\n<tr>\n<td>/=</td>\n<td>除等于</td>\n<td>a=4; a/=2;</td>\n<td>a=2;</td>\n</tr>\n<tr>\n<td>%=</td>\n<td>模等于</td>\n<td>a=3; a%2;</td>\n<td>a=1;</td>\n</tr>\n</tbody></table>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//赋值运算符</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// =</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">\ta = <span class=\"number\">100</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"a = \"</span> &lt;&lt; a &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// +=</span></span><br><span class=\"line\">\ta = <span class=\"number\">10</span>;</span><br><span class=\"line\">\ta += <span class=\"number\">2</span>; <span class=\"comment\">// a = a + 2;</span></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"a = \"</span> &lt;&lt; a &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// -=</span></span><br><span class=\"line\">\ta = <span class=\"number\">10</span>;</span><br><span class=\"line\">\ta -= <span class=\"number\">2</span>; <span class=\"comment\">// a = a - 2</span></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"a = \"</span> &lt;&lt; a &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// *=</span></span><br><span class=\"line\">\ta = <span class=\"number\">10</span>;</span><br><span class=\"line\">\ta *= <span class=\"number\">2</span>; <span class=\"comment\">// a = a * 2</span></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"a = \"</span> &lt;&lt; a &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// /=</span></span><br><span class=\"line\">\ta = <span class=\"number\">10</span>;</span><br><span class=\"line\">\ta /= <span class=\"number\">2</span>;  <span class=\"comment\">// a = a / 2;</span></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"a = \"</span> &lt;&lt; a &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// %=</span></span><br><span class=\"line\">\ta = <span class=\"number\">10</span>;</span><br><span class=\"line\">\ta %= <span class=\"number\">2</span>;  <span class=\"comment\">// a = a % 2;</span></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"a = \"</span> &lt;&lt; a &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n<h3 id=\"3-3-比较运算符\"><a href=\"#3-3-比较运算符\" class=\"headerlink\" title=\"3.3 比较运算符\"></a>3.3 比较运算符</h3><p><strong>作用：</strong>用于表达式的比较，并返回一个真值或假值</p>\n<p>比较运算符有以下符号：</p>\n<table>\n<thead>\n<tr>\n<th><strong>运算符</strong></th>\n<th><strong>术语</strong></th>\n<th><strong>示例</strong></th>\n<th><strong>结果</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>==</td>\n<td>相等于</td>\n<td>4 == 3</td>\n<td>0</td>\n</tr>\n<tr>\n<td>!=</td>\n<td>不等于</td>\n<td>4 != 3</td>\n<td>1</td>\n</tr>\n<tr>\n<td>&lt;</td>\n<td>小于</td>\n<td>4 &lt; 3</td>\n<td>0</td>\n</tr>\n<tr>\n<td>&gt;</td>\n<td>大于</td>\n<td>4 &gt; 3</td>\n<td>1</td>\n</tr>\n<tr>\n<td>&lt;=</td>\n<td>小于等于</td>\n<td>4 &lt;= 3</td>\n<td>0</td>\n</tr>\n<tr>\n<td>&gt;=</td>\n<td>大于等于</td>\n<td>4 &gt;= 1</td>\n<td>1</td>\n</tr>\n</tbody></table>\n<p>示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> b = <span class=\"number\">20</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; (a == b) &lt;&lt; <span class=\"built_in\">endl</span>; <span class=\"comment\">// 0 </span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; (a != b) &lt;&lt; <span class=\"built_in\">endl</span>; <span class=\"comment\">// 1</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; (a &gt; b) &lt;&lt; <span class=\"built_in\">endl</span>; <span class=\"comment\">// 0</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; (a &lt; b) &lt;&lt; <span class=\"built_in\">endl</span>; <span class=\"comment\">// 1</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; (a &gt;= b) &lt;&lt; <span class=\"built_in\">endl</span>; <span class=\"comment\">// 0</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; (a &lt;= b) &lt;&lt; <span class=\"built_in\">endl</span>; <span class=\"comment\">// 1</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>注意：C和C++ 语言的比较运算中， ==“真”用数字“1”来表示， “假”用数字“0”来表示。== </p>\n</blockquote>\n<h3 id=\"3-4-逻辑运算符\"><a href=\"#3-4-逻辑运算符\" class=\"headerlink\" title=\"3.4 逻辑运算符\"></a>3.4 逻辑运算符</h3><p><strong>作用：</strong>用于根据表达式的值返回真值或假值</p>\n<p>逻辑运算符有以下符号：</p>\n<table>\n<thead>\n<tr>\n<th><strong>运算符</strong></th>\n<th><strong>术语</strong></th>\n<th><strong>示例</strong></th>\n<th><strong>结果</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>!</td>\n<td>非</td>\n<td>!a</td>\n<td>如果a为假，则!a为真；  如果a为真，则!a为假。</td>\n</tr>\n<tr>\n<td>&amp;&amp;</td>\n<td>与</td>\n<td>a &amp;&amp; b</td>\n<td>如果a和b都为真，则结果为真，否则为假。</td>\n</tr>\n<tr>\n<td>||</td>\n<td>或</td>\n<td>a || b</td>\n<td>如果a和b有一个为真，则结果为真，二者都为假时，结果为假。</td>\n</tr>\n</tbody></table>\n<p><strong>示例1：</strong>逻辑非</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//逻辑运算符  --- 非</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; !a &lt;&lt; <span class=\"built_in\">endl</span>; <span class=\"comment\">// 0</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; !!a &lt;&lt; <span class=\"built_in\">endl</span>; <span class=\"comment\">// 1</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>总结： 真变假，假变真</p>\n</blockquote>\n<p><strong>示例2：</strong>逻辑与</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//逻辑运算符  --- 与</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> b = <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; (a &amp;&amp; b) &lt;&lt; <span class=\"built_in\">endl</span>;<span class=\"comment\">// 1</span></span><br><span class=\"line\"></span><br><span class=\"line\">\ta = <span class=\"number\">10</span>;</span><br><span class=\"line\">\tb = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; (a &amp;&amp; b) &lt;&lt; <span class=\"built_in\">endl</span>;<span class=\"comment\">// 0 </span></span><br><span class=\"line\"></span><br><span class=\"line\">\ta = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tb = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; (a &amp;&amp; b) &lt;&lt; <span class=\"built_in\">endl</span>;<span class=\"comment\">// 0</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>总结：逻辑==与==运算符总结： ==同真为真，其余为假==</p>\n</blockquote>\n<p><strong>示例3：</strong>逻辑或</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//逻辑运算符  --- 或</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> b = <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; (a || b) &lt;&lt; <span class=\"built_in\">endl</span>;<span class=\"comment\">// 1</span></span><br><span class=\"line\"></span><br><span class=\"line\">\ta = <span class=\"number\">10</span>;</span><br><span class=\"line\">\tb = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; (a || b) &lt;&lt; <span class=\"built_in\">endl</span>;<span class=\"comment\">// 1 </span></span><br><span class=\"line\"></span><br><span class=\"line\">\ta = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tb = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; (a || b) &lt;&lt; <span class=\"built_in\">endl</span>;<span class=\"comment\">// 0</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>逻辑==或==运算符总结： ==同假为假，其余为真==</p>\n</blockquote>\n<h2 id=\"4-程序流程结构\"><a href=\"#4-程序流程结构\" class=\"headerlink\" title=\"4 程序流程结构\"></a>4 程序流程结构</h2><p>C/C++支持最基本的三种程序运行结构：==顺序结构、选择结构、循环结构==</p>\n<ul>\n<li>顺序结构：程序按顺序执行，不发生跳转</li>\n<li>选择结构：依据条件是否满足，有选择的执行相应功能</li>\n<li>循环结构：依据条件是否满足，循环多次执行某段代码</li>\n</ul>\n<h3 id=\"4-1-选择结构\"><a href=\"#4-1-选择结构\" class=\"headerlink\" title=\"4.1 选择结构\"></a>4.1 选择结构</h3><h4 id=\"4-1-1-if语句\"><a href=\"#4-1-1-if语句\" class=\"headerlink\" title=\"4.1.1 if语句\"></a>4.1.1 if语句</h4><p><strong>作用：</strong>执行满足条件的语句</p>\n<p>if语句的三种形式</p>\n<ul>\n<li><p>单行格式if语句</p>\n</li>\n<li><p>多行格式if语句</p>\n</li>\n<li><p>多条件的if语句</p>\n</li>\n</ul>\n<ol>\n<li><p>单行格式if语句：<code>if(条件){ 条件满足执行的语句 }</code></p>\n<p>![img](C:\\Users\\Zhenglin Li\\Desktop\\assets\\clip_image002.png)</p>\n<p>示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//选择结构-单行if语句</span></span><br><span class=\"line\">\t<span class=\"comment\">//输入一个分数，如果分数大于600分，视为考上一本大学，并在屏幕上打印</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> score = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"请输入一个分数：\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span> &gt;&gt; score;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"您输入的分数为： \"</span> &lt;&lt; score &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//if语句</span></span><br><span class=\"line\">\t<span class=\"comment\">//注意事项，在if判断语句后面，不要加分号</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (score &gt; <span class=\"number\">600</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"我考上了一本大学！！！\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n</li>\n</ol>\n<blockquote>\n<p>注意：if条件表达式后不要加分号</p>\n</blockquote>\n<ol start=\"2\">\n<li>多行格式if语句：<code>if(条件){ 条件满足执行的语句 }else{ 条件不满足执行的语句 };</code></li>\n</ol>\n<p>![img](C:\\Users\\Zhenglin Li\\Desktop\\assets\\clip_image002-1541662519170.png)</p>\n<p>示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> score = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"请输入考试分数：\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cin</span> &gt;&gt; score;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (score &gt; <span class=\"number\">600</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"我考上了一本大学\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"我未考上一本大学\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n<ol start=\"3\">\n<li>多条件的if语句：<code>if(条件1){ 条件1满足执行的语句 }else if(条件2){条件2满足执行的语句}... else{ 都不满足执行的语句}</code></li>\n</ol>\n<p>![img](C:\\Users\\Zhenglin Li\\Desktop\\assets\\clip_image002-1541662566808.png)</p>\n<p>示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> score = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"请输入考试分数：\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cin</span> &gt;&gt; score;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (score &gt; <span class=\"number\">600</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"我考上了一本大学\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (score &gt; <span class=\"number\">500</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"我考上了二本大学\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (score &gt; <span class=\"number\">400</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"我考上了三本大学\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"我未考上本科\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n<p><strong>嵌套if语句</strong>：在if语句中，可以嵌套使用if语句，达到更精确的条件判断</p>\n<p>案例需求：</p>\n<ul>\n<li>提示用户输入一个高考考试分数，根据分数做如下判断</li>\n<li>分数如果大于600分视为考上一本，大于500分考上二本，大于400考上三本，其余视为未考上本科；</li>\n<li>在一本分数中，如果大于700分，考入北大，大于650分，考入清华，大于600考入人大。</li>\n</ul>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> score = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"请输入考试分数：\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cin</span> &gt;&gt; score;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (score &gt; <span class=\"number\">600</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"我考上了一本大学\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (score &gt; <span class=\"number\">700</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"我考上了北大\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (score &gt; <span class=\"number\">650</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"我考上了清华\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"我考上了人大\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (score &gt; <span class=\"number\">500</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"我考上了二本大学\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (score &gt; <span class=\"number\">400</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"我考上了三本大学\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"我未考上本科\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<p><strong>练习案例：</strong> 三只小猪称体重</p>\n<p>有三只小猪ABC，请分别输入三只小猪的体重，并且判断哪只小猪最重？![三只小猪](C:\\Users\\Zhenglin Li\\Desktop\\assets\\三只小猪.jpg)</p>\n<h4 id=\"4-1-2-三目运算符\"><a href=\"#4-1-2-三目运算符\" class=\"headerlink\" title=\"4.1.2 三目运算符\"></a>4.1.2 三目运算符</h4><p><strong>作用：</strong> 通过三目运算符实现简单的判断</p>\n<p><strong>语法：</strong><code>表达式1 ? 表达式2 ：表达式3</code></p>\n<p><strong>解释：</strong></p>\n<p>如果表达式1的值为真，执行表达式2，并返回表达式2的结果；</p>\n<p>如果表达式1的值为假，执行表达式3，并返回表达式3的结果。</p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> b = <span class=\"number\">20</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> c = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tc = a &gt; b ? a : b;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"c = \"</span> &lt;&lt; c &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//C++中三目运算符返回的是变量,可以继续赋值</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t(a &gt; b ? a : b) = <span class=\"number\">100</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"a = \"</span> &lt;&lt; a &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"b = \"</span> &lt;&lt; b &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"c = \"</span> &lt;&lt; c &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>总结：和if语句比较，三目运算符优点是短小整洁，缺点是如果用嵌套，结构不清晰</p>\n</blockquote>\n<h4 id=\"4-1-3-switch语句\"><a href=\"#4-1-3-switch语句\" class=\"headerlink\" title=\"4.1.3 switch语句\"></a>4.1.3 switch语句</h4><p><strong>作用：</strong>执行多条件分支语句</p>\n<p><strong>语法：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">switch</span>(表达式)</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">case</span> 结果<span class=\"number\">1</span>：执行语句;<span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">case</span> 结果<span class=\"number\">2</span>：执行语句;<span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t...</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">default</span>:执行语句;<span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//请给电影评分 </span></span><br><span class=\"line\">\t<span class=\"comment\">//10 ~ 9   经典   </span></span><br><span class=\"line\">\t<span class=\"comment\">// 8 ~ 7   非常好</span></span><br><span class=\"line\">\t<span class=\"comment\">// 6 ~ 5   一般</span></span><br><span class=\"line\">\t<span class=\"comment\">// 5分以下 烂片</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> score = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"请给电影打分\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span> &gt;&gt; score;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">switch</span> (score)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"number\">10</span>:</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"number\">9</span>:</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"经典\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"number\">8</span>:</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"非常好\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"number\">7</span>:</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"number\">6</span>:</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"一般\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"烂片\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>注意1：switch语句中表达式类型只能是整型或者字符型</p>\n</blockquote>\n<blockquote>\n<p>注意2：case里如果没有break，那么程序会一直向下执行</p>\n</blockquote>\n<blockquote>\n<p>总结：与if语句比，对于多条件判断时，switch的结构清晰，执行效率高，缺点是switch不可以判断区间</p>\n</blockquote>\n<h3 id=\"4-2-循环结构\"><a href=\"#4-2-循环结构\" class=\"headerlink\" title=\"4.2 循环结构\"></a>4.2 循环结构</h3><h4 id=\"4-2-1-while循环语句\"><a href=\"#4-2-1-while循环语句\" class=\"headerlink\" title=\"4.2.1 while循环语句\"></a>4.2.1 while循环语句</h4><p><strong>作用：</strong>满足循环条件，执行循环语句</p>\n<p><strong>语法：</strong><code>while(循环条件){ 循环语句 }</code></p>\n<p><strong>解释：</strong>==只要循环条件的结果为真，就执行循环语句==</p>\n<p>![img](C:\\Users\\Zhenglin Li\\Desktop\\assets\\clip_image002-1541668640382.png)</p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> num = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (num &lt; <span class=\"number\">10</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"num = \"</span> &lt;&lt; num &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t\tnum++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>注意：在执行循环语句时候，程序必须提供跳出循环的出口，否则出现死循环</p>\n</blockquote>\n<p><strong>while循环练习案例：</strong>==猜数字==</p>\n<p><strong>案例描述：</strong>系统随机生成一个1到100之间的数字，玩家进行猜测，如果猜错，提示玩家数字过大或过小，如果猜对恭喜玩家胜利，并且退出游戏。</p>\n<p>![猜数字](C:\\Users\\Zhenglin Li\\Desktop\\assets\\猜数字.jpg)</p>\n<h4 id=\"4-2-2-do…while循环语句\"><a href=\"#4-2-2-do…while循环语句\" class=\"headerlink\" title=\"4.2.2 do…while循环语句\"></a>4.2.2 do…while循环语句</h4><p><strong>作用：</strong> 满足循环条件，执行循环语句</p>\n<p><strong>语法：</strong> <code>do{ 循环语句 } while(循环条件);</code></p>\n<p><strong>注意：</strong>与while的区别在于==do…while会先执行一次循环语句==，再判断循环条件</p>\n<p>![img](C:\\Users\\Zhenglin Li\\Desktop\\assets\\clip_image002-1541671163478.png)</p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> num = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">do</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; num &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t\tnum++;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125; <span class=\"keyword\">while</span> (num &lt; <span class=\"number\">10</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>总结：与while循环区别在于，do…while先执行一次循环语句，再判断循环条件</p>\n</blockquote>\n<p><strong>练习案例：水仙花数</strong></p>\n<p><strong>案例描述：</strong>水仙花数是指一个 3 位数，它的每个位上的数字的 3次幂之和等于它本身</p>\n<p>例如：1^3 + 5^3+ 3^3 = 153</p>\n<p>请利用do…while语句，求出所有3位数中的水仙花数</p>\n<h4 id=\"4-2-3-for循环语句\"><a href=\"#4-2-3-for循环语句\" class=\"headerlink\" title=\"4.2.3 for循环语句\"></a>4.2.3 for循环语句</h4><p><strong>作用：</strong> 满足循环条件，执行循环语句</p>\n<p><strong>语法：</strong><code>for(起始表达式;条件表达式;末尾循环体) { 循环语句; }</code></p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; i &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<p><strong>详解：</strong></p>\n<p>![1541673704101](C:\\Users\\Zhenglin Li\\Desktop\\assets\\1541673704101.png)</p>\n<blockquote>\n<p>注意：for循环中的表达式，要用分号进行分隔</p>\n</blockquote>\n<blockquote>\n<p>总结：while , do…while, for都是开发中常用的循环语句，for循环结构比较清晰，比较常用</p>\n</blockquote>\n<p><strong>练习案例：敲桌子</strong></p>\n<p>案例描述：从1开始数到数字100， 如果数字个位含有7，或者数字十位含有7，或者该数字是7的倍数，我们打印敲桌子，其余数字直接打印输出。</p>\n<p>![timg](C:\\Users\\Zhenglin Li\\Desktop\\assets\\timg.gif)</p>\n<h4 id=\"4-2-4-嵌套循环\"><a href=\"#4-2-4-嵌套循环\" class=\"headerlink\" title=\"4.2.4 嵌套循环\"></a>4.2.4 嵌套循环</h4><p><strong>作用：</strong> 在循环体中再嵌套一层循环，解决一些实际问题</p>\n<p>例如我们想在屏幕中打印如下图片，就需要利用嵌套循环</p>\n<p>![1541676003486](C:\\Users\\Zhenglin Li\\Desktop\\assets\\1541676003486.png)</p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//外层循环执行1次，内层循环执行1轮</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">10</span>; j++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"*\"</span> &lt;&lt; <span class=\"string\">\" \"</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n\n\n<p><strong>练习案例：</strong>乘法口诀表</p>\n<p>案例描述：利用嵌套循环，实现九九乘法表</p>\n<p>![0006018857256120_b](C:\\Users\\Zhenglin Li\\Desktop\\assets\\0006018857256120_b.jpg)</p>\n<h3 id=\"4-3-跳转语句\"><a href=\"#4-3-跳转语句\" class=\"headerlink\" title=\"4.3 跳转语句\"></a>4.3 跳转语句</h3><h4 id=\"4-3-1-break语句\"><a href=\"#4-3-1-break语句\" class=\"headerlink\" title=\"4.3.1 break语句\"></a>4.3.1 break语句</h4><p><strong>作用:</strong> 用于跳出==选择结构==或者==循环结构==</p>\n<p>break使用的时机：</p>\n<ul>\n<li>出现在switch条件语句中，作用是终止case并跳出switch</li>\n<li>出现在循环语句中，作用是跳出当前的循环语句</li>\n<li>出现在嵌套循环中，跳出最近的内层循环语句</li>\n</ul>\n<p><strong>示例1：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//1、在switch 语句中使用break</span></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"请选择您挑战副本的难度：\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"1、普通\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"2、中等\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"3、困难\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> num = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cin</span> &gt;&gt; num;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">switch</span> (num)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"您选择的是普通难度\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"您选择的是中等难度\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"您选择的是困难难度\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>示例2：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//2、在循环语句中用break</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (i == <span class=\"number\">5</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>; <span class=\"comment\">//跳出循环语句</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; i &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>示例3：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//在嵌套循环语句中使用break，退出内层循环</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">10</span>; j++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (j == <span class=\"number\">5</span>)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"*\"</span> &lt;&lt; <span class=\"string\">\" \"</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<h4 id=\"4-3-2-continue语句\"><a href=\"#4-3-2-continue语句\" class=\"headerlink\" title=\"4.3.2 continue语句\"></a>4.3.2 continue语句</h4><p><strong>作用：</strong>在==循环语句==中，跳过本次循环中余下尚未执行的语句，继续执行下一次循环</p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (i % <span class=\"number\">2</span> == <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; i &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>注意：continue并没有使整个循环终止，而break会跳出循环</p>\n</blockquote>\n<h4 id=\"4-3-3-goto语句\"><a href=\"#4-3-3-goto语句\" class=\"headerlink\" title=\"4.3.3 goto语句\"></a>4.3.3 goto语句</h4><p><strong>作用：</strong>可以无条件跳转语句</p>\n<p><strong>语法：</strong> <code>goto 标记;</code></p>\n<p><strong>解释：</strong>如果标记的名称存在，执行到goto语句时，会跳转到标记的位置</p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"1\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">goto</span> FLAG;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"2\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"3\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"4\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tFLAG:</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"5\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>注意：在程序中不建议使用goto语句，以免造成程序流程混乱</p>\n</blockquote>\n<h2 id=\"5-数组\"><a href=\"#5-数组\" class=\"headerlink\" title=\"5 数组\"></a>5 数组</h2><h3 id=\"5-1-概述\"><a href=\"#5-1-概述\" class=\"headerlink\" title=\"5.1 概述\"></a>5.1 概述</h3><p>所谓数组，就是一个集合，里面存放了相同类型的数据元素</p>\n<p><strong>特点1：</strong>数组中的每个==数据元素都是相同的数据类型==</p>\n<p><strong>特点2：</strong>数组是由==连续的内存==位置组成的</p>\n<p>![1541748375356](C:\\Users\\Zhenglin Li\\Desktop\\assets\\1541748375356.png)</p>\n<h3 id=\"5-2-一维数组\"><a href=\"#5-2-一维数组\" class=\"headerlink\" title=\"5.2 一维数组\"></a>5.2 一维数组</h3><h4 id=\"5-2-1-一维数组定义方式\"><a href=\"#5-2-1-一维数组定义方式\" class=\"headerlink\" title=\"5.2.1 一维数组定义方式\"></a>5.2.1 一维数组定义方式</h4><p>一维数组定义的三种方式：</p>\n<ol>\n<li><code>数据类型  数组名[ 数组长度 ];</code></li>\n<li><code>数据类型  数组名[ 数组长度 ] = { 值1，值2 ...};</code></li>\n<li><code>数据类型  数组名[ ] = { 值1，值2 ...};</code></li>\n</ol>\n<p>示例</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//定义方式1</span></span><br><span class=\"line\">\t<span class=\"comment\">//数据类型 数组名[元素个数];</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> score[<span class=\"number\">10</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//利用下标赋值</span></span><br><span class=\"line\">\tscore[<span class=\"number\">0</span>] = <span class=\"number\">100</span>;</span><br><span class=\"line\">\tscore[<span class=\"number\">1</span>] = <span class=\"number\">99</span>;</span><br><span class=\"line\">\tscore[<span class=\"number\">2</span>] = <span class=\"number\">85</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//利用下标输出</span></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; score[<span class=\"number\">0</span>] &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; score[<span class=\"number\">1</span>] &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; score[<span class=\"number\">2</span>] &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//第二种定义方式</span></span><br><span class=\"line\">\t<span class=\"comment\">//数据类型 数组名[元素个数] =  &#123;值1，值2 ，值3 ...&#125;;</span></span><br><span class=\"line\">\t<span class=\"comment\">//如果&#123;&#125;内不足10个数据，剩余数据用0补全</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> score2[<span class=\"number\">10</span>] = &#123; <span class=\"number\">100</span>, <span class=\"number\">90</span>,<span class=\"number\">80</span>,<span class=\"number\">70</span>,<span class=\"number\">60</span>,<span class=\"number\">50</span>,<span class=\"number\">40</span>,<span class=\"number\">30</span>,<span class=\"number\">20</span>,<span class=\"number\">10</span> &#125;;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//逐个输出</span></span><br><span class=\"line\">\t<span class=\"comment\">//cout &lt;&lt; score2[0] &lt;&lt; endl;</span></span><br><span class=\"line\">\t<span class=\"comment\">//cout &lt;&lt; score2[1] &lt;&lt; endl;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//一个一个输出太麻烦，因此可以利用循环进行输出</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; score2[i] &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//定义方式3</span></span><br><span class=\"line\">\t<span class=\"comment\">//数据类型 数组名[] =  &#123;值1，值2 ，值3 ...&#125;;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> score3[] = &#123; <span class=\"number\">100</span>,<span class=\"number\">90</span>,<span class=\"number\">80</span>,<span class=\"number\">70</span>,<span class=\"number\">60</span>,<span class=\"number\">50</span>,<span class=\"number\">40</span>,<span class=\"number\">30</span>,<span class=\"number\">20</span>,<span class=\"number\">10</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; score3[i] &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>总结1：数组名的命名规范与变量名命名规范一致，不要和变量重名</p>\n</blockquote>\n<blockquote>\n<p>总结2：数组中下标是从0开始索引</p>\n</blockquote>\n<h4 id=\"5-2-2-一维数组数组名\"><a href=\"#5-2-2-一维数组数组名\" class=\"headerlink\" title=\"5.2.2 一维数组数组名\"></a>5.2.2 一维数组数组名</h4><p>一维数组名称的<strong>用途</strong>：</p>\n<ol>\n<li>可以统计整个数组在内存中的长度</li>\n<li>可以获取数组在内存中的首地址</li>\n</ol>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//数组名用途</span></span><br><span class=\"line\">\t<span class=\"comment\">//1、可以获取整个数组占用内存空间大小</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> arr[<span class=\"number\">10</span>] = &#123; <span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>,<span class=\"number\">10</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"整个数组所占内存空间为： \"</span> &lt;&lt; <span class=\"keyword\">sizeof</span>(arr) &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"每个元素所占内存空间为： \"</span> &lt;&lt; <span class=\"keyword\">sizeof</span>(arr[<span class=\"number\">0</span>]) &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"数组的元素个数为： \"</span> &lt;&lt; <span class=\"keyword\">sizeof</span>(arr) / <span class=\"keyword\">sizeof</span>(arr[<span class=\"number\">0</span>]) &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//2、可以通过数组名获取到数组首地址</span></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"数组首地址为： \"</span> &lt;&lt; (<span class=\"keyword\">int</span>)arr &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"数组中第一个元素地址为： \"</span> &lt;&lt; (<span class=\"keyword\">int</span>)&amp;arr[<span class=\"number\">0</span>] &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"数组中第二个元素地址为： \"</span> &lt;&lt; (<span class=\"keyword\">int</span>)&amp;arr[<span class=\"number\">1</span>] &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//arr = 100; 错误，数组名是常量，因此不可以赋值</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>注意：数组名是常量，不可以赋值</p>\n</blockquote>\n<blockquote>\n<p>总结1：直接打印数组名，可以查看数组所占内存的首地址</p>\n</blockquote>\n<blockquote>\n<p>总结2：对数组名进行sizeof，可以获取整个数组占内存空间的大小</p>\n</blockquote>\n<p><strong>练习案例1</strong>：五只小猪称体重</p>\n<p><strong>案例描述：</strong></p>\n<p>在一个数组中记录了五只小猪的体重，如：int arr[5] = {300,350,200,400,250};</p>\n<p>找出并打印最重的小猪体重。</p>\n<p><strong>练习案例2：</strong>数组元素逆置</p>\n<p><strong>案例描述：</strong>请声明一个5个元素的数组，并且将元素逆置.</p>\n<p>(如原数组元素为：1,3,2,5,4;逆置后输出结果为:4,5,2,3,1);</p>\n<h4 id=\"5-2-3-冒泡排序\"><a href=\"#5-2-3-冒泡排序\" class=\"headerlink\" title=\"5.2.3 冒泡排序\"></a>5.2.3 冒泡排序</h4><p><strong>作用：</strong> 最常用的排序算法，对数组内元素进行排序</p>\n<ol>\n<li>比较相邻的元素。如果第一个比第二个大，就交换他们两个。</li>\n<li>对每一对相邻元素做同样的工作，执行完毕后，找到第一个最大值。</li>\n<li>重复以上的步骤，每次比较次数-1，直到不需要比较</li>\n</ol>\n<p>![1541905327273](C:\\Users\\Zhenglin Li\\Desktop\\assets\\1541905327273.png)</p>\n<p><strong>示例：</strong> 将数组 { 4,2,8,0,5,7,1,3,9 } 进行升序排序</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> arr[<span class=\"number\">9</span>] = &#123; <span class=\"number\">4</span>,<span class=\"number\">2</span>,<span class=\"number\">8</span>,<span class=\"number\">0</span>,<span class=\"number\">5</span>,<span class=\"number\">7</span>,<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">9</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">9</span> - <span class=\"number\">1</span>; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">9</span> - <span class=\"number\">1</span> - i; j++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (arr[j] &gt; arr[j + <span class=\"number\">1</span>])</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> temp = arr[j];</span><br><span class=\"line\">\t\t\t\tarr[j] = arr[j + <span class=\"number\">1</span>];</span><br><span class=\"line\">\t\t\t\tarr[j + <span class=\"number\">1</span>] = temp;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">9</span>; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; arr[i] &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n<h3 id=\"5-3-二维数组\"><a href=\"#5-3-二维数组\" class=\"headerlink\" title=\"5.3 二维数组\"></a>5.3 二维数组</h3><p>二维数组就是在一维数组上，多加一个维度。</p>\n<p>![1541905559138](C:\\Users\\Zhenglin Li\\Desktop\\assets\\1541905559138.png)</p>\n<h4 id=\"5-3-1-二维数组定义方式\"><a href=\"#5-3-1-二维数组定义方式\" class=\"headerlink\" title=\"5.3.1 二维数组定义方式\"></a>5.3.1 二维数组定义方式</h4><p>二维数组定义的四种方式：</p>\n<ol>\n<li><code>数据类型  数组名[ 行数 ][ 列数 ];</code></li>\n<li><code>数据类型  数组名[ 行数 ][ 列数 ] = { {数据1，数据2 } ，{数据3，数据4 } };</code></li>\n<li><code>数据类型  数组名[ 行数 ][ 列数 ] = { 数据1，数据2，数据3，数据4};</code></li>\n<li><code>数据类型  数组名[  ][ 列数 ] = { 数据1，数据2，数据3，数据4};</code></li>\n</ol>\n<blockquote>\n<p>建议：以上4种定义方式，利用==第二种更加直观，提高代码的可读性==</p>\n</blockquote>\n<p>示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//方式1  </span></span><br><span class=\"line\">\t<span class=\"comment\">//数组类型 数组名 [行数][列数]</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> arr[<span class=\"number\">2</span>][<span class=\"number\">3</span>];</span><br><span class=\"line\">\tarr[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\tarr[<span class=\"number\">0</span>][<span class=\"number\">1</span>] = <span class=\"number\">2</span>;</span><br><span class=\"line\">\tarr[<span class=\"number\">0</span>][<span class=\"number\">2</span>] = <span class=\"number\">3</span>;</span><br><span class=\"line\">\tarr[<span class=\"number\">1</span>][<span class=\"number\">0</span>] = <span class=\"number\">4</span>;</span><br><span class=\"line\">\tarr[<span class=\"number\">1</span>][<span class=\"number\">1</span>] = <span class=\"number\">5</span>;</span><br><span class=\"line\">\tarr[<span class=\"number\">1</span>][<span class=\"number\">2</span>] = <span class=\"number\">6</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">2</span>; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">3</span>; j++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">cout</span> &lt;&lt; arr[i][j] &lt;&lt; <span class=\"string\">\" \"</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//方式2 </span></span><br><span class=\"line\">\t<span class=\"comment\">//数据类型 数组名[行数][列数] = &#123; &#123;数据1，数据2 &#125; ，&#123;数据3，数据4 &#125; &#125;;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> arr2[<span class=\"number\">2</span>][<span class=\"number\">3</span>] =</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;,</span><br><span class=\"line\">\t\t&#123;<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>&#125;</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//方式3</span></span><br><span class=\"line\">\t<span class=\"comment\">//数据类型 数组名[行数][列数] = &#123; 数据1，数据2 ,数据3，数据4  &#125;;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> arr3[<span class=\"number\">2</span>][<span class=\"number\">3</span>] = &#123; <span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span> &#125;; </span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//方式4 </span></span><br><span class=\"line\">\t<span class=\"comment\">//数据类型 数组名[][列数] = &#123; 数据1，数据2 ,数据3，数据4  &#125;;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> arr4[][<span class=\"number\">3</span>] = &#123; <span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span> &#125;;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>总结：在定义二维数组时，如果初始化了数据，可以省略行数</p>\n</blockquote>\n<h4 id=\"5-3-2-二维数组数组名\"><a href=\"#5-3-2-二维数组数组名\" class=\"headerlink\" title=\"5.3.2 二维数组数组名\"></a>5.3.2 二维数组数组名</h4><ul>\n<li>查看二维数组所占内存空间</li>\n<li>获取二维数组首地址</li>\n</ul>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//二维数组数组名</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> arr[<span class=\"number\">2</span>][<span class=\"number\">3</span>] =</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;,</span><br><span class=\"line\">\t\t&#123;<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>&#125;</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"二维数组大小： \"</span> &lt;&lt; <span class=\"keyword\">sizeof</span>(arr) &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"二维数组一行大小： \"</span> &lt;&lt; <span class=\"keyword\">sizeof</span>(arr[<span class=\"number\">0</span>]) &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"二维数组元素大小： \"</span> &lt;&lt; <span class=\"keyword\">sizeof</span>(arr[<span class=\"number\">0</span>][<span class=\"number\">0</span>]) &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"二维数组行数： \"</span> &lt;&lt; <span class=\"keyword\">sizeof</span>(arr) / <span class=\"keyword\">sizeof</span>(arr[<span class=\"number\">0</span>]) &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"二维数组列数： \"</span> &lt;&lt; <span class=\"keyword\">sizeof</span>(arr[<span class=\"number\">0</span>]) / <span class=\"keyword\">sizeof</span>(arr[<span class=\"number\">0</span>][<span class=\"number\">0</span>]) &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//地址</span></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"二维数组首地址：\"</span> &lt;&lt; arr &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"二维数组第一行地址：\"</span> &lt;&lt; arr[<span class=\"number\">0</span>] &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"二维数组第二行地址：\"</span> &lt;&lt; arr[<span class=\"number\">1</span>] &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"二维数组第一个元素地址：\"</span> &lt;&lt; &amp;arr[<span class=\"number\">0</span>][<span class=\"number\">0</span>] &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"二维数组第二个元素地址：\"</span> &lt;&lt; &amp;arr[<span class=\"number\">0</span>][<span class=\"number\">1</span>] &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>总结1：二维数组名就是这个数组的首地址</p>\n</blockquote>\n<blockquote>\n<p>总结2：对二维数组名进行sizeof时，可以获取整个二维数组占用的内存空间大小</p>\n</blockquote>\n<h4 id=\"5-3-3-二维数组应用案例\"><a href=\"#5-3-3-二维数组应用案例\" class=\"headerlink\" title=\"5.3.3 二维数组应用案例\"></a><strong>5.3.3 二维数组应用案例</strong></h4><p><strong>考试成绩统计：</strong></p>\n<p>案例描述：有三名同学（张三，李四，王五），在一次考试中的成绩分别如下表，<strong>请分别输出三名同学的总成绩</strong></p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>语文</th>\n<th>数学</th>\n<th>英语</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>张三</td>\n<td>100</td>\n<td>100</td>\n<td>100</td>\n</tr>\n<tr>\n<td>李四</td>\n<td>90</td>\n<td>50</td>\n<td>100</td>\n</tr>\n<tr>\n<td>王五</td>\n<td>60</td>\n<td>70</td>\n<td>80</td>\n</tr>\n</tbody></table>\n<p><strong>参考答案：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> scores[<span class=\"number\">3</span>][<span class=\"number\">3</span>] =</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t&#123;<span class=\"number\">100</span>,<span class=\"number\">100</span>,<span class=\"number\">100</span>&#125;,</span><br><span class=\"line\">\t\t&#123;<span class=\"number\">90</span>,<span class=\"number\">50</span>,<span class=\"number\">100</span>&#125;,</span><br><span class=\"line\">\t\t&#123;<span class=\"number\">60</span>,<span class=\"number\">70</span>,<span class=\"number\">80</span>&#125;,</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">string</span> names[<span class=\"number\">3</span>] = &#123; <span class=\"string\">\"张三\"</span>,<span class=\"string\">\"李四\"</span>,<span class=\"string\">\"王五\"</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">3</span>; j++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tsum += scores[i][j];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; names[i] &lt;&lt; <span class=\"string\">\"同学总成绩为： \"</span> &lt;&lt; sum &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n\n\n<h2 id=\"6-函数\"><a href=\"#6-函数\" class=\"headerlink\" title=\"6 函数\"></a>6 函数</h2><h3 id=\"6-1-概述\"><a href=\"#6-1-概述\" class=\"headerlink\" title=\"6.1 概述\"></a>6.1 概述</h3><p><strong>作用：</strong>将一段经常使用的代码封装起来，减少重复代码</p>\n<p>一个较大的程序，一般分为若干个程序块，每个模块实现特定的功能。</p>\n<h3 id=\"6-2-函数的定义\"><a href=\"#6-2-函数的定义\" class=\"headerlink\" title=\"6.2 函数的定义\"></a>6.2 函数的定义</h3><p>函数的定义一般主要有5个步骤：</p>\n<p>1、返回值类型 </p>\n<p>2、函数名</p>\n<p>3、参数表列</p>\n<p>4、函数体语句 </p>\n<p>5、return 表达式</p>\n<p><strong>语法：</strong> </p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\">返回值类型 函数名 （参数列表）</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">       函数体语句</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">return</span>表达式</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li>返回值类型 ：一个函数可以返回一个值。在函数定义中</li>\n<li>函数名：给函数起个名称</li>\n<li>参数列表：使用该函数时，传入的数据</li>\n<li>函数体语句：花括号内的代码，函数内需要执行的语句</li>\n<li>return表达式： 和返回值类型挂钩，函数执行完后，返回相应的数据</li>\n</ul>\n<p><strong>示例：</strong>定义一个加法函数，实现两个数相加</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//函数定义</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> num1, <span class=\"keyword\">int</span> num2)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> sum = num1 + num2;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n<h3 id=\"6-3-函数的调用\"><a href=\"#6-3-函数的调用\" class=\"headerlink\" title=\"6.3 函数的调用\"></a>6.3 函数的调用</h3><p><strong>功能：</strong>使用定义好的函数</p>\n<p><strong>语法：</strong><code>函数名（参数）</code></p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//函数定义</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> num1, <span class=\"keyword\">int</span> num2)</span> <span class=\"comment\">//定义中的num1,num2称为形式参数，简称形参</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> sum = num1 + num2;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> b = <span class=\"number\">10</span>;</span><br><span class=\"line\">\t<span class=\"comment\">//调用add函数</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> sum = add(a, b);<span class=\"comment\">//调用时的a，b称为实际参数，简称实参</span></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"sum = \"</span> &lt;&lt; sum &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\ta = <span class=\"number\">100</span>;</span><br><span class=\"line\">\tb = <span class=\"number\">100</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tsum = add(a, b);</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"sum = \"</span> &lt;&lt; sum &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>总结：函数定义里小括号内称为形参，函数调用时传入的参数称为实参</p>\n</blockquote>\n<h3 id=\"6-4-值传递\"><a href=\"#6-4-值传递\" class=\"headerlink\" title=\"6.4 值传递\"></a>6.4 值传递</h3><ul>\n<li>所谓值传递，就是函数调用时实参将数值传入给形参</li>\n<li>值传递时，==如果形参发生，并不会影响实参==</li>\n</ul>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(<span class=\"keyword\">int</span> num1, <span class=\"keyword\">int</span> num2)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"交换前：\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"num1 = \"</span> &lt;&lt; num1 &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"num2 = \"</span> &lt;&lt; num2 &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> temp = num1;</span><br><span class=\"line\">\tnum1 = num2;</span><br><span class=\"line\">\tnum2 = temp;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"交换后：\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"num1 = \"</span> &lt;&lt; num1 &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"num2 = \"</span> &lt;&lt; num2 &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//return ; 当函数声明时候，不需要返回值，可以不写return</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> b = <span class=\"number\">20</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tswap(a, b);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"mian中的 a = \"</span> &lt;&lt; a &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"mian中的 b = \"</span> &lt;&lt; b &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>总结： 值传递时，形参是修饰不了实参的</p>\n</blockquote>\n<h3 id=\"6-5-函数的常见样式\"><a href=\"#6-5-函数的常见样式\" class=\"headerlink\" title=\"6.5 函数的常见样式\"></a><strong>6.5 函数的常见样式</strong></h3><p>常见的函数样式有4种</p>\n<ol>\n<li>无参无返</li>\n<li>有参无返</li>\n<li>无参有返</li>\n<li>有参有返</li>\n</ol>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//函数常见样式</span></span><br><span class=\"line\"><span class=\"comment\">//1、 无参无返</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//void a = 10; //无类型不可以创建变量,原因无法分配内存</span></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"this is test01\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"comment\">//test01(); 函数调用</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//2、 有参无返</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test02</span><span class=\"params\">(<span class=\"keyword\">int</span> a)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"this is test02\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"a = \"</span> &lt;&lt; a &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//3、无参有返</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">test03</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"this is test03 \"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">10</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//4、有参有返</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">test04</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"this is test04 \"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> sum = a + b;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n<h3 id=\"6-6-函数的声明\"><a href=\"#6-6-函数的声明\" class=\"headerlink\" title=\"6.6 函数的声明\"></a>6.6 函数的声明</h3><p><strong>作用：</strong> 告诉编译器函数名称及如何调用函数。函数的实际主体可以单独定义。</p>\n<ul>\n<li>函数的<strong>声明可以多次</strong>，但是函数的<strong>定义只能有一次</strong></li>\n</ul>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//声明可以多次，定义只能一次</span></span><br><span class=\"line\"><span class=\"comment\">//声明</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">max</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">max</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span></span>;</span><br><span class=\"line\"><span class=\"comment\">//定义</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">max</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a &gt; b ? a : b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> a = <span class=\"number\">100</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> b = <span class=\"number\">200</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">max</span>(a, b) &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n<h3 id=\"6-7-函数的分文件编写\"><a href=\"#6-7-函数的分文件编写\" class=\"headerlink\" title=\"6.7 函数的分文件编写\"></a>6.7 函数的分文件编写</h3><p><strong>作用：</strong>让代码结构更加清晰</p>\n<p>函数分文件编写一般有4个步骤</p>\n<ol>\n<li>创建后缀名为.h的头文件  </li>\n<li>创建后缀名为.cpp的源文件</li>\n<li>在头文件中写函数的声明</li>\n<li>在源文件中写函数的定义</li>\n</ol>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//swap.h文件</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//实现两个数字交换的函数声明</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//swap.cpp文件</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"swap.h\"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> temp = a;</span><br><span class=\"line\">\ta = b;</span><br><span class=\"line\">\tb = temp;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"a = \"</span> &lt;&lt; a &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"b = \"</span> &lt;&lt; b &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//main函数文件</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"swap.h\"</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> a = <span class=\"number\">100</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> b = <span class=\"number\">200</span>;</span><br><span class=\"line\">\tswap(a, b);</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n\n\n<h2 id=\"7-指针\"><a href=\"#7-指针\" class=\"headerlink\" title=\"7 指针\"></a>7 指针</h2><h3 id=\"7-1-指针的基本概念\"><a href=\"#7-1-指针的基本概念\" class=\"headerlink\" title=\"7.1 指针的基本概念\"></a>7.1 指针的基本概念</h3><p><strong>指针的作用：</strong> 可以通过指针间接访问内存</p>\n<ul>\n<li>内存编号是从0开始记录的，一般用十六进制数字表示</li>\n<li>可以利用指针变量保存地址</li>\n</ul>\n<h3 id=\"7-2-指针变量的定义和使用\"><a href=\"#7-2-指针变量的定义和使用\" class=\"headerlink\" title=\"7.2 指针变量的定义和使用\"></a>7.2 指针变量的定义和使用</h3><p>指针变量定义语法： <code>数据类型 * 变量名；</code></p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//1、指针的定义</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> a = <span class=\"number\">10</span>; <span class=\"comment\">//定义整型变量a</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//指针定义语法： 数据类型 * 变量名 ;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> * p;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//指针变量赋值</span></span><br><span class=\"line\">\tp = &amp;a; <span class=\"comment\">//指针指向变量a的地址</span></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; &amp;a &lt;&lt; <span class=\"built_in\">endl</span>; <span class=\"comment\">//打印数据a的地址</span></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; p &lt;&lt; <span class=\"built_in\">endl</span>;  <span class=\"comment\">//打印指针变量p</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//2、指针的使用</span></span><br><span class=\"line\">\t<span class=\"comment\">//通过*操作指针变量指向的内存</span></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"*p = \"</span> &lt;&lt; *p &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>指针变量和普通变量的区别</p>\n<ul>\n<li>普通变量存放的是数据,指针变量存放的是地址</li>\n<li>指针变量可以通过” * “操作符，操作指针变量指向的内存空间，这个过程称为解引用</li>\n</ul>\n<blockquote>\n<p>总结1： 我们可以通过 &amp; 符号 获取变量的地址</p>\n</blockquote>\n<blockquote>\n<p>总结2：利用指针可以记录地址</p>\n</blockquote>\n<blockquote>\n<p>总结3：对指针变量解引用，可以操作指针指向的内存</p>\n</blockquote>\n<h3 id=\"7-3-指针所占内存空间\"><a href=\"#7-3-指针所占内存空间\" class=\"headerlink\" title=\"7.3 指针所占内存空间\"></a>7.3 指针所占内存空间</h3><p>提问：指针也是种数据类型，那么这种数据类型占用多少内存空间？</p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> * p;</span><br><span class=\"line\">\tp = &amp;a; <span class=\"comment\">//指针指向数据a的地址</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; *p &lt;&lt; <span class=\"built_in\">endl</span>; <span class=\"comment\">//* 解引用</span></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"keyword\">sizeof</span>(p) &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">char</span> *) &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">float</span> *) &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">double</span> *) &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>总结：所有指针类型在32位操作系统下是4个字节</p>\n</blockquote>\n<h3 id=\"7-4-空指针和野指针\"><a href=\"#7-4-空指针和野指针\" class=\"headerlink\" title=\"7.4 空指针和野指针\"></a>7.4 空指针和野指针</h3><p><strong>空指针</strong>：指针变量指向内存中编号为0的空间</p>\n<p><strong>用途：</strong>初始化指针变量</p>\n<p><strong>注意：</strong>空指针指向的内存是不可以访问的</p>\n<p><strong>示例1：空指针</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//指针变量p指向内存地址编号为0的空间</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> * p = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//访问空指针报错 </span></span><br><span class=\"line\">\t<span class=\"comment\">//内存编号0 ~255为系统占用内存，不允许用户访问</span></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; *p &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<p><strong>野指针</strong>：指针变量指向非法的内存空间</p>\n<p><strong>示例2：野指针</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//指针变量p指向内存地址编号为0x1100的空间</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> * p = (<span class=\"keyword\">int</span> *)<span class=\"number\">0x1100</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//访问野指针报错 </span></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; *p &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<blockquote>\n<p>总结：空指针和野指针都不是我们申请的空间，因此不要访问。</p>\n</blockquote>\n<h3 id=\"7-5-const修饰指针\"><a href=\"#7-5-const修饰指针\" class=\"headerlink\" title=\"7.5 const修饰指针\"></a>7.5 const修饰指针</h3><p>const修饰指针有三种情况</p>\n<ol>\n<li>const修饰指针   — 常量指针</li>\n<li>const修饰常量   — 指针常量</li>\n<li>const即修饰指针，又修饰常量</li>\n</ol>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> b = <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//const修饰的是指针，指针指向可以改，指针指向的值不可以更改</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"keyword\">int</span> * p1 = &amp;a; </span><br><span class=\"line\">\tp1 = &amp;b; <span class=\"comment\">//正确</span></span><br><span class=\"line\">\t<span class=\"comment\">//*p1 = 100;  报错</span></span><br><span class=\"line\">\t</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//const修饰的是常量，指针指向不可以改，指针指向的值可以更改</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> * <span class=\"keyword\">const</span> p2 = &amp;a;</span><br><span class=\"line\">\t<span class=\"comment\">//p2 = &amp;b; //错误</span></span><br><span class=\"line\">\t*p2 = <span class=\"number\">100</span>; <span class=\"comment\">//正确</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//const既修饰指针又修饰常量</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"keyword\">int</span> * <span class=\"keyword\">const</span> p3 = &amp;a;</span><br><span class=\"line\">\t<span class=\"comment\">//p3 = &amp;b; //错误</span></span><br><span class=\"line\">\t<span class=\"comment\">//*p3 = 100; //错误</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>技巧：看const右侧紧跟着的是指针还是常量, 是指针就是常量指针，是常量就是指针常量</p>\n</blockquote>\n<h3 id=\"7-6-指针和数组\"><a href=\"#7-6-指针和数组\" class=\"headerlink\" title=\"7.6 指针和数组\"></a>7.6 指针和数组</h3><p><strong>作用：</strong>利用指针访问数组中元素</p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> arr[] = &#123; <span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>,<span class=\"number\">10</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> * p = arr;  <span class=\"comment\">//指向数组的指针</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"第一个元素： \"</span> &lt;&lt; arr[<span class=\"number\">0</span>] &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"指针访问第一个元素： \"</span> &lt;&lt; *p &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//利用指针遍历数组</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; *p &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t\tp++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n<h3 id=\"7-7-指针和函数\"><a href=\"#7-7-指针和函数\" class=\"headerlink\" title=\"7.7 指针和函数\"></a>7.7 指针和函数</h3><p><strong>作用：</strong>利用指针作函数参数，可以修改实参的值</p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//值传递</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">swap1</span><span class=\"params\">(<span class=\"keyword\">int</span> a ,<span class=\"keyword\">int</span> b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> temp = a;</span><br><span class=\"line\">\ta = b; </span><br><span class=\"line\">\tb = temp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//地址传递</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">swap2</span><span class=\"params\">(<span class=\"keyword\">int</span> * p1, <span class=\"keyword\">int</span> *p2)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> temp = *p1;</span><br><span class=\"line\">\t*p1 = *p2;</span><br><span class=\"line\">\t*p2 = temp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> b = <span class=\"number\">20</span>;</span><br><span class=\"line\">\tswap1(a, b); <span class=\"comment\">// 值传递不会改变实参</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tswap2(&amp;a, &amp;b); <span class=\"comment\">//地址传递会改变实参</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"a = \"</span> &lt;&lt; a &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"b = \"</span> &lt;&lt; b &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>总结：如果不想修改实参，就用值传递，如果想修改实参，就用地址传递</p>\n</blockquote>\n<h3 id=\"7-8-指针、数组、函数\"><a href=\"#7-8-指针、数组、函数\" class=\"headerlink\" title=\"7.8 指针、数组、函数\"></a>7.8 指针、数组、函数</h3><p><strong>案例描述：</strong>封装一个函数，利用冒泡排序，实现对整型数组的升序排序</p>\n<p>例如数组：int arr[10] = { 4,3,6,9,1,2,10,8,7,5 };</p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//冒泡排序函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">bubbleSort</span><span class=\"params\">(<span class=\"keyword\">int</span> * arr, <span class=\"keyword\">int</span> len)</span>  <span class=\"comment\">//int * arr 也可以写为int arr[]</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; len - <span class=\"number\">1</span>; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; len - <span class=\"number\">1</span> - i; j++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (arr[j] &gt; arr[j + <span class=\"number\">1</span>])</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> temp = arr[j];</span><br><span class=\"line\">\t\t\t\tarr[j] = arr[j + <span class=\"number\">1</span>];</span><br><span class=\"line\">\t\t\t\tarr[j + <span class=\"number\">1</span>] = temp;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//打印数组函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">printArray</span><span class=\"params\">(<span class=\"keyword\">int</span> arr[], <span class=\"keyword\">int</span> len)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; len; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; arr[i] &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> arr[<span class=\"number\">10</span>] = &#123; <span class=\"number\">4</span>,<span class=\"number\">3</span>,<span class=\"number\">6</span>,<span class=\"number\">9</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">10</span>,<span class=\"number\">8</span>,<span class=\"number\">7</span>,<span class=\"number\">5</span> &#125;;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> len = <span class=\"keyword\">sizeof</span>(arr) / <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\tbubbleSort(arr, len);</span><br><span class=\"line\"></span><br><span class=\"line\">\tprintArray(arr, len);</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>总结：当数组名传入到函数作为参数时，被退化为指向首元素的指针</p>\n</blockquote>\n<h2 id=\"8-结构体\"><a href=\"#8-结构体\" class=\"headerlink\" title=\"8 结构体\"></a>8 结构体</h2><h3 id=\"8-1-结构体基本概念\"><a href=\"#8-1-结构体基本概念\" class=\"headerlink\" title=\"8.1 结构体基本概念\"></a>8.1 结构体基本概念</h3><p>结构体属于用户==自定义的数据类型==，允许用户存储不同的数据类型</p>\n<h3 id=\"8-2-结构体定义和使用\"><a href=\"#8-2-结构体定义和使用\" class=\"headerlink\" title=\"8.2 结构体定义和使用\"></a>8.2 结构体定义和使用</h3><p><strong>语法：</strong><code>struct 结构体名 { 结构体成员列表 }；</code></p>\n<p>通过结构体创建变量的方式有三种：</p>\n<ul>\n<li>struct 结构体名 变量名</li>\n<li>struct 结构体名 变量名 = { 成员1值 ， 成员2值…}</li>\n<li>定义结构体时顺便创建变量</li>\n</ul>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//结构体定义</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">student</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"comment\">//成员列表</span></span><br><span class=\"line\">\t<span class=\"built_in\">string</span> name;  <span class=\"comment\">//姓名</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> age;      <span class=\"comment\">//年龄</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> score;    <span class=\"comment\">//分数</span></span><br><span class=\"line\">&#125;stu3; <span class=\"comment\">//结构体变量创建方式3 </span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//结构体变量创建方式1</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">student</span> <span class=\"title\">stu1</span>;</span> <span class=\"comment\">//struct 关键字可以省略</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tstu1.name = <span class=\"string\">\"张三\"</span>;</span><br><span class=\"line\">\tstu1.age = <span class=\"number\">18</span>;</span><br><span class=\"line\">\tstu1.score = <span class=\"number\">100</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"姓名：\"</span> &lt;&lt; stu1.name &lt;&lt; <span class=\"string\">\" 年龄：\"</span> &lt;&lt; stu1.age  &lt;&lt; <span class=\"string\">\" 分数：\"</span> &lt;&lt; stu1.score &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//结构体变量创建方式2</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">student</span> <span class=\"title\">stu2</span> = &#123;</span> <span class=\"string\">\"李四\"</span>,<span class=\"number\">19</span>,<span class=\"number\">60</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"姓名：\"</span> &lt;&lt; stu2.name &lt;&lt; <span class=\"string\">\" 年龄：\"</span> &lt;&lt; stu2.age  &lt;&lt; <span class=\"string\">\" 分数：\"</span> &lt;&lt; stu2.score &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\tstu3.name = <span class=\"string\">\"王五\"</span>;</span><br><span class=\"line\">\tstu3.age = <span class=\"number\">18</span>;</span><br><span class=\"line\">\tstu3.score = <span class=\"number\">80</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"姓名：\"</span> &lt;&lt; stu3.name &lt;&lt; <span class=\"string\">\" 年龄：\"</span> &lt;&lt; stu3.age  &lt;&lt; <span class=\"string\">\" 分数：\"</span> &lt;&lt; stu3.score &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>总结1：定义结构体时的关键字是struct，不可省略</p>\n</blockquote>\n<blockquote>\n<p>总结2：创建结构体变量时，关键字struct可以省略</p>\n</blockquote>\n<blockquote>\n<p>总结3：结构体变量利用操作符 ‘’.’’  访问成员</p>\n</blockquote>\n<h3 id=\"8-3-结构体数组\"><a href=\"#8-3-结构体数组\" class=\"headerlink\" title=\"8.3 结构体数组\"></a>8.3 结构体数组</h3><p><strong>作用：</strong>将自定义的结构体放入到数组中方便维护</p>\n<p><strong>语法：</strong><code>struct  结构体名 数组名[元素个数] = {  {} , {} , ... {} }</code></p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//结构体定义</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">student</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"comment\">//成员列表</span></span><br><span class=\"line\">\t<span class=\"built_in\">string</span> name;  <span class=\"comment\">//姓名</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> age;      <span class=\"comment\">//年龄</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> score;    <span class=\"comment\">//分数</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//结构体数组</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">student</span> <span class=\"title\">arr</span>[3]=</span></span><br><span class=\"line\"><span class=\"class\">\t&#123;</span></span><br><span class=\"line\">\t\t&#123;<span class=\"string\">\"张三\"</span>,<span class=\"number\">18</span>,<span class=\"number\">80</span> &#125;,</span><br><span class=\"line\">\t\t&#123;<span class=\"string\">\"李四\"</span>,<span class=\"number\">19</span>,<span class=\"number\">60</span> &#125;,</span><br><span class=\"line\">\t\t&#123;<span class=\"string\">\"王五\"</span>,<span class=\"number\">20</span>,<span class=\"number\">70</span> &#125;</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"姓名：\"</span> &lt;&lt; arr[i].name &lt;&lt; <span class=\"string\">\" 年龄：\"</span> &lt;&lt; arr[i].age &lt;&lt; <span class=\"string\">\" 分数：\"</span> &lt;&lt; arr[i].score &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n<h3 id=\"8-4-结构体指针\"><a href=\"#8-4-结构体指针\" class=\"headerlink\" title=\"8.4 结构体指针\"></a>8.4 结构体指针</h3><p><strong>作用：</strong>通过指针访问结构体中的成员</p>\n<ul>\n<li>利用操作符 <code>-&gt;</code>可以通过结构体指针访问结构体属性</li>\n</ul>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//结构体定义</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">student</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"comment\">//成员列表</span></span><br><span class=\"line\">\t<span class=\"built_in\">string</span> name;  <span class=\"comment\">//姓名</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> age;      <span class=\"comment\">//年龄</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> score;    <span class=\"comment\">//分数</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">student</span> <span class=\"title\">stu</span> = &#123;</span> <span class=\"string\">\"张三\"</span>,<span class=\"number\">18</span>,<span class=\"number\">100</span>, &#125;;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">student</span> * <span class=\"title\">p</span> = &amp;<span class=\"title\">stu</span>;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\tp-&gt;score = <span class=\"number\">80</span>; <span class=\"comment\">//指针通过 -&gt; 操作符可以访问成员</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"姓名：\"</span> &lt;&lt; p-&gt;name &lt;&lt; <span class=\"string\">\" 年龄：\"</span> &lt;&lt; p-&gt;age &lt;&lt; <span class=\"string\">\" 分数：\"</span> &lt;&lt; p-&gt;score &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>总结：结构体指针可以通过 -&gt; 操作符 来访问结构体中的成员</p>\n</blockquote>\n<h3 id=\"8-5-结构体嵌套结构体\"><a href=\"#8-5-结构体嵌套结构体\" class=\"headerlink\" title=\"8.5 结构体嵌套结构体\"></a>8.5 结构体嵌套结构体</h3><p><strong>作用：</strong> 结构体中的成员可以是另一个结构体</p>\n<p><strong>例如：</strong>每个老师辅导一个学员，一个老师的结构体中，记录一个学生的结构体</p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//学生结构体定义</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">student</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"comment\">//成员列表</span></span><br><span class=\"line\">\t<span class=\"built_in\">string</span> name;  <span class=\"comment\">//姓名</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> age;      <span class=\"comment\">//年龄</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> score;    <span class=\"comment\">//分数</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//教师结构体定义</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">teacher</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//成员列表</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> id; <span class=\"comment\">//职工编号</span></span><br><span class=\"line\">\t<span class=\"built_in\">string</span> name;  <span class=\"comment\">//教师姓名</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> age;   <span class=\"comment\">//教师年龄</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">student</span> <span class=\"title\">stu</span>;</span> <span class=\"comment\">//子结构体 学生</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">teacher</span> <span class=\"title\">t1</span>;</span></span><br><span class=\"line\">\tt1.id = <span class=\"number\">10000</span>;</span><br><span class=\"line\">\tt1.name = <span class=\"string\">\"老王\"</span>;</span><br><span class=\"line\">\tt1.age = <span class=\"number\">40</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tt1.stu.name = <span class=\"string\">\"张三\"</span>;</span><br><span class=\"line\">\tt1.stu.age = <span class=\"number\">18</span>;</span><br><span class=\"line\">\tt1.stu.score = <span class=\"number\">100</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"教师 职工编号： \"</span> &lt;&lt; t1.id &lt;&lt; <span class=\"string\">\" 姓名： \"</span> &lt;&lt; t1.name &lt;&lt; <span class=\"string\">\" 年龄： \"</span> &lt;&lt; t1.age &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"辅导学员 姓名： \"</span> &lt;&lt; t1.stu.name &lt;&lt; <span class=\"string\">\" 年龄：\"</span> &lt;&lt; t1.stu.age &lt;&lt; <span class=\"string\">\" 考试分数： \"</span> &lt;&lt; t1.stu.score &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>总结：</strong>在结构体中可以定义另一个结构体作为成员，用来解决实际问题</p>\n<h3 id=\"8-6-结构体做函数参数\"><a href=\"#8-6-结构体做函数参数\" class=\"headerlink\" title=\"8.6 结构体做函数参数\"></a>8.6 结构体做函数参数</h3><p><strong>作用：</strong>将结构体作为参数向函数中传递</p>\n<p>传递方式有两种：</p>\n<ul>\n<li>值传递</li>\n<li>地址传递</li>\n</ul>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//学生结构体定义</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">student</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"comment\">//成员列表</span></span><br><span class=\"line\">\t<span class=\"built_in\">string</span> name;  <span class=\"comment\">//姓名</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> age;      <span class=\"comment\">//年龄</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> score;    <span class=\"comment\">//分数</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//值传递</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">printStudent</span><span class=\"params\">(student stu )</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tstu.age = <span class=\"number\">28</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"子函数中 姓名：\"</span> &lt;&lt; stu.name &lt;&lt; <span class=\"string\">\" 年龄： \"</span> &lt;&lt; stu.age  &lt;&lt; <span class=\"string\">\" 分数：\"</span> &lt;&lt; stu.score &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//地址传递</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">printStudent2</span><span class=\"params\">(student *stu)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tstu-&gt;age = <span class=\"number\">28</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"子函数中 姓名：\"</span> &lt;&lt; stu-&gt;name &lt;&lt; <span class=\"string\">\" 年龄： \"</span> &lt;&lt; stu-&gt;age  &lt;&lt; <span class=\"string\">\" 分数：\"</span> &lt;&lt; stu-&gt;score &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tstudent stu = &#123; <span class=\"string\">\"张三\"</span>,<span class=\"number\">18</span>,<span class=\"number\">100</span>&#125;;</span><br><span class=\"line\">\t<span class=\"comment\">//值传递</span></span><br><span class=\"line\">\tprintStudent(stu);</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"主函数中 姓名：\"</span> &lt;&lt; stu.name &lt;&lt; <span class=\"string\">\" 年龄： \"</span> &lt;&lt; stu.age &lt;&lt; <span class=\"string\">\" 分数：\"</span> &lt;&lt; stu.score &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//地址传递</span></span><br><span class=\"line\">\tprintStudent2(&amp;stu);</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"主函数中 姓名：\"</span> &lt;&lt; stu.name &lt;&lt; <span class=\"string\">\" 年龄： \"</span> &lt;&lt; stu.age  &lt;&lt; <span class=\"string\">\" 分数：\"</span> &lt;&lt; stu.score &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>总结：如果不想修改主函数中的数据，用值传递，反之用地址传递</p>\n</blockquote>\n<h3 id=\"8-7-结构体中-const使用场景\"><a href=\"#8-7-结构体中-const使用场景\" class=\"headerlink\" title=\"8.7 结构体中 const使用场景\"></a>8.7 结构体中 const使用场景</h3><p><strong>作用：</strong>用const来防止误操作</p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//学生结构体定义</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">student</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"comment\">//成员列表</span></span><br><span class=\"line\">\t<span class=\"built_in\">string</span> name;  <span class=\"comment\">//姓名</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> age;      <span class=\"comment\">//年龄</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> score;    <span class=\"comment\">//分数</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//const使用场景</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">printStudent</span><span class=\"params\">(<span class=\"keyword\">const</span> student *stu)</span> <span class=\"comment\">//加const防止函数体中的误操作</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//stu-&gt;age = 100; //操作失败，因为加了const修饰</span></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"姓名：\"</span> &lt;&lt; stu-&gt;name &lt;&lt; <span class=\"string\">\" 年龄：\"</span> &lt;&lt; stu-&gt;age &lt;&lt; <span class=\"string\">\" 分数：\"</span> &lt;&lt; stu-&gt;score &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tstudent stu = &#123; <span class=\"string\">\"张三\"</span>,<span class=\"number\">18</span>,<span class=\"number\">100</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\tprintStudent(&amp;stu);</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n<h3 id=\"8-8-结构体案例\"><a href=\"#8-8-结构体案例\" class=\"headerlink\" title=\"8.8 结构体案例\"></a>8.8 结构体案例</h3><h4 id=\"8-8-1-案例1\"><a href=\"#8-8-1-案例1\" class=\"headerlink\" title=\"8.8.1 案例1\"></a>8.8.1 案例1</h4><p><strong>案例描述：</strong></p>\n<p>学校正在做毕设项目，每名老师带领5个学生，总共有3名老师，需求如下</p>\n<p>设计学生和老师的结构体，其中在老师的结构体中，有老师姓名和一个存放5名学生的数组作为成员</p>\n<p>学生的成员有姓名、考试分数，创建数组存放3名老师，通过函数给每个老师及所带的学生赋值</p>\n<p>最终打印出老师数据以及老师所带的学生数据。</p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Student</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"built_in\">string</span> name;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> score;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Teacher</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"built_in\">string</span> name;</span><br><span class=\"line\">\tStudent sArray[<span class=\"number\">5</span>];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">allocateSpace</span><span class=\"params\">(Teacher tArray[] , <span class=\"keyword\">int</span> len)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">string</span> tName = <span class=\"string\">\"教师\"</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">string</span> sName = <span class=\"string\">\"学生\"</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">string</span> nameSeed = <span class=\"string\">\"ABCDE\"</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; len; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\ttArray[i].name = tName + nameSeed[i];</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">5</span>; j++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\ttArray[i].sArray[j].name = sName + nameSeed[j];</span><br><span class=\"line\">\t\t\ttArray[i].sArray[j].score = rand() % <span class=\"number\">61</span> + <span class=\"number\">40</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">printTeachers</span><span class=\"params\">(Teacher tArray[], <span class=\"keyword\">int</span> len)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; len; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; tArray[i].name &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">5</span>; j++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"\\t姓名：\"</span> &lt;&lt; tArray[i].sArray[j].name &lt;&lt; <span class=\"string\">\" 分数：\"</span> &lt;&lt; tArray[i].sArray[j].score &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tsrand((<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span>)time(<span class=\"literal\">NULL</span>)); <span class=\"comment\">//随机数种子 头文件 #include &lt;ctime&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tTeacher tArray[<span class=\"number\">3</span>]; <span class=\"comment\">//老师数组</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> len = <span class=\"keyword\">sizeof</span>(tArray) / <span class=\"keyword\">sizeof</span>(Teacher);</span><br><span class=\"line\"></span><br><span class=\"line\">\tallocateSpace(tArray, len); <span class=\"comment\">//创建数据</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tprintTeachers(tArray, len); <span class=\"comment\">//打印数据</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n<h4 id=\"8-8-2-案例2\"><a href=\"#8-8-2-案例2\" class=\"headerlink\" title=\"8.8.2 案例2\"></a>8.8.2 案例2</h4><p><strong>案例描述：</strong></p>\n<p>设计一个英雄的结构体，包括成员姓名，年龄，性别;创建结构体数组，数组中存放5名英雄。</p>\n<p>通过冒泡排序的算法，将数组中的英雄按照年龄进行升序排序，最终打印排序后的结果。</p>\n<p>五名英雄信息如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"string\">\"刘备\"</span>,<span class=\"number\">23</span>,<span class=\"string\">\"男\"</span>&#125;,</span><br><span class=\"line\">&#123;<span class=\"string\">\"关羽\"</span>,<span class=\"number\">22</span>,<span class=\"string\">\"男\"</span>&#125;,</span><br><span class=\"line\">&#123;<span class=\"string\">\"张飞\"</span>,<span class=\"number\">20</span>,<span class=\"string\">\"男\"</span>&#125;,</span><br><span class=\"line\">&#123;<span class=\"string\">\"赵云\"</span>,<span class=\"number\">21</span>,<span class=\"string\">\"男\"</span>&#125;,</span><br><span class=\"line\">&#123;<span class=\"string\">\"貂蝉\"</span>,<span class=\"number\">19</span>,<span class=\"string\">\"女\"</span>&#125;,</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//英雄结构体</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">hero</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"built_in\">string</span> name;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> age;</span><br><span class=\"line\">\t<span class=\"built_in\">string</span> sex;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">//冒泡排序</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">bubbleSort</span><span class=\"params\">(hero arr[] , <span class=\"keyword\">int</span> len)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; len - <span class=\"number\">1</span>; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; len - <span class=\"number\">1</span> - i; j++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (arr[j].age &gt; arr[j + <span class=\"number\">1</span>].age)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\thero temp = arr[j];</span><br><span class=\"line\">\t\t\t\tarr[j] = arr[j + <span class=\"number\">1</span>];</span><br><span class=\"line\">\t\t\t\tarr[j + <span class=\"number\">1</span>] = temp;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//打印数组</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">printHeros</span><span class=\"params\">(hero arr[], <span class=\"keyword\">int</span> len)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; len; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"姓名： \"</span> &lt;&lt; arr[i].name &lt;&lt; <span class=\"string\">\" 性别： \"</span> &lt;&lt; arr[i].sex &lt;&lt; <span class=\"string\">\" 年龄： \"</span> &lt;&lt; arr[i].age &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">hero</span> <span class=\"title\">arr</span>[5] =</span></span><br><span class=\"line\"><span class=\"class\">\t&#123;</span></span><br><span class=\"line\">\t\t&#123;<span class=\"string\">\"刘备\"</span>,<span class=\"number\">23</span>,<span class=\"string\">\"男\"</span>&#125;,</span><br><span class=\"line\">\t\t&#123;<span class=\"string\">\"关羽\"</span>,<span class=\"number\">22</span>,<span class=\"string\">\"男\"</span>&#125;,</span><br><span class=\"line\">\t\t&#123;<span class=\"string\">\"张飞\"</span>,<span class=\"number\">20</span>,<span class=\"string\">\"男\"</span>&#125;,</span><br><span class=\"line\">\t\t&#123;<span class=\"string\">\"赵云\"</span>,<span class=\"number\">21</span>,<span class=\"string\">\"男\"</span>&#125;,</span><br><span class=\"line\">\t\t&#123;<span class=\"string\">\"貂蝉\"</span>,<span class=\"number\">19</span>,<span class=\"string\">\"女\"</span>&#125;,</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> len = <span class=\"keyword\">sizeof</span>(arr) / <span class=\"keyword\">sizeof</span>(hero); <span class=\"comment\">//获取数组元素个数</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tbubbleSort(arr, len); <span class=\"comment\">//排序</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tprintHeros(arr, len); <span class=\"comment\">//打印</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"C-核心编程\"><a href=\"#C-核心编程\" class=\"headerlink\" title=\"C++核心编程\"></a>C++核心编程</h1><p>本阶段主要针对C++==面向对象==编程技术做详细讲解，探讨C++中的核心和精髓。</p>\n<h2 id=\"1-内存分区模型\"><a href=\"#1-内存分区模型\" class=\"headerlink\" title=\"1 内存分区模型\"></a>1 内存分区模型</h2><p>C++程序在执行时，将内存大方向划分为<strong>4个区域</strong></p>\n<ul>\n<li>代码区：存放函数体的二进制代码，由操作系统进行管理的</li>\n<li>全局区：存放全局变量和静态变量以及常量</li>\n<li>栈区：由编译器自动分配释放, 存放函数的参数值,局部变量等</li>\n<li>堆区：由程序员分配和释放,若程序员不释放,程序结束时由操作系统回收</li>\n</ul>\n<p><strong>内存四区意义：</strong></p>\n<p>不同区域存放的数据，赋予不同的生命周期, 给我们更大的灵活编程</p>\n<h3 id=\"1-1-程序运行前\"><a href=\"#1-1-程序运行前\" class=\"headerlink\" title=\"1.1 程序运行前\"></a>1.1 程序运行前</h3><p>​    在程序编译后，生成了exe可执行程序，<strong>未执行该程序前</strong>分为两个区域</p>\n<p>​    <strong>代码区：</strong></p>\n<p>​        存放 CPU 执行的机器指令</p>\n<p>​        代码区是<strong>共享</strong>的，共享的目的是对于频繁被执行的程序，只需要在内存中有一份代码即可</p>\n<p>​        代码区是<strong>只读</strong>的，使其只读的原因是防止程序意外地修改了它的指令</p>\n<p>​    <strong>全局区：</strong></p>\n<p>​        全局变量和静态变量存放在此.</p>\n<p>​        全局区还包含了常量区, 字符串常量和其他常量也存放在此.</p>\n<p>​        ==该区域的数据在程序结束后由操作系统释放==.</p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//全局变量</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> g_a = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> g_b = <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//全局常量</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> c_g_a = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> c_g_b = <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//局部变量</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> b = <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//打印地址</span></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"局部变量a地址为： \"</span> &lt;&lt; (<span class=\"keyword\">int</span>)&amp;a &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"局部变量b地址为： \"</span> &lt;&lt; (<span class=\"keyword\">int</span>)&amp;b &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"全局变量g_a地址为： \"</span> &lt;&lt;  (<span class=\"keyword\">int</span>)&amp;g_a &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"全局变量g_b地址为： \"</span> &lt;&lt;  (<span class=\"keyword\">int</span>)&amp;g_b &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//静态变量</span></span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">int</span> s_a = <span class=\"number\">10</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">int</span> s_b = <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"静态变量s_a地址为： \"</span> &lt;&lt; (<span class=\"keyword\">int</span>)&amp;s_a &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"静态变量s_b地址为： \"</span> &lt;&lt; (<span class=\"keyword\">int</span>)&amp;s_b &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"字符串常量地址为： \"</span> &lt;&lt; (<span class=\"keyword\">int</span>)&amp;<span class=\"string\">\"hello world\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"字符串常量地址为： \"</span> &lt;&lt; (<span class=\"keyword\">int</span>)&amp;<span class=\"string\">\"hello world1\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"全局常量c_g_a地址为： \"</span> &lt;&lt; (<span class=\"keyword\">int</span>)&amp;c_g_a &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"全局常量c_g_b地址为： \"</span> &lt;&lt; (<span class=\"keyword\">int</span>)&amp;c_g_b &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"keyword\">int</span> c_l_a = <span class=\"number\">10</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"keyword\">int</span> c_l_b = <span class=\"number\">10</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"局部常量c_l_a地址为： \"</span> &lt;&lt; (<span class=\"keyword\">int</span>)&amp;c_l_a &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"局部常量c_l_b地址为： \"</span> &lt;&lt; (<span class=\"keyword\">int</span>)&amp;c_l_b &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>打印结果：</p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"assets/1545017602518.png\" alt=\"1545017602518\"></p>\n<p>总结：</p>\n<ul>\n<li>C++中在程序运行前分为全局区和代码区</li>\n<li>代码区特点是共享和只读</li>\n<li>全局区中存放全局变量、静态变量、常量</li>\n<li>常量区中存放 const修饰的全局常量  和 字符串常量</li>\n</ul>\n<h3 id=\"1-2-程序运行后\"><a href=\"#1-2-程序运行后\" class=\"headerlink\" title=\"1.2 程序运行后\"></a>1.2 程序运行后</h3><p>​    <strong>栈区：</strong></p>\n<p>​        由编译器自动分配释放, 存放函数的参数值,局部变量等</p>\n<p>​        注意事项：不要返回局部变量的地址，栈区开辟的数据由编译器自动释放</p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> * <span class=\"title\">func</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &amp;a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> *p = func();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; *p &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; *p &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<p>​    <strong>堆区：</strong></p>\n<p>​        由程序员分配释放,若程序员不释放,程序结束时由操作系统回收</p>\n<p>​        在C++中主要利用new在堆区开辟内存</p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span>* <span class=\"title\">func</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span>* a = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>(<span class=\"number\">10</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> *p = func();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; *p &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; *p &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>总结：</strong></p>\n<p>堆区数据由程序员管理开辟和释放</p>\n<p>堆区数据利用new关键字进行开辟内存</p>\n<h3 id=\"1-3-new操作符\"><a href=\"#1-3-new操作符\" class=\"headerlink\" title=\"1.3 new操作符\"></a>1.3 new操作符</h3><p>​    C++中利用==new==操作符在堆区开辟数据</p>\n<p>​    堆区开辟的数据，由程序员手动开辟，手动释放，释放利用操作符 ==delete==</p>\n<p>​    语法：<code>new 数据类型</code></p>\n<p>​    利用new创建的数据，会返回该数据对应的类型的指针</p>\n<p><strong>示例1： 基本语法</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span>* <span class=\"title\">func</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span>* a = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>(<span class=\"number\">10</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> *p = func();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; *p &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; *p &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//利用delete释放堆区数据</span></span><br><span class=\"line\">\t<span class=\"keyword\">delete</span> p;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//cout &lt;&lt; *p &lt;&lt; endl; //报错，释放的空间不可访问</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>示例2：开辟数组</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//堆区开辟数组</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span>* arr = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">10</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tarr[i] = i + <span class=\"number\">100</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; arr[i] &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//释放数组 delete 后加 []</span></span><br><span class=\"line\">\t<span class=\"keyword\">delete</span>[] arr;</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n<h2 id=\"2-引用\"><a href=\"#2-引用\" class=\"headerlink\" title=\"2 引用\"></a>2 引用</h2><h3 id=\"2-1-引用的基本使用\"><a href=\"#2-1-引用的基本使用\" class=\"headerlink\" title=\"2.1 引用的基本使用\"></a>2.1 引用的基本使用</h3><p>*<em>作用： *</em>给变量起别名</p>\n<p><strong>语法：</strong> <code>数据类型 &amp;别名 = 原名</code></p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> &amp;b = a;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"a = \"</span> &lt;&lt; a &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"b = \"</span> &lt;&lt; b &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tb = <span class=\"number\">100</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"a = \"</span> &lt;&lt; a &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"b = \"</span> &lt;&lt; b &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h3 id=\"2-2-引用注意事项\"><a href=\"#2-2-引用注意事项\" class=\"headerlink\" title=\"2.2 引用注意事项\"></a>2.2 引用注意事项</h3><ul>\n<li>引用必须初始化</li>\n<li>引用在初始化后，不可以改变</li>\n</ul>\n<p>示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> b = <span class=\"number\">20</span>;</span><br><span class=\"line\">\t<span class=\"comment\">//int &amp;c; //错误，引用必须初始化</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> &amp;c = a; <span class=\"comment\">//一旦初始化后，就不可以更改</span></span><br><span class=\"line\">\tc = b; <span class=\"comment\">//这是赋值操作，不是更改引用</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"a = \"</span> &lt;&lt; a &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"b = \"</span> &lt;&lt; b &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"c = \"</span> &lt;&lt; c &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n<h3 id=\"2-3-引用做函数参数\"><a href=\"#2-3-引用做函数参数\" class=\"headerlink\" title=\"2.3 引用做函数参数\"></a>2.3 引用做函数参数</h3><p><strong>作用：</strong>函数传参时，可以利用引用的技术让形参修饰实参</p>\n<p><strong>优点：</strong>可以简化指针修改实参</p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1. 值传递</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">mySwap01</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> temp = a;</span><br><span class=\"line\">\ta = b;</span><br><span class=\"line\">\tb = temp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//2. 地址传递</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">mySwap02</span><span class=\"params\">(<span class=\"keyword\">int</span>* a, <span class=\"keyword\">int</span>* b)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> temp = *a;</span><br><span class=\"line\">\t*a = *b;</span><br><span class=\"line\">\t*b = temp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//3. 引用传递</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">mySwap03</span><span class=\"params\">(<span class=\"keyword\">int</span>&amp; a, <span class=\"keyword\">int</span>&amp; b)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> temp = a;</span><br><span class=\"line\">\ta = b;</span><br><span class=\"line\">\tb = temp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> b = <span class=\"number\">20</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tmySwap01(a, b);</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"a:\"</span> &lt;&lt; a &lt;&lt; <span class=\"string\">\" b:\"</span> &lt;&lt; b &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tmySwap02(&amp;a, &amp;b);</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"a:\"</span> &lt;&lt; a &lt;&lt; <span class=\"string\">\" b:\"</span> &lt;&lt; b &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tmySwap03(a, b);</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"a:\"</span> &lt;&lt; a &lt;&lt; <span class=\"string\">\" b:\"</span> &lt;&lt; b &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>总结：通过引用参数产生的效果同按地址传递是一样的。引用的语法更清楚简单</p>\n</blockquote>\n<h3 id=\"2-4-引用做函数返回值\"><a href=\"#2-4-引用做函数返回值\" class=\"headerlink\" title=\"2.4 引用做函数返回值\"></a>2.4 引用做函数返回值</h3><p>作用：引用是可以作为函数的返回值存在的</p>\n<p>注意：<strong>不要返回局部变量引用</strong></p>\n<p>用法：函数调用作为左值</p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//返回局部变量引用</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span>&amp; <span class=\"title\">test01</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> a = <span class=\"number\">10</span>; <span class=\"comment\">//局部变量</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//返回静态变量引用</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span>&amp; <span class=\"title\">test02</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">int</span> a = <span class=\"number\">20</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//不能返回局部变量的引用</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span>&amp; ref = test01();</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"ref = \"</span> &lt;&lt; ref &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"ref = \"</span> &lt;&lt; ref &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//如果函数做左值，那么必须返回引用</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span>&amp; ref2 = test02();</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"ref2 = \"</span> &lt;&lt; ref2 &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"ref2 = \"</span> &lt;&lt; ref2 &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\ttest02() = <span class=\"number\">1000</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"ref2 = \"</span> &lt;&lt; ref2 &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"ref2 = \"</span> &lt;&lt; ref2 &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>​    </p>\n<h3 id=\"2-5-引用的本质\"><a href=\"#2-5-引用的本质\" class=\"headerlink\" title=\"2.5 引用的本质\"></a>2.5 引用的本质</h3><p>本质：<strong>引用的本质在c++内部实现是一个指针常量.</strong></p>\n<p>讲解示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//发现是引用，转换为 int* const ref = &amp;a;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"keyword\">int</span>&amp; ref)</span></span>&#123;</span><br><span class=\"line\">\tref = <span class=\"number\">100</span>; <span class=\"comment\">// ref是引用，转换为*ref = 100</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//自动转换为 int* const ref = &amp;a; 指针常量是指针指向不可改，也说明为什么引用不可更改</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span>&amp; ref = a; </span><br><span class=\"line\">\tref = <span class=\"number\">20</span>; <span class=\"comment\">//内部发现ref是引用，自动帮我们转换为: *ref = 20;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"a:\"</span> &lt;&lt; a &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"ref:\"</span> &lt;&lt; ref &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">\tfunc(a);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>结论：C++推荐用引用技术，因为语法方便，引用本质是指针常量，但是所有的指针操作编译器都帮我们做了</p>\n<h3 id=\"2-6-常量引用\"><a href=\"#2-6-常量引用\" class=\"headerlink\" title=\"2.6 常量引用\"></a>2.6 常量引用</h3><p><strong>作用：</strong>常量引用主要用来修饰形参，防止误操作</p>\n<p>在函数形参列表中，可以加==const修饰形参==，防止形参改变实参</p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//引用使用的场景，通常用来修饰形参</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">showValue</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">int</span>&amp; v)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//v += 10;</span></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; v &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//int&amp; ref = 10;  引用本身需要一个合法的内存空间，因此这行错误</span></span><br><span class=\"line\">\t<span class=\"comment\">//加入const就可以了，编译器优化代码，int temp = 10; const int&amp; ref = temp;</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"keyword\">int</span>&amp; ref = <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//ref = 100;  //加入const后不可以修改变量</span></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; ref &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//函数中利用常量引用防止误操作修改实参</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">\tshowValue(a);</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n<h2 id=\"3-函数提高\"><a href=\"#3-函数提高\" class=\"headerlink\" title=\"3 函数提高\"></a>3 函数提高</h2><h3 id=\"3-1-函数默认参数\"><a href=\"#3-1-函数默认参数\" class=\"headerlink\" title=\"3.1 函数默认参数\"></a>3.1 函数默认参数</h3><p>在C++中，函数的形参列表中的形参是可以有默认值的。</p>\n<p>语法：<code>返回值类型  函数名 （参数= 默认值）{}</code></p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b = <span class=\"number\">10</span>, <span class=\"keyword\">int</span> c = <span class=\"number\">10</span>)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a + b + c;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//1. 如果某个位置参数有默认值，那么从这个位置往后，从左向右，必须都要有默认值</span></span><br><span class=\"line\"><span class=\"comment\">//2. 如果函数声明有默认值，函数实现的时候就不能有默认参数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">func2</span><span class=\"params\">(<span class=\"keyword\">int</span> a = <span class=\"number\">10</span>, <span class=\"keyword\">int</span> b = <span class=\"number\">10</span>)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">func2</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"ret = \"</span> &lt;&lt; func(<span class=\"number\">20</span>, <span class=\"number\">20</span>) &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"ret = \"</span> &lt;&lt; func(<span class=\"number\">100</span>) &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h3 id=\"3-2-函数占位参数\"><a href=\"#3-2-函数占位参数\" class=\"headerlink\" title=\"3.2 函数占位参数\"></a>3.2 函数占位参数</h3><p>C++中函数的形参列表里可以有占位参数，用来做占位，调用函数时必须填补该位置</p>\n<p><strong>语法：</strong> <code>返回值类型 函数名 (数据类型){}</code></p>\n<p>在现阶段函数的占位参数存在意义不大，但是后面的课程中会用到该技术</p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//函数占位参数 ，占位参数也可以有默认参数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span>)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"this is func\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tfunc(<span class=\"number\">10</span>,<span class=\"number\">10</span>); <span class=\"comment\">//占位参数必须填补</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n<h3 id=\"3-3-函数重载\"><a href=\"#3-3-函数重载\" class=\"headerlink\" title=\"3.3 函数重载\"></a>3.3 函数重载</h3><h4 id=\"3-3-1-函数重载概述\"><a href=\"#3-3-1-函数重载概述\" class=\"headerlink\" title=\"3.3.1 函数重载概述\"></a>3.3.1 函数重载概述</h4><p><strong>作用：</strong>函数名可以相同，提高复用性</p>\n<p><strong>函数重载满足条件：</strong></p>\n<ul>\n<li>同一个作用域下</li>\n<li>函数名称相同</li>\n<li>函数参数<strong>类型不同</strong>  或者 <strong>个数不同</strong> 或者 <strong>顺序不同</strong></li>\n</ul>\n<p><strong>注意:</strong>  函数的返回值不可以作为函数重载的条件</p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//函数重载需要函数都在同一个作用域下</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">func</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"func 的调用！\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"keyword\">int</span> a)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"func (int a) 的调用！\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"keyword\">double</span> a)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"func (double a)的调用！\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"keyword\">int</span> a ,<span class=\"keyword\">double</span> b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"func (int a ,double b) 的调用！\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"keyword\">double</span> a ,<span class=\"keyword\">int</span> b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"func (double a ,int b)的调用！\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//函数返回值不可以作为函数重载条件</span></span><br><span class=\"line\"><span class=\"comment\">//int func(double a, int b)</span></span><br><span class=\"line\"><span class=\"comment\">//&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//\tcout &lt;&lt; \"func (double a ,int b)的调用！\" &lt;&lt; endl;</span></span><br><span class=\"line\"><span class=\"comment\">//&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tfunc();</span><br><span class=\"line\">\tfunc(<span class=\"number\">10</span>);</span><br><span class=\"line\">\tfunc(<span class=\"number\">3.14</span>);</span><br><span class=\"line\">\tfunc(<span class=\"number\">10</span>,<span class=\"number\">3.14</span>);</span><br><span class=\"line\">\tfunc(<span class=\"number\">3.14</span> , <span class=\"number\">10</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n\n\n<h4 id=\"3-3-2-函数重载注意事项\"><a href=\"#3-3-2-函数重载注意事项\" class=\"headerlink\" title=\"3.3.2 函数重载注意事项\"></a>3.3.2 函数重载注意事项</h4><ul>\n<li>引用作为重载条件</li>\n<li>函数重载碰到函数默认参数</li>\n</ul>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//函数重载注意事项</span></span><br><span class=\"line\"><span class=\"comment\">//1、引用作为重载条件</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"keyword\">int</span> &amp;a)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"func (int &amp;a) 调用 \"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">int</span> &amp;a)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"func (const int &amp;a) 调用 \"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//2、函数重载碰到函数默认参数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">func2</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b = <span class=\"number\">10</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"func2(int a, int b = 10) 调用\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">func2</span><span class=\"params\">(<span class=\"keyword\">int</span> a)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"func2(int a) 调用\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">\tfunc(a); <span class=\"comment\">//调用无const</span></span><br><span class=\"line\">\tfunc(<span class=\"number\">10</span>);<span class=\"comment\">//调用有const</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//func2(10); //碰到默认参数产生歧义，需要避免</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h2 id=\"4-类和对象\"><a href=\"#4-类和对象\" class=\"headerlink\" title=\"4 类和对象\"></a><strong>4</strong> 类和对象</h2><p>C++面向对象的三大特性为：==封装、继承、多态==</p>\n<p>C++认为==万事万物都皆为对象==，对象上有其属性和行为</p>\n<p><strong>例如：</strong></p>\n<p>​    人可以作为对象，属性有姓名、年龄、身高、体重…，行为有走、跑、跳、吃饭、唱歌…</p>\n<p>​    车也可以作为对象，属性有轮胎、方向盘、车灯…,行为有载人、放音乐、放空调…</p>\n<p>​    具有相同性质的==对象==，我们可以抽象称为==类==，人属于人类，车属于车类</p>\n<h3 id=\"4-1-封装\"><a href=\"#4-1-封装\" class=\"headerlink\" title=\"4.1 封装\"></a>4.1 封装</h3><h4 id=\"4-1-1-封装的意义\"><a href=\"#4-1-1-封装的意义\" class=\"headerlink\" title=\"4.1.1  封装的意义\"></a>4.1.1  封装的意义</h4><p>封装是C++面向对象三大特性之一</p>\n<p>封装的意义：</p>\n<ul>\n<li>将属性和行为作为一个整体，表现生活中的事物</li>\n<li>将属性和行为加以权限控制</li>\n</ul>\n<p><strong>封装意义一：</strong></p>\n<p>​    在设计类的时候，属性和行为写在一起，表现事物</p>\n<p><strong>语法：</strong> <code>class 类名{   访问权限： 属性  / 行为  };</code></p>\n<p><strong>示例1：</strong>设计一个圆类，求圆的周长</p>\n<p><strong>示例代码：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//圆周率</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">double</span> PI = <span class=\"number\">3.14</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//1、封装的意义</span></span><br><span class=\"line\"><span class=\"comment\">//将属性和行为作为一个整体，用来表现生活中的事物</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//封装一个圆类，求圆的周长</span></span><br><span class=\"line\"><span class=\"comment\">//class代表设计一个类，后面跟着的是类名</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Circle</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:  <span class=\"comment\">//访问权限  公共的权限</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//属性</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> m_r;<span class=\"comment\">//半径</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//行为</span></span><br><span class=\"line\">\t<span class=\"comment\">//获取到圆的周长</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">calculateZC</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//2 * pi  * r</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//获取圆的周长</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>  <span class=\"number\">2</span> * PI * m_r;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//通过圆类，创建圆的对象</span></span><br><span class=\"line\">\t<span class=\"comment\">// c1就是一个具体的圆</span></span><br><span class=\"line\">\tCircle c1;</span><br><span class=\"line\">\tc1.m_r = <span class=\"number\">10</span>; <span class=\"comment\">//给圆对象的半径 进行赋值操作</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//2 * pi * 10 = = 62.8</span></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"圆的周长为： \"</span> &lt;&lt; c1.calculateZC() &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p><strong>示例2：</strong>设计一个学生类，属性有姓名和学号，可以给姓名和学号赋值，可以显示学生的姓名和学号</p>\n<p><strong>示例2代码：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//学生类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(<span class=\"built_in\">string</span> name)</span> </span>&#123;</span><br><span class=\"line\">\t\tm_name = name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setID</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span> </span>&#123;</span><br><span class=\"line\">\t\tm_id = id;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">showStudent</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"name:\"</span> &lt;&lt; m_name &lt;&lt; <span class=\"string\">\" ID:\"</span> &lt;&lt; m_id &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">string</span> m_name;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> m_id;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tStudent stu;</span><br><span class=\"line\">\tstu.setName(<span class=\"string\">\"德玛西亚\"</span>);</span><br><span class=\"line\">\tstu.setID(<span class=\"number\">250</span>);</span><br><span class=\"line\">\tstu.showStudent();</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n<p><strong>封装意义二：</strong></p>\n<p>类在设计时，可以把属性和行为放在不同的权限下，加以控制</p>\n<p>访问权限有三种：</p>\n<ol>\n<li>public        公共权限  </li>\n<li>protected 保护权限</li>\n<li>private      私有权限</li>\n</ol>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//三种权限</span></span><br><span class=\"line\"><span class=\"comment\">//公共权限  public     类内可以访问  类外可以访问</span></span><br><span class=\"line\"><span class=\"comment\">//保护权限  protected  类内可以访问  类外不可以访问</span></span><br><span class=\"line\"><span class=\"comment\">//私有权限  private    类内可以访问  类外不可以访问</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"comment\">//姓名  公共权限</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">string</span> m_Name;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//汽车  保护权限</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">string</span> m_Car;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//银行卡密码  私有权限</span></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> m_Password;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">func</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tm_Name = <span class=\"string\">\"张三\"</span>;</span><br><span class=\"line\">\t\tm_Car = <span class=\"string\">\"拖拉机\"</span>;</span><br><span class=\"line\">\t\tm_Password = <span class=\"number\">123456</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tPerson p;</span><br><span class=\"line\">\tp.m_Name = <span class=\"string\">\"李四\"</span>;</span><br><span class=\"line\">\t<span class=\"comment\">//p.m_Car = \"奔驰\";  //保护权限类外访问不到</span></span><br><span class=\"line\">\t<span class=\"comment\">//p.m_Password = 123; //私有权限类外访问不到</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h4 id=\"4-1-2-struct和class区别\"><a href=\"#4-1-2-struct和class区别\" class=\"headerlink\" title=\"4.1.2 struct和class区别\"></a>4.1.2 struct和class区别</h4><p>在C++中 struct和class唯一的<strong>区别</strong>就在于 <strong>默认的访问权限不同</strong></p>\n<p>区别：</p>\n<ul>\n<li>struct 默认权限为公共</li>\n<li>class   默认权限为私有</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C1</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span>  m_A; <span class=\"comment\">//默认是私有权限</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">C2</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> m_A;  <span class=\"comment\">//默认是公共权限</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tC1 c1;</span><br><span class=\"line\">\tc1.m_A = <span class=\"number\">10</span>; <span class=\"comment\">//错误，访问权限是私有</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tC2 c2;</span><br><span class=\"line\">\tc2.m_A = <span class=\"number\">10</span>; <span class=\"comment\">//正确，访问权限是公共</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n\n\n<h4 id=\"4-1-3-成员属性设置为私有\"><a href=\"#4-1-3-成员属性设置为私有\" class=\"headerlink\" title=\"4.1.3 成员属性设置为私有\"></a>4.1.3 成员属性设置为私有</h4><p><strong>优点1：</strong>将所有成员属性设置为私有，可以自己控制读写权限</p>\n<p><strong>优点2：</strong>对于写权限，我们可以检测数据的有效性</p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//姓名设置可读可写</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(<span class=\"built_in\">string</span> name)</span> </span>&#123;</span><br><span class=\"line\">\t\tm_Name = name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">getName</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> m_Name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//获取年龄 </span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getAge</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> m_Age;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//设置年龄</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setAge</span><span class=\"params\">(<span class=\"keyword\">int</span> age)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (age &lt; <span class=\"number\">0</span> || age &gt; <span class=\"number\">150</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"你个老妖精!\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tm_Age = age;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//情人设置为只写</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setLover</span><span class=\"params\">(<span class=\"built_in\">string</span> lover)</span> </span>&#123;</span><br><span class=\"line\">\t\tm_Lover = lover;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">string</span> m_Name; <span class=\"comment\">//可读可写  姓名</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> m_Age; <span class=\"comment\">//只读  年龄</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">string</span> m_Lover; <span class=\"comment\">//只写  情人</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tPerson p;</span><br><span class=\"line\">\t<span class=\"comment\">//姓名设置</span></span><br><span class=\"line\">\tp.setName(<span class=\"string\">\"张三\"</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"姓名： \"</span> &lt;&lt; p.getName() &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//年龄设置</span></span><br><span class=\"line\">\tp.setAge(<span class=\"number\">50</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"年龄： \"</span> &lt;&lt; p.getAge() &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//情人设置</span></span><br><span class=\"line\">\tp.setLover(<span class=\"string\">\"苍井\"</span>);</span><br><span class=\"line\">\t<span class=\"comment\">//cout &lt;&lt; \"情人： \" &lt;&lt; p.m_Lover &lt;&lt; endl;  //只写属性，不可以读取</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n<p><strong>练习案例1：设计立方体类</strong></p>\n<p>设计立方体类(Cube)</p>\n<p>求出立方体的面积和体积</p>\n<p>分别用全局函数和成员函数判断两个立方体是否相等。</p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"assets/1545533548532.png\" alt=\"1545533548532\"></p>\n<p><strong>练习案例2：点和圆的关系</strong></p>\n<p>设计一个圆形类（Circle），和一个点类（Point），计算点和圆的关系。</p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"assets/1545533829184.png\" alt=\"1545533829184\"></p>\n<h3 id=\"4-2-对象的初始化和清理\"><a href=\"#4-2-对象的初始化和清理\" class=\"headerlink\" title=\"4.2 对象的初始化和清理\"></a>4.2 对象的初始化和清理</h3><ul>\n<li>生活中我们买的电子产品都基本会有出厂设置，在某一天我们不用时候也会删除一些自己信息数据保证安全</li>\n<li>C++中的面向对象来源于生活，每个对象也都会有初始设置以及 对象销毁前的清理数据的设置。</li>\n</ul>\n<h4 id=\"4-2-1-构造函数和析构函数\"><a href=\"#4-2-1-构造函数和析构函数\" class=\"headerlink\" title=\"4.2.1 构造函数和析构函数\"></a>4.2.1 构造函数和析构函数</h4><p>对象的<strong>初始化和清理</strong>也是两个非常重要的安全问题</p>\n<p>​    一个对象或者变量没有初始状态，对其使用后果是未知</p>\n<p>​    同样的使用完一个对象或变量，没有及时清理，也会造成一定的安全问题</p>\n<p>c++利用了<strong>构造函数</strong>和<strong>析构函数</strong>解决上述问题，这两个函数将会被编译器自动调用，完成对象初始化和清理工作。</p>\n<p>对象的初始化和清理工作是编译器强制要我们做的事情，因此如果<strong>我们不提供构造和析构，编译器会提供</strong></p>\n<p><strong>编译器提供的构造函数和析构函数是空实现。</strong></p>\n<ul>\n<li>构造函数：主要作用在于创建对象时为对象的成员属性赋值，构造函数由编译器自动调用，无须手动调用。</li>\n<li>析构函数：主要作用在于对象<strong>销毁前</strong>系统自动调用，执行一些清理工作。</li>\n</ul>\n<p><strong>构造函数语法：</strong><code>类名(){}</code></p>\n<ol>\n<li>构造函数，没有返回值也不写void</li>\n<li>函数名称与类名相同</li>\n<li>构造函数可以有参数，因此可以发生重载</li>\n<li>程序在调用对象时候会自动调用构造，无须手动调用,而且只会调用一次</li>\n</ol>\n<p><strong>析构函数语法：</strong> <code>~类名(){}</code></p>\n<ol>\n<li>析构函数，没有返回值也不写void</li>\n<li>函数名称与类名相同,在名称前加上符号  ~</li>\n<li>析构函数不可以有参数，因此不可以发生重载</li>\n<li>程序在对象销毁前会自动调用析构，无须手动调用,而且只会调用一次</li>\n</ol>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"comment\">//构造函数</span></span><br><span class=\"line\">\tPerson()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Person的构造函数调用\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//析构函数</span></span><br><span class=\"line\">\t~Person()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Person的析构函数调用\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tPerson p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\ttest01();</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n<h4 id=\"4-2-2-构造函数的分类及调用\"><a href=\"#4-2-2-构造函数的分类及调用\" class=\"headerlink\" title=\"4.2.2 构造函数的分类及调用\"></a>4.2.2 构造函数的分类及调用</h4><p>两种分类方式：</p>\n<p>​    按参数分为： 有参构造和无参构造</p>\n<p>​    按类型分为： 普通构造和拷贝构造</p>\n<p>三种调用方式：</p>\n<p>​    括号法</p>\n<p>​    显示法</p>\n<p>​    隐式转换法</p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1、构造函数分类</span></span><br><span class=\"line\"><span class=\"comment\">// 按照参数分类分为 有参和无参构造   无参又称为默认构造函数</span></span><br><span class=\"line\"><span class=\"comment\">// 按照类型分类分为 普通构造和拷贝构造</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"comment\">//无参（默认）构造函数</span></span><br><span class=\"line\">\tPerson() &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"无参构造函数!\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//有参构造函数</span></span><br><span class=\"line\">\tPerson(<span class=\"keyword\">int</span> a) &#123;</span><br><span class=\"line\">\t\tage = a;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"有参构造函数!\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//拷贝构造函数</span></span><br><span class=\"line\">\tPerson(<span class=\"keyword\">const</span> Person&amp; p) &#123;</span><br><span class=\"line\">\t\tage = p.age;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"拷贝构造函数!\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//析构函数</span></span><br><span class=\"line\">\t~Person() &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"析构函数!\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> age;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//2、构造函数的调用</span></span><br><span class=\"line\"><span class=\"comment\">//调用无参构造函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tPerson p; <span class=\"comment\">//调用无参构造函数</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//调用有参的构造函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test02</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//2.1  括号法，常用</span></span><br><span class=\"line\">\t<span class=\"function\">Person <span class=\"title\">p1</span><span class=\"params\">(<span class=\"number\">10</span>)</span></span>;</span><br><span class=\"line\">\t<span class=\"comment\">//注意1：调用无参构造函数不能加括号，如果加了编译器认为这是一个函数声明</span></span><br><span class=\"line\">\t<span class=\"comment\">//Person p2();</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//2.2 显式法</span></span><br><span class=\"line\">\tPerson p2 = Person(<span class=\"number\">10</span>); </span><br><span class=\"line\">\tPerson p3 = Person(p2);</span><br><span class=\"line\">\t<span class=\"comment\">//Person(10)单独写就是匿名对象  当前行结束之后，马上析构</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//2.3 隐式转换法</span></span><br><span class=\"line\">\tPerson p4 = <span class=\"number\">10</span>; <span class=\"comment\">// Person p4 = Person(10); </span></span><br><span class=\"line\">\tPerson p5 = p4; <span class=\"comment\">// Person p5 = Person(p4); </span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//注意2：不能利用 拷贝构造函数 初始化匿名对象 编译器认为是对象声明</span></span><br><span class=\"line\">\t<span class=\"comment\">//Person p5(p4);</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\ttest01();</span><br><span class=\"line\">\t<span class=\"comment\">//test02();</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n<h4 id=\"4-2-3-拷贝构造函数调用时机\"><a href=\"#4-2-3-拷贝构造函数调用时机\" class=\"headerlink\" title=\"4.2.3 拷贝构造函数调用时机\"></a>4.2.3 拷贝构造函数调用时机</h4><p>C++中拷贝构造函数调用时机通常有三种情况</p>\n<ul>\n<li>使用一个已经创建完毕的对象来初始化一个新对象</li>\n<li>值传递的方式给函数参数传值</li>\n<li>以值方式返回局部对象</li>\n</ul>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\tPerson() &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"无参构造函数!\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t\tmAge = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tPerson(<span class=\"keyword\">int</span> age) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"有参构造函数!\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t\tmAge = age;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tPerson(<span class=\"keyword\">const</span> Person&amp; p) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"拷贝构造函数!\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t\tmAge = p.mAge;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//析构函数在释放内存之前调用</span></span><br><span class=\"line\">\t~Person() &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"析构函数!\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> mAge;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//1. 使用一个已经创建完毕的对象来初始化一个新对象</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\">Person <span class=\"title\">man</span><span class=\"params\">(<span class=\"number\">100</span>)</span></span>; <span class=\"comment\">//p对象已经创建完毕</span></span><br><span class=\"line\">\t<span class=\"function\">Person <span class=\"title\">newman</span><span class=\"params\">(man)</span></span>; <span class=\"comment\">//调用拷贝构造函数</span></span><br><span class=\"line\">\tPerson newman2 = man; <span class=\"comment\">//拷贝构造</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//Person newman3;</span></span><br><span class=\"line\">\t<span class=\"comment\">//newman3 = man; //不是调用拷贝构造函数，赋值操作</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//2. 值传递的方式给函数参数传值</span></span><br><span class=\"line\"><span class=\"comment\">//相当于Person p1 = p;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">doWork</span><span class=\"params\">(Person p1)</span> </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test02</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tPerson p; <span class=\"comment\">//无参构造函数</span></span><br><span class=\"line\">\tdoWork(p);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//3. 以值方式返回局部对象</span></span><br><span class=\"line\"><span class=\"function\">Person <span class=\"title\">doWork2</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tPerson p1;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; (<span class=\"keyword\">int</span> *)&amp;p1 &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> p1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test03</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tPerson p = doWork2();</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; (<span class=\"keyword\">int</span> *)&amp;p &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//test01();</span></span><br><span class=\"line\">\t<span class=\"comment\">//test02();</span></span><br><span class=\"line\">\ttest03();</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h4 id=\"4-2-4-构造函数调用规则\"><a href=\"#4-2-4-构造函数调用规则\" class=\"headerlink\" title=\"4.2.4 构造函数调用规则\"></a>4.2.4 构造函数调用规则</h4><p>默认情况下，c++编译器至少给一个类添加3个函数</p>\n<p>1．默认构造函数(无参，函数体为空)</p>\n<p>2．默认析构函数(无参，函数体为空)</p>\n<p>3．默认拷贝构造函数，对属性进行值拷贝</p>\n<p>构造函数调用规则如下：</p>\n<ul>\n<li>如果用户定义有参构造函数，c++不在提供默认无参构造，但是会提供默认拷贝构造</li>\n</ul>\n<ul>\n<li>如果用户定义拷贝构造函数，c++不会再提供其他构造函数</li>\n</ul>\n<p>示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"comment\">//无参（默认）构造函数</span></span><br><span class=\"line\">\tPerson() &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"无参构造函数!\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//有参构造函数</span></span><br><span class=\"line\">\tPerson(<span class=\"keyword\">int</span> a) &#123;</span><br><span class=\"line\">\t\tage = a;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"有参构造函数!\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//拷贝构造函数</span></span><br><span class=\"line\">\tPerson(<span class=\"keyword\">const</span> Person&amp; p) &#123;</span><br><span class=\"line\">\t\tage = p.age;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"拷贝构造函数!\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//析构函数</span></span><br><span class=\"line\">\t~Person() &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"析构函数!\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> age;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\">Person <span class=\"title\">p1</span><span class=\"params\">(<span class=\"number\">18</span>)</span></span>;</span><br><span class=\"line\">\t<span class=\"comment\">//如果不写拷贝构造，编译器会自动添加拷贝构造，并且做浅拷贝操作</span></span><br><span class=\"line\">\t<span class=\"function\">Person <span class=\"title\">p2</span><span class=\"params\">(p1)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"p2的年龄为： \"</span> &lt;&lt; p2.age &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test02</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//如果用户提供有参构造，编译器不会提供默认构造，会提供拷贝构造</span></span><br><span class=\"line\">\tPerson p1; <span class=\"comment\">//此时如果用户自己没有提供默认构造，会出错</span></span><br><span class=\"line\">\t<span class=\"function\">Person <span class=\"title\">p2</span><span class=\"params\">(<span class=\"number\">10</span>)</span></span>; <span class=\"comment\">//用户提供的有参</span></span><br><span class=\"line\">\t<span class=\"function\">Person <span class=\"title\">p3</span><span class=\"params\">(p2)</span></span>; <span class=\"comment\">//此时如果用户没有提供拷贝构造，编译器会提供</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//如果用户提供拷贝构造，编译器不会提供其他构造函数</span></span><br><span class=\"line\">\tPerson p4; <span class=\"comment\">//此时如果用户自己没有提供默认构造，会出错</span></span><br><span class=\"line\">\t<span class=\"function\">Person <span class=\"title\">p5</span><span class=\"params\">(<span class=\"number\">10</span>)</span></span>; <span class=\"comment\">//此时如果用户自己没有提供有参，会出错</span></span><br><span class=\"line\">\t<span class=\"function\">Person <span class=\"title\">p6</span><span class=\"params\">(p5)</span></span>; <span class=\"comment\">//用户自己提供拷贝构造</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\ttest01();</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n<h4 id=\"4-2-5-深拷贝与浅拷贝\"><a href=\"#4-2-5-深拷贝与浅拷贝\" class=\"headerlink\" title=\"4.2.5 深拷贝与浅拷贝\"></a>4.2.5 深拷贝与浅拷贝</h4><p>深浅拷贝是面试经典问题，也是常见的一个坑</p>\n<p>浅拷贝：简单的赋值拷贝操作</p>\n<p>深拷贝：在堆区重新申请空间，进行拷贝操作</p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"comment\">//无参（默认）构造函数</span></span><br><span class=\"line\">\tPerson() &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"无参构造函数!\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//有参构造函数</span></span><br><span class=\"line\">\tPerson(<span class=\"keyword\">int</span> age ,<span class=\"keyword\">int</span> <span class=\"built_in\">height</span>) &#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"有参构造函数!\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tm_age = age;</span><br><span class=\"line\">\t\tm_height = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>(<span class=\"built_in\">height</span>);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//拷贝构造函数  </span></span><br><span class=\"line\">\tPerson(<span class=\"keyword\">const</span> Person&amp; p) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"拷贝构造函数!\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">//如果不利用深拷贝在堆区创建新内存，会导致浅拷贝带来的重复释放堆区问题</span></span><br><span class=\"line\">\t\tm_age = p.m_age;</span><br><span class=\"line\">\t\tm_height = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>(*p.m_height);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//析构函数</span></span><br><span class=\"line\">\t~Person() &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"析构函数!\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (m_height != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">delete</span> m_height;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> m_age;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span>* m_height;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\">Person <span class=\"title\">p1</span><span class=\"params\">(<span class=\"number\">18</span>, <span class=\"number\">180</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\">Person <span class=\"title\">p2</span><span class=\"params\">(p1)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"p1的年龄： \"</span> &lt;&lt; p1.m_age &lt;&lt; <span class=\"string\">\" 身高： \"</span> &lt;&lt; *p1.m_height &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"p2的年龄： \"</span> &lt;&lt; p2.m_age &lt;&lt; <span class=\"string\">\" 身高： \"</span> &lt;&lt; *p2.m_height &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\ttest01();</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>总结：如果属性有在堆区开辟的，一定要自己提供拷贝构造函数，防止浅拷贝带来的问题</p>\n</blockquote>\n<h4 id=\"4-2-6-初始化列表\"><a href=\"#4-2-6-初始化列表\" class=\"headerlink\" title=\"4.2.6 初始化列表\"></a>4.2.6 初始化列表</h4><p><strong>作用：</strong></p>\n<p>C++提供了初始化列表语法，用来初始化属性</p>\n<p><strong>语法：</strong><code>构造函数()：属性1(值1),属性2（值2）... {}</code></p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">////传统方式初始化</span></span><br><span class=\"line\">\t<span class=\"comment\">//Person(int a, int b, int c) &#123;</span></span><br><span class=\"line\">\t<span class=\"comment\">//\tm_A = a;</span></span><br><span class=\"line\">\t<span class=\"comment\">//\tm_B = b;</span></span><br><span class=\"line\">\t<span class=\"comment\">//\tm_C = c;</span></span><br><span class=\"line\">\t<span class=\"comment\">//&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//初始化列表方式初始化</span></span><br><span class=\"line\">\tPerson(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b, <span class=\"keyword\">int</span> c) :m_A(a), m_B(b), m_C(c) &#123;&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">PrintPerson</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"mA:\"</span> &lt;&lt; m_A &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"mB:\"</span> &lt;&lt; m_B &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"mC:\"</span> &lt;&lt; m_C &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> m_A;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> m_B;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> m_C;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\">Person <span class=\"title\">p</span><span class=\"params\">(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</span></span>;</span><br><span class=\"line\">\tp.PrintPerson();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h4 id=\"4-2-7-类对象作为类成员\"><a href=\"#4-2-7-类对象作为类成员\" class=\"headerlink\" title=\"4.2.7 类对象作为类成员\"></a>4.2.7 类对象作为类成员</h4><p>C++类中的成员可以是另一个类的对象，我们称该成员为 对象成员</p>\n<p>例如：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span> &#123;</span>&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    A a；</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>B类中有对象A作为成员，A为对象成员</p>\n<p>那么当创建B对象时，A与B的构造和析构的顺序是谁先谁后？</p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Phone</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\tPhone(<span class=\"built_in\">string</span> name)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tm_PhoneName = name;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Phone构造\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t~Phone()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Phone析构\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">string</span> m_PhoneName;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//初始化列表可以告诉编译器调用哪一个构造函数</span></span><br><span class=\"line\">\tPerson(<span class=\"built_in\">string</span> name, <span class=\"built_in\">string</span> pName) :m_Name(name), m_Phone(pName)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Person构造\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t~Person()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Person析构\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">playGame</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; m_Name &lt;&lt; <span class=\"string\">\" 使用\"</span> &lt;&lt; m_Phone.m_PhoneName &lt;&lt; <span class=\"string\">\" 牌手机! \"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">string</span> m_Name;</span><br><span class=\"line\">\tPhone m_Phone;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//当类中成员是其他类对象时，我们称该成员为 对象成员</span></span><br><span class=\"line\">\t<span class=\"comment\">//构造的顺序是 ：先调用对象成员的构造，再调用本类构造</span></span><br><span class=\"line\">\t<span class=\"comment\">//析构顺序与构造相反</span></span><br><span class=\"line\">\t<span class=\"function\">Person <span class=\"title\">p</span><span class=\"params\">(<span class=\"string\">\"张三\"</span> , <span class=\"string\">\"苹果X\"</span>)</span></span>;</span><br><span class=\"line\">\tp.playGame();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\ttest01();</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n<h4 id=\"4-2-8-静态成员\"><a href=\"#4-2-8-静态成员\" class=\"headerlink\" title=\"4.2.8 静态成员\"></a>4.2.8 静态成员</h4><p>静态成员就是在成员变量和成员函数前加上关键字static，称为静态成员</p>\n<p>静态成员分为：</p>\n<ul>\n<li>静态成员变量<ul>\n<li>所有对象共享同一份数据</li>\n<li>在编译阶段分配内存</li>\n<li>类内声明，类外初始化</li>\n</ul>\n</li>\n<li>静态成员函数<ul>\n<li>所有对象共享同一个函数</li>\n<li>静态成员函数只能访问静态成员变量</li>\n</ul>\n</li>\n</ul>\n<p><strong>示例1 ：</strong>静态成员变量</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">int</span> m_A; <span class=\"comment\">//静态成员变量</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//静态成员变量特点：</span></span><br><span class=\"line\">\t<span class=\"comment\">//1 在编译阶段分配内存</span></span><br><span class=\"line\">\t<span class=\"comment\">//2 类内声明，类外初始化</span></span><br><span class=\"line\">\t<span class=\"comment\">//3 所有对象共享同一份数据</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">int</span> m_B; <span class=\"comment\">//静态成员变量也是有访问权限的</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">int</span> Person::m_A = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> Person::m_B = <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//静态成员变量两种访问方式</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//1、通过对象</span></span><br><span class=\"line\">\tPerson p1;</span><br><span class=\"line\">\tp1.m_A = <span class=\"number\">100</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"p1.m_A = \"</span> &lt;&lt; p1.m_A &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tPerson p2;</span><br><span class=\"line\">\tp2.m_A = <span class=\"number\">200</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"p1.m_A = \"</span> &lt;&lt; p1.m_A &lt;&lt; <span class=\"built_in\">endl</span>; <span class=\"comment\">//共享同一份数据</span></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"p2.m_A = \"</span> &lt;&lt; p2.m_A &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//2、通过类名</span></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"m_A = \"</span> &lt;&lt; Person::m_A &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//cout &lt;&lt; \"m_B = \" &lt;&lt; Person::m_B &lt;&lt; endl; //私有权限访问不到</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\ttest01();</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>示例2：</strong>静态成员函数</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//静态成员函数特点：</span></span><br><span class=\"line\">\t<span class=\"comment\">//1 程序共享一个函数</span></span><br><span class=\"line\">\t<span class=\"comment\">//2 静态成员函数只能访问静态成员变量</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">func</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"func调用\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t\tm_A = <span class=\"number\">100</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">//m_B = 100; //错误，不可以访问非静态成员变量</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">int</span> m_A; <span class=\"comment\">//静态成员变量</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> m_B; <span class=\"comment\">// </span></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//静态成员函数也是有访问权限的</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">func2</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"func2调用\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">int</span> Person::m_A = <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//静态成员变量两种访问方式</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//1、通过对象</span></span><br><span class=\"line\">\tPerson p1;</span><br><span class=\"line\">\tp1.func();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//2、通过类名</span></span><br><span class=\"line\">\tPerson::func();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//Person::func2(); //私有权限访问不到</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\ttest01();</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n<h3 id=\"4-3-C-对象模型和this指针\"><a href=\"#4-3-C-对象模型和this指针\" class=\"headerlink\" title=\"4.3 C++对象模型和this指针\"></a>4.3 C++对象模型和this指针</h3><h4 id=\"4-3-1-成员变量和成员函数分开存储\"><a href=\"#4-3-1-成员变量和成员函数分开存储\" class=\"headerlink\" title=\"4.3.1 成员变量和成员函数分开存储\"></a>4.3.1 成员变量和成员函数分开存储</h4><p>在C++中，类内的成员变量和成员函数分开存储</p>\n<p>只有非静态成员变量才属于类的对象上</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\tPerson() &#123;</span><br><span class=\"line\">\t\tmA = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//非静态成员变量占对象空间</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> mA;</span><br><span class=\"line\">\t<span class=\"comment\">//静态成员变量不占对象空间</span></span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">int</span> mB; </span><br><span class=\"line\">\t<span class=\"comment\">//函数也不占对象空间，所有函数共享一个函数实例</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">func</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"mA:\"</span> &lt;&lt; <span class=\"keyword\">this</span>-&gt;mA &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//静态成员函数也不占对象空间</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">sfunc</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"keyword\">sizeof</span>(Person) &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h4 id=\"4-3-2-this指针概念\"><a href=\"#4-3-2-this指针概念\" class=\"headerlink\" title=\"4.3.2 this指针概念\"></a>4.3.2 this指针概念</h4><p>通过4.3.1我们知道在C++中成员变量和成员函数是分开存储的</p>\n<p>每一个非静态成员函数只会诞生一份函数实例，也就是说多个同类型的对象会共用一块代码</p>\n<p>那么问题是：这一块代码是如何区分那个对象调用自己的呢？</p>\n<p>c++通过提供特殊的对象指针，this指针，解决上述问题。<strong>this指针指向被调用的成员函数所属的对象</strong></p>\n<p>this指针是隐含每一个非静态成员函数内的一种指针</p>\n<p>this指针不需要定义，直接使用即可</p>\n<p>this指针的用途：</p>\n<ul>\n<li>当形参和成员变量同名时，可用this指针来区分</li>\n<li>在类的非静态成员函数中返回对象本身，可使用return *this</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">\tPerson(<span class=\"keyword\">int</span> age)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//1、当形参和成员变量同名时，可用this指针来区分</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>-&gt;age = age;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\">Person&amp; <span class=\"title\">PersonAddPerson</span><span class=\"params\">(Person p)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>-&gt;age += p.age;</span><br><span class=\"line\">\t\t<span class=\"comment\">//返回对象本身</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> age;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\">Person <span class=\"title\">p1</span><span class=\"params\">(<span class=\"number\">10</span>)</span></span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"p1.age = \"</span> &lt;&lt; p1.age &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\">Person <span class=\"title\">p2</span><span class=\"params\">(<span class=\"number\">10</span>)</span></span>;</span><br><span class=\"line\">\tp2.PersonAddPerson(p1).PersonAddPerson(p1).PersonAddPerson(p1);</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"p2.age = \"</span> &lt;&lt; p2.age &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\ttest01();</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n<h4 id=\"4-3-3-空指针访问成员函数\"><a href=\"#4-3-3-空指针访问成员函数\" class=\"headerlink\" title=\"4.3.3 空指针访问成员函数\"></a>4.3.3 空指针访问成员函数</h4><p>C++中空指针也是可以调用成员函数的，但是也要注意有没有用到this指针</p>\n<p>如果用到this指针，需要加以判断保证代码的健壮性</p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//空指针访问成员函数</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">ShowClassName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"我是Person类!\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">ShowPerson</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">this</span> == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; mAge &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> mAge;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tPerson * p = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\tp-&gt;ShowClassName(); <span class=\"comment\">//空指针，可以调用成员函数</span></span><br><span class=\"line\">\tp-&gt;ShowPerson();  <span class=\"comment\">//但是如果成员函数中用到了this指针，就不可以了</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\ttest01();</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n<h4 id=\"4-3-4-const修饰成员函数\"><a href=\"#4-3-4-const修饰成员函数\" class=\"headerlink\" title=\"4.3.4 const修饰成员函数\"></a>4.3.4 const修饰成员函数</h4><p><strong>常函数：</strong></p>\n<ul>\n<li>成员函数后加const后我们称为这个函数为<strong>常函数</strong></li>\n<li>常函数内不可以修改成员属性</li>\n<li>成员属性声明时加关键字mutable后，在常函数中依然可以修改</li>\n</ul>\n<p><strong>常对象：</strong></p>\n<ul>\n<li>声明对象前加const称该对象为常对象</li>\n<li>常对象只能调用常函数</li>\n</ul>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\tPerson() &#123;</span><br><span class=\"line\">\t\tm_A = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\tm_B = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//this指针的本质是一个指针常量，指针的指向不可修改</span></span><br><span class=\"line\">\t<span class=\"comment\">//如果想让指针指向的值也不可以修改，需要声明常函数</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">ShowPerson</span><span class=\"params\">()</span> <span class=\"keyword\">const</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//const Type* const pointer;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//this = NULL; //不能修改指针的指向 Person* const this;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//this-&gt;mA = 100; //但是this指针指向的对象的数据是可以修改的</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">//const修饰成员函数，表示指针指向的内存空间的数据不能修改，除了mutable修饰的变量</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>-&gt;m_B = <span class=\"number\">100</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">MyFunc</span><span class=\"params\">()</span> <span class=\"keyword\">const</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//mA = 10000;</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> m_A;</span><br><span class=\"line\">\t<span class=\"keyword\">mutable</span> <span class=\"keyword\">int</span> m_B; <span class=\"comment\">//可修改 可变的</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//const修饰对象  常对象</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> Person person; <span class=\"comment\">//常量对象  </span></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; person.m_A &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"comment\">//person.mA = 100; //常对象不能修改成员变量的值,但是可以访问</span></span><br><span class=\"line\">\tperson.m_B = <span class=\"number\">100</span>; <span class=\"comment\">//但是常对象可以修改mutable修饰成员变量</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//常对象访问成员函数</span></span><br><span class=\"line\">\tperson.MyFunc(); <span class=\"comment\">//常对象不能调用const的函数</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\ttest01();</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n<h3 id=\"4-4-友元\"><a href=\"#4-4-友元\" class=\"headerlink\" title=\"4.4 友元\"></a>4.4 友元</h3><p>生活中你的家有客厅(Public)，有你的卧室(Private)</p>\n<p>客厅所有来的客人都可以进去，但是你的卧室是私有的，也就是说只有你能进去</p>\n<p>但是呢，你也可以允许你的好闺蜜好基友进去。</p>\n<p>在程序里，有些私有属性 也想让类外特殊的一些函数或者类进行访问，就需要用到友元的技术</p>\n<p>友元的目的就是让一个函数或者类 访问另一个类中私有成员</p>\n<p>友元的关键字为  ==friend==</p>\n<p>友元的三种实现</p>\n<ul>\n<li>全局函数做友元</li>\n<li>类做友元</li>\n<li>成员函数做友元</li>\n</ul>\n<h4 id=\"4-4-1-全局函数做友元\"><a href=\"#4-4-1-全局函数做友元\" class=\"headerlink\" title=\"4.4.1 全局函数做友元\"></a>4.4.1 全局函数做友元</h4><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Building</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"comment\">//告诉编译器 goodGay全局函数 是 Building类的好朋友，可以访问类中的私有内容</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">friend</span> <span class=\"keyword\">void</span> <span class=\"title\">goodGay</span><span class=\"params\">(Building * building)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">\tBuilding()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>-&gt;m_SittingRoom = <span class=\"string\">\"客厅\"</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>-&gt;m_BedRoom = <span class=\"string\">\"卧室\"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">string</span> m_SittingRoom; <span class=\"comment\">//客厅</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">string</span> m_BedRoom; <span class=\"comment\">//卧室</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">goodGay</span><span class=\"params\">(Building * building)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"好基友正在访问： \"</span> &lt;&lt; building-&gt;m_SittingRoom &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"好基友正在访问： \"</span> &lt;&lt; building-&gt;m_BedRoom &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tBuilding b;</span><br><span class=\"line\">\tgoodGay(&amp;b);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\ttest01();</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"4-4-2-类做友元\"><a href=\"#4-4-2-类做友元\" class=\"headerlink\" title=\"4.4.2 类做友元\"></a>4.4.2 类做友元</h4><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Building</span>;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">goodGay</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">\tgoodGay();</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">visit</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\tBuilding *building;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Building</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"comment\">//告诉编译器 goodGay类是Building类的好朋友，可以访问到Building类中私有内容</span></span><br><span class=\"line\">\t<span class=\"keyword\">friend</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">goodGay</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\tBuilding();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">string</span> m_SittingRoom; <span class=\"comment\">//客厅</span></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">string</span> m_BedRoom;<span class=\"comment\">//卧室</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">Building::Building()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>-&gt;m_SittingRoom = <span class=\"string\">\"客厅\"</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>-&gt;m_BedRoom = <span class=\"string\">\"卧室\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">goodGay::goodGay()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tbuilding = <span class=\"keyword\">new</span> Building;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">goodGay::visit</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"好基友正在访问\"</span> &lt;&lt; building-&gt;m_SittingRoom &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"好基友正在访问\"</span> &lt;&lt; building-&gt;m_BedRoom &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tgoodGay gg;</span><br><span class=\"line\">\tgg.visit();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\ttest01();</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h4 id=\"4-4-3-成员函数做友元\"><a href=\"#4-4-3-成员函数做友元\" class=\"headerlink\" title=\"4.4.3 成员函数做友元\"></a>4.4.3 成员函数做友元</h4><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Building</span>;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">goodGay</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">\tgoodGay();</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">visit</span><span class=\"params\">()</span></span>; <span class=\"comment\">//只让visit函数作为Building的好朋友，可以发访问Building中私有内容</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">visit2</span><span class=\"params\">()</span></span>; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\tBuilding *building;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Building</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"comment\">//告诉编译器  goodGay类中的visit成员函数 是Building好朋友，可以访问私有内容</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">friend</span> <span class=\"keyword\">void</span> <span class=\"title\">goodGay::visit</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\tBuilding();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">string</span> m_SittingRoom; <span class=\"comment\">//客厅</span></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">string</span> m_BedRoom;<span class=\"comment\">//卧室</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">Building::Building()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>-&gt;m_SittingRoom = <span class=\"string\">\"客厅\"</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>-&gt;m_BedRoom = <span class=\"string\">\"卧室\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">goodGay::goodGay()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tbuilding = <span class=\"keyword\">new</span> Building;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">goodGay::visit</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"好基友正在访问\"</span> &lt;&lt; building-&gt;m_SittingRoom &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"好基友正在访问\"</span> &lt;&lt; building-&gt;m_BedRoom &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">goodGay::visit2</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"好基友正在访问\"</span> &lt;&lt; building-&gt;m_SittingRoom &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"comment\">//cout &lt;&lt; \"好基友正在访问\" &lt;&lt; building-&gt;m_BedRoom &lt;&lt; endl;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tgoodGay  gg;</span><br><span class=\"line\">\tgg.visit();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">\ttest01();</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n<h3 id=\"4-5-运算符重载\"><a href=\"#4-5-运算符重载\" class=\"headerlink\" title=\"4.5 运算符重载\"></a>4.5 运算符重载</h3><p>运算符重载概念：对已有的运算符重新进行定义，赋予其另一种功能，以适应不同的数据类型</p>\n<h4 id=\"4-5-1-加号运算符重载\"><a href=\"#4-5-1-加号运算符重载\" class=\"headerlink\" title=\"4.5.1 加号运算符重载\"></a>4.5.1 加号运算符重载</h4><p>作用：实现两个自定义数据类型相加的运算</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\tPerson() &#123;&#125;;</span><br><span class=\"line\">\tPerson(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>-&gt;m_A = a;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>-&gt;m_B = b;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//成员函数实现 + 号运算符重载</span></span><br><span class=\"line\">\tPerson <span class=\"keyword\">operator</span>+(<span class=\"keyword\">const</span> Person&amp; p) &#123;</span><br><span class=\"line\">\t\tPerson temp;</span><br><span class=\"line\">\t\ttemp.m_A = <span class=\"keyword\">this</span>-&gt;m_A + p.m_A;</span><br><span class=\"line\">\t\ttemp.m_B = <span class=\"keyword\">this</span>-&gt;m_B + p.m_B;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> temp;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> m_A;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> m_B;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//全局函数实现 + 号运算符重载</span></span><br><span class=\"line\"><span class=\"comment\">//Person operator+(const Person&amp; p1, const Person&amp; p2) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//\tPerson temp(0, 0);</span></span><br><span class=\"line\"><span class=\"comment\">//\ttemp.m_A = p1.m_A + p2.m_A;</span></span><br><span class=\"line\"><span class=\"comment\">//\ttemp.m_B = p1.m_B + p2.m_B;</span></span><br><span class=\"line\"><span class=\"comment\">//\treturn temp;</span></span><br><span class=\"line\"><span class=\"comment\">//&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//运算符重载 可以发生函数重载 </span></span><br><span class=\"line\">Person <span class=\"keyword\">operator</span>+(<span class=\"keyword\">const</span> Person&amp; p2, <span class=\"keyword\">int</span> val)  </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tPerson temp;</span><br><span class=\"line\">\ttemp.m_A = p2.m_A + val;</span><br><span class=\"line\">\ttemp.m_B = p2.m_B + val;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> temp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\">Person <span class=\"title\">p1</span><span class=\"params\">(<span class=\"number\">10</span>, <span class=\"number\">10</span>)</span></span>;</span><br><span class=\"line\">\t<span class=\"function\">Person <span class=\"title\">p2</span><span class=\"params\">(<span class=\"number\">20</span>, <span class=\"number\">20</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//成员函数方式</span></span><br><span class=\"line\">\tPerson p3 = p2 + p1;  <span class=\"comment\">//相当于 p2.operaor+(p1)</span></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"mA:\"</span> &lt;&lt; p3.m_A &lt;&lt; <span class=\"string\">\" mB:\"</span> &lt;&lt; p3.m_B &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\tPerson p4 = p3 + <span class=\"number\">10</span>; <span class=\"comment\">//相当于 operator+(p3,10)</span></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"mA:\"</span> &lt;&lt; p4.m_A &lt;&lt; <span class=\"string\">\" mB:\"</span> &lt;&lt; p4.m_B &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\ttest();</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>总结1：对于内置的数据类型的表达式的的运算符是不可能改变的</p>\n</blockquote>\n<blockquote>\n<p>总结2：不要滥用运算符重载</p>\n</blockquote>\n<h4 id=\"4-5-2-左移运算符重载\"><a href=\"#4-5-2-左移运算符重载\" class=\"headerlink\" title=\"4.5.2 左移运算符重载\"></a>4.5.2 左移运算符重载</h4><p>作用：可以输出自定义数据类型</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">friend</span> ostream&amp; <span class=\"keyword\">operator</span>&lt;&lt;(ostream&amp; out, Person&amp; p);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">\tPerson(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>-&gt;m_A = a;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>-&gt;m_B = b;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//成员函数 实现不了  p &lt;&lt; cout 不是我们想要的效果</span></span><br><span class=\"line\">\t<span class=\"comment\">//void operator&lt;&lt;(Person&amp; p)&#123;</span></span><br><span class=\"line\">\t<span class=\"comment\">//&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> m_A;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> m_B;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//全局函数实现左移重载</span></span><br><span class=\"line\"><span class=\"comment\">//ostream对象只能有一个</span></span><br><span class=\"line\">ostream&amp; <span class=\"keyword\">operator</span>&lt;&lt;(ostream&amp; out, Person&amp; p) &#123;</span><br><span class=\"line\">\tout &lt;&lt; <span class=\"string\">\"a:\"</span> &lt;&lt; p.m_A &lt;&lt; <span class=\"string\">\" b:\"</span> &lt;&lt; p.m_B;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> out;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\">Person <span class=\"title\">p1</span><span class=\"params\">(<span class=\"number\">10</span>, <span class=\"number\">20</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; p1 &lt;&lt; <span class=\"string\">\"hello world\"</span> &lt;&lt; <span class=\"built_in\">endl</span>; <span class=\"comment\">//链式编程</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\ttest();</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>总结：重载左移运算符配合友元可以实现输出自定义数据类型</p>\n</blockquote>\n<h4 id=\"4-5-3-递增运算符重载\"><a href=\"#4-5-3-递增运算符重载\" class=\"headerlink\" title=\"4.5.3 递增运算符重载\"></a>4.5.3 递增运算符重载</h4><p>作用： 通过重载递增运算符，实现自己的整型数据</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyInteger</span> &#123;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">friend</span> ostream&amp; <span class=\"keyword\">operator</span>&lt;&lt;(ostream&amp; out, MyInteger myint);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\tMyInteger() &#123;</span><br><span class=\"line\">\t\tm_Num = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//前置++</span></span><br><span class=\"line\">\tMyInteger&amp; <span class=\"keyword\">operator</span>++() &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//先++</span></span><br><span class=\"line\">\t\tm_Num++;</span><br><span class=\"line\">\t\t<span class=\"comment\">//再返回</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//后置++</span></span><br><span class=\"line\">\tMyInteger <span class=\"keyword\">operator</span>++(<span class=\"keyword\">int</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//先返回</span></span><br><span class=\"line\">\t\tMyInteger temp = *<span class=\"keyword\">this</span>; <span class=\"comment\">//记录当前本身的值，然后让本身的值加1，但是返回的是以前的值，达到先返回后++；</span></span><br><span class=\"line\">\t\tm_Num++;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> temp;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> m_Num;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">ostream&amp; <span class=\"keyword\">operator</span>&lt;&lt;(ostream&amp; out, MyInteger myint) &#123;</span><br><span class=\"line\">\tout &lt;&lt; myint.m_Num;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> out;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//前置++ 先++ 再返回</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tMyInteger myInt;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; ++myInt &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; myInt &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//后置++ 先返回 再++</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test02</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tMyInteger myInt;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; myInt++ &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; myInt &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\ttest01();</span><br><span class=\"line\">\t<span class=\"comment\">//test02();</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>总结： 前置递增返回引用，后置递增返回值</p>\n</blockquote>\n<h4 id=\"4-5-4-赋值运算符重载\"><a href=\"#4-5-4-赋值运算符重载\" class=\"headerlink\" title=\"4.5.4 赋值运算符重载\"></a>4.5.4 赋值运算符重载</h4><p>c++编译器至少给一个类添加4个函数</p>\n<ol>\n<li>默认构造函数(无参，函数体为空)</li>\n<li>默认析构函数(无参，函数体为空)</li>\n<li>默认拷贝构造函数，对属性进行值拷贝</li>\n<li>赋值运算符 operator=, 对属性进行值拷贝</li>\n</ol>\n<p>如果类中有属性指向堆区，做赋值操作时也会出现深浅拷贝问题</p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">\tPerson(<span class=\"keyword\">int</span> age)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//将年龄数据开辟到堆区</span></span><br><span class=\"line\">\t\tm_Age = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>(age);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//重载赋值运算符 </span></span><br><span class=\"line\">\tPerson&amp; <span class=\"keyword\">operator</span>=(Person &amp;p)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (m_Age != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">delete</span> m_Age;</span><br><span class=\"line\">\t\t\tm_Age = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//编译器提供的代码是浅拷贝</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//m_Age = p.m_Age;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">//提供深拷贝 解决浅拷贝的问题</span></span><br><span class=\"line\">\t\tm_Age = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>(*p.m_Age);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">//返回自身</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t~Person()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (m_Age != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">delete</span> m_Age;</span><br><span class=\"line\">\t\t\tm_Age = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//年龄的指针</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> *m_Age;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\">Person <span class=\"title\">p1</span><span class=\"params\">(<span class=\"number\">18</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\">Person <span class=\"title\">p2</span><span class=\"params\">(<span class=\"number\">20</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\">Person <span class=\"title\">p3</span><span class=\"params\">(<span class=\"number\">30</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tp3 = p2 = p1; <span class=\"comment\">//赋值操作</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"p1的年龄为：\"</span> &lt;&lt; *p1.m_Age &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"p2的年龄为：\"</span> &lt;&lt; *p2.m_Age &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"p3的年龄为：\"</span> &lt;&lt; *p3.m_Age &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\ttest01();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//int a = 10;</span></span><br><span class=\"line\">\t<span class=\"comment\">//int b = 20;</span></span><br><span class=\"line\">\t<span class=\"comment\">//int c = 30;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//c = b = a;</span></span><br><span class=\"line\">\t<span class=\"comment\">//cout &lt;&lt; \"a = \" &lt;&lt; a &lt;&lt; endl;</span></span><br><span class=\"line\">\t<span class=\"comment\">//cout &lt;&lt; \"b = \" &lt;&lt; b &lt;&lt; endl;</span></span><br><span class=\"line\">\t<span class=\"comment\">//cout &lt;&lt; \"c = \" &lt;&lt; c &lt;&lt; endl;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n<h4 id=\"4-5-5-关系运算符重载\"><a href=\"#4-5-5-关系运算符重载\" class=\"headerlink\" title=\"4.5.5 关系运算符重载\"></a>4.5.5 关系运算符重载</h4><p><strong>作用：</strong>重载关系运算符，可以让两个自定义类型对象进行对比操作</p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\tPerson(<span class=\"built_in\">string</span> name, <span class=\"keyword\">int</span> age)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>-&gt;m_Name = name;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>-&gt;m_Age = age;</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span>==(Person &amp; p)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>-&gt;m_Name == p.m_Name &amp;&amp; <span class=\"keyword\">this</span>-&gt;m_Age == p.m_Age)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span>!=(Person &amp; p)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>-&gt;m_Name == p.m_Name &amp;&amp; <span class=\"keyword\">this</span>-&gt;m_Age == p.m_Age)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">string</span> m_Name;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> m_Age;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//int a = 0;</span></span><br><span class=\"line\">\t<span class=\"comment\">//int b = 0;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\">Person <span class=\"title\">a</span><span class=\"params\">(<span class=\"string\">\"孙悟空\"</span>, <span class=\"number\">18</span>)</span></span>;</span><br><span class=\"line\">\t<span class=\"function\">Person <span class=\"title\">b</span><span class=\"params\">(<span class=\"string\">\"孙悟空\"</span>, <span class=\"number\">18</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (a == b)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"a和b相等\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"a和b不相等\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (a != b)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"a和b不相等\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"a和b相等\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\ttest01();</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h4 id=\"4-5-6-函数调用运算符重载\"><a href=\"#4-5-6-函数调用运算符重载\" class=\"headerlink\" title=\"4.5.6 函数调用运算符重载\"></a>4.5.6 函数调用运算符重载</h4><ul>\n<li>函数调用运算符 ()  也可以重载</li>\n<li>由于重载后使用的方式非常像函数的调用，因此称为仿函数</li>\n<li>仿函数没有固定写法，非常灵活</li>\n</ul>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyPrint</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">operator</span><span class=\"params\">()</span><span class=\"params\">(<span class=\"built_in\">string</span> <span class=\"built_in\">text</span>)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">text</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//重载的（）操作符 也称为仿函数</span></span><br><span class=\"line\">\tMyPrint myFunc;</span><br><span class=\"line\">\tmyFunc(<span class=\"string\">\"hello world\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyAdd</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">operator</span><span class=\"params\">()</span><span class=\"params\">(<span class=\"keyword\">int</span> v1, <span class=\"keyword\">int</span> v2)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> v1 + v2;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test02</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tMyAdd add;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> ret = add(<span class=\"number\">10</span>, <span class=\"number\">10</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"ret = \"</span> &lt;&lt; ret &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//匿名对象调用  </span></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"MyAdd()(100,100) = \"</span> &lt;&lt; MyAdd()(<span class=\"number\">100</span>, <span class=\"number\">100</span>) &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\ttest01();</span><br><span class=\"line\">\ttest02();</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n<h3 id=\"4-6-继承\"><a href=\"#4-6-继承\" class=\"headerlink\" title=\"4.6  继承\"></a>4.6  继承</h3><p><strong>继承是面向对象三大特性之一</strong></p>\n<p>有些类与类之间存在特殊的关系，例如下图中：</p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"assets/1544861202252.png\" alt=\"1544861202252\"></p>\n<p>我们发现，定义这些类时，下级别的成员除了拥有上一级的共性，还有自己的特性。</p>\n<p>这个时候我们就可以考虑利用继承的技术，减少重复代码</p>\n<h4 id=\"4-6-1-继承的基本语法\"><a href=\"#4-6-1-继承的基本语法\" class=\"headerlink\" title=\"4.6.1 继承的基本语法\"></a>4.6.1 继承的基本语法</h4><p>例如我们看到很多网站中，都有公共的头部，公共的底部，甚至公共的左侧列表，只有中心内容不同</p>\n<p>接下来我们分别利用普通写法和继承的写法来实现网页中的内容，看一下继承存在的意义以及好处</p>\n<p><strong>普通实现：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Java页面</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Java</span> </span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">header</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"首页、公开课、登录、注册...（公共头部）\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">footer</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"帮助中心、交流合作、站内地图...(公共底部)\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">left</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Java,Python,C++...(公共分类列表)\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">content</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"JAVA学科视频\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">//Python页面</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Python</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">header</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"首页、公开课、登录、注册...（公共头部）\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">footer</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"帮助中心、交流合作、站内地图...(公共底部)\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">left</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Java,Python,C++...(公共分类列表)\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">content</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Python学科视频\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">//C++页面</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CPP</span> </span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">header</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"首页、公开课、登录、注册...（公共头部）\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">footer</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"帮助中心、交流合作、站内地图...(公共底部)\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">left</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Java,Python,C++...(公共分类列表)\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">content</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"C++学科视频\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//Java页面</span></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Java下载视频页面如下： \"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\tJava ja;</span><br><span class=\"line\">\tja.header();</span><br><span class=\"line\">\tja.footer();</span><br><span class=\"line\">\tja.left();</span><br><span class=\"line\">\tja.content();</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"--------------------\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//Python页面</span></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Python下载视频页面如下： \"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\tPython py;</span><br><span class=\"line\">\tpy.header();</span><br><span class=\"line\">\tpy.footer();</span><br><span class=\"line\">\tpy.left();</span><br><span class=\"line\">\tpy.content();</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"--------------------\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//C++页面</span></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"C++下载视频页面如下： \"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\tCPP cp;</span><br><span class=\"line\">\tcp.header();</span><br><span class=\"line\">\tcp.footer();</span><br><span class=\"line\">\tcp.left();</span><br><span class=\"line\">\tcp.content();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\ttest01();</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>继承实现：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//公共页面</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BasePage</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">header</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"首页、公开课、登录、注册...（公共头部）\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">footer</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"帮助中心、交流合作、站内地图...(公共底部)\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">left</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Java,Python,C++...(公共分类列表)\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Java页面</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Java</span> :</span> <span class=\"keyword\">public</span> BasePage</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">content</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"JAVA学科视频\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">//Python页面</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Python</span> :</span> <span class=\"keyword\">public</span> BasePage</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">content</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Python学科视频\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">//C++页面</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CPP</span> :</span> <span class=\"keyword\">public</span> BasePage</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">content</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"C++学科视频\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//Java页面</span></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Java下载视频页面如下： \"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\tJava ja;</span><br><span class=\"line\">\tja.header();</span><br><span class=\"line\">\tja.footer();</span><br><span class=\"line\">\tja.left();</span><br><span class=\"line\">\tja.content();</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"--------------------\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//Python页面</span></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Python下载视频页面如下： \"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\tPython py;</span><br><span class=\"line\">\tpy.header();</span><br><span class=\"line\">\tpy.footer();</span><br><span class=\"line\">\tpy.left();</span><br><span class=\"line\">\tpy.content();</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"--------------------\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//C++页面</span></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"C++下载视频页面如下： \"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\tCPP cp;</span><br><span class=\"line\">\tcp.header();</span><br><span class=\"line\">\tcp.footer();</span><br><span class=\"line\">\tcp.left();</span><br><span class=\"line\">\tcp.content();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\ttest01();</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>总结：</strong></p>\n<p>继承的好处：==可以减少重复的代码==</p>\n<p>class A : public B; </p>\n<p>A 类称为子类 或 派生类</p>\n<p>B 类称为父类 或 基类</p>\n<p><strong>派生类中的成员，包含两大部分</strong>：</p>\n<p>一类是从基类继承过来的，一类是自己增加的成员。</p>\n<p>从基类继承过过来的表现其共性，而新增的成员体现了其个性。</p>\n<h4 id=\"4-6-2-继承方式\"><a href=\"#4-6-2-继承方式\" class=\"headerlink\" title=\"4.6.2 继承方式\"></a>4.6.2 继承方式</h4><p>继承的语法：<code>class 子类 : 继承方式  父类</code></p>\n<p><strong>继承方式一共有三种：</strong></p>\n<ul>\n<li>公共继承</li>\n<li>保护继承</li>\n<li>私有继承</li>\n</ul>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"assets/clip_image002.png\" alt=\"img\"></p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Base1</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>: </span><br><span class=\"line\">\t<span class=\"keyword\">int</span> m_A;</span><br><span class=\"line\"><span class=\"keyword\">protected</span>:</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> m_B;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> m_C;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//公共继承</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Son1</span> :</span><span class=\"keyword\">public</span> Base1</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">func</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tm_A; <span class=\"comment\">//可访问 public权限</span></span><br><span class=\"line\">\t\tm_B; <span class=\"comment\">//可访问 protected权限</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//m_C; //不可访问</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">myClass</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tSon1 s1;</span><br><span class=\"line\">\ts1.m_A; <span class=\"comment\">//其他类只能访问到公共权限</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//保护继承</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Base2</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> m_A;</span><br><span class=\"line\"><span class=\"keyword\">protected</span>:</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> m_B;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> m_C;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Son2</span>:</span><span class=\"keyword\">protected</span> Base2</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">func</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tm_A; <span class=\"comment\">//可访问 protected权限</span></span><br><span class=\"line\">\t\tm_B; <span class=\"comment\">//可访问 protected权限</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//m_C; //不可访问</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">myClass2</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tSon2 s;</span><br><span class=\"line\">\t<span class=\"comment\">//s.m_A; //不可访问</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//私有继承</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Base3</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> m_A;</span><br><span class=\"line\"><span class=\"keyword\">protected</span>:</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> m_B;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> m_C;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Son3</span>:</span><span class=\"keyword\">private</span> Base3</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">func</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tm_A; <span class=\"comment\">//可访问 private权限</span></span><br><span class=\"line\">\t\tm_B; <span class=\"comment\">//可访问 private权限</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//m_C; //不可访问</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GrandSon3</span> :</span><span class=\"keyword\">public</span> Son3</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">func</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//Son3是私有继承，所以继承Son3的属性在GrandSon3中都无法访问到</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//m_A;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//m_B;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//m_C;</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n<h4 id=\"4-6-3-继承中的对象模型\"><a href=\"#4-6-3-继承中的对象模型\" class=\"headerlink\" title=\"4.6.3 继承中的对象模型\"></a>4.6.3 继承中的对象模型</h4><p><strong>问题：</strong>从父类继承过来的成员，哪些属于子类对象中？</p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Base</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> m_A;</span><br><span class=\"line\"><span class=\"keyword\">protected</span>:</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> m_B;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> m_C; <span class=\"comment\">//私有成员只是被隐藏了，但是还是会继承下去</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//公共继承</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Son</span> :</span><span class=\"keyword\">public</span> Base</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> m_D;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"sizeof Son = \"</span> &lt;&lt; <span class=\"keyword\">sizeof</span>(Son) &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\ttest01();</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>利用工具查看：</p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"assets/1545881904150.png\" alt=\"1545881904150\"></p>\n<p>打开工具窗口后，定位到当前CPP文件的盘符</p>\n<p>然后输入： cl /d1 reportSingleClassLayout查看的类名   所属文件名</p>\n<p>效果如下图：</p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"assets/1545882158050.png\" alt=\"1545882158050\"></p>\n<blockquote>\n<p>结论： 父类中私有成员也是被子类继承下去了，只是由编译器给隐藏后访问不到</p>\n</blockquote>\n<h4 id=\"4-6-4-继承中构造和析构顺序\"><a href=\"#4-6-4-继承中构造和析构顺序\" class=\"headerlink\" title=\"4.6.4 继承中构造和析构顺序\"></a>4.6.4 继承中构造和析构顺序</h4><p>子类继承父类后，当创建子类对象，也会调用父类的构造函数</p>\n<p>问题：父类和子类的构造和析构顺序是谁先谁后？</p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Base</span> </span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\tBase()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Base构造函数!\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t~Base()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Base析构函数!\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Son</span> :</span> <span class=\"keyword\">public</span> Base</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\tSon()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Son构造函数!\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t~Son()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Son析构函数!\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//继承中 先调用父类构造函数，再调用子类构造函数，析构顺序与构造相反</span></span><br><span class=\"line\">\tSon s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\ttest01();</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>总结：继承中 先调用父类构造函数，再调用子类构造函数，析构顺序与构造相反</p>\n</blockquote>\n<h4 id=\"4-6-5-继承同名成员处理方式\"><a href=\"#4-6-5-继承同名成员处理方式\" class=\"headerlink\" title=\"4.6.5 继承同名成员处理方式\"></a>4.6.5 继承同名成员处理方式</h4><p>问题：当子类与父类出现同名的成员，如何通过子类对象，访问到子类或父类中同名的数据呢？</p>\n<ul>\n<li>访问子类同名成员   直接访问即可</li>\n<li>访问父类同名成员   需要加作用域</li>\n</ul>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Base</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\tBase()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tm_A = <span class=\"number\">100</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">func</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Base - func()调用\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"keyword\">int</span> a)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Base - func(int a)调用\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> m_A;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Son</span> :</span> <span class=\"keyword\">public</span> Base &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\tSon()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tm_A = <span class=\"number\">200</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//当子类与父类拥有同名的成员函数，子类会隐藏父类中所有版本的同名成员函数</span></span><br><span class=\"line\">\t<span class=\"comment\">//如果想访问父类中被隐藏的同名成员函数，需要加父类的作用域</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">func</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Son - func()调用\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> m_A;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tSon s;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Son下的m_A = \"</span> &lt;&lt; s.m_A &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Base下的m_A = \"</span> &lt;&lt; s.Base::m_A &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\ts.func();</span><br><span class=\"line\">\ts.Base::func();</span><br><span class=\"line\">\ts.Base::func(<span class=\"number\">10</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\ttest01();</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> EXIT_SUCCESS;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>总结：</p>\n<ol>\n<li>子类对象可以直接访问到子类中同名成员</li>\n<li>子类对象加作用域可以访问到父类同名成员</li>\n<li>当子类与父类拥有同名的成员函数，子类会隐藏父类中同名成员函数，加作用域可以访问到父类中同名函数</li>\n</ol>\n<h4 id=\"4-6-6-继承同名静态成员处理方式\"><a href=\"#4-6-6-继承同名静态成员处理方式\" class=\"headerlink\" title=\"4.6.6 继承同名静态成员处理方式\"></a>4.6.6 继承同名静态成员处理方式</h4><p>问题：继承中同名的静态成员在子类对象上如何进行访问？</p>\n<p>静态成员和非静态成员出现同名，处理方式一致</p>\n<ul>\n<li>访问子类同名成员   直接访问即可</li>\n<li>访问父类同名成员   需要加作用域</li>\n</ul>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Base</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">func</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Base - static void func()\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"keyword\">int</span> a)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Base - static void func(int a)\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">int</span> m_A;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> Base::m_A = <span class=\"number\">100</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Son</span> :</span> <span class=\"keyword\">public</span> Base &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">func</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Son - static void func()\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">int</span> m_A;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> Son::m_A = <span class=\"number\">200</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//同名成员属性</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//通过对象访问</span></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"通过对象访问： \"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\tSon s;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Son  下 m_A = \"</span> &lt;&lt; s.m_A &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Base 下 m_A = \"</span> &lt;&lt; s.Base::m_A &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//通过类名访问</span></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"通过类名访问： \"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Son  下 m_A = \"</span> &lt;&lt; Son::m_A &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Base 下 m_A = \"</span> &lt;&lt; Son::Base::m_A &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//同名成员函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test02</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//通过对象访问</span></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"通过对象访问： \"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\tSon s;</span><br><span class=\"line\">\ts.func();</span><br><span class=\"line\">\ts.Base::func();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"通过类名访问： \"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\tSon::func();</span><br><span class=\"line\">\tSon::Base::func();</span><br><span class=\"line\">\t<span class=\"comment\">//出现同名，子类会隐藏掉父类中所有同名成员函数，需要加作作用域访问</span></span><br><span class=\"line\">\tSon::Base::func(<span class=\"number\">100</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//test01();</span></span><br><span class=\"line\">\ttest02();</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>总结：同名静态成员处理方式和非静态处理方式一样，只不过有两种访问的方式（通过对象 和 通过类名）</p>\n</blockquote>\n<h4 id=\"4-6-7-多继承语法\"><a href=\"#4-6-7-多继承语法\" class=\"headerlink\" title=\"4.6.7 多继承语法\"></a>4.6.7 多继承语法</h4><p>C++允许<strong>一个类继承多个类</strong></p>\n<p>语法：<code>class 子类 ：继承方式 父类1 ， 继承方式 父类2...</code></p>\n<p>多继承可能会引发父类中有同名成员出现，需要加作用域区分</p>\n<p><strong>C++实际开发中不建议用多继承</strong></p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Base1</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\tBase1()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tm_A = <span class=\"number\">100</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> m_A;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Base2</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\tBase2()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tm_A = <span class=\"number\">200</span>;  <span class=\"comment\">//开始是m_B 不会出问题，但是改为mA就会出现不明确</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> m_A;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//语法：class 子类：继承方式 父类1 ，继承方式 父类2 </span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Son</span> :</span> <span class=\"keyword\">public</span> Base2, <span class=\"keyword\">public</span> Base1 </span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\tSon()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tm_C = <span class=\"number\">300</span>;</span><br><span class=\"line\">\t\tm_D = <span class=\"number\">400</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> m_C;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> m_D;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//多继承容易产生成员同名的情况</span></span><br><span class=\"line\"><span class=\"comment\">//通过使用类名作用域可以区分调用哪一个基类的成员</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tSon s;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"sizeof Son = \"</span> &lt;&lt; <span class=\"keyword\">sizeof</span>(s) &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; s.Base1::m_A &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; s.Base2::m_A &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\ttest01();</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>总结： 多继承中如果父类中出现了同名情况，子类使用时候要加作用域</p>\n</blockquote>\n<h4 id=\"4-6-8-菱形继承\"><a href=\"#4-6-8-菱形继承\" class=\"headerlink\" title=\"4.6.8 菱形继承\"></a>4.6.8 菱形继承</h4><p><strong>菱形继承概念：</strong></p>\n<p>​    两个派生类继承同一个基类</p>\n<p>​    又有某个类同时继承者两个派生类</p>\n<p>​    这种继承被称为菱形继承，或者钻石继承</p>\n<p><strong>典型的菱形继承案例：</strong></p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"assets/clip_image002.jpg\" alt=\"IMG_256\"></p>\n<p><strong>菱形继承问题：</strong></p>\n<ol>\n<li><p>羊继承了动物的数据，驼同样继承了动物的数据，当草泥马使用数据时，就会产生二义性。</p>\n</li>\n<li><p>草泥马继承自动物的数据继承了两份，其实我们应该清楚，这份数据我们只需要一份就可以。</p>\n</li>\n</ol>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Animal</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> m_Age;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//继承前加virtual关键字后，变为虚继承</span></span><br><span class=\"line\"><span class=\"comment\">//此时公共的父类Animal称为虚基类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Sheep</span> :</span> <span class=\"keyword\">virtual</span> <span class=\"keyword\">public</span> Animal &#123;&#125;;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Tuo</span>   :</span> <span class=\"keyword\">virtual</span> <span class=\"keyword\">public</span> Animal &#123;&#125;;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SheepTuo</span> :</span> <span class=\"keyword\">public</span> Sheep, <span class=\"keyword\">public</span> Tuo &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tSheepTuo st;</span><br><span class=\"line\">\tst.Sheep::m_Age = <span class=\"number\">100</span>;</span><br><span class=\"line\">\tst.Tuo::m_Age = <span class=\"number\">200</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"st.Sheep::m_Age = \"</span> &lt;&lt; st.Sheep::m_Age &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"st.Tuo::m_Age = \"</span> &lt;&lt;  st.Tuo::m_Age &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"st.m_Age = \"</span> &lt;&lt; st.m_Age &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\ttest01();</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>总结：</p>\n<ul>\n<li>菱形继承带来的主要问题是子类继承两份相同的数据，导致资源浪费以及毫无意义</li>\n<li>利用虚继承可以解决菱形继承问题</li>\n</ul>\n<h3 id=\"4-7-多态\"><a href=\"#4-7-多态\" class=\"headerlink\" title=\"4.7  多态\"></a>4.7  多态</h3><h4 id=\"4-7-1-多态的基本概念\"><a href=\"#4-7-1-多态的基本概念\" class=\"headerlink\" title=\"4.7.1 多态的基本概念\"></a>4.7.1 多态的基本概念</h4><p><strong>多态是C++面向对象三大特性之一</strong></p>\n<p>多态分为两类</p>\n<ul>\n<li>静态多态: 函数重载 和 运算符重载属于静态多态，复用函数名</li>\n<li>动态多态: 派生类和虚函数实现运行时多态</li>\n</ul>\n<p>静态多态和动态多态区别：</p>\n<ul>\n<li>静态多态的函数地址早绑定  -  编译阶段确定函数地址</li>\n<li>动态多态的函数地址晚绑定  -  运行阶段确定函数地址</li>\n</ul>\n<p>下面通过案例进行讲解多态</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Animal</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"comment\">//Speak函数就是虚函数</span></span><br><span class=\"line\">\t<span class=\"comment\">//函数前面加上virtual关键字，变成虚函数，那么编译器在编译的时候就不能确定函数调用了。</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">speak</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"动物在说话\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cat</span> :</span><span class=\"keyword\">public</span> Animal</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">speak</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"小猫在说话\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span> :</span><span class=\"keyword\">public</span> Animal</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">speak</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"小狗在说话\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">//我们希望传入什么对象，那么就调用什么对象的函数</span></span><br><span class=\"line\"><span class=\"comment\">//如果函数地址在编译阶段就能确定，那么静态联编</span></span><br><span class=\"line\"><span class=\"comment\">//如果函数地址在运行阶段才能确定，就是动态联编</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">DoSpeak</span><span class=\"params\">(Animal &amp; animal)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tanimal.speak();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//多态满足条件： </span></span><br><span class=\"line\"><span class=\"comment\">//1、有继承关系</span></span><br><span class=\"line\"><span class=\"comment\">//2、子类重写父类中的虚函数</span></span><br><span class=\"line\"><span class=\"comment\">//多态使用：</span></span><br><span class=\"line\"><span class=\"comment\">//父类指针或引用指向子类对象</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tCat cat;</span><br><span class=\"line\">\tDoSpeak(cat);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\tDog dog;</span><br><span class=\"line\">\tDoSpeak(dog);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\ttest01();</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>总结：</p>\n<p>多态满足条件</p>\n<ul>\n<li>有继承关系</li>\n<li>子类重写父类中的虚函数</li>\n</ul>\n<p>多态使用条件</p>\n<ul>\n<li>父类指针或引用指向子类对象</li>\n</ul>\n<p>重写：函数返回值类型  函数名 参数列表 完全一致称为重写</p>\n<h4 id=\"4-7-2-多态案例一-计算器类\"><a href=\"#4-7-2-多态案例一-计算器类\" class=\"headerlink\" title=\"4.7.2 多态案例一-计算器类\"></a>4.7.2 多态案例一-计算器类</h4><p>案例描述：</p>\n<p>分别利用普通写法和多态技术，设计实现两个操作数进行运算的计算器类</p>\n<p>多态的优点：</p>\n<ul>\n<li>代码组织结构清晰</li>\n<li>可读性强</li>\n<li>利于前期和后期的扩展以及维护</li>\n</ul>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//普通实现</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Calculator</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getResult</span><span class=\"params\">(<span class=\"built_in\">string</span> oper)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (oper == <span class=\"string\">\"+\"</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> m_Num1 + m_Num2;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (oper == <span class=\"string\">\"-\"</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> m_Num1 - m_Num2;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (oper == <span class=\"string\">\"*\"</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> m_Num1 * m_Num2;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//如果要提供新的运算，需要修改源码</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> m_Num1;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> m_Num2;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//普通实现测试</span></span><br><span class=\"line\">\tCalculator c;</span><br><span class=\"line\">\tc.m_Num1 = <span class=\"number\">10</span>;</span><br><span class=\"line\">\tc.m_Num2 = <span class=\"number\">10</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; c.m_Num1 &lt;&lt; <span class=\"string\">\" + \"</span> &lt;&lt; c.m_Num2 &lt;&lt; <span class=\"string\">\" = \"</span> &lt;&lt; c.<span class=\"built_in\">getResult</span>(<span class=\"string\">\"+\"</span>) &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; c.m_Num1 &lt;&lt; <span class=\"string\">\" - \"</span> &lt;&lt; c.m_Num2 &lt;&lt; <span class=\"string\">\" = \"</span> &lt;&lt; c.<span class=\"built_in\">getResult</span>(<span class=\"string\">\"-\"</span>) &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; c.m_Num1 &lt;&lt; <span class=\"string\">\" * \"</span> &lt;&lt; c.m_Num2 &lt;&lt; <span class=\"string\">\" = \"</span> &lt;&lt; c.<span class=\"built_in\">getResult</span>(<span class=\"string\">\"*\"</span>) &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//多态实现</span></span><br><span class=\"line\"><span class=\"comment\">//抽象计算器类</span></span><br><span class=\"line\"><span class=\"comment\">//多态优点：代码组织结构清晰，可读性强，利于前期和后期的扩展以及维护</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractCalculator</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> :</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">int</span> <span class=\"title\">getResult</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> m_Num1;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> m_Num2;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//加法计算器</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AddCalculator</span> :</span><span class=\"keyword\">public</span> AbstractCalculator</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getResult</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> m_Num1 + m_Num2;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//减法计算器</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SubCalculator</span> :</span><span class=\"keyword\">public</span> AbstractCalculator</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getResult</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> m_Num1 - m_Num2;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//乘法计算器</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MulCalculator</span> :</span><span class=\"keyword\">public</span> AbstractCalculator</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getResult</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> m_Num1 * m_Num2;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test02</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//创建加法计算器</span></span><br><span class=\"line\">\tAbstractCalculator *abc = <span class=\"keyword\">new</span> AddCalculator;</span><br><span class=\"line\">\tabc-&gt;m_Num1 = <span class=\"number\">10</span>;</span><br><span class=\"line\">\tabc-&gt;m_Num2 = <span class=\"number\">10</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; abc-&gt;m_Num1 &lt;&lt; <span class=\"string\">\" + \"</span> &lt;&lt; abc-&gt;m_Num2 &lt;&lt; <span class=\"string\">\" = \"</span> &lt;&lt; abc-&gt;<span class=\"built_in\">getResult</span>() &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">delete</span> abc;  <span class=\"comment\">//用完了记得销毁</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//创建减法计算器</span></span><br><span class=\"line\">\tabc = <span class=\"keyword\">new</span> SubCalculator;</span><br><span class=\"line\">\tabc-&gt;m_Num1 = <span class=\"number\">10</span>;</span><br><span class=\"line\">\tabc-&gt;m_Num2 = <span class=\"number\">10</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; abc-&gt;m_Num1 &lt;&lt; <span class=\"string\">\" - \"</span> &lt;&lt; abc-&gt;m_Num2 &lt;&lt; <span class=\"string\">\" = \"</span> &lt;&lt; abc-&gt;<span class=\"built_in\">getResult</span>() &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">delete</span> abc;  </span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//创建乘法计算器</span></span><br><span class=\"line\">\tabc = <span class=\"keyword\">new</span> MulCalculator;</span><br><span class=\"line\">\tabc-&gt;m_Num1 = <span class=\"number\">10</span>;</span><br><span class=\"line\">\tabc-&gt;m_Num2 = <span class=\"number\">10</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; abc-&gt;m_Num1 &lt;&lt; <span class=\"string\">\" * \"</span> &lt;&lt; abc-&gt;m_Num2 &lt;&lt; <span class=\"string\">\" = \"</span> &lt;&lt; abc-&gt;<span class=\"built_in\">getResult</span>() &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">delete</span> abc;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//test01();</span></span><br><span class=\"line\"></span><br><span class=\"line\">\ttest02();</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>总结：C++开发提倡利用多态设计程序架构，因为多态优点很多</p>\n</blockquote>\n<h4 id=\"4-7-3-纯虚函数和抽象类\"><a href=\"#4-7-3-纯虚函数和抽象类\" class=\"headerlink\" title=\"4.7.3 纯虚函数和抽象类\"></a>4.7.3 纯虚函数和抽象类</h4><p>在多态中，通常父类中虚函数的实现是毫无意义的，主要都是调用子类重写的内容</p>\n<p>因此可以将虚函数改为<strong>纯虚函数</strong></p>\n<p>纯虚函数语法：<code>virtual 返回值类型 函数名 （参数列表）= 0 ;</code></p>\n<p>当类中有了纯虚函数，这个类也称为==抽象类==</p>\n<p><strong>抽象类特点</strong>：</p>\n<ul>\n<li>无法实例化对象</li>\n<li>子类必须重写抽象类中的纯虚函数，否则也属于抽象类</li>\n</ul>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Base</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"comment\">//纯虚函数</span></span><br><span class=\"line\">\t<span class=\"comment\">//类中只要有一个纯虚函数就称为抽象类</span></span><br><span class=\"line\">\t<span class=\"comment\">//抽象类无法实例化对象</span></span><br><span class=\"line\">\t<span class=\"comment\">//子类必须重写父类中的纯虚函数，否则也属于抽象类</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">func</span><span class=\"params\">()</span> </span>= <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Son</span> :</span><span class=\"keyword\">public</span> Base</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">func</span><span class=\"params\">()</span> </span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"func调用\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tBase * base = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t<span class=\"comment\">//base = new Base; // 错误，抽象类无法实例化对象</span></span><br><span class=\"line\">\tbase = <span class=\"keyword\">new</span> Son;</span><br><span class=\"line\">\tbase-&gt;func();</span><br><span class=\"line\">\t<span class=\"keyword\">delete</span> base;<span class=\"comment\">//记得销毁</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\ttest01();</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<h4 id=\"4-7-4-多态案例二-制作饮品\"><a href=\"#4-7-4-多态案例二-制作饮品\" class=\"headerlink\" title=\"4.7.4 多态案例二-制作饮品\"></a>4.7.4 多态案例二-制作饮品</h4><p><strong>案例描述：</strong></p>\n<p>制作饮品的大致流程为：煮水 -  冲泡 - 倒入杯中 - 加入辅料</p>\n<p>利用多态技术实现本案例，提供抽象制作饮品基类，提供子类制作咖啡和茶叶</p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"assets/1545985945198.png\" alt=\"1545985945198\"></p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//抽象制作饮品</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractDrinking</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"comment\">//烧水</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">Boil</span><span class=\"params\">()</span> </span>= <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"comment\">//冲泡</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">Brew</span><span class=\"params\">()</span> </span>= <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"comment\">//倒入杯中</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">PourInCup</span><span class=\"params\">()</span> </span>= <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"comment\">//加入辅料</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">PutSomething</span><span class=\"params\">()</span> </span>= <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"comment\">//规定流程</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">MakeDrink</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tBoil();</span><br><span class=\"line\">\t\tBrew();</span><br><span class=\"line\">\t\tPourInCup();</span><br><span class=\"line\">\t\tPutSomething();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//制作咖啡</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Coffee</span> :</span> <span class=\"keyword\">public</span> AbstractDrinking &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"comment\">//烧水</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">Boil</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"煮农夫山泉!\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//冲泡</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">Brew</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"冲泡咖啡!\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//倒入杯中</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">PourInCup</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"将咖啡倒入杯中!\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//加入辅料</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">PutSomething</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"加入牛奶!\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//制作茶水</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Tea</span> :</span> <span class=\"keyword\">public</span> AbstractDrinking &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"comment\">//烧水</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">Boil</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"煮自来水!\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//冲泡</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">Brew</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"冲泡茶叶!\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//倒入杯中</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">PourInCup</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"将茶水倒入杯中!\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//加入辅料</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">PutSomething</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"加入枸杞!\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//业务函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">DoWork</span><span class=\"params\">(AbstractDrinking* drink)</span> </span>&#123;</span><br><span class=\"line\">\tdrink-&gt;MakeDrink();</span><br><span class=\"line\">\t<span class=\"keyword\">delete</span> drink;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tDoWork(<span class=\"keyword\">new</span> Coffee);</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"--------------\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\tDoWork(<span class=\"keyword\">new</span> Tea);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\ttest01();</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<h4 id=\"4-7-5-虚析构和纯虚析构\"><a href=\"#4-7-5-虚析构和纯虚析构\" class=\"headerlink\" title=\"4.7.5 虚析构和纯虚析构\"></a>4.7.5 虚析构和纯虚析构</h4><p>多态使用时，如果子类中有属性开辟到堆区，那么父类指针在释放时无法调用到子类的析构代码</p>\n<p>解决方式：将父类中的析构函数改为<strong>虚析构</strong>或者<strong>纯虚析构</strong></p>\n<p>虚析构和纯虚析构共性：</p>\n<ul>\n<li>可以解决父类指针释放子类对象</li>\n<li>都需要有具体的函数实现</li>\n</ul>\n<p>虚析构和纯虚析构区别：</p>\n<ul>\n<li>如果是纯虚析构，该类属于抽象类，无法实例化对象</li>\n</ul>\n<p>虚析构语法：</p>\n<p><code>virtual ~类名(){}</code></p>\n<p>纯虚析构语法：</p>\n<p><code>virtual ~类名() = 0;</code></p>\n<p><code>类名::~类名(){}</code></p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Animal</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">\tAnimal()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Animal 构造函数调用！\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">Speak</span><span class=\"params\">()</span> </span>= <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//析构函数加上virtual关键字，变成虚析构函数</span></span><br><span class=\"line\">\t<span class=\"comment\">//virtual ~Animal()</span></span><br><span class=\"line\">\t<span class=\"comment\">//&#123;</span></span><br><span class=\"line\">\t<span class=\"comment\">//\tcout &lt;&lt; \"Animal虚析构函数调用！\" &lt;&lt; endl;</span></span><br><span class=\"line\">\t<span class=\"comment\">//&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">virtual</span> ~Animal() = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">Animal::~Animal()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Animal 纯虚析构函数调用！\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//和包含普通纯虚函数的类一样，包含了纯虚析构函数的类也是一个抽象类。不能够被实例化。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cat</span> :</span> <span class=\"keyword\">public</span> Animal &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\tCat(<span class=\"built_in\">string</span> name)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Cat构造函数调用！\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t\tm_Name = <span class=\"keyword\">new</span> <span class=\"built_in\">string</span>(name);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">Speak</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; *m_Name &lt;&lt;  <span class=\"string\">\"小猫在说话!\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t~Cat()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Cat析构函数调用!\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>-&gt;m_Name != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">delete</span> m_Name;</span><br><span class=\"line\">\t\t\tm_Name = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">string</span> *m_Name;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tAnimal *animal = <span class=\"keyword\">new</span> Cat(<span class=\"string\">\"Tom\"</span>);</span><br><span class=\"line\">\tanimal-&gt;Speak();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//通过父类指针去释放，会导致子类对象可能清理不干净，造成内存泄漏</span></span><br><span class=\"line\">\t<span class=\"comment\">//怎么解决？给基类增加一个虚析构函数</span></span><br><span class=\"line\">\t<span class=\"comment\">//虚析构函数就是用来解决通过父类指针释放子类对象</span></span><br><span class=\"line\">\t<span class=\"keyword\">delete</span> animal;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\ttest01();</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>总结：</p>\n<p>​    1. 虚析构或纯虚析构就是用来解决通过父类指针释放子类对象</p>\n<p>​    2. 如果子类中没有堆区数据，可以不写为虚析构或纯虚析构</p>\n<p>​    3. 拥有纯虚析构函数的类也属于抽象类</p>\n<h4 id=\"4-7-6-多态案例三-电脑组装\"><a href=\"#4-7-6-多态案例三-电脑组装\" class=\"headerlink\" title=\"4.7.6 多态案例三-电脑组装\"></a>4.7.6 多态案例三-电脑组装</h4><p><strong>案例描述：</strong></p>\n<p>电脑主要组成部件为 CPU（用于计算），显卡（用于显示），内存条（用于存储）</p>\n<p>将每个零件封装出抽象基类，并且提供不同的厂商生产不同的零件，例如Intel厂商和Lenovo厂商</p>\n<p>创建电脑类提供让电脑工作的函数，并且调用每个零件工作的接口</p>\n<p>测试时组装三台不同的电脑进行工作</p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//抽象CPU类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CPU</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"comment\">//抽象的计算函数</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">calculate</span><span class=\"params\">()</span> </span>= <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//抽象显卡类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">VideoCard</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"comment\">//抽象的显示函数</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">display</span><span class=\"params\">()</span> </span>= <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//抽象内存条类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Memory</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"comment\">//抽象的存储函数</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">storage</span><span class=\"params\">()</span> </span>= <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//电脑类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Computer</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\tComputer(CPU * cpu, VideoCard * vc, Memory * mem)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tm_cpu = cpu;</span><br><span class=\"line\">\t\tm_vc = vc;</span><br><span class=\"line\">\t\tm_mem = mem;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//提供工作的函数</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">work</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//让零件工作起来，调用接口</span></span><br><span class=\"line\">\t\tm_cpu-&gt;calculate();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tm_vc-&gt;<span class=\"built_in\">display</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tm_mem-&gt;storage();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//提供析构函数 释放3个电脑零件</span></span><br><span class=\"line\">\t~Computer()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">//释放CPU零件</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (m_cpu != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">delete</span> m_cpu;</span><br><span class=\"line\">\t\t\tm_cpu = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">//释放显卡零件</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (m_vc != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">delete</span> m_vc;</span><br><span class=\"line\">\t\t\tm_vc = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">//释放内存条零件</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (m_mem != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">delete</span> m_mem;</span><br><span class=\"line\">\t\t\tm_mem = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">\tCPU * m_cpu; <span class=\"comment\">//CPU的零件指针</span></span><br><span class=\"line\">\tVideoCard * m_vc; <span class=\"comment\">//显卡零件指针</span></span><br><span class=\"line\">\tMemory * m_mem; <span class=\"comment\">//内存条零件指针</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//具体厂商</span></span><br><span class=\"line\"><span class=\"comment\">//Intel厂商</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IntelCPU</span> :</span><span class=\"keyword\">public</span> CPU</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">calculate</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Intel的CPU开始计算了！\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IntelVideoCard</span> :</span><span class=\"keyword\">public</span> VideoCard</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">display</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Intel的显卡开始显示了！\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IntelMemory</span> :</span><span class=\"keyword\">public</span> Memory</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">storage</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Intel的内存条开始存储了！\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Lenovo厂商</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LenovoCPU</span> :</span><span class=\"keyword\">public</span> CPU</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">calculate</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Lenovo的CPU开始计算了！\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LenovoVideoCard</span> :</span><span class=\"keyword\">public</span> VideoCard</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">display</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Lenovo的显卡开始显示了！\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LenovoMemory</span> :</span><span class=\"keyword\">public</span> Memory</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">storage</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Lenovo的内存条开始存储了！\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//第一台电脑零件</span></span><br><span class=\"line\">\tCPU * intelCpu = <span class=\"keyword\">new</span> IntelCPU;</span><br><span class=\"line\">\tVideoCard * intelCard = <span class=\"keyword\">new</span> IntelVideoCard;</span><br><span class=\"line\">\tMemory * intelMem = <span class=\"keyword\">new</span> IntelMemory;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"第一台电脑开始工作：\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"comment\">//创建第一台电脑</span></span><br><span class=\"line\">\tComputer * computer1 = <span class=\"keyword\">new</span> Computer(intelCpu, intelCard, intelMem);</span><br><span class=\"line\">\tcomputer1-&gt;work();</span><br><span class=\"line\">\t<span class=\"keyword\">delete</span> computer1;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"-----------------------\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"第二台电脑开始工作：\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"comment\">//第二台电脑组装</span></span><br><span class=\"line\">\tComputer * computer2 = <span class=\"keyword\">new</span> Computer(<span class=\"keyword\">new</span> LenovoCPU, <span class=\"keyword\">new</span> LenovoVideoCard, <span class=\"keyword\">new</span> LenovoMemory);;</span><br><span class=\"line\">\tcomputer2-&gt;work();</span><br><span class=\"line\">\t<span class=\"keyword\">delete</span> computer2;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"-----------------------\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"第三台电脑开始工作：\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"comment\">//第三台电脑组装</span></span><br><span class=\"line\">\tComputer * computer3 = <span class=\"keyword\">new</span> Computer(<span class=\"keyword\">new</span> LenovoCPU, <span class=\"keyword\">new</span> IntelVideoCard, <span class=\"keyword\">new</span> LenovoMemory);;</span><br><span class=\"line\">\tcomputer3-&gt;work();</span><br><span class=\"line\">\t<span class=\"keyword\">delete</span> computer3;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n\n\n<h2 id=\"5-文件操作\"><a href=\"#5-文件操作\" class=\"headerlink\" title=\"5 文件操作\"></a>5 文件操作</h2><p>程序运行时产生的数据都属于临时数据，程序一旦运行结束都会被释放</p>\n<p>通过<strong>文件可以将数据持久化</strong></p>\n<p>C++中对文件操作需要包含头文件 ==&lt; fstream &gt;==</p>\n<p>文件类型分为两种：</p>\n<ol>\n<li><strong>文本文件</strong>     -  文件以文本的<strong>ASCII码</strong>形式存储在计算机中</li>\n<li><strong>二进制文件</strong> -  文件以文本的<strong>二进制</strong>形式存储在计算机中，用户一般不能直接读懂它们</li>\n</ol>\n<p>操作文件的三大类:</p>\n<ol>\n<li>ofstream：写操作</li>\n<li>ifstream： 读操作</li>\n<li>fstream ： 读写操作</li>\n</ol>\n<h3 id=\"5-1文本文件\"><a href=\"#5-1文本文件\" class=\"headerlink\" title=\"5.1文本文件\"></a>5.1文本文件</h3><h4 id=\"5-1-1写文件\"><a href=\"#5-1-1写文件\" class=\"headerlink\" title=\"5.1.1写文件\"></a>5.1.1写文件</h4><p>   写文件步骤如下：</p>\n<ol>\n<li><p>包含头文件   </p>\n<p>  #include &lt;fstream&gt;</p>\n</li>\n<li><p>创建流对象  </p>\n<p>ofstream ofs;</p>\n</li>\n<li><p>打开文件</p>\n<p>ofs.open(“文件路径”,打开方式);</p>\n</li>\n<li><p>写数据</p>\n<p>ofs &lt;&lt; “写入的数据”;</p>\n</li>\n<li><p>关闭文件</p>\n<p>ofs.close();</p>\n</li>\n</ol>\n<p>文件打开方式：</p>\n<table>\n<thead>\n<tr>\n<th>打开方式</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>ios::in</td>\n<td>为读文件而打开文件</td>\n</tr>\n<tr>\n<td>ios::out</td>\n<td>为写文件而打开文件</td>\n</tr>\n<tr>\n<td>ios::ate</td>\n<td>初始位置：文件尾</td>\n</tr>\n<tr>\n<td>ios::app</td>\n<td>追加方式写文件</td>\n</tr>\n<tr>\n<td>ios::trunc</td>\n<td>如果文件存在先删除，再创建</td>\n</tr>\n<tr>\n<td>ios::binary</td>\n<td>二进制方式</td>\n</tr>\n</tbody></table>\n<p><strong>注意：</strong> 文件打开方式可以配合使用，利用|操作符</p>\n<p><strong>例如：</strong>用二进制方式写文件 <code>ios::binary |  ios:: out</code></p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;fstream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tofstream ofs;</span><br><span class=\"line\">\tofs.<span class=\"built_in\">open</span>(<span class=\"string\">\"test.txt\"</span>, ios::out);</span><br><span class=\"line\"></span><br><span class=\"line\">\tofs &lt;&lt; <span class=\"string\">\"姓名：张三\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\tofs &lt;&lt; <span class=\"string\">\"性别：男\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\tofs &lt;&lt; <span class=\"string\">\"年龄：18\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tofs.<span class=\"built_in\">close</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\ttest01();</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>总结：</p>\n<ul>\n<li>文件操作必须包含头文件 fstream</li>\n<li>读文件可以利用 ofstream  ，或者fstream类</li>\n<li>打开文件时候需要指定操作文件的路径，以及打开方式</li>\n<li>利用&lt;&lt;可以向文件中写数据</li>\n<li>操作完毕，要关闭文件</li>\n</ul>\n<h4 id=\"5-1-2读文件\"><a href=\"#5-1-2读文件\" class=\"headerlink\" title=\"5.1.2读文件\"></a>5.1.2读文件</h4><p>读文件与写文件步骤相似，但是读取方式相对于比较多</p>\n<p>读文件步骤如下：</p>\n<ol>\n<li><p>包含头文件   </p>\n<p>  #include &lt;fstream&gt;</p>\n</li>\n<li><p>创建流对象  </p>\n<p>ifstream ifs;</p>\n</li>\n<li><p>打开文件并判断文件是否打开成功</p>\n<p>ifs.open(“文件路径”,打开方式);</p>\n</li>\n<li><p>读数据</p>\n<p>四种方式读取</p>\n</li>\n<li><p>关闭文件</p>\n<p>ifs.close();</p>\n</li>\n</ol>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;fstream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tifstream ifs;</span><br><span class=\"line\">\tifs.<span class=\"built_in\">open</span>(<span class=\"string\">\"test.txt\"</span>, ios::in);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!ifs.is_open())</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"文件打开失败\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//第一种方式</span></span><br><span class=\"line\">\t<span class=\"comment\">//char buf[1024] = &#123; 0 &#125;;</span></span><br><span class=\"line\">\t<span class=\"comment\">//while (ifs &gt;&gt; buf)</span></span><br><span class=\"line\">\t<span class=\"comment\">//&#123;</span></span><br><span class=\"line\">\t<span class=\"comment\">//\tcout &lt;&lt; buf &lt;&lt; endl;</span></span><br><span class=\"line\">\t<span class=\"comment\">//&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//第二种</span></span><br><span class=\"line\">\t<span class=\"comment\">//char buf[1024] = &#123; 0 &#125;;</span></span><br><span class=\"line\">\t<span class=\"comment\">//while (ifs.getline(buf,sizeof(buf)))</span></span><br><span class=\"line\">\t<span class=\"comment\">//&#123;</span></span><br><span class=\"line\">\t<span class=\"comment\">//\tcout &lt;&lt; buf &lt;&lt; endl;</span></span><br><span class=\"line\">\t<span class=\"comment\">//&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//第三种</span></span><br><span class=\"line\">\t<span class=\"comment\">//string buf;</span></span><br><span class=\"line\">\t<span class=\"comment\">//while (getline(ifs, buf))</span></span><br><span class=\"line\">\t<span class=\"comment\">//&#123;</span></span><br><span class=\"line\">\t<span class=\"comment\">//\tcout &lt;&lt; buf &lt;&lt; endl;</span></span><br><span class=\"line\">\t<span class=\"comment\">//&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">char</span> c;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> ((c = ifs.<span class=\"built_in\">get</span>()) != EOF)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; c;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tifs.<span class=\"built_in\">close</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\ttest01();</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>总结：</p>\n<ul>\n<li>读文件可以利用 ifstream  ，或者fstream类</li>\n<li>利用is_open函数可以判断文件是否打开成功</li>\n<li>close 关闭文件 </li>\n</ul>\n<h3 id=\"5-2-二进制文件\"><a href=\"#5-2-二进制文件\" class=\"headerlink\" title=\"5.2 二进制文件\"></a>5.2 二进制文件</h3><p>以二进制的方式对文件进行读写操作</p>\n<p>打开方式要指定为 ==ios::binary==</p>\n<h4 id=\"5-2-1-写文件\"><a href=\"#5-2-1-写文件\" class=\"headerlink\" title=\"5.2.1 写文件\"></a>5.2.1 写文件</h4><p>二进制方式写文件主要利用流对象调用成员函数write</p>\n<p>函数原型 ：<code>ostream&amp; write(const char * buffer,int len);</code></p>\n<p>参数解释：字符指针buffer指向内存中一段存储空间。len是读写的字节数</p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;fstream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> m_Name[<span class=\"number\">64</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> m_Age;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//二进制文件  写文件</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//1、包含头文件</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//2、创建输出流对象</span></span><br><span class=\"line\">\t<span class=\"function\">ofstream <span class=\"title\">ofs</span><span class=\"params\">(<span class=\"string\">\"person.txt\"</span>, ios::out | ios::binary)</span></span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//3、打开文件</span></span><br><span class=\"line\">\t<span class=\"comment\">//ofs.open(\"person.txt\", ios::out | ios::binary);</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tPerson p = &#123;<span class=\"string\">\"张三\"</span>  , <span class=\"number\">18</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//4、写文件</span></span><br><span class=\"line\">\tofs.<span class=\"built_in\">write</span>((<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *)&amp;p, <span class=\"keyword\">sizeof</span>(p));</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//5、关闭文件</span></span><br><span class=\"line\">\tofs.<span class=\"built_in\">close</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\ttest01();</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>总结：</p>\n<ul>\n<li>文件输出流对象 可以通过write函数，以二进制方式写数据</li>\n</ul>\n<h4 id=\"5-2-2-读文件\"><a href=\"#5-2-2-读文件\" class=\"headerlink\" title=\"5.2.2 读文件\"></a>5.2.2 读文件</h4><p>二进制方式读文件主要利用流对象调用成员函数read</p>\n<p>函数原型：<code>istream&amp; read(char *buffer,int len);</code></p>\n<p>参数解释：字符指针buffer指向内存中一段存储空间。len是读写的字节数</p>\n<p>示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;fstream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> m_Name[<span class=\"number\">64</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> m_Age;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\">ifstream <span class=\"title\">ifs</span><span class=\"params\">(<span class=\"string\">\"person.txt\"</span>, ios::in | ios::binary)</span></span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!ifs.is_open())</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"文件打开失败\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tPerson p;</span><br><span class=\"line\">\tifs.<span class=\"built_in\">read</span>((<span class=\"keyword\">char</span> *)&amp;p, <span class=\"keyword\">sizeof</span>(p));</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"姓名： \"</span> &lt;&lt; p.m_Name &lt;&lt; <span class=\"string\">\" 年龄： \"</span> &lt;&lt; p.m_Age &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\ttest01();</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li>文件输入流对象 可以通过read函数，以二进制方式读数据</li>\n</ul>\n<h1 id=\"C-提高编程\"><a href=\"#C-提高编程\" class=\"headerlink\" title=\"C++提高编程\"></a>C++提高编程</h1><ul>\n<li>本阶段主要针对C++==泛型编程==和==STL==技术做详细讲解，探讨C++更深层的使用</li>\n</ul>\n<h2 id=\"1-模板\"><a href=\"#1-模板\" class=\"headerlink\" title=\"1 模板\"></a>1 模板</h2><h3 id=\"1-1-模板的概念\"><a href=\"#1-1-模板的概念\" class=\"headerlink\" title=\"1.1 模板的概念\"></a>1.1 模板的概念</h3><p>模板就是建立<strong>通用的模具</strong>，大大<strong>提高复用性</strong></p>\n<p>例如生活中的模板</p>\n<p>一寸照片模板：</p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"assets/1547105026929.png\" alt=\"1547105026929\"></p>\n<p>PPT模板：</p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"assets/1547103297864.png\" alt=\"1547103297864\"></p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"assets/1547103359158.png\" alt=\"1547103359158\"></p>\n<p>模板的特点：</p>\n<ul>\n<li>模板不可以直接使用，它只是一个框架</li>\n<li>模板的通用并不是万能的</li>\n</ul>\n<h3 id=\"1-2-函数模板\"><a href=\"#1-2-函数模板\" class=\"headerlink\" title=\"1.2 函数模板\"></a>1.2 函数模板</h3><ul>\n<li>C++另一种编程思想称为 ==泛型编程== ，主要利用的技术就是模板</li>\n</ul>\n<ul>\n<li>C++提供两种模板机制:<strong>函数模板</strong>和<strong>类模板</strong> </li>\n</ul>\n<h4 id=\"1-2-1-函数模板语法\"><a href=\"#1-2-1-函数模板语法\" class=\"headerlink\" title=\"1.2.1 函数模板语法\"></a>1.2.1 函数模板语法</h4><p>函数模板作用：</p>\n<p>建立一个通用函数，其函数返回值类型和形参类型可以不具体制定，用一个<strong>虚拟的类型</strong>来代表。</p>\n<p><strong>语法：</strong> </p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\">函数声明或定义</span><br></pre></td></tr></table></figure>\n\n<p><strong>解释：</strong></p>\n<p>template  —  声明创建模板</p>\n<p>typename  — 表面其后面的符号是一种数据类型，可以用class代替</p>\n<p>T    —   通用的数据类型，名称可以替换，通常为大写字母</p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//交换整型函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">swapInt</span><span class=\"params\">(<span class=\"keyword\">int</span>&amp; a, <span class=\"keyword\">int</span>&amp; b)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> temp = a;</span><br><span class=\"line\">\ta = b;</span><br><span class=\"line\">\tb = temp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//交换浮点型函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">swapDouble</span><span class=\"params\">(<span class=\"keyword\">double</span>&amp; a, <span class=\"keyword\">double</span>&amp; b)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">double</span> temp = a;</span><br><span class=\"line\">\ta = b;</span><br><span class=\"line\">\tb = temp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//利用模板提供通用的交换函数</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">mySwap</span><span class=\"params\">(T&amp; a, T&amp; b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tT temp = a;</span><br><span class=\"line\">\ta = b;</span><br><span class=\"line\">\tb = temp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> b = <span class=\"number\">20</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//swapInt(a, b);</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//利用模板实现交换</span></span><br><span class=\"line\">\t<span class=\"comment\">//1、自动类型推导</span></span><br><span class=\"line\">\tmySwap(a, b);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//2、显示指定类型</span></span><br><span class=\"line\">\tmySwap&lt;<span class=\"keyword\">int</span>&gt;(a, b);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"a = \"</span> &lt;&lt; a &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"b = \"</span> &lt;&lt; b &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\ttest01();</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>总结：</p>\n<ul>\n<li>函数模板利用关键字 template</li>\n<li>使用函数模板有两种方式：自动类型推导、显示指定类型</li>\n<li>模板的目的是为了提高复用性，将类型参数化</li>\n</ul>\n<h4 id=\"1-2-2-函数模板注意事项\"><a href=\"#1-2-2-函数模板注意事项\" class=\"headerlink\" title=\"1.2.2 函数模板注意事项\"></a>1.2.2 函数模板注意事项</h4><p>注意事项：</p>\n<ul>\n<li>自动类型推导，必须推导出一致的数据类型T,才可以使用</li>\n</ul>\n<ul>\n<li>模板必须要确定出T的数据类型，才可以使用</li>\n</ul>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//利用模板提供通用的交换函数</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">void</span> <span class=\"title\">mySwap</span>(<span class=\"title\">T</span>&amp; <span class=\"title\">a</span>, <span class=\"title\">T</span>&amp; <span class=\"title\">b</span>)</span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\tT temp = a;</span><br><span class=\"line\">\ta = b;</span><br><span class=\"line\">\tb = temp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1、自动类型推导，必须推导出一致的数据类型T,才可以使用</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> b = <span class=\"number\">20</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> c = <span class=\"string\">'c'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tmySwap(a, b); <span class=\"comment\">// 正确，可以推导出一致的T</span></span><br><span class=\"line\">\t<span class=\"comment\">//mySwap(a, c); // 错误，推导不出一致的T类型</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2、模板必须要确定出T的数据类型，才可以使用</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">void</span> <span class=\"title\">func</span>()</span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"func 调用\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test02</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//func(); //错误，模板不能独立使用，必须确定出T的类型</span></span><br><span class=\"line\">\tfunc&lt;<span class=\"keyword\">int</span>&gt;(); <span class=\"comment\">//利用显示指定类型的方式，给T一个类型，才可以使用该模板</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\ttest01();</span><br><span class=\"line\">\ttest02();</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>总结：</p>\n<ul>\n<li>使用模板时必须确定出通用数据类型T，并且能够推导出一致的类型</li>\n</ul>\n<h4 id=\"1-2-3-函数模板案例\"><a href=\"#1-2-3-函数模板案例\" class=\"headerlink\" title=\"1.2.3 函数模板案例\"></a>1.2.3 函数模板案例</h4><p>案例描述：</p>\n<ul>\n<li>利用函数模板封装一个排序的函数，可以对<strong>不同数据类型数组</strong>进行排序</li>\n<li>排序规则从大到小，排序算法为<strong>选择排序</strong></li>\n<li>分别利用<strong>char数组</strong>和<strong>int数组</strong>进行测试</li>\n</ul>\n<p>示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//交换的函数模板</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">mySwap</span><span class=\"params\">(T &amp;a, T&amp;b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tT temp = a;</span><br><span class=\"line\">\ta = b;</span><br><span class=\"line\">\tb = temp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>&gt; // 也可以替换成<span class=\"title\">typename</span></span></span><br><span class=\"line\"><span class=\"class\">//利用选择排序，进行对数组从大到小的排序</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">void</span> <span class=\"title\">mySort</span>(<span class=\"title\">T</span> <span class=\"title\">arr</span>[], <span class=\"title\">int</span> <span class=\"title\">len</span>)</span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; len; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> <span class=\"built_in\">max</span> = i; <span class=\"comment\">//最大数的下标</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i + <span class=\"number\">1</span>; j &lt; len; j++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (arr[<span class=\"built_in\">max</span>] &lt; arr[j])</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">max</span> = j;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"built_in\">max</span> != i) <span class=\"comment\">//如果最大数的下标不是i，交换两者</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tmySwap(arr[<span class=\"built_in\">max</span>], arr[i]);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">printArray</span><span class=\"params\">(T arr[], <span class=\"keyword\">int</span> len)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; arr[i] &lt;&lt; <span class=\"string\">\" \"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//测试char数组</span></span><br><span class=\"line\">\t<span class=\"keyword\">char</span> charArr[] = <span class=\"string\">\"bdcfeagh\"</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> num = <span class=\"keyword\">sizeof</span>(charArr) / <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">char</span>);</span><br><span class=\"line\">\tmySort(charArr, num);</span><br><span class=\"line\">\tprintArray(charArr, num);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test02</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//测试int数组</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> intArr[] = &#123; <span class=\"number\">7</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">9</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span> &#125;;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> num = <span class=\"keyword\">sizeof</span>(intArr) / <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>);</span><br><span class=\"line\">\tmySort(intArr, num);</span><br><span class=\"line\">\tprintArray(intArr, num);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\ttest01();</span><br><span class=\"line\">\ttest02();</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>总结：模板可以提高代码复用，需要熟练掌握</p>\n<h4 id=\"1-2-4-普通函数与函数模板的区别\"><a href=\"#1-2-4-普通函数与函数模板的区别\" class=\"headerlink\" title=\"1.2.4 普通函数与函数模板的区别\"></a>1.2.4 普通函数与函数模板的区别</h4><p><strong>普通函数与函数模板区别：</strong></p>\n<ul>\n<li>普通函数调用时可以发生自动类型转换（隐式类型转换）</li>\n<li>函数模板调用时，如果利用自动类型推导，不会发生隐式类型转换</li>\n<li>如果利用显示指定类型的方式，可以发生隐式类型转换</li>\n</ul>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//普通函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">myAdd01</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//函数模板</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">T</span> <span class=\"title\">myAdd02</span>(<span class=\"title\">T</span> <span class=\"title\">a</span>, <span class=\"title\">T</span> <span class=\"title\">b</span>)  </span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//使用函数模板时，如果用自动类型推导，不会发生自动类型转换,即隐式类型转换</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> b = <span class=\"number\">20</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> c = <span class=\"string\">'c'</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; myAdd01(a, c) &lt;&lt; <span class=\"built_in\">endl</span>; <span class=\"comment\">//正确，将char类型的'c'隐式转换为int类型  'c' 对应 ASCII码 99</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//myAdd02(a, c); // 报错，使用自动类型推导时，不会发生隐式类型转换</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tmyAdd02&lt;<span class=\"keyword\">int</span>&gt;(a, c); <span class=\"comment\">//正确，如果用显示指定类型，可以发生隐式类型转换</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\ttest01();</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>总结：建议使用显示指定类型的方式，调用函数模板，因为可以自己确定通用类型T</p>\n<h4 id=\"1-2-5-普通函数与函数模板的调用规则\"><a href=\"#1-2-5-普通函数与函数模板的调用规则\" class=\"headerlink\" title=\"1.2.5 普通函数与函数模板的调用规则\"></a>1.2.5 普通函数与函数模板的调用规则</h4><p>调用规则如下：</p>\n<ol>\n<li>如果函数模板和普通函数都可以实现，优先调用普通函数</li>\n<li>可以通过空模板参数列表来强制调用函数模板</li>\n<li>函数模板也可以发生重载</li>\n<li>如果函数模板可以产生更好的匹配,优先调用函数模板</li>\n</ol>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//普通函数与函数模板调用规则</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">myPrint</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"调用的普通函数\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">myPrint</span><span class=\"params\">(T a, T b)</span> </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123; </span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"调用的模板\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">myPrint</span><span class=\"params\">(T a, T b, T c)</span> </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123; </span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"调用重载的模板\"</span> &lt;&lt; <span class=\"built_in\">endl</span>; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//1、如果函数模板和普通函数都可以实现，优先调用普通函数</span></span><br><span class=\"line\">\t<span class=\"comment\">// 注意 如果告诉编译器  普通函数是有的，但只是声明没有实现，或者不在当前文件内实现，就会报错找不到</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> b = <span class=\"number\">20</span>;</span><br><span class=\"line\">\tmyPrint(a, b); <span class=\"comment\">//调用普通函数</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//2、可以通过空模板参数列表来强制调用函数模板</span></span><br><span class=\"line\">\tmyPrint&lt;&gt;(a, b); <span class=\"comment\">//调用函数模板</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//3、函数模板也可以发生重载</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> c = <span class=\"number\">30</span>;</span><br><span class=\"line\">\tmyPrint(a, b, c); <span class=\"comment\">//调用重载的函数模板</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//4、 如果函数模板可以产生更好的匹配,优先调用函数模板</span></span><br><span class=\"line\">\t<span class=\"keyword\">char</span> c1 = <span class=\"string\">'a'</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> c2 = <span class=\"string\">'b'</span>;</span><br><span class=\"line\">\tmyPrint(c1, c2); <span class=\"comment\">//调用函数模板</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\ttest01();</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>总结：既然提供了函数模板，最好就不要提供普通函数，否则容易出现二义性</p>\n<h4 id=\"1-2-6-模板的局限性\"><a href=\"#1-2-6-模板的局限性\" class=\"headerlink\" title=\"1.2.6 模板的局限性\"></a>1.2.6 模板的局限性</h4><p><strong>局限性：</strong></p>\n<ul>\n<li>模板的通用性并不是万能的</li>\n</ul>\n<p><strong>例如：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">void</span> <span class=\"title\">f</span>(<span class=\"title\">T</span> <span class=\"title\">a</span>, <span class=\"title\">T</span> <span class=\"title\">b</span>)</span></span><br><span class=\"line\"><span class=\"class\">&#123;</span> </span><br><span class=\"line\">   \ta = b;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<p>在上述代码中提供的赋值操作，如果传入的a和b是一个数组，就无法实现了</p>\n<p>再例如：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">void</span> <span class=\"title\">f</span>(<span class=\"title\">T</span> <span class=\"title\">a</span>, <span class=\"title\">T</span> <span class=\"title\">b</span>)</span></span><br><span class=\"line\"><span class=\"class\">&#123;</span> </span><br><span class=\"line\">   \t<span class=\"keyword\">if</span>(a &gt; b) &#123; ... &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<p>在上述代码中，如果T的数据类型传入的是像Person这样的自定义数据类型，也无法正常运行</p>\n<p>因此C++为了解决这种问题，提供模板的重载，可以为这些<strong>特定的类型</strong>提供<strong>具体化的模板</strong></p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\tPerson(<span class=\"built_in\">string</span> name, <span class=\"keyword\">int</span> age)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>-&gt;m_Name = name;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>-&gt;m_Age = age;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">string</span> m_Name;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> m_Age;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//普通函数模板</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">bool</span> <span class=\"title\">myCompare</span>(<span class=\"title\">T</span>&amp; <span class=\"title\">a</span>, <span class=\"title\">T</span>&amp; <span class=\"title\">b</span>)</span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (a == b)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//具体化，显示具体化的原型和定意思以template&lt;&gt;开头，并通过名称来指出类型</span></span><br><span class=\"line\"><span class=\"comment\">//具体化优先于常规模板</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;&gt; <span class=\"keyword\">bool</span> <span class=\"title\">myCompare</span><span class=\"params\">(Person &amp;p1, Person &amp;p2)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> ( p1.m_Name  == p2.m_Name &amp;&amp; p1.m_Age == p2.m_Age)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> b = <span class=\"number\">20</span>;</span><br><span class=\"line\">\t<span class=\"comment\">//内置数据类型可以直接使用通用的函数模板</span></span><br><span class=\"line\">\t<span class=\"keyword\">bool</span> ret = myCompare(a, b);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (ret)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"a == b \"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"a != b \"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test02</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\">Person <span class=\"title\">p1</span><span class=\"params\">(<span class=\"string\">\"Tom\"</span>, <span class=\"number\">10</span>)</span></span>;</span><br><span class=\"line\">\t<span class=\"function\">Person <span class=\"title\">p2</span><span class=\"params\">(<span class=\"string\">\"Tom\"</span>, <span class=\"number\">10</span>)</span></span>;</span><br><span class=\"line\">\t<span class=\"comment\">//自定义数据类型，不会调用普通的函数模板</span></span><br><span class=\"line\">\t<span class=\"comment\">//可以创建具体化的Person数据类型的模板，用于特殊处理这个类型</span></span><br><span class=\"line\">\t<span class=\"keyword\">bool</span> ret = myCompare(p1, p2);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (ret)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"p1 == p2 \"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"p1 != p2 \"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\ttest01();</span><br><span class=\"line\"></span><br><span class=\"line\">\ttest02();</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>总结：</p>\n<ul>\n<li>利用具体化的模板，可以解决自定义类型的通用化</li>\n<li>学习模板并不是为了写模板，而是在STL能够运用系统提供的模板</li>\n</ul>\n<h3 id=\"1-3-类模板\"><a href=\"#1-3-类模板\" class=\"headerlink\" title=\"1.3 类模板\"></a>1.3 类模板</h3><h4 id=\"1-3-1-类模板语法\"><a href=\"#1-3-1-类模板语法\" class=\"headerlink\" title=\"1.3.1 类模板语法\"></a>1.3.1 类模板语法</h4><p>类模板作用：</p>\n<ul>\n<li>建立一个通用类，类中的成员 数据类型可以不具体制定，用一个<strong>虚拟的类型</strong>来代表。</li>\n</ul>\n<p><strong>语法：</strong> </p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\">类</span><br></pre></td></tr></table></figure>\n\n<p><strong>解释：</strong></p>\n<p>template  —  声明创建模板</p>\n<p>typename  — 表面其后面的符号是一种数据类型，可以用class代替</p>\n<p>T    —   通用的数据类型，名称可以替换，通常为大写字母</p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">//类模板</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NameType</span>, <span class=\"title\">class</span> <span class=\"title\">AgeType</span>&gt; </span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">class</span> <span class=\"title\">Person</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\tPerson(NameType name, AgeType age)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>-&gt;mName = name;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>-&gt;mAge = age;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">showPerson</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"name: \"</span> &lt;&lt; <span class=\"keyword\">this</span>-&gt;mName &lt;&lt; <span class=\"string\">\" age: \"</span> &lt;&lt; <span class=\"keyword\">this</span>-&gt;mAge &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\tNameType mName;</span><br><span class=\"line\">\tAgeType mAge;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 指定NameType 为string类型，AgeType 为 int类型</span></span><br><span class=\"line\">\tPerson&lt;<span class=\"built_in\">string</span>, <span class=\"keyword\">int</span>&gt;P1(<span class=\"string\">\"孙悟空\"</span>, <span class=\"number\">999</span>);</span><br><span class=\"line\">\tP1.showPerson();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\ttest01();</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>总结：类模板和函数模板语法相似，在声明模板template后面加类，此类称为类模板</p>\n<h4 id=\"1-3-2-类模板与函数模板区别\"><a href=\"#1-3-2-类模板与函数模板区别\" class=\"headerlink\" title=\"1.3.2 类模板与函数模板区别\"></a>1.3.2 类模板与函数模板区别</h4><p>类模板与函数模板区别主要有两点：</p>\n<ol>\n<li>类模板没有自动类型推导的使用方式</li>\n<li>类模板在模板参数列表中可以有默认参数</li>\n</ol>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">//类模板</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NameType</span>, <span class=\"title\">class</span> <span class=\"title\">AgeType</span> = <span class=\"title\">int</span>&gt; </span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">class</span> <span class=\"title\">Person</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\tPerson(NameType name, AgeType age)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>-&gt;mName = name;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>-&gt;mAge = age;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">showPerson</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"name: \"</span> &lt;&lt; <span class=\"keyword\">this</span>-&gt;mName &lt;&lt; <span class=\"string\">\" age: \"</span> &lt;&lt; <span class=\"keyword\">this</span>-&gt;mAge &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\tNameType mName;</span><br><span class=\"line\">\tAgeType mAge;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//1、类模板没有自动类型推导的使用方式</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// Person p(\"孙悟空\", 1000); // 错误 类模板使用时候，不可以用自动类型推导</span></span><br><span class=\"line\">\tPerson &lt;<span class=\"built_in\">string</span> ,<span class=\"keyword\">int</span>&gt;p(<span class=\"string\">\"孙悟空\"</span>, <span class=\"number\">1000</span>); <span class=\"comment\">//必须使用显示指定类型的方式，使用类模板</span></span><br><span class=\"line\">\tp.showPerson();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//2、类模板在模板参数列表中可以有默认参数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test02</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tPerson &lt;<span class=\"built_in\">string</span>&gt; p(<span class=\"string\">\"猪八戒\"</span>, <span class=\"number\">999</span>); <span class=\"comment\">//类模板中的模板参数列表 可以指定默认参数</span></span><br><span class=\"line\">\tp.showPerson();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\ttest01();</span><br><span class=\"line\"></span><br><span class=\"line\">\ttest02();</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>总结：</p>\n<ul>\n<li>类模板使用只能用显示指定类型方式</li>\n<li>类模板中的模板参数列表可以有默认参数</li>\n</ul>\n<h4 id=\"1-3-3-类模板中成员函数创建时机\"><a href=\"#1-3-3-类模板中成员函数创建时机\" class=\"headerlink\" title=\"1.3.3 类模板中成员函数创建时机\"></a>1.3.3 类模板中成员函数创建时机</h4><p>类模板中成员函数和普通类中成员函数创建时机是有区别的：</p>\n<ul>\n<li>普通类中的成员函数一开始就可以创建</li>\n<li>类模板中的成员函数在调用时才创建</li>\n</ul>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person1</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">showPerson1</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Person1 show\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person2</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">showPerson2</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Person2 show\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">class</span> <span class=\"title\">MyClass</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\tT obj;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//类模板中的成员函数，并不是一开始就创建的，而是在模板调用时再生成</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">fun1</span><span class=\"params\">()</span> </span>&#123; obj.showPerson1(); &#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">fun2</span><span class=\"params\">()</span> </span>&#123; obj.showPerson2(); &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tMyClass&lt;Person1&gt; m;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tm.fun1();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//m.fun2();//编译会出错，说明函数调用才会去创建成员函数</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\ttest01();</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>总结：类模板中的成员函数并不是一开始就创建的，在调用时才去创建</p>\n<h4 id=\"1-3-4-类模板对象做函数参数\"><a href=\"#1-3-4-类模板对象做函数参数\" class=\"headerlink\" title=\"1.3.4 类模板对象做函数参数\"></a>1.3.4 类模板对象做函数参数</h4><p>学习目标：</p>\n<ul>\n<li>类模板实例化出的对象，向函数传参的方式</li>\n</ul>\n<p>一共有三种传入方式：</p>\n<ol>\n<li>指定传入的类型   — 直接显示对象的数据类型</li>\n<li>参数模板化           — 将对象中的参数变为模板进行传递</li>\n<li>整个类模板化       — 将这个对象类型 模板化进行传递</li>\n</ol>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">//类模板</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NameType</span>, <span class=\"title\">class</span> <span class=\"title\">AgeType</span> = <span class=\"title\">int</span>&gt; </span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">class</span> <span class=\"title\">Person</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\tPerson(NameType name, AgeType age)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>-&gt;mName = name;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>-&gt;mAge = age;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">showPerson</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"name: \"</span> &lt;&lt; <span class=\"keyword\">this</span>-&gt;mName &lt;&lt; <span class=\"string\">\" age: \"</span> &lt;&lt; <span class=\"keyword\">this</span>-&gt;mAge &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\tNameType mName;</span><br><span class=\"line\">\tAgeType mAge;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//1、指定传入的类型</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">printPerson1</span><span class=\"params\">(Person&lt;<span class=\"built_in\">string</span>, <span class=\"keyword\">int</span>&gt; &amp;p)</span> </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tp.showPerson();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tPerson &lt;<span class=\"built_in\">string</span>, <span class=\"keyword\">int</span> &gt;p(<span class=\"string\">\"孙悟空\"</span>, <span class=\"number\">100</span>);</span><br><span class=\"line\">\tprintPerson1(p);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//2、参数模板化</span></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T1</span>, <span class=\"title\">class</span> <span class=\"title\">T2</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">void</span> <span class=\"title\">printPerson2</span>(<span class=\"title\">Person</span>&lt;T1, T2&gt;&amp;<span class=\"title\">p</span>)</span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\tp.showPerson();</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"T1的类型为： \"</span> &lt;&lt; <span class=\"keyword\">typeid</span>(T1).name() &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"T2的类型为： \"</span> &lt;&lt; <span class=\"keyword\">typeid</span>(T2).name() &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test02</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tPerson &lt;<span class=\"built_in\">string</span>, <span class=\"keyword\">int</span> &gt;p(<span class=\"string\">\"猪八戒\"</span>, <span class=\"number\">90</span>);</span><br><span class=\"line\">\tprintPerson2(p);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//3、整个类模板化</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">void</span> <span class=\"title\">printPerson3</span>(<span class=\"title\">T</span> &amp; <span class=\"title\">p</span>)</span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"T的类型为： \"</span> &lt;&lt; <span class=\"keyword\">typeid</span>(T).name() &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\tp.showPerson();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test03</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tPerson &lt;<span class=\"built_in\">string</span>, <span class=\"keyword\">int</span> &gt;p(<span class=\"string\">\"唐僧\"</span>, <span class=\"number\">30</span>);</span><br><span class=\"line\">\tprintPerson3(p);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\ttest01();</span><br><span class=\"line\">\ttest02();</span><br><span class=\"line\">\ttest03();</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>总结：</p>\n<ul>\n<li>通过类模板创建的对象，可以有三种方式向函数中进行传参</li>\n<li>使用比较广泛是第一种：指定传入的类型</li>\n</ul>\n<h4 id=\"1-3-5-类模板与继承\"><a href=\"#1-3-5-类模板与继承\" class=\"headerlink\" title=\"1.3.5 类模板与继承\"></a>1.3.5 类模板与继承</h4><p>当类模板碰到继承时，需要注意一下几点：</p>\n<ul>\n<li>当子类继承的父类是一个类模板时，子类在声明的时候，要指定出父类中T的类型</li>\n<li>如果不指定，编译器无法给子类分配内存</li>\n<li>如果想灵活指定出父类中T的类型，子类也需变为类模板</li>\n</ul>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">class</span> <span class=\"title\">Base</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\tT m;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//class Son:public Base  //错误，c++编译需要给子类分配内存，必须知道父类中T的类型才可以向下继承</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Son</span> :</span><span class=\"keyword\">public</span> Base&lt;<span class=\"keyword\">int</span>&gt; <span class=\"comment\">//必须指定一个类型</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tSon c;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//类模板继承类模板 ,可以用T2指定父类中的T类型</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T1</span>, <span class=\"title\">class</span> <span class=\"title\">T2</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">class</span> <span class=\"title\">Son2</span> :</span><span class=\"keyword\">public</span> Base&lt;T2&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\tSon2()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"keyword\">typeid</span>(T1).name() &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"keyword\">typeid</span>(T2).name() &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test02</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tSon2&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">char</span>&gt; child1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\ttest01();</span><br><span class=\"line\"></span><br><span class=\"line\">\ttest02();</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>总结：如果父类是类模板，子类需要指定出父类中T的数据类型</p>\n<h4 id=\"1-3-6-类模板成员函数类外实现\"><a href=\"#1-3-6-类模板成员函数类外实现\" class=\"headerlink\" title=\"1.3.6 类模板成员函数类外实现\"></a>1.3.6 类模板成员函数类外实现</h4><p>学习目标：能够掌握类模板中的成员函数类外实现</p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//类模板中成员函数类外实现</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T1</span>, <span class=\"title\">class</span> <span class=\"title\">T2</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">class</span> <span class=\"title\">Person</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"comment\">//成员函数类内声明</span></span><br><span class=\"line\">\tPerson(T1 name, T2 age);</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">showPerson</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\tT1 m_Name;</span><br><span class=\"line\">\tT2 m_Age;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//构造函数 类外实现</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T1</span>, <span class=\"title\">class</span> <span class=\"title\">T2</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">Person</span>&lt;T1, T2&gt;:</span>:Person(T1 name, T2 age) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>-&gt;m_Name = name;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>-&gt;m_Age = age;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//成员函数 类外实现</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T1</span>, <span class=\"title\">class</span> <span class=\"title\">T2</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">void</span> <span class=\"title\">Person</span>&lt;T1, T2&gt;:</span>:showPerson() &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"姓名: \"</span> &lt;&lt; <span class=\"keyword\">this</span>-&gt;m_Name &lt;&lt; <span class=\"string\">\" 年龄:\"</span> &lt;&lt; <span class=\"keyword\">this</span>-&gt;m_Age &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tPerson&lt;string, int&gt; p(\"Tom\", 20);</span><br><span class=\"line\">\tp.showPerson();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\ttest01();</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>总结：类模板中成员函数类外实现时，需要加上模板参数列表</p>\n<h4 id=\"1-3-7-类模板分文件编写\"><a href=\"#1-3-7-类模板分文件编写\" class=\"headerlink\" title=\"1.3.7 类模板分文件编写\"></a>1.3.7 类模板分文件编写</h4><p>学习目标：</p>\n<ul>\n<li>掌握类模板成员函数分文件编写产生的问题以及解决方式</li>\n</ul>\n<p>问题：</p>\n<ul>\n<li>类模板中成员函数创建时机是在调用阶段，导致分文件编写时链接不到</li>\n</ul>\n<p>解决：</p>\n<ul>\n<li>解决方式1：直接包含.cpp源文件</li>\n<li>解决方式2：将声明和实现写到同一个文件中，并更改后缀名为.hpp，hpp是约定的名称，并不是强制</li>\n</ul>\n<p><strong>示例：</strong></p>\n<p>person.hpp中代码：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> once</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T1</span>, <span class=\"title\">class</span> <span class=\"title\">T2</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">class</span> <span class=\"title\">Person</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\tPerson(T1 name, T2 age);</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">showPerson</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\tT1 m_Name;</span><br><span class=\"line\">\tT2 m_Age;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//构造函数 类外实现</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T1</span>, <span class=\"title\">class</span> <span class=\"title\">T2</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">Person</span>&lt;T1, T2&gt;:</span>:Person(T1 name, T2 age) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>-&gt;m_Name = name;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>-&gt;m_Age = age;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//成员函数 类外实现</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T1</span>, <span class=\"title\">class</span> <span class=\"title\">T2</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">void</span> <span class=\"title\">Person</span>&lt;T1, T2&gt;:</span>:showPerson() &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"姓名: \"</span> &lt;&lt; <span class=\"keyword\">this</span>-&gt;m_Name &lt;&lt; <span class=\"string\">\" 年龄:\"</span> &lt;&lt; <span class=\"keyword\">this</span>-&gt;m_Age &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>类模板分文件编写.cpp中代码</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//#include \"person.h\"</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"person.cpp\"</span> <span class=\"comment\">//解决方式1，包含cpp源文件</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//解决方式2，将声明和实现写到一起，文件后缀名改为.hpp</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"person.hpp\"</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tPerson&lt;string, int&gt; p(\"Tom\", 10);</span><br><span class=\"line\">\tp.showPerson();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\ttest01();</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>总结：主流的解决方式是第二种，将类模板成员函数写到一起，并将后缀名改为.hpp</p>\n<h4 id=\"1-3-8-类模板与友元\"><a href=\"#1-3-8-类模板与友元\" class=\"headerlink\" title=\"1.3.8 类模板与友元\"></a>1.3.8 类模板与友元</h4><p>学习目标：</p>\n<ul>\n<li>掌握类模板配合友元函数的类内和类外实现</li>\n</ul>\n<p>全局函数类内实现 - 直接在类内声明友元即可</p>\n<p>全局函数类外实现 - 需要提前让编译器知道全局函数的存在</p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//2、全局函数配合友元  类外实现 - 先做函数模板声明，下方在做函数模板定义，在做友元</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T1</span>, <span class=\"title\">class</span> <span class=\"title\">T2</span>&gt; <span class=\"title\">class</span> <span class=\"title\">Person</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//如果声明了函数模板，可以将实现写到后面，否则需要将实现体写到类的前面让编译器提前看到</span></span><br><span class=\"line\"><span class=\"comment\">//template&lt;class T1, class T2&gt; void printPerson2(Person&lt;T1, T2&gt; &amp; p); </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T1</span>, <span class=\"title\">class</span> <span class=\"title\">T2</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">void</span> <span class=\"title\">printPerson2</span>(<span class=\"title\">Person</span>&lt;T1, T2&gt; &amp; <span class=\"title\">p</span>)</span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"类外实现 ---- 姓名： \"</span> &lt;&lt; p.m_Name &lt;&lt; <span class=\"string\">\" 年龄：\"</span> &lt;&lt; p.m_Age &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T1</span>, <span class=\"title\">class</span> <span class=\"title\">T2</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">class</span> <span class=\"title\">Person</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"comment\">//1、全局函数配合友元   类内实现</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">friend</span> <span class=\"keyword\">void</span> <span class=\"title\">printPerson</span><span class=\"params\">(Person&lt;T1, T2&gt; &amp; p)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"姓名： \"</span> &lt;&lt; p.m_Name &lt;&lt; <span class=\"string\">\" 年龄：\"</span> &lt;&lt; p.m_Age &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//全局函数配合友元  类外实现</span></span><br><span class=\"line\">\t<span class=\"keyword\">friend</span> <span class=\"keyword\">void</span> printPerson2&lt;&gt;(Person&lt;T1, T2&gt; &amp; p);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">\tPerson(T1 name, T2 age)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>-&gt;m_Name = name;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>-&gt;m_Age = age;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\tT1 m_Name;</span><br><span class=\"line\">\tT2 m_Age;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//1、全局函数在类内实现</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tPerson &lt;<span class=\"built_in\">string</span>, <span class=\"keyword\">int</span> &gt;p(<span class=\"string\">\"Tom\"</span>, <span class=\"number\">20</span>);</span><br><span class=\"line\">\tprintPerson(p);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//2、全局函数在类外实现</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test02</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tPerson &lt;<span class=\"built_in\">string</span>, <span class=\"keyword\">int</span> &gt;p(<span class=\"string\">\"Jerry\"</span>, <span class=\"number\">30</span>);</span><br><span class=\"line\">\tprintPerson2(p);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//test01();</span></span><br><span class=\"line\"></span><br><span class=\"line\">\ttest02();</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>总结：建议全局函数做类内实现，用法简单，而且编译器可以直接识别</p>\n<h4 id=\"1-3-9-类模板案例\"><a href=\"#1-3-9-类模板案例\" class=\"headerlink\" title=\"1.3.9 类模板案例\"></a>1.3.9 类模板案例</h4><p>案例描述:  实现一个通用的数组类，要求如下：</p>\n<ul>\n<li>可以对内置数据类型以及自定义数据类型的数据进行存储</li>\n<li>将数组中的数据存储到堆区</li>\n<li>构造函数中可以传入数组的容量</li>\n<li>提供对应的拷贝构造函数以及operator=防止浅拷贝问题</li>\n<li>提供尾插法和尾删法对数组中的数据进行增加和删除</li>\n<li>可以通过下标的方式访问数组中的元素</li>\n<li>可以获取数组中当前元素个数和数组的容量</li>\n</ul>\n<p><strong>示例：</strong></p>\n<p>myArray.hpp中代码</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> once</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">class</span> <span class=\"title\">MyArray</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    </span><br><span class=\"line\">\t<span class=\"comment\">//构造函数</span></span><br><span class=\"line\">\tMyArray(<span class=\"keyword\">int</span> capacity)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>-&gt;m_Capacity = capacity;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>-&gt;m_Size = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\tpAddress = <span class=\"keyword\">new</span> T[<span class=\"keyword\">this</span>-&gt;m_Capacity];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//拷贝构造</span></span><br><span class=\"line\">\tMyArray(<span class=\"keyword\">const</span> MyArray &amp; arr)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>-&gt;m_Capacity = arr.m_Capacity;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>-&gt;m_Size = arr.m_Size;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>-&gt;pAddress = <span class=\"keyword\">new</span> T[<span class=\"keyword\">this</span>-&gt;m_Capacity];</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>-&gt;m_Size; i++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//如果T为对象，而且还包含指针，必须需要重载 = 操作符，因为这个等号不是 构造 而是赋值，</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 普通类型可以直接= 但是指针类型需要深拷贝</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>-&gt;pAddress[i] = arr.pAddress[i];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//重载= 操作符  防止浅拷贝问题</span></span><br><span class=\"line\">\tMyArray&amp; <span class=\"keyword\">operator</span>=(<span class=\"keyword\">const</span> MyArray&amp; myarray) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>-&gt;pAddress != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">delete</span>[] <span class=\"keyword\">this</span>-&gt;pAddress;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>-&gt;m_Capacity = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>-&gt;m_Size = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>-&gt;m_Capacity = myarray.m_Capacity;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>-&gt;m_Size = myarray.m_Size;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>-&gt;pAddress = <span class=\"keyword\">new</span> T[<span class=\"keyword\">this</span>-&gt;m_Capacity];</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>-&gt;m_Size; i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>-&gt;pAddress[i] = myarray[i];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//重载[] 操作符  arr[0]</span></span><br><span class=\"line\">\tT&amp; <span class=\"keyword\">operator</span> [](<span class=\"keyword\">int</span> index)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>-&gt;pAddress[index]; <span class=\"comment\">//不考虑越界，用户自己去处理</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//尾插法</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Push_back</span><span class=\"params\">(<span class=\"keyword\">const</span> T &amp; val)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>-&gt;m_Capacity == <span class=\"keyword\">this</span>-&gt;m_Size)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>-&gt;pAddress[<span class=\"keyword\">this</span>-&gt;m_Size] = val;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>-&gt;m_Size++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//尾删法</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Pop_back</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>-&gt;m_Size == <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>-&gt;m_Size--;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//获取数组容量</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getCapacity</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>-&gt;m_Capacity;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//获取数组大小</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">int</span>\t<span class=\"title\">getSize</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>-&gt;m_Size;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//析构</span></span><br><span class=\"line\">\t~MyArray()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>-&gt;pAddress != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">delete</span>[] <span class=\"keyword\">this</span>-&gt;pAddress;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>-&gt;pAddress = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>-&gt;m_Capacity = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>-&gt;m_Size = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\tT * pAddress;  <span class=\"comment\">//指向一个堆空间，这个空间存储真正的数据</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> m_Capacity; <span class=\"comment\">//容量</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> m_Size;   <span class=\"comment\">// 大小</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>类模板案例—数组类封装.cpp中</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"myArray.hpp\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">printIntArray</span><span class=\"params\">(MyArray&lt;<span class=\"keyword\">int</span>&gt;&amp; arr)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; arr.getSize(); i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; arr[i] &lt;&lt; <span class=\"string\">\" \"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//测试内置数据类型</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\">MyArray&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">array1</span><span class=\"params\">(<span class=\"number\">10</span>)</span></span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tarray1.Push_back(i);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"array1打印输出：\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\tprintIntArray(array1);</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"array1的大小：\"</span> &lt;&lt; array1.getSize() &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"array1的容量：\"</span> &lt;&lt; array1.getCapacity() &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"--------------------------\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\">MyArray&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">array2</span><span class=\"params\">(array1)</span></span>;</span><br><span class=\"line\">\tarray2.Pop_back();</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"array2打印输出：\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\tprintIntArray(array2);</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"array2的大小：\"</span> &lt;&lt; array2.getSize() &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"array2的容量：\"</span> &lt;&lt; array2.getCapacity() &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//测试自定义数据类型</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\tPerson() &#123;&#125; </span><br><span class=\"line\">\t\tPerson(<span class=\"built_in\">string</span> name, <span class=\"keyword\">int</span> age) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>-&gt;m_Name = name;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>-&gt;m_Age = age;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">string</span> m_Name;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> m_Age;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">printPersonArray</span><span class=\"params\">(MyArray&lt;Person&gt;&amp; personArr)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; personArr.getSize(); i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"姓名：\"</span> &lt;&lt; personArr[i].m_Name &lt;&lt; <span class=\"string\">\" 年龄： \"</span> &lt;&lt; personArr[i].m_Age &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test02</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//创建数组</span></span><br><span class=\"line\">\t<span class=\"function\">MyArray&lt;Person&gt; <span class=\"title\">pArray</span><span class=\"params\">(<span class=\"number\">10</span>)</span></span>;</span><br><span class=\"line\">\t<span class=\"function\">Person <span class=\"title\">p1</span><span class=\"params\">(<span class=\"string\">\"孙悟空\"</span>, <span class=\"number\">30</span>)</span></span>;</span><br><span class=\"line\">\t<span class=\"function\">Person <span class=\"title\">p2</span><span class=\"params\">(<span class=\"string\">\"韩信\"</span>, <span class=\"number\">20</span>)</span></span>;</span><br><span class=\"line\">\t<span class=\"function\">Person <span class=\"title\">p3</span><span class=\"params\">(<span class=\"string\">\"妲己\"</span>, <span class=\"number\">18</span>)</span></span>;</span><br><span class=\"line\">\t<span class=\"function\">Person <span class=\"title\">p4</span><span class=\"params\">(<span class=\"string\">\"王昭君\"</span>, <span class=\"number\">15</span>)</span></span>;</span><br><span class=\"line\">\t<span class=\"function\">Person <span class=\"title\">p5</span><span class=\"params\">(<span class=\"string\">\"赵云\"</span>, <span class=\"number\">24</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//插入数据</span></span><br><span class=\"line\">\tpArray.Push_back(p1);</span><br><span class=\"line\">\tpArray.Push_back(p2);</span><br><span class=\"line\">\tpArray.Push_back(p3);</span><br><span class=\"line\">\tpArray.Push_back(p4);</span><br><span class=\"line\">\tpArray.Push_back(p5);</span><br><span class=\"line\"></span><br><span class=\"line\">\tprintPersonArray(pArray);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"pArray的大小：\"</span> &lt;&lt; pArray.getSize() &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"pArray的容量：\"</span> &lt;&lt; pArray.getCapacity() &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//test01();</span></span><br><span class=\"line\"></span><br><span class=\"line\">\ttest02();</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>总结：</p>\n<p>能够利用所学知识点实现通用的数组</p>\n<h2 id=\"2-STL初识\"><a href=\"#2-STL初识\" class=\"headerlink\" title=\"2 STL初识\"></a>2 STL初识</h2><h3 id=\"2-1-STL的诞生\"><a href=\"#2-1-STL的诞生\" class=\"headerlink\" title=\"2.1 STL的诞生\"></a>2.1 STL的诞生</h3><ul>\n<li><p>长久以来，软件界一直希望建立一种可重复利用的东西</p>\n</li>\n<li><p>C++的<strong>面向对象</strong>和<strong>泛型编程</strong>思想，目的就是<strong>复用性的提升</strong></p>\n</li>\n<li><p>大多情况下，数据结构和算法都未能有一套标准,导致被迫从事大量重复工作</p>\n</li>\n<li><p>为了建立数据结构和算法的一套标准,诞生了<strong>STL</strong></p>\n</li>\n</ul>\n<h3 id=\"2-2-STL基本概念\"><a href=\"#2-2-STL基本概念\" class=\"headerlink\" title=\"2.2 STL基本概念\"></a>2.2 STL基本概念</h3><ul>\n<li>STL(Standard Template Library,<strong>标准模板库</strong>)</li>\n<li>STL 从广义上分为: <strong>容器(container) 算法(algorithm) 迭代器(iterator)</strong></li>\n<li><strong>容器</strong>和<strong>算法</strong>之间通过<strong>迭代器</strong>进行无缝连接。</li>\n<li>STL 几乎所有的代码都采用了模板类或者模板函数</li>\n</ul>\n<h3 id=\"2-3-STL六大组件\"><a href=\"#2-3-STL六大组件\" class=\"headerlink\" title=\"2.3 STL六大组件\"></a>2.3 STL六大组件</h3><p>STL大体分为六大组件，分别是:<strong>容器、算法、迭代器、仿函数、适配器（配接器）、空间配置器</strong></p>\n<ol>\n<li>容器：各种数据结构，如vector、list、deque、set、map等,用来存放数据。</li>\n<li>算法：各种常用的算法，如sort、find、copy、for_each等</li>\n<li>迭代器：扮演了容器与算法之间的胶合剂。</li>\n<li>仿函数：行为类似函数，可作为算法的某种策略。</li>\n<li>适配器：一种用来修饰容器或者仿函数或迭代器接口的东西。</li>\n<li>空间配置器：负责空间的配置与管理。</li>\n</ol>\n<h3 id=\"2-4-STL中容器、算法、迭代器\"><a href=\"#2-4-STL中容器、算法、迭代器\" class=\"headerlink\" title=\"2.4  STL中容器、算法、迭代器\"></a>2.4  STL中容器、算法、迭代器</h3><p><strong>容器：</strong>置物之所也</p>\n<p>STL<strong>容器</strong>就是将运用<strong>最广泛的一些数据结构</strong>实现出来</p>\n<p>常用的数据结构：数组, 链表,树, 栈, 队列, 集合, 映射表 等</p>\n<p>这些容器分为<strong>序列式容器</strong>和<strong>关联式容器</strong>两种:</p>\n<p>​    <strong>序列式容器</strong>:强调值的排序，序列式容器中的每个元素均有固定的位置。<br>​    <strong>关联式容器</strong>:二叉树结构，各元素之间没有严格的物理上的顺序关系</p>\n<p><strong>算法：</strong>问题之解法也</p>\n<p>有限的步骤，解决逻辑或数学上的问题，这一门学科我们叫做算法(Algorithms)</p>\n<p>算法分为:<strong>质变算法</strong>和<strong>非质变算法</strong>。</p>\n<p>质变算法：是指运算过程中会更改区间内的元素的内容。例如拷贝，替换，删除等等</p>\n<p>非质变算法：是指运算过程中不会更改区间内的元素内容，例如查找、计数、遍历、寻找极值等等</p>\n<p><strong>迭代器：</strong>容器和算法之间粘合剂</p>\n<p>提供一种方法，使之能够依序寻访某个容器所含的各个元素，而又无需暴露该容器的内部表示方式。</p>\n<p>每个容器都有自己专属的迭代器</p>\n<p>迭代器使用非常类似于指针，初学阶段我们可以先理解迭代器为指针</p>\n<p>迭代器种类：</p>\n<table>\n<thead>\n<tr>\n<th>种类</th>\n<th>功能</th>\n<th>支持运算</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>输入迭代器</td>\n<td>对数据的只读访问</td>\n<td>只读，支持++、==、！=</td>\n</tr>\n<tr>\n<td>输出迭代器</td>\n<td>对数据的只写访问</td>\n<td>只写，支持++</td>\n</tr>\n<tr>\n<td>前向迭代器</td>\n<td>读写操作，并能向前推进迭代器</td>\n<td>读写，支持++、==、！=</td>\n</tr>\n<tr>\n<td>双向迭代器</td>\n<td>读写操作，并能向前和向后操作</td>\n<td>读写，支持++、–，</td>\n</tr>\n<tr>\n<td>随机访问迭代器</td>\n<td>读写操作，可以以跳跃的方式访问任意数据，功能最强的迭代器</td>\n<td>读写，支持++、–、[n]、-n、&lt;、&lt;=、&gt;、&gt;=</td>\n</tr>\n</tbody></table>\n<p>常用的容器中迭代器种类为双向迭代器，和随机访问迭代器</p>\n<h3 id=\"2-5-容器算法迭代器初识\"><a href=\"#2-5-容器算法迭代器初识\" class=\"headerlink\" title=\"2.5 容器算法迭代器初识\"></a>2.5 容器算法迭代器初识</h3><p>了解STL中容器、算法、迭代器概念之后，我们利用代码感受STL的魅力</p>\n<p>STL中最常用的容器为Vector，可以理解为数组，下面我们将学习如何向这个容器中插入数据、并遍历这个容器</p>\n<h4 id=\"2-5-1-vector存放内置数据类型\"><a href=\"#2-5-1-vector存放内置数据类型\" class=\"headerlink\" title=\"2.5.1 vector存放内置数据类型\"></a>2.5.1 vector存放内置数据类型</h4><p>容器：     <code>vector</code></p>\n<p>算法：     <code>for_each</code></p>\n<p>迭代器： <code>vector&lt;int&gt;::iterator</code></p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">MyPrint</span><span class=\"params\">(<span class=\"keyword\">int</span> val)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; val &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//创建vector容器对象，并且通过模板参数指定容器中存放的数据的类型</span></span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; v;</span><br><span class=\"line\">\t<span class=\"comment\">//向容器中放数据</span></span><br><span class=\"line\">\tv.push_back(<span class=\"number\">10</span>);</span><br><span class=\"line\">\tv.push_back(<span class=\"number\">20</span>);</span><br><span class=\"line\">\tv.push_back(<span class=\"number\">30</span>);</span><br><span class=\"line\">\tv.push_back(<span class=\"number\">40</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//每一个容器都有自己的迭代器，迭代器是用来遍历容器中的元素</span></span><br><span class=\"line\">\t<span class=\"comment\">//v.begin()返回迭代器，这个迭代器指向容器中第一个数据</span></span><br><span class=\"line\">\t<span class=\"comment\">//v.end()返回迭代器，这个迭代器指向容器元素的最后一个元素的下一个位置</span></span><br><span class=\"line\">\t<span class=\"comment\">//vector&lt;int&gt;::iterator 拿到vector&lt;int&gt;这种容器的迭代器类型</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;::iterator pBegin = v.<span class=\"built_in\">begin</span>();</span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;::iterator pEnd = v.<span class=\"built_in\">end</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//第一种遍历方式：</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (pBegin != pEnd) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; *pBegin &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t\tpBegin++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//第二种遍历方式：</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;::iterator it = v.<span class=\"built_in\">begin</span>(); it != v.<span class=\"built_in\">end</span>(); it++) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; *it &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//第三种遍历方式：</span></span><br><span class=\"line\">\t<span class=\"comment\">//使用STL提供标准遍历算法  头文件 algorithm</span></span><br><span class=\"line\">\tfor_each(v.<span class=\"built_in\">begin</span>(), v.<span class=\"built_in\">end</span>(), MyPrint);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\ttest01();</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"2-5-2-Vector存放自定义数据类型\"><a href=\"#2-5-2-Vector存放自定义数据类型\" class=\"headerlink\" title=\"2.5.2 Vector存放自定义数据类型\"></a>2.5.2 Vector存放自定义数据类型</h4><p>学习目标：vector中存放自定义数据类型，并打印输出</p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//自定义数据类型</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\tPerson(<span class=\"built_in\">string</span> name, <span class=\"keyword\">int</span> age) &#123;</span><br><span class=\"line\">\t\tmName = name;</span><br><span class=\"line\">\t\tmAge = age;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">string</span> mName;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> mAge;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">//存放对象</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;Person&gt; v;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//创建数据</span></span><br><span class=\"line\">\t<span class=\"function\">Person <span class=\"title\">p1</span><span class=\"params\">(<span class=\"string\">\"aaa\"</span>, <span class=\"number\">10</span>)</span></span>;</span><br><span class=\"line\">\t<span class=\"function\">Person <span class=\"title\">p2</span><span class=\"params\">(<span class=\"string\">\"bbb\"</span>, <span class=\"number\">20</span>)</span></span>;</span><br><span class=\"line\">\t<span class=\"function\">Person <span class=\"title\">p3</span><span class=\"params\">(<span class=\"string\">\"ccc\"</span>, <span class=\"number\">30</span>)</span></span>;</span><br><span class=\"line\">\t<span class=\"function\">Person <span class=\"title\">p4</span><span class=\"params\">(<span class=\"string\">\"ddd\"</span>, <span class=\"number\">40</span>)</span></span>;</span><br><span class=\"line\">\t<span class=\"function\">Person <span class=\"title\">p5</span><span class=\"params\">(<span class=\"string\">\"eee\"</span>, <span class=\"number\">50</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tv.push_back(p1);</span><br><span class=\"line\">\tv.push_back(p2);</span><br><span class=\"line\">\tv.push_back(p3);</span><br><span class=\"line\">\tv.push_back(p4);</span><br><span class=\"line\">\tv.push_back(p5);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"built_in\">vector</span>&lt;Person&gt;::iterator it = v.<span class=\"built_in\">begin</span>(); it != v.<span class=\"built_in\">end</span>(); it++) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Name:\"</span> &lt;&lt; (*it).mName &lt;&lt; <span class=\"string\">\" Age:\"</span> &lt;&lt; (*it).mAge &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//放对象指针</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test02</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;Person*&gt; v;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//创建数据</span></span><br><span class=\"line\">\t<span class=\"function\">Person <span class=\"title\">p1</span><span class=\"params\">(<span class=\"string\">\"aaa\"</span>, <span class=\"number\">10</span>)</span></span>;</span><br><span class=\"line\">\t<span class=\"function\">Person <span class=\"title\">p2</span><span class=\"params\">(<span class=\"string\">\"bbb\"</span>, <span class=\"number\">20</span>)</span></span>;</span><br><span class=\"line\">\t<span class=\"function\">Person <span class=\"title\">p3</span><span class=\"params\">(<span class=\"string\">\"ccc\"</span>, <span class=\"number\">30</span>)</span></span>;</span><br><span class=\"line\">\t<span class=\"function\">Person <span class=\"title\">p4</span><span class=\"params\">(<span class=\"string\">\"ddd\"</span>, <span class=\"number\">40</span>)</span></span>;</span><br><span class=\"line\">\t<span class=\"function\">Person <span class=\"title\">p5</span><span class=\"params\">(<span class=\"string\">\"eee\"</span>, <span class=\"number\">50</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tv.push_back(&amp;p1);</span><br><span class=\"line\">\tv.push_back(&amp;p2);</span><br><span class=\"line\">\tv.push_back(&amp;p3);</span><br><span class=\"line\">\tv.push_back(&amp;p4);</span><br><span class=\"line\">\tv.push_back(&amp;p5);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"built_in\">vector</span>&lt;Person*&gt;::iterator it = v.<span class=\"built_in\">begin</span>(); it != v.<span class=\"built_in\">end</span>(); it++) &#123;</span><br><span class=\"line\">\t\tPerson * p = (*it);</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Name:\"</span> &lt;&lt; p-&gt;mName &lt;&lt; <span class=\"string\">\" Age:\"</span> &lt;&lt; (*it)-&gt;mAge &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\ttest01();</span><br><span class=\"line\">    </span><br><span class=\"line\">\ttest02();</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"2-5-3-Vector容器嵌套容器\"><a href=\"#2-5-3-Vector容器嵌套容器\" class=\"headerlink\" title=\"2.5.3 Vector容器嵌套容器\"></a>2.5.3 Vector容器嵌套容器</h4><p>学习目标：容器中嵌套容器，我们将所有数据进行遍历输出</p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//容器嵌套容器</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt; <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; &gt;  v;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; v1;</span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; v2;</span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; v3;</span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; v4;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; i++) &#123;</span><br><span class=\"line\">\t\tv1.push_back(i + <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\tv2.push_back(i + <span class=\"number\">2</span>);</span><br><span class=\"line\">\t\tv3.push_back(i + <span class=\"number\">3</span>);</span><br><span class=\"line\">\t\tv4.push_back(i + <span class=\"number\">4</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//将容器元素插入到vector v中</span></span><br><span class=\"line\">\tv.push_back(v1);</span><br><span class=\"line\">\tv.push_back(v2);</span><br><span class=\"line\">\tv.push_back(v3);</span><br><span class=\"line\">\tv.push_back(v4);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt;::iterator it = v.<span class=\"built_in\">begin</span>(); it != v.<span class=\"built_in\">end</span>(); it++) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;::iterator vit = (*it).<span class=\"built_in\">begin</span>(); vit != (*it).<span class=\"built_in\">end</span>(); vit++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">cout</span> &lt;&lt; *vit &lt;&lt; <span class=\"string\">\" \"</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\ttest01();</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"3-STL-常用容器\"><a href=\"#3-STL-常用容器\" class=\"headerlink\" title=\"3 STL- 常用容器\"></a>3 STL- 常用容器</h2><h3 id=\"3-1-string容器\"><a href=\"#3-1-string容器\" class=\"headerlink\" title=\"3.1 string容器\"></a>3.1 string容器</h3><h4 id=\"3-1-1-string基本概念\"><a href=\"#3-1-1-string基本概念\" class=\"headerlink\" title=\"3.1.1 string基本概念\"></a>3.1.1 string基本概念</h4><p><strong>本质：</strong></p>\n<ul>\n<li>string是C++风格的字符串，而string本质上是一个类</li>\n</ul>\n<p><strong>string和char * 区别：</strong></p>\n<ul>\n<li>char * 是一个指针</li>\n<li>string是一个类，类内部封装了char*，管理这个字符串，是一个char*型的容器。</li>\n</ul>\n<p><strong>特点：</strong></p>\n<p>string 类内部封装了很多成员方法</p>\n<p>例如：查找find，拷贝copy，删除delete 替换replace，插入insert</p>\n<p>string管理char*所分配的内存，不用担心复制越界和取值越界等，由类内部进行负责</p>\n<h4 id=\"3-1-2-string构造函数\"><a href=\"#3-1-2-string构造函数\" class=\"headerlink\" title=\"3.1.2 string构造函数\"></a>3.1.2 string构造函数</h4><p>构造函数原型：</p>\n<ul>\n<li><code>string();</code>                          //创建一个空的字符串 例如: string str;<br>   <code>string(const char* s);</code>            //使用字符串s初始化</li>\n<li><code>string(const string&amp; str);</code>    //使用一个string对象初始化另一个string对象</li>\n<li><code>string(int n, char c);</code>           //使用n个字符c初始化 </li>\n</ul>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">//string构造</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">string</span> s1; <span class=\"comment\">//创建空字符串，调用无参构造函数</span></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"str1 = \"</span> &lt;&lt; s1 &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* str = <span class=\"string\">\"hello world\"</span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">s2</span><span class=\"params\">(str)</span></span>; <span class=\"comment\">//把c_string转换成了string</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"str2 = \"</span> &lt;&lt; s2 &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">s3</span><span class=\"params\">(s2)</span></span>; <span class=\"comment\">//调用拷贝构造函数</span></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"str3 = \"</span> &lt;&lt; s3 &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">s4</span><span class=\"params\">(<span class=\"number\">10</span>, <span class=\"string\">'a'</span>)</span></span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"str3 = \"</span> &lt;&lt; s3 &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\ttest01();</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>总结：string的多种构造方式没有可比性，灵活使用即可</p>\n<h4 id=\"3-1-3-string赋值操作\"><a href=\"#3-1-3-string赋值操作\" class=\"headerlink\" title=\"3.1.3 string赋值操作\"></a>3.1.3 string赋值操作</h4><p>功能描述：</p>\n<ul>\n<li>给string字符串进行赋值</li>\n</ul>\n<p>赋值的函数原型：</p>\n<ul>\n<li><code>string&amp; operator=(const char* s);</code>             //char*类型字符串 赋值给当前的字符串</li>\n<li><code>string&amp; operator=(const string &amp;s);</code>         //把字符串s赋给当前的字符串</li>\n<li><code>string&amp; operator=(char c);</code>                          //字符赋值给当前的字符串</li>\n<li><code>string&amp; assign(const char *s);</code>                  //把字符串s赋给当前的字符串</li>\n<li><code>string&amp; assign(const char *s, int n);</code>     //把字符串s的前n个字符赋给当前的字符串</li>\n<li><code>string&amp; assign(const string &amp;s);</code>              //把字符串s赋给当前字符串</li>\n<li><code>string&amp; assign(int n, char c);</code>                  //用n个字符c赋给当前字符串</li>\n</ul>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//赋值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">string</span> str1;</span><br><span class=\"line\">\tstr1 = <span class=\"string\">\"hello world\"</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"str1 = \"</span> &lt;&lt; str1 &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">string</span> str2;</span><br><span class=\"line\">\tstr2 = str1;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"str2 = \"</span> &lt;&lt; str2 &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">string</span> str3;</span><br><span class=\"line\">\tstr3 = <span class=\"string\">'a'</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"str3 = \"</span> &lt;&lt; str3 &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">string</span> str4;</span><br><span class=\"line\">\tstr4.assign(<span class=\"string\">\"hello c++\"</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"str4 = \"</span> &lt;&lt; str4 &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">string</span> str5;</span><br><span class=\"line\">\tstr5.assign(<span class=\"string\">\"hello c++\"</span>,<span class=\"number\">5</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"str5 = \"</span> &lt;&lt; str5 &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">string</span> str6;</span><br><span class=\"line\">\tstr6.assign(str5);</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"str6 = \"</span> &lt;&lt; str6 &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">string</span> str7;</span><br><span class=\"line\">\tstr7.assign(<span class=\"number\">5</span>, <span class=\"string\">'x'</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"str7 = \"</span> &lt;&lt; str7 &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\ttest01();</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>总结：</p>\n<p>​    string的赋值方式很多，<code>operator=</code>  这种方式是比较实用的</p>\n<h4 id=\"3-1-4-string字符串拼接\"><a href=\"#3-1-4-string字符串拼接\" class=\"headerlink\" title=\"3.1.4 string字符串拼接\"></a>3.1.4 string字符串拼接</h4><p><strong>功能描述：</strong></p>\n<ul>\n<li>实现在字符串末尾拼接字符串</li>\n</ul>\n<p><strong>函数原型：</strong></p>\n<ul>\n<li><code>string&amp; operator+=(const char* str);</code>                   //重载+=操作符</li>\n<li><code>string&amp; operator+=(const char c);</code>                         //重载+=操作符</li>\n<li><code>string&amp; operator+=(const string&amp; str);</code>                //重载+=操作符</li>\n<li><code>string&amp; append(const char *s);</code>                               //把字符串s连接到当前字符串结尾</li>\n<li><code>string&amp; append(const char *s, int n);</code>                 //把字符串s的前n个字符连接到当前字符串结尾</li>\n<li><code>string&amp; append(const string &amp;s);</code>                           //同operator+=(const string&amp; str)</li>\n<li><code>string&amp; append(const string &amp;s, int pos, int n);</code>//字符串s中从pos开始的n个字符连接到字符串结尾</li>\n</ul>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//字符串拼接</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">string</span> str1 = <span class=\"string\">\"我\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tstr1 += <span class=\"string\">\"爱玩游戏\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"str1 = \"</span> &lt;&lt; str1 &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tstr1 += <span class=\"string\">':'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"str1 = \"</span> &lt;&lt; str1 &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">string</span> str2 = <span class=\"string\">\"LOL DNF\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tstr1 += str2;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"str1 = \"</span> &lt;&lt; str1 &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">string</span> str3 = <span class=\"string\">\"I\"</span>;</span><br><span class=\"line\">\tstr3.append(<span class=\"string\">\" love \"</span>);</span><br><span class=\"line\">\tstr3.append(<span class=\"string\">\"game abcde\"</span>, <span class=\"number\">4</span>);</span><br><span class=\"line\">\t<span class=\"comment\">//str3.append(str2);</span></span><br><span class=\"line\">\tstr3.append(str2, <span class=\"number\">4</span>, <span class=\"number\">3</span>); <span class=\"comment\">// 从下标4位置开始 ，截取3个字符，拼接到字符串末尾</span></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"str3 = \"</span> &lt;&lt; str3 &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\ttest01();</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>总结：字符串拼接的重载版本很多，初学阶段记住几种即可</p>\n<h4 id=\"3-1-5-string查找和替换\"><a href=\"#3-1-5-string查找和替换\" class=\"headerlink\" title=\"3.1.5 string查找和替换\"></a>3.1.5 string查找和替换</h4><p><strong>功能描述：</strong></p>\n<ul>\n<li>查找：查找指定字符串是否存在</li>\n<li>替换：在指定的位置替换字符串</li>\n</ul>\n<p><strong>函数原型：</strong></p>\n<ul>\n<li><code>int find(const string&amp; str, int pos = 0) const;</code>              //查找str第一次出现位置,从pos开始查找</li>\n<li><code>int find(const char* s, int pos = 0) const;</code>                     //查找s第一次出现位置,从pos开始查找</li>\n<li><code>int find(const char* s, int pos, int n) const;</code>               //从pos位置查找s的前n个字符第一次位置</li>\n<li><code>int find(const char c, int pos = 0) const;</code>                       //查找字符c第一次出现位置</li>\n<li><code>int rfind(const string&amp; str, int pos = npos) const;</code>      //查找str最后一次位置,从pos开始查找</li>\n<li><code>int rfind(const char* s, int pos = npos) const;</code>              //查找s最后一次出现位置,从pos开始查找</li>\n<li><code>int rfind(const char* s, int pos, int n) const;</code>              //从pos查找s的前n个字符最后一次位置</li>\n<li><code>int rfind(const char c, int pos = 0) const;</code>                      //查找字符c最后一次出现位置</li>\n<li><code>string&amp; replace(int pos, int n, const string&amp; str);</code>       //替换从pos开始n个字符为字符串str</li>\n<li><code>string&amp; replace(int pos, int n,const char* s);</code>                 //替换从pos开始的n个字符为字符串s</li>\n</ul>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//查找和替换</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//查找</span></span><br><span class=\"line\">\t<span class=\"built_in\">string</span> str1 = <span class=\"string\">\"abcdefgde\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> pos = str1.<span class=\"built_in\">find</span>(<span class=\"string\">\"de\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (pos == <span class=\"number\">-1</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"未找到\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"pos = \"</span> &lt;&lt; pos &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\"></span><br><span class=\"line\">\tpos = str1.rfind(<span class=\"string\">\"de\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"pos = \"</span> &lt;&lt; pos &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test02</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//替换</span></span><br><span class=\"line\">\t<span class=\"built_in\">string</span> str1 = <span class=\"string\">\"abcdefgde\"</span>;</span><br><span class=\"line\">\tstr1.replace(<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"string\">\"1111\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"str1 = \"</span> &lt;&lt; str1 &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//test01();</span></span><br><span class=\"line\">\t<span class=\"comment\">//test02();</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>总结：</p>\n<ul>\n<li>find查找是从左往后，rfind从右往左</li>\n<li>find找到字符串后返回查找的第一个字符位置，找不到返回-1</li>\n<li>replace在替换时，要指定从哪个位置起，多少个字符，替换成什么样的字符串</li>\n</ul>\n<h4 id=\"3-1-6-string字符串比较\"><a href=\"#3-1-6-string字符串比较\" class=\"headerlink\" title=\"3.1.6 string字符串比较\"></a>3.1.6 string字符串比较</h4><p><strong>功能描述：</strong></p>\n<ul>\n<li>字符串之间的比较</li>\n</ul>\n<p><strong>比较方式：</strong></p>\n<ul>\n<li>字符串比较是按字符的ASCII码进行对比</li>\n</ul>\n<p>= 返回   0</p>\n<p>&gt; 返回   1 </p>\n<p>&lt; 返回  -1</p>\n<p><strong>函数原型：</strong></p>\n<ul>\n<li><code>int compare(const string &amp;s) const;</code>  //与字符串s比较</li>\n<li><code>int compare(const char *s) const;</code>      //与字符串s比较</li>\n</ul>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//字符串比较</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">string</span> s1 = <span class=\"string\">\"hello\"</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">string</span> s2 = <span class=\"string\">\"aello\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> ret = s1.compare(s2);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (ret == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"s1 等于 s2\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (ret &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"s1 大于 s2\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"s1 小于 s2\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\ttest01();</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>总结：字符串对比主要是用于比较两个字符串是否相等，判断谁大谁小的意义并不是很大</p>\n<h4 id=\"3-1-7-string字符存取\"><a href=\"#3-1-7-string字符存取\" class=\"headerlink\" title=\"3.1.7 string字符存取\"></a>3.1.7 string字符存取</h4><p>string中单个字符存取方式有两种</p>\n<ul>\n<li><code>char&amp; operator[](int n);</code>     //通过[]方式取字符</li>\n<li><code>char&amp; at(int n);</code>                    //通过at方法获取字符</li>\n</ul>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">string</span> str = <span class=\"string\">\"hello world\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; str.<span class=\"built_in\">size</span>(); i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; str[i] &lt;&lt; <span class=\"string\">\" \"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; str.<span class=\"built_in\">size</span>(); i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; str.at(i) &lt;&lt; <span class=\"string\">\" \"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//字符修改</span></span><br><span class=\"line\">\tstr[<span class=\"number\">0</span>] = <span class=\"string\">'x'</span>;</span><br><span class=\"line\">\tstr.at(<span class=\"number\">1</span>) = <span class=\"string\">'x'</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; str &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\ttest01();</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>总结：string字符串中单个字符存取有两种方式，利用 [ ] 或 at</p>\n<h4 id=\"3-1-8-string插入和删除\"><a href=\"#3-1-8-string插入和删除\" class=\"headerlink\" title=\"3.1.8 string插入和删除\"></a>3.1.8 string插入和删除</h4><p><strong>功能描述：</strong></p>\n<ul>\n<li>对string字符串进行插入和删除字符操作</li>\n</ul>\n<p><strong>函数原型：</strong></p>\n<ul>\n<li><code>string&amp; insert(int pos, const char* s);</code>                //插入字符串</li>\n<li><code>string&amp; insert(int pos, const string&amp; str);</code>        //插入字符串</li>\n<li><code>string&amp; insert(int pos, int n, char c);</code>                //在指定位置插入n个字符c</li>\n<li><code>string&amp; erase(int pos, int n = npos);</code>                    //删除从Pos开始的n个字符 </li>\n</ul>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//字符串插入和删除</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">string</span> str = <span class=\"string\">\"hello\"</span>;</span><br><span class=\"line\">\tstr.insert(<span class=\"number\">1</span>, <span class=\"string\">\"111\"</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; str &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tstr.erase(<span class=\"number\">1</span>, <span class=\"number\">3</span>);  <span class=\"comment\">//从1号位置开始3个字符</span></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; str &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\ttest01();</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>总结：</strong>插入和删除的起始下标都是从0开始</p>\n<h4 id=\"3-1-9-string子串\"><a href=\"#3-1-9-string子串\" class=\"headerlink\" title=\"3.1.9 string子串\"></a>3.1.9 string子串</h4><p><strong>功能描述：</strong></p>\n<ul>\n<li>从字符串中获取想要的子串</li>\n</ul>\n<p><strong>函数原型：</strong></p>\n<ul>\n<li><code>string substr(int pos = 0, int n = npos) const;</code>   //返回由pos开始的n个字符组成的字符串</li>\n</ul>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//子串</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">string</span> str = <span class=\"string\">\"abcdefg\"</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">string</span> subStr = str.substr(<span class=\"number\">1</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"subStr = \"</span> &lt;&lt; subStr &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">string</span> email = <span class=\"string\">\"hello@sina.com\"</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> pos = email.<span class=\"built_in\">find</span>(<span class=\"string\">\"@\"</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">string</span> username = email.substr(<span class=\"number\">0</span>, pos);</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"username: \"</span> &lt;&lt; username &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\ttest01();</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>总结：</strong>灵活的运用求子串功能，可以在实际开发中获取有效的信息</p>\n<h3 id=\"3-2-vector容器\"><a href=\"#3-2-vector容器\" class=\"headerlink\" title=\"3.2 vector容器\"></a>3.2 vector容器</h3><h4 id=\"3-2-1-vector基本概念\"><a href=\"#3-2-1-vector基本概念\" class=\"headerlink\" title=\"3.2.1 vector基本概念\"></a>3.2.1 vector基本概念</h4><p><strong>功能：</strong></p>\n<ul>\n<li>vector数据结构和<strong>数组非常相似</strong>，也称为<strong>单端数组</strong></li>\n</ul>\n<p><strong>vector与普通数组区别：</strong></p>\n<ul>\n<li>不同之处在于数组是静态空间，而vector可以<strong>动态扩展</strong></li>\n</ul>\n<p><strong>动态扩展：</strong></p>\n<ul>\n<li>并不是在原空间之后续接新空间，而是找更大的内存空间，然后将原数据拷贝新空间，释放原空间</li>\n</ul>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"assets/clip_image002.jpg\" alt=\"说明: 2015-11-10_151152\"></p>\n<ul>\n<li>vector容器的迭代器是支持随机访问的迭代器</li>\n</ul>\n<h4 id=\"3-2-2-vector构造函数\"><a href=\"#3-2-2-vector构造函数\" class=\"headerlink\" title=\"3.2.2 vector构造函数\"></a>3.2.2 vector构造函数</h4><p><strong>功能描述：</strong></p>\n<ul>\n<li>创建vector容器</li>\n</ul>\n<p><strong>函数原型：</strong></p>\n<ul>\n<li><code>vector&lt;T&gt; v;</code>                            //采用模板实现类实现，默认构造函数</li>\n<li><code>vector(v.begin(), v.end());</code>       //将v[begin(), end())区间中的元素拷贝给本身。</li>\n<li><code>vector(n, elem);</code>                            //构造函数将n个elem拷贝给本身。</li>\n<li><code>vector(const vector &amp;vec);</code>         //拷贝构造函数。</li>\n</ul>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">printVector</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; v)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;::iterator it = v.<span class=\"built_in\">begin</span>(); it != v.<span class=\"built_in\">end</span>(); it++) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; *it &lt;&lt; <span class=\"string\">\" \"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; v1; <span class=\"comment\">//无参构造</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tv1.push_back(i);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tprintVector(v1);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">v2</span><span class=\"params\">(v1.<span class=\"built_in\">begin</span>(), v1.<span class=\"built_in\">end</span>())</span></span>;</span><br><span class=\"line\">\tprintVector(v2);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">v3</span><span class=\"params\">(<span class=\"number\">10</span>, <span class=\"number\">100</span>)</span></span>;</span><br><span class=\"line\">\tprintVector(v3);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">v4</span><span class=\"params\">(v3)</span></span>;</span><br><span class=\"line\">\tprintVector(v4);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\ttest01();</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>总结：</strong>vector的多种构造方式没有可比性，灵活使用即可</p>\n<h4 id=\"3-2-3-vector赋值操作\"><a href=\"#3-2-3-vector赋值操作\" class=\"headerlink\" title=\"3.2.3 vector赋值操作\"></a>3.2.3 vector赋值操作</h4><p><strong>功能描述：</strong></p>\n<ul>\n<li>给vector容器进行赋值</li>\n</ul>\n<p><strong>函数原型：</strong></p>\n<ul>\n<li><code>vector&amp; operator=(const vector &amp;vec);</code>//重载等号操作符</li>\n</ul>\n<ul>\n<li><code>assign(beg, end);</code>       //将[beg, end)区间中的数据拷贝赋值给本身。</li>\n<li><code>assign(n, elem);</code>        //将n个elem拷贝赋值给本身。</li>\n</ul>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">printVector</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; v)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;::iterator it = v.<span class=\"built_in\">begin</span>(); it != v.<span class=\"built_in\">end</span>(); it++) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; *it &lt;&lt; <span class=\"string\">\" \"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//赋值操作</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; v1; <span class=\"comment\">//无参构造</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tv1.push_back(i);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tprintVector(v1);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;v2;</span><br><span class=\"line\">\tv2 = v1;</span><br><span class=\"line\">\tprintVector(v2);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;v3;</span><br><span class=\"line\">\tv3.assign(v1.<span class=\"built_in\">begin</span>(), v1.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">\tprintVector(v3);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;v4;</span><br><span class=\"line\">\tv4.assign(<span class=\"number\">10</span>, <span class=\"number\">100</span>);</span><br><span class=\"line\">\tprintVector(v4);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\ttest01();</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>总结： vector赋值方式比较简单，使用operator=，或者assign都可以</p>\n<h4 id=\"3-2-4-vector容量和大小\"><a href=\"#3-2-4-vector容量和大小\" class=\"headerlink\" title=\"3.2.4  vector容量和大小\"></a>3.2.4  vector容量和大小</h4><p><strong>功能描述：</strong></p>\n<ul>\n<li>对vector容器的容量和大小操作</li>\n</ul>\n<p><strong>函数原型：</strong></p>\n<ul>\n<li><p><code>empty();</code>                            //判断容器是否为空</p>\n</li>\n<li><p><code>capacity();</code>                      //容器的容量</p>\n</li>\n<li><p><code>size();</code>                              //返回容器中元素的个数</p>\n</li>\n<li><p><code>resize(int num);</code>             //重新指定容器的长度为num，若容器变长，则以默认值填充新位置。</p>\n<p>​                          //如果容器变短，则末尾超出容器长度的元素被删除。</p>\n</li>\n<li><p><code>resize(int num, elem);</code>  //重新指定容器的长度为num，若容器变长，则以elem值填充新位置。</p>\n<p>​                              //如果容器变短，则末尾超出容器长度的元素被删除</p>\n</li>\n</ul>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">printVector</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; v)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;::iterator it = v.<span class=\"built_in\">begin</span>(); it != v.<span class=\"built_in\">end</span>(); it++) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; *it &lt;&lt; <span class=\"string\">\" \"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; v1;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tv1.push_back(i);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tprintVector(v1);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (v1.empty())</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"v1为空\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"v1不为空\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"v1的容量 = \"</span> &lt;&lt; v1.capacity() &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"v1的大小 = \"</span> &lt;&lt; v1.<span class=\"built_in\">size</span>() &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//resize 重新指定大小 ，若指定的更大，默认用0填充新位置，可以利用重载版本替换默认填充</span></span><br><span class=\"line\">\tv1.resize(<span class=\"number\">15</span>,<span class=\"number\">10</span>);</span><br><span class=\"line\">\tprintVector(v1);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//resize 重新指定大小 ，若指定的更小，超出部分元素被删除</span></span><br><span class=\"line\">\tv1.resize(<span class=\"number\">5</span>);</span><br><span class=\"line\">\tprintVector(v1);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\ttest01();</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>总结：</p>\n<ul>\n<li>判断是否为空  — empty</li>\n<li>返回元素个数  — size</li>\n<li>返回容器容量  — capacity</li>\n<li>重新指定大小  —  resize</li>\n</ul>\n<h4 id=\"3-2-5-vector插入和删除\"><a href=\"#3-2-5-vector插入和删除\" class=\"headerlink\" title=\"3.2.5 vector插入和删除\"></a>3.2.5 vector插入和删除</h4><p><strong>功能描述：</strong></p>\n<ul>\n<li>对vector容器进行插入、删除操作</li>\n</ul>\n<p><strong>函数原型：</strong></p>\n<ul>\n<li><code>push_back(ele);</code>                                         //尾部插入元素ele</li>\n<li><code>pop_back();</code>                                                //删除最后一个元素</li>\n<li><code>insert(const_iterator pos, ele);</code>        //迭代器指向位置pos插入元素ele</li>\n<li><code>insert(const_iterator pos, int count,ele);</code>//迭代器指向位置pos插入count个元素ele</li>\n<li><code>erase(const_iterator pos);</code>                     //删除迭代器指向的元素</li>\n<li><code>erase(const_iterator start, const_iterator end);</code>//删除迭代器从start到end之间的元素</li>\n<li><code>clear();</code>                                                        //删除容器中所有元素</li>\n</ul>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">printVector</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; v)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;::iterator it = v.<span class=\"built_in\">begin</span>(); it != v.<span class=\"built_in\">end</span>(); it++) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; *it &lt;&lt; <span class=\"string\">\" \"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//插入和删除</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; v1;</span><br><span class=\"line\">\t<span class=\"comment\">//尾插</span></span><br><span class=\"line\">\tv1.push_back(<span class=\"number\">10</span>);</span><br><span class=\"line\">\tv1.push_back(<span class=\"number\">20</span>);</span><br><span class=\"line\">\tv1.push_back(<span class=\"number\">30</span>);</span><br><span class=\"line\">\tv1.push_back(<span class=\"number\">40</span>);</span><br><span class=\"line\">\tv1.push_back(<span class=\"number\">50</span>);</span><br><span class=\"line\">\tprintVector(v1);</span><br><span class=\"line\">\t<span class=\"comment\">//尾删</span></span><br><span class=\"line\">\tv1.pop_back();</span><br><span class=\"line\">\tprintVector(v1);</span><br><span class=\"line\">\t<span class=\"comment\">//插入</span></span><br><span class=\"line\">\tv1.insert(v1.<span class=\"built_in\">begin</span>(), <span class=\"number\">100</span>);</span><br><span class=\"line\">\tprintVector(v1);</span><br><span class=\"line\"></span><br><span class=\"line\">\tv1.insert(v1.<span class=\"built_in\">begin</span>(), <span class=\"number\">2</span>, <span class=\"number\">1000</span>);</span><br><span class=\"line\">\tprintVector(v1);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//删除</span></span><br><span class=\"line\">\tv1.erase(v1.<span class=\"built_in\">begin</span>());</span><br><span class=\"line\">\tprintVector(v1);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//清空</span></span><br><span class=\"line\">\tv1.erase(v1.<span class=\"built_in\">begin</span>(), v1.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">\tv1.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">\tprintVector(v1);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\ttest01();</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>总结：</p>\n<ul>\n<li>尾插  — push_back</li>\n<li>尾删  — pop_back</li>\n<li>插入  — insert    (位置迭代器)</li>\n<li>删除  — erase  （位置迭代器）</li>\n<li>清空  —  clear  </li>\n</ul>\n<h4 id=\"3-2-6-vector数据存取\"><a href=\"#3-2-6-vector数据存取\" class=\"headerlink\" title=\"3.2.6 vector数据存取\"></a>3.2.6 vector数据存取</h4><p><strong>功能描述：</strong></p>\n<ul>\n<li>对vector中的数据的存取操作</li>\n</ul>\n<p><strong>函数原型：</strong></p>\n<ul>\n<li><code>at(int idx);</code>     //返回索引idx所指的数据</li>\n<li><code>operator[];</code>       //返回索引idx所指的数据</li>\n<li><code>front();</code>            //返回容器中第一个数据元素</li>\n<li><code>back();</code>              //返回容器中最后一个数据元素</li>\n</ul>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;v1;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tv1.push_back(i);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; v1.<span class=\"built_in\">size</span>(); i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; v1[i] &lt;&lt; <span class=\"string\">\" \"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; v1.<span class=\"built_in\">size</span>(); i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; v1.at(i) &lt;&lt; <span class=\"string\">\" \"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"v1的第一个元素为： \"</span> &lt;&lt; v1.front() &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"v1的最后一个元素为： \"</span> &lt;&lt; v1.back() &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\ttest01();</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>总结：</p>\n<ul>\n<li>除了用迭代器获取vector容器中元素，[ ]和at也可以</li>\n<li>front返回容器第一个元素</li>\n<li>back返回容器最后一个元素</li>\n</ul>\n<h4 id=\"3-2-7-vector互换容器\"><a href=\"#3-2-7-vector互换容器\" class=\"headerlink\" title=\"3.2.7 vector互换容器\"></a>3.2.7 vector互换容器</h4><p><strong>功能描述：</strong></p>\n<ul>\n<li>实现两个容器内元素进行互换</li>\n</ul>\n<p><strong>函数原型：</strong></p>\n<ul>\n<li><code>swap(vec);</code>  // 将vec与本身的元素互换</li>\n</ul>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">printVector</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; v)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;::iterator it = v.<span class=\"built_in\">begin</span>(); it != v.<span class=\"built_in\">end</span>(); it++) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; *it &lt;&lt; <span class=\"string\">\" \"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;v1;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tv1.push_back(i);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tprintVector(v1);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;v2;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">10</span>; i &gt; <span class=\"number\">0</span>; i--)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tv2.push_back(i);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tprintVector(v2);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//互换容器</span></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"互换后\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\tv1.swap(v2);</span><br><span class=\"line\">\tprintVector(v1);</span><br><span class=\"line\">\tprintVector(v2);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test02</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; v;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100000</span>; i++) &#123;</span><br><span class=\"line\">\t\tv.push_back(i);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"v的容量为：\"</span> &lt;&lt; v.capacity() &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"v的大小为：\"</span> &lt;&lt; v.<span class=\"built_in\">size</span>() &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tv.resize(<span class=\"number\">3</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"v的容量为：\"</span> &lt;&lt; v.capacity() &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"v的大小为：\"</span> &lt;&lt; v.<span class=\"built_in\">size</span>() &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//收缩内存</span></span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;(v).swap(v); <span class=\"comment\">//匿名对象</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"v的容量为：\"</span> &lt;&lt; v.capacity() &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"v的大小为：\"</span> &lt;&lt; v.<span class=\"built_in\">size</span>() &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\ttest01();</span><br><span class=\"line\"></span><br><span class=\"line\">\ttest02();</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>总结：swap可以使两个容器互换，可以达到实用的收缩内存效果</p>\n<h4 id=\"3-2-8-vector预留空间\"><a href=\"#3-2-8-vector预留空间\" class=\"headerlink\" title=\"3.2.8 vector预留空间\"></a>3.2.8 vector预留空间</h4><p><strong>功能描述：</strong></p>\n<ul>\n<li>减少vector在动态扩展容量时的扩展次数</li>\n</ul>\n<p><strong>函数原型：</strong></p>\n<ul>\n<li><code>reserve(int len);</code>//容器预留len个元素长度，预留位置不初始化，元素不可访问。</li>\n</ul>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; v;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//预留空间</span></span><br><span class=\"line\">\tv.reserve(<span class=\"number\">100000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> num = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span>* p = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100000</span>; i++) &#123;</span><br><span class=\"line\">\t\tv.push_back(i);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (p != &amp;v[<span class=\"number\">0</span>]) &#123;</span><br><span class=\"line\">\t\t\tp = &amp;v[<span class=\"number\">0</span>];</span><br><span class=\"line\">\t\t\tnum++;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"num:\"</span> &lt;&lt; num &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\ttest01();</span><br><span class=\"line\">    </span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>总结：如果数据量较大，可以一开始利用reserve预留空间</p>\n<h3 id=\"3-3-deque容器\"><a href=\"#3-3-deque容器\" class=\"headerlink\" title=\"3.3 deque容器\"></a>3.3 deque容器</h3><h4 id=\"3-3-1-deque容器基本概念\"><a href=\"#3-3-1-deque容器基本概念\" class=\"headerlink\" title=\"3.3.1 deque容器基本概念\"></a>3.3.1 deque容器基本概念</h4><p><strong>功能：</strong></p>\n<ul>\n<li>双端数组，可以对头端进行插入删除操作</li>\n</ul>\n<p><strong>deque与vector区别：</strong></p>\n<ul>\n<li>vector对于头部的插入删除效率低，数据量越大，效率越低</li>\n<li>deque相对而言，对头部的插入删除速度回比vector快</li>\n<li>vector访问元素时的速度会比deque快,这和两者内部实现有关</li>\n</ul>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"assets/clip_image002-1547547642923.jpg\" alt=\"说明: 2015-11-19_204101\"></p>\n<p>deque内部工作原理:</p>\n<p>deque内部有个<strong>中控器</strong>，维护每段缓冲区中的内容，缓冲区中存放真实数据</p>\n<p>中控器维护的是每个缓冲区的地址，使得使用deque时像一片连续的内存空间</p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"assets/clip_image002-1547547896341.jpg\" alt=\"clip_image002-1547547896341\"></p>\n<ul>\n<li>deque容器的迭代器也是支持随机访问的</li>\n</ul>\n<h4 id=\"3-3-2-deque构造函数\"><a href=\"#3-3-2-deque构造函数\" class=\"headerlink\" title=\"3.3.2 deque构造函数\"></a>3.3.2 deque构造函数</h4><p><strong>功能描述：</strong></p>\n<ul>\n<li>deque容器构造</li>\n</ul>\n<p><strong>函数原型：</strong></p>\n<ul>\n<li><code>deque&lt;T&gt;</code> deqT;                      //默认构造形式</li>\n<li><code>deque(beg, end);</code>                  //构造函数将[beg, end)区间中的元素拷贝给本身。</li>\n<li><code>deque(n, elem);</code>                    //构造函数将n个elem拷贝给本身。</li>\n<li><code>deque(const deque &amp;deq);</code>   //拷贝构造函数</li>\n</ul>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;deque&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">printDeque</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">deque</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; d)</span> </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"built_in\">deque</span>&lt;<span class=\"keyword\">int</span>&gt;::const_iterator it = d.<span class=\"built_in\">begin</span>(); it != d.<span class=\"built_in\">end</span>(); it++) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; *it &lt;&lt; <span class=\"string\">\" \"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//deque构造</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">deque</span>&lt;<span class=\"keyword\">int</span>&gt; d1; <span class=\"comment\">//无参构造函数</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\td1.push_back(i);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tprintDeque(d1);</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"built_in\">deque</span>&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">d2</span><span class=\"params\">(d1.<span class=\"built_in\">begin</span>(),d1.<span class=\"built_in\">end</span>())</span></span>;</span><br><span class=\"line\">\tprintDeque(d2);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">deque</span>&lt;<span class=\"keyword\">int</span>&gt;d3(<span class=\"number\">10</span>,<span class=\"number\">100</span>);</span><br><span class=\"line\">\tprintDeque(d3);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">deque</span>&lt;<span class=\"keyword\">int</span>&gt;d4 = d3;</span><br><span class=\"line\">\tprintDeque(d4);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\ttest01();</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>总结：</strong>deque容器和vector容器的构造方式几乎一致，灵活使用即可</p>\n<h4 id=\"3-3-3-deque赋值操作\"><a href=\"#3-3-3-deque赋值操作\" class=\"headerlink\" title=\"3.3.3 deque赋值操作\"></a>3.3.3 deque赋值操作</h4><p><strong>功能描述：</strong></p>\n<ul>\n<li>给deque容器进行赋值</li>\n</ul>\n<p><strong>函数原型：</strong></p>\n<ul>\n<li><code>deque&amp; operator=(const deque &amp;deq);</code>         //重载等号操作符</li>\n</ul>\n<ul>\n<li><code>assign(beg, end);</code>                                           //将[beg, end)区间中的数据拷贝赋值给本身。</li>\n<li><code>assign(n, elem);</code>                                             //将n个elem拷贝赋值给本身。</li>\n</ul>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;deque&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">printDeque</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">deque</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; d)</span> </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"built_in\">deque</span>&lt;<span class=\"keyword\">int</span>&gt;::const_iterator it = d.<span class=\"built_in\">begin</span>(); it != d.<span class=\"built_in\">end</span>(); it++) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; *it &lt;&lt; <span class=\"string\">\" \"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//赋值操作</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">deque</span>&lt;<span class=\"keyword\">int</span>&gt; d1;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\td1.push_back(i);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tprintDeque(d1);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">deque</span>&lt;<span class=\"keyword\">int</span>&gt;d2;</span><br><span class=\"line\">\td2 = d1;</span><br><span class=\"line\">\tprintDeque(d2);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">deque</span>&lt;<span class=\"keyword\">int</span>&gt;d3;</span><br><span class=\"line\">\td3.assign(d1.<span class=\"built_in\">begin</span>(), d1.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">\tprintDeque(d3);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">deque</span>&lt;<span class=\"keyword\">int</span>&gt;d4;</span><br><span class=\"line\">\td4.assign(<span class=\"number\">10</span>, <span class=\"number\">100</span>);</span><br><span class=\"line\">\tprintDeque(d4);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\ttest01();</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>总结：deque赋值操作也与vector相同，需熟练掌握</p>\n<h4 id=\"3-3-4-deque大小操作\"><a href=\"#3-3-4-deque大小操作\" class=\"headerlink\" title=\"3.3.4 deque大小操作\"></a>3.3.4 deque大小操作</h4><p><strong>功能描述：</strong></p>\n<ul>\n<li>对deque容器的大小进行操作</li>\n</ul>\n<p><strong>函数原型：</strong></p>\n<ul>\n<li><p><code>deque.empty();</code>                       //判断容器是否为空</p>\n</li>\n<li><p><code>deque.size();</code>                         //返回容器中元素的个数</p>\n</li>\n<li><p><code>deque.resize(num);</code>                //重新指定容器的长度为num,若容器变长，则以默认值填充新位置。</p>\n<p>​                                         //如果容器变短，则末尾超出容器长度的元素被删除。</p>\n</li>\n<li><p><code>deque.resize(num, elem);</code>     //重新指定容器的长度为num,若容器变长，则以elem值填充新位置。</p>\n<p>​                                                     //如果容器变短，则末尾超出容器长度的元素被删除。</p>\n</li>\n</ul>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;deque&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">printDeque</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">deque</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; d)</span> </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"built_in\">deque</span>&lt;<span class=\"keyword\">int</span>&gt;::const_iterator it = d.<span class=\"built_in\">begin</span>(); it != d.<span class=\"built_in\">end</span>(); it++) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; *it &lt;&lt; <span class=\"string\">\" \"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//大小操作</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">deque</span>&lt;<span class=\"keyword\">int</span>&gt; d1;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\td1.push_back(i);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tprintDeque(d1);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//判断容器是否为空</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (d1.empty()) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"d1为空!\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"d1不为空!\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">//统计大小</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"d1的大小为：\"</span> &lt;&lt; d1.<span class=\"built_in\">size</span>() &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//重新指定大小</span></span><br><span class=\"line\">\td1.resize(<span class=\"number\">15</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">\tprintDeque(d1);</span><br><span class=\"line\"></span><br><span class=\"line\">\td1.resize(<span class=\"number\">5</span>);</span><br><span class=\"line\">\tprintDeque(d1);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\ttest01();</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>总结：</p>\n<ul>\n<li>deque没有容量的概念</li>\n<li>判断是否为空   — empty</li>\n<li>返回元素个数   — size</li>\n<li>重新指定个数   — resize</li>\n</ul>\n<h4 id=\"3-3-5-deque-插入和删除\"><a href=\"#3-3-5-deque-插入和删除\" class=\"headerlink\" title=\"3.3.5 deque 插入和删除\"></a>3.3.5 deque 插入和删除</h4><p><strong>功能描述：</strong></p>\n<ul>\n<li>向deque容器中插入和删除数据</li>\n</ul>\n<p><strong>函数原型：</strong></p>\n<p>两端插入操作：</p>\n<ul>\n<li><code>push_back(elem);</code>          //在容器尾部添加一个数据</li>\n<li><code>push_front(elem);</code>        //在容器头部插入一个数据</li>\n<li><code>pop_back();</code>                   //删除容器最后一个数据</li>\n<li><code>pop_front();</code>                 //删除容器第一个数据</li>\n</ul>\n<p>指定位置操作：</p>\n<ul>\n<li><p><code>insert(pos,elem);</code>         //在pos位置插入一个elem元素的拷贝，返回新数据的位置。</p>\n</li>\n<li><p><code>insert(pos,n,elem);</code>     //在pos位置插入n个elem数据，无返回值。</p>\n</li>\n<li><p><code>insert(pos,beg,end);</code>    //在pos位置插入[beg,end)区间的数据，无返回值。</p>\n</li>\n<li><p><code>clear();</code>                           //清空容器的所有数据</p>\n</li>\n<li><p><code>erase(beg,end);</code>             //删除[beg,end)区间的数据，返回下一个数据的位置。</p>\n</li>\n<li><p><code>erase(pos);</code>                    //删除pos位置的数据，返回下一个数据的位置。</p>\n</li>\n</ul>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;deque&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">printDeque</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">deque</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; d)</span> </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"built_in\">deque</span>&lt;<span class=\"keyword\">int</span>&gt;::const_iterator it = d.<span class=\"built_in\">begin</span>(); it != d.<span class=\"built_in\">end</span>(); it++) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; *it &lt;&lt; <span class=\"string\">\" \"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//两端操作</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">deque</span>&lt;<span class=\"keyword\">int</span>&gt; d;</span><br><span class=\"line\">\t<span class=\"comment\">//尾插</span></span><br><span class=\"line\">\td.push_back(<span class=\"number\">10</span>);</span><br><span class=\"line\">\td.push_back(<span class=\"number\">20</span>);</span><br><span class=\"line\">\t<span class=\"comment\">//头插</span></span><br><span class=\"line\">\td.push_front(<span class=\"number\">100</span>);</span><br><span class=\"line\">\td.push_front(<span class=\"number\">200</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\tprintDeque(d);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//尾删</span></span><br><span class=\"line\">\td.pop_back();</span><br><span class=\"line\">\t<span class=\"comment\">//头删</span></span><br><span class=\"line\">\td.pop_front();</span><br><span class=\"line\">\tprintDeque(d);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//插入</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test02</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">deque</span>&lt;<span class=\"keyword\">int</span>&gt; d;</span><br><span class=\"line\">\td.push_back(<span class=\"number\">10</span>);</span><br><span class=\"line\">\td.push_back(<span class=\"number\">20</span>);</span><br><span class=\"line\">\td.push_front(<span class=\"number\">100</span>);</span><br><span class=\"line\">\td.push_front(<span class=\"number\">200</span>);</span><br><span class=\"line\">\tprintDeque(d);</span><br><span class=\"line\"></span><br><span class=\"line\">\td.insert(d.<span class=\"built_in\">begin</span>(), <span class=\"number\">1000</span>);</span><br><span class=\"line\">\tprintDeque(d);</span><br><span class=\"line\"></span><br><span class=\"line\">\td.insert(d.<span class=\"built_in\">begin</span>(), <span class=\"number\">2</span>,<span class=\"number\">10000</span>);</span><br><span class=\"line\">\tprintDeque(d);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">deque</span>&lt;<span class=\"keyword\">int</span>&gt;d2;</span><br><span class=\"line\">\td2.push_back(<span class=\"number\">1</span>);</span><br><span class=\"line\">\td2.push_back(<span class=\"number\">2</span>);</span><br><span class=\"line\">\td2.push_back(<span class=\"number\">3</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\td.insert(d.<span class=\"built_in\">begin</span>(), d2.<span class=\"built_in\">begin</span>(), d2.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">\tprintDeque(d);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//删除</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test03</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">deque</span>&lt;<span class=\"keyword\">int</span>&gt; d;</span><br><span class=\"line\">\td.push_back(<span class=\"number\">10</span>);</span><br><span class=\"line\">\td.push_back(<span class=\"number\">20</span>);</span><br><span class=\"line\">\td.push_front(<span class=\"number\">100</span>);</span><br><span class=\"line\">\td.push_front(<span class=\"number\">200</span>);</span><br><span class=\"line\">\tprintDeque(d);</span><br><span class=\"line\"></span><br><span class=\"line\">\td.erase(d.<span class=\"built_in\">begin</span>());</span><br><span class=\"line\">\tprintDeque(d);</span><br><span class=\"line\"></span><br><span class=\"line\">\td.erase(d.<span class=\"built_in\">begin</span>(), d.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">\td.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">\tprintDeque(d);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//test01();</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//test02();</span></span><br><span class=\"line\"></span><br><span class=\"line\">    test03();</span><br><span class=\"line\">    </span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>总结：</p>\n<ul>\n<li>插入和删除提供的位置是迭代器！</li>\n<li>尾插   —  push_back</li>\n<li>尾删   —  pop_back</li>\n<li>头插   —  push_front</li>\n<li>头删   —  pop_front</li>\n</ul>\n<h4 id=\"3-3-6-deque-数据存取\"><a href=\"#3-3-6-deque-数据存取\" class=\"headerlink\" title=\"3.3.6 deque 数据存取\"></a>3.3.6 deque 数据存取</h4><p><strong>功能描述：</strong></p>\n<ul>\n<li>对deque 中的数据的存取操作</li>\n</ul>\n<p><strong>函数原型：</strong></p>\n<ul>\n<li><code>at(int idx);</code>     //返回索引idx所指的数据</li>\n<li><code>operator[];</code>      //返回索引idx所指的数据</li>\n<li><code>front();</code>            //返回容器中第一个数据元素</li>\n<li><code>back();</code>              //返回容器中最后一个数据元素</li>\n</ul>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;deque&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">printDeque</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">deque</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; d)</span> </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"built_in\">deque</span>&lt;<span class=\"keyword\">int</span>&gt;::const_iterator it = d.<span class=\"built_in\">begin</span>(); it != d.<span class=\"built_in\">end</span>(); it++) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; *it &lt;&lt; <span class=\"string\">\" \"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//数据存取</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">deque</span>&lt;<span class=\"keyword\">int</span>&gt; d;</span><br><span class=\"line\">\td.push_back(<span class=\"number\">10</span>);</span><br><span class=\"line\">\td.push_back(<span class=\"number\">20</span>);</span><br><span class=\"line\">\td.push_front(<span class=\"number\">100</span>);</span><br><span class=\"line\">\td.push_front(<span class=\"number\">200</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; d.<span class=\"built_in\">size</span>(); i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; d[i] &lt;&lt; <span class=\"string\">\" \"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; d.<span class=\"built_in\">size</span>(); i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; d.at(i) &lt;&lt; <span class=\"string\">\" \"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"front:\"</span> &lt;&lt; d.front() &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"back:\"</span> &lt;&lt; d.back() &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\ttest01();</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>总结：</p>\n<ul>\n<li>除了用迭代器获取deque容器中元素，[ ]和at也可以</li>\n<li>front返回容器第一个元素</li>\n<li>back返回容器最后一个元素</li>\n</ul>\n<h4 id=\"3-3-7-deque-排序\"><a href=\"#3-3-7-deque-排序\" class=\"headerlink\" title=\"3.3.7  deque 排序\"></a>3.3.7  deque 排序</h4><p><strong>功能描述：</strong></p>\n<ul>\n<li>利用算法实现对deque容器进行排序</li>\n</ul>\n<p><strong>算法：</strong></p>\n<ul>\n<li><code>sort(iterator beg, iterator end)</code>  //对beg和end区间内元素进行排序</li>\n</ul>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;deque&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">printDeque</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">deque</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; d)</span> </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"built_in\">deque</span>&lt;<span class=\"keyword\">int</span>&gt;::const_iterator it = d.<span class=\"built_in\">begin</span>(); it != d.<span class=\"built_in\">end</span>(); it++) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; *it &lt;&lt; <span class=\"string\">\" \"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">deque</span>&lt;<span class=\"keyword\">int</span>&gt; d;</span><br><span class=\"line\">\td.push_back(<span class=\"number\">10</span>);</span><br><span class=\"line\">\td.push_back(<span class=\"number\">20</span>);</span><br><span class=\"line\">\td.push_front(<span class=\"number\">100</span>);</span><br><span class=\"line\">\td.push_front(<span class=\"number\">200</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\tprintDeque(d);</span><br><span class=\"line\">\tsort(d.<span class=\"built_in\">begin</span>(), d.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">\tprintDeque(d);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\ttest01();</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>总结：sort算法非常实用，使用时包含头文件 algorithm即可</p>\n<h3 id=\"3-4-案例-评委打分\"><a href=\"#3-4-案例-评委打分\" class=\"headerlink\" title=\"3.4 案例-评委打分\"></a>3.4 案例-评委打分</h3><h4 id=\"3-4-1-案例描述\"><a href=\"#3-4-1-案例描述\" class=\"headerlink\" title=\"3.4.1 案例描述\"></a>3.4.1 案例描述</h4><p>有5名选手：选手ABCDE，10个评委分别对每一名选手打分，去除最高分，去除评委中最低分，取平均分。</p>\n<h4 id=\"3-4-2-实现步骤\"><a href=\"#3-4-2-实现步骤\" class=\"headerlink\" title=\"3.4.2 实现步骤\"></a>3.4.2 实现步骤</h4><ol>\n<li>创建五名选手，放到vector中</li>\n<li>遍历vector容器，取出来每一个选手，执行for循环，可以把10个评分打分存到deque容器中</li>\n<li>sort算法对deque容器中分数排序，去除最高和最低分</li>\n<li>deque容器遍历一遍，累加总分</li>\n<li>获取平均分</li>\n</ol>\n<p><strong>示例代码：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//选手类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\tPerson(<span class=\"built_in\">string</span> name, <span class=\"keyword\">int</span> score)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>-&gt;m_Name = name;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>-&gt;m_Score = score;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">string</span> m_Name; <span class=\"comment\">//姓名</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> m_Score;  <span class=\"comment\">//平均分</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">createPerson</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;Person&gt;&amp;v)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">string</span> nameSeed = <span class=\"string\">\"ABCDE\"</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">string</span> name = <span class=\"string\">\"选手\"</span>;</span><br><span class=\"line\">\t\tname += nameSeed[i];</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> score = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"function\">Person <span class=\"title\">p</span><span class=\"params\">(name, score)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">//将创建的person对象 放入到容器中</span></span><br><span class=\"line\">\t\tv.push_back(p);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//打分</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setScore</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;Person&gt;&amp;v)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"built_in\">vector</span>&lt;Person&gt;::iterator it = v.<span class=\"built_in\">begin</span>(); it != v.<span class=\"built_in\">end</span>(); it++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//将评委的分数 放入到deque容器中</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">deque</span>&lt;<span class=\"keyword\">int</span>&gt;d;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> score = rand() % <span class=\"number\">41</span> + <span class=\"number\">60</span>;  <span class=\"comment\">// 60 ~ 100</span></span><br><span class=\"line\">\t\t\td.push_back(score);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">//cout &lt;&lt; \"选手： \" &lt;&lt; it-&gt;m_Name &lt;&lt; \" 打分： \" &lt;&lt; endl;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//for (deque&lt;int&gt;::iterator dit = d.begin(); dit != d.end(); dit++)</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//&#123;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//\tcout &lt;&lt; *dit &lt;&lt; \" \";</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//&#125;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//cout &lt;&lt; endl;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">//排序</span></span><br><span class=\"line\">\t\tsort(d.<span class=\"built_in\">begin</span>(), d.<span class=\"built_in\">end</span>());</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">//去除最高和最低分</span></span><br><span class=\"line\">\t\td.pop_back();</span><br><span class=\"line\">\t\td.pop_front();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">//取平均分</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"built_in\">deque</span>&lt;<span class=\"keyword\">int</span>&gt;::iterator dit = d.<span class=\"built_in\">begin</span>(); dit != d.<span class=\"built_in\">end</span>(); dit++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tsum += *dit; <span class=\"comment\">//累加每个评委的分数</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> avg = sum / d.<span class=\"built_in\">size</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">//将平均分 赋值给选手身上</span></span><br><span class=\"line\">\t\tit-&gt;m_Score = avg;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">showScore</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;Person&gt;&amp;v)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"built_in\">vector</span>&lt;Person&gt;::iterator it = v.<span class=\"built_in\">begin</span>(); it != v.<span class=\"built_in\">end</span>(); it++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"姓名： \"</span> &lt;&lt; it-&gt;m_Name &lt;&lt; <span class=\"string\">\" 平均分： \"</span> &lt;&lt; it-&gt;m_Score &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//随机数种子</span></span><br><span class=\"line\">\tsrand((<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span>)time(<span class=\"literal\">NULL</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//1、创建5名选手</span></span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;Person&gt;v;  <span class=\"comment\">//存放选手容器</span></span><br><span class=\"line\">\tcreatePerson(v);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//测试</span></span><br><span class=\"line\">\t<span class=\"comment\">//for (vector&lt;Person&gt;::iterator it = v.begin(); it != v.end(); it++)</span></span><br><span class=\"line\">\t<span class=\"comment\">//&#123;</span></span><br><span class=\"line\">\t<span class=\"comment\">//\tcout &lt;&lt; \"姓名： \" &lt;&lt; (*it).m_Name &lt;&lt; \" 分数： \" &lt;&lt; (*it).m_Score &lt;&lt; endl;</span></span><br><span class=\"line\">\t<span class=\"comment\">//&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//2、给5名选手打分</span></span><br><span class=\"line\">\tsetScore(v);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//3、显示最后得分</span></span><br><span class=\"line\">\tshowScore(v);</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>总结：</strong> 选取不同的容器操作数据，可以提升代码的效率</p>\n<h3 id=\"3-5-stack容器\"><a href=\"#3-5-stack容器\" class=\"headerlink\" title=\"3.5 stack容器\"></a>3.5 stack容器</h3><h4 id=\"3-5-1-stack-基本概念\"><a href=\"#3-5-1-stack-基本概念\" class=\"headerlink\" title=\"3.5.1 stack 基本概念\"></a>3.5.1 stack 基本概念</h4><p><strong>概念：</strong>stack是一种<strong>先进后出</strong>(First In Last Out,FILO)的数据结构，它只有一个出口</p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"assets/clip_image002-1547604555425.jpg\" alt=\"说明: 2015-11-15_195707\"></p>\n<p>栈中只有顶端的元素才可以被外界使用，因此栈不允许有遍历行为</p>\n<p>栈中进入数据称为  — <strong>入栈</strong>  <code>push</code></p>\n<p>栈中弹出数据称为  — <strong>出栈</strong>  <code>pop</code></p>\n<p>生活中的栈：</p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"assets/clip_image002.png\" alt=\"img\"></p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"assets/clip_image002-1547605111510.jpg\" alt=\"img\"></p>\n<h4 id=\"3-5-2-stack-常用接口\"><a href=\"#3-5-2-stack-常用接口\" class=\"headerlink\" title=\"3.5.2 stack 常用接口\"></a>3.5.2 stack 常用接口</h4><p>功能描述：栈容器常用的对外接口</p>\n<p>构造函数：</p>\n<ul>\n<li><code>stack&lt;T&gt; stk;</code>                                 //stack采用模板类实现， stack对象的默认构造形式</li>\n<li><code>stack(const stack &amp;stk);</code>            //拷贝构造函数</li>\n</ul>\n<p>赋值操作：</p>\n<ul>\n<li><code>stack&amp; operator=(const stack &amp;stk);</code>           //重载等号操作符</li>\n</ul>\n<p>数据存取：</p>\n<ul>\n<li><code>push(elem);</code>      //向栈顶添加元素</li>\n<li><code>pop();</code>                //从栈顶移除第一个元素</li>\n<li><code>top();</code>                //返回栈顶元素</li>\n</ul>\n<p>大小操作：</p>\n<ul>\n<li><code>empty();</code>            //判断堆栈是否为空</li>\n<li><code>size();</code>              //返回栈的大小</li>\n</ul>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stack&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//栈容器常用接口</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//创建栈容器 栈容器必须符合先进后出</span></span><br><span class=\"line\">\t<span class=\"built_in\">stack</span>&lt;<span class=\"keyword\">int</span>&gt; s;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//向栈中添加元素，叫做 压栈 入栈</span></span><br><span class=\"line\">\ts.push(<span class=\"number\">10</span>);</span><br><span class=\"line\">\ts.push(<span class=\"number\">20</span>);</span><br><span class=\"line\">\ts.push(<span class=\"number\">30</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (!s.empty()) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//输出栈顶元素</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"栈顶元素为： \"</span> &lt;&lt; s.top() &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">//弹出栈顶元素</span></span><br><span class=\"line\">\t\ts.pop();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"栈的大小为：\"</span> &lt;&lt; s.<span class=\"built_in\">size</span>() &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\ttest01();</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>总结：</p>\n<ul>\n<li>入栈   — push</li>\n<li>出栈   — pop</li>\n<li>返回栈顶   — top</li>\n<li>判断栈是否为空   — empty</li>\n<li>返回栈大小   — size</li>\n</ul>\n<h3 id=\"3-6-queue-容器\"><a href=\"#3-6-queue-容器\" class=\"headerlink\" title=\"3.6 queue 容器\"></a>3.6 queue 容器</h3><h4 id=\"3-6-1-queue-基本概念\"><a href=\"#3-6-1-queue-基本概念\" class=\"headerlink\" title=\"3.6.1 queue 基本概念\"></a>3.6.1 queue 基本概念</h4><p><strong>概念：</strong>Queue是一种<strong>先进先出</strong>(First In First Out,FIFO)的数据结构，它有两个出口</p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"assets/clip_image002-1547606475892.jpg\" alt=\"说明: 2015-11-15_214429\"></p>\n<p>队列容器允许从一端新增元素，从另一端移除元素</p>\n<p>队列中只有队头和队尾才可以被外界使用，因此队列不允许有遍历行为</p>\n<p>队列中进数据称为 — <strong>入队</strong>    <code>push</code></p>\n<p>队列中出数据称为 — <strong>出队</strong>    <code>pop</code></p>\n<p>生活中的队列：</p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"assets/1547606785041.png\" alt=\"1547606785041\"></p>\n<h4 id=\"3-6-2-queue-常用接口\"><a href=\"#3-6-2-queue-常用接口\" class=\"headerlink\" title=\"3.6.2 queue 常用接口\"></a>3.6.2 queue 常用接口</h4><p>功能描述：栈容器常用的对外接口</p>\n<p>构造函数：</p>\n<ul>\n<li><code>queue&lt;T&gt; que;</code>                                 //queue采用模板类实现，queue对象的默认构造形式</li>\n<li><code>queue(const queue &amp;que);</code>            //拷贝构造函数</li>\n</ul>\n<p>赋值操作：</p>\n<ul>\n<li><code>queue&amp; operator=(const queue &amp;que);</code>           //重载等号操作符</li>\n</ul>\n<p>数据存取：</p>\n<ul>\n<li><code>push(elem);</code>                             //往队尾添加元素</li>\n<li><code>pop();</code>                                      //从队头移除第一个元素</li>\n<li><code>back();</code>                                    //返回最后一个元素</li>\n<li><code>front();</code>                                  //返回第一个元素</li>\n</ul>\n<p>大小操作：</p>\n<ul>\n<li><code>empty();</code>            //判断堆栈是否为空</li>\n<li><code>size();</code>              //返回栈的大小</li>\n</ul>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\tPerson(<span class=\"built_in\">string</span> name, <span class=\"keyword\">int</span> age)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>-&gt;m_Name = name;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>-&gt;m_Age = age;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">string</span> m_Name;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> m_Age;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//创建队列</span></span><br><span class=\"line\">\t<span class=\"built_in\">queue</span>&lt;Person&gt; q;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//准备数据</span></span><br><span class=\"line\">\t<span class=\"function\">Person <span class=\"title\">p1</span><span class=\"params\">(<span class=\"string\">\"唐僧\"</span>, <span class=\"number\">30</span>)</span></span>;</span><br><span class=\"line\">\t<span class=\"function\">Person <span class=\"title\">p2</span><span class=\"params\">(<span class=\"string\">\"孙悟空\"</span>, <span class=\"number\">1000</span>)</span></span>;</span><br><span class=\"line\">\t<span class=\"function\">Person <span class=\"title\">p3</span><span class=\"params\">(<span class=\"string\">\"猪八戒\"</span>, <span class=\"number\">900</span>)</span></span>;</span><br><span class=\"line\">\t<span class=\"function\">Person <span class=\"title\">p4</span><span class=\"params\">(<span class=\"string\">\"沙僧\"</span>, <span class=\"number\">800</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//向队列中添加元素  入队操作</span></span><br><span class=\"line\">\tq.push(p1);</span><br><span class=\"line\">\tq.push(p2);</span><br><span class=\"line\">\tq.push(p3);</span><br><span class=\"line\">\tq.push(p4);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//队列不提供迭代器，更不支持随机访问\t</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (!q.empty()) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//输出队头元素</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"队头元素-- 姓名： \"</span> &lt;&lt; q.front().m_Name </span><br><span class=\"line\">              &lt;&lt; <span class=\"string\">\" 年龄： \"</span>&lt;&lt; q.front().m_Age &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"队尾元素-- 姓名： \"</span> &lt;&lt; q.back().m_Name  </span><br><span class=\"line\">              &lt;&lt; <span class=\"string\">\" 年龄： \"</span> &lt;&lt; q.back().m_Age &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">//弹出队头元素</span></span><br><span class=\"line\">\t\tq.pop();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"队列大小为：\"</span> &lt;&lt; q.<span class=\"built_in\">size</span>() &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\ttest01();</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>总结：</p>\n<ul>\n<li>入队   — push</li>\n<li>出队   — pop</li>\n<li>返回队头元素   — front</li>\n<li>返回队尾元素   — back</li>\n<li>判断队是否为空   — empty</li>\n<li>返回队列大小   — size</li>\n</ul>\n<h3 id=\"3-7-list容器\"><a href=\"#3-7-list容器\" class=\"headerlink\" title=\"3.7 list容器\"></a>3.7 list容器</h3><h4 id=\"3-7-1-list基本概念\"><a href=\"#3-7-1-list基本概念\" class=\"headerlink\" title=\"3.7.1 list基本概念\"></a>3.7.1 list基本概念</h4><p><strong>功能：</strong>将数据进行链式存储</p>\n<p><strong>链表</strong>（list）是一种物理存储单元上非连续的存储结构，数据元素的逻辑顺序是通过链表中的指针链接实现的</p>\n<p>链表的组成：链表由一系列<strong>结点</strong>组成</p>\n<p>结点的组成：一个是存储数据元素的<strong>数据域</strong>，另一个是存储下一个结点地址的<strong>指针域</strong></p>\n<p>STL中的链表是一个双向循环链表</p>\n<p><img src= \"/img/loading.gif\" data-lazy-src=\"assets/clip_image002-1547608564071.jpg\" alt=\"说明: 2015-11-15_225145\"></p>\n<p>由于链表的存储方式并不是连续的内存空间，因此链表list中的迭代器只支持前移和后移，属于<strong>双向迭代器</strong></p>\n<p>list的优点：</p>\n<ul>\n<li>采用动态存储分配，不会造成内存浪费和溢出</li>\n<li>链表执行插入和删除操作十分方便，修改指针即可，不需要移动大量元素</li>\n</ul>\n<p>list的缺点：</p>\n<ul>\n<li>链表灵活，但是空间(指针域) 和 时间（遍历）额外耗费较大</li>\n</ul>\n<p>List有一个重要的性质，插入操作和删除操作都不会造成原有list迭代器的失效，这在vector是不成立的。</p>\n<p>总结：STL中<strong>List和vector是两个最常被使用的容器</strong>，各有优缺点</p>\n<h4 id=\"3-7-2-list构造函数\"><a href=\"#3-7-2-list构造函数\" class=\"headerlink\" title=\"3.7.2  list构造函数\"></a>3.7.2  list构造函数</h4><p><strong>功能描述：</strong></p>\n<ul>\n<li>创建list容器</li>\n</ul>\n<p><strong>函数原型：</strong></p>\n<ul>\n<li><code>list&lt;T&gt; lst;</code>                               //list采用采用模板类实现,对象的默认构造形式：</li>\n<li><code>list(beg,end);</code>                           //构造函数将[beg, end)区间中的元素拷贝给本身。</li>\n<li><code>list(n,elem);</code>                             //构造函数将n个elem拷贝给本身。</li>\n<li><code>list(const list &amp;lst);</code>            //拷贝构造函数。</li>\n</ul>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;list&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">printList</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">list</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; L)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"built_in\">list</span>&lt;<span class=\"keyword\">int</span>&gt;::const_iterator it = L.<span class=\"built_in\">begin</span>(); it != L.<span class=\"built_in\">end</span>(); it++) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; *it &lt;&lt; <span class=\"string\">\" \"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">list</span>&lt;<span class=\"keyword\">int</span>&gt;L1;</span><br><span class=\"line\">\tL1.push_back(<span class=\"number\">10</span>);</span><br><span class=\"line\">\tL1.push_back(<span class=\"number\">20</span>);</span><br><span class=\"line\">\tL1.push_back(<span class=\"number\">30</span>);</span><br><span class=\"line\">\tL1.push_back(<span class=\"number\">40</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\tprintList(L1);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">list</span>&lt;<span class=\"keyword\">int</span>&gt;L2(L1.<span class=\"built_in\">begin</span>(),L1.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">\tprintList(L2);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">list</span>&lt;<span class=\"keyword\">int</span>&gt;L3(L2);</span><br><span class=\"line\">\tprintList(L3);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">list</span>&lt;<span class=\"keyword\">int</span>&gt;L4(<span class=\"number\">10</span>, <span class=\"number\">1000</span>);</span><br><span class=\"line\">\tprintList(L4);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\ttest01();</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>总结：list构造方式同其他几个STL常用容器，熟练掌握即可</p>\n<h4 id=\"3-7-3-list-赋值和交换\"><a href=\"#3-7-3-list-赋值和交换\" class=\"headerlink\" title=\"3.7.3 list 赋值和交换\"></a>3.7.3 list 赋值和交换</h4><p><strong>功能描述：</strong></p>\n<ul>\n<li>给list容器进行赋值，以及交换list容器</li>\n</ul>\n<p><strong>函数原型：</strong></p>\n<ul>\n<li><code>assign(beg, end);</code>            //将[beg, end)区间中的数据拷贝赋值给本身。</li>\n<li><code>assign(n, elem);</code>              //将n个elem拷贝赋值给本身。</li>\n<li><code>list&amp; operator=(const list &amp;lst);</code>         //重载等号操作符</li>\n<li><code>swap(lst);</code>                         //将lst与本身的元素互换。</li>\n</ul>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;list&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">printList</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">list</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; L)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"built_in\">list</span>&lt;<span class=\"keyword\">int</span>&gt;::const_iterator it = L.<span class=\"built_in\">begin</span>(); it != L.<span class=\"built_in\">end</span>(); it++) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; *it &lt;&lt; <span class=\"string\">\" \"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//赋值和交换</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">list</span>&lt;<span class=\"keyword\">int</span>&gt;L1;</span><br><span class=\"line\">\tL1.push_back(<span class=\"number\">10</span>);</span><br><span class=\"line\">\tL1.push_back(<span class=\"number\">20</span>);</span><br><span class=\"line\">\tL1.push_back(<span class=\"number\">30</span>);</span><br><span class=\"line\">\tL1.push_back(<span class=\"number\">40</span>);</span><br><span class=\"line\">\tprintList(L1);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//赋值</span></span><br><span class=\"line\">\t<span class=\"built_in\">list</span>&lt;<span class=\"keyword\">int</span>&gt;L2;</span><br><span class=\"line\">\tL2 = L1;</span><br><span class=\"line\">\tprintList(L2);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">list</span>&lt;<span class=\"keyword\">int</span>&gt;L3;</span><br><span class=\"line\">\tL3.assign(L2.<span class=\"built_in\">begin</span>(), L2.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">\tprintList(L3);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">list</span>&lt;<span class=\"keyword\">int</span>&gt;L4;</span><br><span class=\"line\">\tL4.assign(<span class=\"number\">10</span>, <span class=\"number\">100</span>);</span><br><span class=\"line\">\tprintList(L4);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//交换</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test02</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">list</span>&lt;<span class=\"keyword\">int</span>&gt;L1;</span><br><span class=\"line\">\tL1.push_back(<span class=\"number\">10</span>);</span><br><span class=\"line\">\tL1.push_back(<span class=\"number\">20</span>);</span><br><span class=\"line\">\tL1.push_back(<span class=\"number\">30</span>);</span><br><span class=\"line\">\tL1.push_back(<span class=\"number\">40</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">list</span>&lt;<span class=\"keyword\">int</span>&gt;L2;</span><br><span class=\"line\">\tL2.assign(<span class=\"number\">10</span>, <span class=\"number\">100</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"交换前： \"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\tprintList(L1);</span><br><span class=\"line\">\tprintList(L2);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tL1.swap(L2);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"交换后： \"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\tprintList(L1);</span><br><span class=\"line\">\tprintList(L2);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//test01();</span></span><br><span class=\"line\"></span><br><span class=\"line\">\ttest02();</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>总结：list赋值和交换操作能够灵活运用即可</p>\n<h4 id=\"3-7-4-list-大小操作\"><a href=\"#3-7-4-list-大小操作\" class=\"headerlink\" title=\"3.7.4 list 大小操作\"></a>3.7.4 list 大小操作</h4><p><strong>功能描述：</strong></p>\n<ul>\n<li>对list容器的大小进行操作</li>\n</ul>\n<p><strong>函数原型：</strong></p>\n<ul>\n<li><p><code>size();</code>                             //返回容器中元素的个数</p>\n</li>\n<li><p><code>empty();</code>                           //判断容器是否为空</p>\n</li>\n<li><p><code>resize(num);</code>                   //重新指定容器的长度为num，若容器变长，则以默认值填充新位置。</p>\n<p>​                        //如果容器变短，则末尾超出容器长度的元素被删除。</p>\n</li>\n<li><p><code>resize(num, elem);</code>       //重新指定容器的长度为num，若容器变长，则以elem值填充新位置。</p>\n<pre><code>​                        //如果容器变短，则末尾超出容器长度的元素被删除。</code></pre></li>\n</ul>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;list&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">printList</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">list</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; L)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"built_in\">list</span>&lt;<span class=\"keyword\">int</span>&gt;::const_iterator it = L.<span class=\"built_in\">begin</span>(); it != L.<span class=\"built_in\">end</span>(); it++) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; *it &lt;&lt; <span class=\"string\">\" \"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//大小操作</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">list</span>&lt;<span class=\"keyword\">int</span>&gt;L1;</span><br><span class=\"line\">\tL1.push_back(<span class=\"number\">10</span>);</span><br><span class=\"line\">\tL1.push_back(<span class=\"number\">20</span>);</span><br><span class=\"line\">\tL1.push_back(<span class=\"number\">30</span>);</span><br><span class=\"line\">\tL1.push_back(<span class=\"number\">40</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (L1.empty())</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"L1为空\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"L1不为空\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"L1的大小为： \"</span> &lt;&lt; L1.<span class=\"built_in\">size</span>() &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//重新指定大小</span></span><br><span class=\"line\">\tL1.resize(<span class=\"number\">10</span>);</span><br><span class=\"line\">\tprintList(L1);</span><br><span class=\"line\"></span><br><span class=\"line\">\tL1.resize(<span class=\"number\">2</span>);</span><br><span class=\"line\">\tprintList(L1);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\ttest01();</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>总结：</p>\n<ul>\n<li>判断是否为空   — empty</li>\n<li>返回元素个数   — size</li>\n<li>重新指定个数   — resize</li>\n</ul>\n<h4 id=\"3-7-5-list-插入和删除\"><a href=\"#3-7-5-list-插入和删除\" class=\"headerlink\" title=\"3.7.5 list 插入和删除\"></a>3.7.5 list 插入和删除</h4><p><strong>功能描述：</strong></p>\n<ul>\n<li>对list容器进行数据的插入和删除</li>\n</ul>\n<p><strong>函数原型：</strong></p>\n<ul>\n<li>push_back(elem);//在容器尾部加入一个元素</li>\n<li>pop_back();//删除容器中最后一个元素</li>\n<li>push_front(elem);//在容器开头插入一个元素</li>\n<li>pop_front();//从容器开头移除第一个元素</li>\n<li>insert(pos,elem);//在pos位置插elem元素的拷贝，返回新数据的位置。</li>\n<li>insert(pos,n,elem);//在pos位置插入n个elem数据，无返回值。</li>\n<li>insert(pos,beg,end);//在pos位置插入[beg,end)区间的数据，无返回值。</li>\n<li>clear();//移除容器的所有数据</li>\n<li>erase(beg,end);//删除[beg,end)区间的数据，返回下一个数据的位置。</li>\n<li>erase(pos);//删除pos位置的数据，返回下一个数据的位置。</li>\n<li>remove(elem);//删除容器中所有与elem值匹配的元素。</li>\n</ul>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;list&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">printList</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">list</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; L)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"built_in\">list</span>&lt;<span class=\"keyword\">int</span>&gt;::const_iterator it = L.<span class=\"built_in\">begin</span>(); it != L.<span class=\"built_in\">end</span>(); it++) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; *it &lt;&lt; <span class=\"string\">\" \"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//插入和删除</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">list</span>&lt;<span class=\"keyword\">int</span>&gt; L;</span><br><span class=\"line\">\t<span class=\"comment\">//尾插</span></span><br><span class=\"line\">\tL.push_back(<span class=\"number\">10</span>);</span><br><span class=\"line\">\tL.push_back(<span class=\"number\">20</span>);</span><br><span class=\"line\">\tL.push_back(<span class=\"number\">30</span>);</span><br><span class=\"line\">\t<span class=\"comment\">//头插</span></span><br><span class=\"line\">\tL.push_front(<span class=\"number\">100</span>);</span><br><span class=\"line\">\tL.push_front(<span class=\"number\">200</span>);</span><br><span class=\"line\">\tL.push_front(<span class=\"number\">300</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\tprintList(L);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//尾删</span></span><br><span class=\"line\">\tL.pop_back();</span><br><span class=\"line\">\tprintList(L);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//头删</span></span><br><span class=\"line\">\tL.pop_front();</span><br><span class=\"line\">\tprintList(L);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//插入</span></span><br><span class=\"line\">\t<span class=\"built_in\">list</span>&lt;<span class=\"keyword\">int</span>&gt;::iterator it = L.<span class=\"built_in\">begin</span>();</span><br><span class=\"line\">\tL.insert(++it, <span class=\"number\">1000</span>);</span><br><span class=\"line\">\tprintList(L);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//删除</span></span><br><span class=\"line\">\tit = L.<span class=\"built_in\">begin</span>();</span><br><span class=\"line\">\tL.erase(++it);</span><br><span class=\"line\">\tprintList(L);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//移除</span></span><br><span class=\"line\">\tL.push_back(<span class=\"number\">10000</span>);</span><br><span class=\"line\">\tL.push_back(<span class=\"number\">10000</span>);</span><br><span class=\"line\">\tL.push_back(<span class=\"number\">10000</span>);</span><br><span class=\"line\">\tprintList(L);</span><br><span class=\"line\">\tL.<span class=\"built_in\">remove</span>(<span class=\"number\">10000</span>);</span><br><span class=\"line\">\tprintList(L);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//清空</span></span><br><span class=\"line\">\tL.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">\tprintList(L);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\ttest01();</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>总结：</p>\n<ul>\n<li>尾插   — push_back</li>\n<li>尾删   — pop_back</li>\n<li>头插   — push_front</li>\n<li>头删   — pop_front</li>\n<li>插入   — insert</li>\n<li>删除   — erase</li>\n<li>移除   — remove</li>\n<li>清空   — clear</li>\n</ul>\n<h4 id=\"3-7-6-list-数据存取\"><a href=\"#3-7-6-list-数据存取\" class=\"headerlink\" title=\"3.7.6 list 数据存取\"></a>3.7.6 list 数据存取</h4><p><strong>功能描述：</strong></p>\n<ul>\n<li>对list容器中数据进行存取</li>\n</ul>\n<p><strong>函数原型：</strong></p>\n<ul>\n<li><code>front();</code>        //返回第一个元素。</li>\n<li><code>back();</code>         //返回最后一个元素。</li>\n</ul>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;list&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//数据存取</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">list</span>&lt;<span class=\"keyword\">int</span>&gt;L1;</span><br><span class=\"line\">\tL1.push_back(<span class=\"number\">10</span>);</span><br><span class=\"line\">\tL1.push_back(<span class=\"number\">20</span>);</span><br><span class=\"line\">\tL1.push_back(<span class=\"number\">30</span>);</span><br><span class=\"line\">\tL1.push_back(<span class=\"number\">40</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//cout &lt;&lt; L1.at(0) &lt;&lt; endl;//错误 不支持at访问数据</span></span><br><span class=\"line\">\t<span class=\"comment\">//cout &lt;&lt; L1[0] &lt;&lt; endl; //错误  不支持[]方式访问数据</span></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"第一个元素为： \"</span> &lt;&lt; L1.front() &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"最后一个元素为： \"</span> &lt;&lt; L1.back() &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//list容器的迭代器是双向迭代器，不支持随机访问</span></span><br><span class=\"line\">\t<span class=\"built_in\">list</span>&lt;<span class=\"keyword\">int</span>&gt;::iterator it = L1.<span class=\"built_in\">begin</span>();</span><br><span class=\"line\">\t<span class=\"comment\">//it = it + 1;//错误，不可以跳跃访问，即使是+1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\ttest01();</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>总结：</p>\n<ul>\n<li>list容器中不可以通过[]或者at方式访问数据</li>\n<li>返回第一个元素   — front</li>\n<li>返回最后一个元素   — back</li>\n</ul>\n<h4 id=\"3-7-7-list-反转和排序\"><a href=\"#3-7-7-list-反转和排序\" class=\"headerlink\" title=\"3.7.7 list 反转和排序\"></a>3.7.7 list 反转和排序</h4><p><strong>功能描述：</strong></p>\n<ul>\n<li>将容器中的元素反转，以及将容器中的数据进行排序</li>\n</ul>\n<p><strong>函数原型：</strong></p>\n<ul>\n<li><code>reverse();</code>   //反转链表</li>\n<li><code>sort();</code>        //链表排序</li>\n</ul>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">printList</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">list</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; L)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"built_in\">list</span>&lt;<span class=\"keyword\">int</span>&gt;::const_iterator it = L.<span class=\"built_in\">begin</span>(); it != L.<span class=\"built_in\">end</span>(); it++) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; *it &lt;&lt; <span class=\"string\">\" \"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">myCompare</span><span class=\"params\">(<span class=\"keyword\">int</span> val1 , <span class=\"keyword\">int</span> val2)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> val1 &gt; val2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//反转和排序</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">list</span>&lt;<span class=\"keyword\">int</span>&gt; L;</span><br><span class=\"line\">\tL.push_back(<span class=\"number\">90</span>);</span><br><span class=\"line\">\tL.push_back(<span class=\"number\">30</span>);</span><br><span class=\"line\">\tL.push_back(<span class=\"number\">20</span>);</span><br><span class=\"line\">\tL.push_back(<span class=\"number\">70</span>);</span><br><span class=\"line\">\tprintList(L);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//反转容器的元素</span></span><br><span class=\"line\">\tL.reverse();</span><br><span class=\"line\">\tprintList(L);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//排序</span></span><br><span class=\"line\">\tL.sort(); <span class=\"comment\">//默认的排序规则 从小到大</span></span><br><span class=\"line\">\tprintList(L);</span><br><span class=\"line\"></span><br><span class=\"line\">\tL.sort(myCompare); <span class=\"comment\">//指定规则，从大到小</span></span><br><span class=\"line\">\tprintList(L);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\ttest01();</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>总结：</p>\n<ul>\n<li>反转   — reverse</li>\n<li>排序   — sort （成员函数）</li>\n</ul>\n<h4 id=\"3-7-8-排序案例\"><a href=\"#3-7-8-排序案例\" class=\"headerlink\" title=\"3.7.8 排序案例\"></a>3.7.8 排序案例</h4><p>案例描述：将Person自定义数据类型进行排序，Person中属性有姓名、年龄、身高</p>\n<p>排序规则：按照年龄进行升序，如果年龄相同按照身高进行降序</p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;list&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\tPerson(<span class=\"built_in\">string</span> name, <span class=\"keyword\">int</span> age , <span class=\"keyword\">int</span> <span class=\"built_in\">height</span>) &#123;</span><br><span class=\"line\">\t\tm_Name = name;</span><br><span class=\"line\">\t\tm_Age = age;</span><br><span class=\"line\">\t\tm_Height = <span class=\"built_in\">height</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">string</span> m_Name;  <span class=\"comment\">//姓名</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> m_Age;      <span class=\"comment\">//年龄</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> m_Height;   <span class=\"comment\">//身高</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">ComparePerson</span><span class=\"params\">(Person&amp; p1, Person&amp; p2)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (p1.m_Age == p2.m_Age) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> p1.m_Height  &gt; p2.m_Height;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>  p1.m_Age &lt; p2.m_Age;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">list</span>&lt;Person&gt; L;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\">Person <span class=\"title\">p1</span><span class=\"params\">(<span class=\"string\">\"刘备\"</span>, <span class=\"number\">35</span> , <span class=\"number\">175</span>)</span></span>;</span><br><span class=\"line\">\t<span class=\"function\">Person <span class=\"title\">p2</span><span class=\"params\">(<span class=\"string\">\"曹操\"</span>, <span class=\"number\">45</span> , <span class=\"number\">180</span>)</span></span>;</span><br><span class=\"line\">\t<span class=\"function\">Person <span class=\"title\">p3</span><span class=\"params\">(<span class=\"string\">\"孙权\"</span>, <span class=\"number\">40</span> , <span class=\"number\">170</span>)</span></span>;</span><br><span class=\"line\">\t<span class=\"function\">Person <span class=\"title\">p4</span><span class=\"params\">(<span class=\"string\">\"赵云\"</span>, <span class=\"number\">25</span> , <span class=\"number\">190</span>)</span></span>;</span><br><span class=\"line\">\t<span class=\"function\">Person <span class=\"title\">p5</span><span class=\"params\">(<span class=\"string\">\"张飞\"</span>, <span class=\"number\">35</span> , <span class=\"number\">160</span>)</span></span>;</span><br><span class=\"line\">\t<span class=\"function\">Person <span class=\"title\">p6</span><span class=\"params\">(<span class=\"string\">\"关羽\"</span>, <span class=\"number\">35</span> , <span class=\"number\">200</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tL.push_back(p1);</span><br><span class=\"line\">\tL.push_back(p2);</span><br><span class=\"line\">\tL.push_back(p3);</span><br><span class=\"line\">\tL.push_back(p4);</span><br><span class=\"line\">\tL.push_back(p5);</span><br><span class=\"line\">\tL.push_back(p6);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"built_in\">list</span>&lt;Person&gt;::iterator it = L.<span class=\"built_in\">begin</span>(); it != L.<span class=\"built_in\">end</span>(); it++) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"姓名： \"</span> &lt;&lt; it-&gt;m_Name &lt;&lt; <span class=\"string\">\" 年龄： \"</span> &lt;&lt; it-&gt;m_Age </span><br><span class=\"line\">              &lt;&lt; <span class=\"string\">\" 身高： \"</span> &lt;&lt; it-&gt;m_Height &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"---------------------------------\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\tL.sort(ComparePerson); <span class=\"comment\">//排序</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"built_in\">list</span>&lt;Person&gt;::iterator it = L.<span class=\"built_in\">begin</span>(); it != L.<span class=\"built_in\">end</span>(); it++) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"姓名： \"</span> &lt;&lt; it-&gt;m_Name &lt;&lt; <span class=\"string\">\" 年龄： \"</span> &lt;&lt; it-&gt;m_Age </span><br><span class=\"line\">              &lt;&lt; <span class=\"string\">\" 身高： \"</span> &lt;&lt; it-&gt;m_Height &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\ttest01();</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>总结：</p>\n<ul>\n<li>对于自定义数据类型，必须要指定排序规则，否则编译器不知道如何进行排序</li>\n</ul>\n<ul>\n<li>高级排序只是在排序规则上再进行一次逻辑规则制定，并不复杂</li>\n</ul>\n<h3 id=\"3-8-set-multiset-容器\"><a href=\"#3-8-set-multiset-容器\" class=\"headerlink\" title=\"3.8 set/ multiset 容器\"></a>3.8 set/ multiset 容器</h3><h4 id=\"3-8-1-set基本概念\"><a href=\"#3-8-1-set基本概念\" class=\"headerlink\" title=\"3.8.1 set基本概念\"></a>3.8.1 set基本概念</h4><p><strong>简介：</strong></p>\n<ul>\n<li>所有元素都会在插入时自动被排序</li>\n</ul>\n<p><strong>本质：</strong></p>\n<ul>\n<li>set/multiset属于<strong>关联式容器</strong>，底层结构是用<strong>二叉树</strong>实现。</li>\n</ul>\n<p><strong>set和multiset区别</strong>：</p>\n<ul>\n<li>set不允许容器中有重复的元素</li>\n<li>multiset允许容器中有重复的元素</li>\n</ul>\n<h4 id=\"3-8-2-set构造和赋值\"><a href=\"#3-8-2-set构造和赋值\" class=\"headerlink\" title=\"3.8.2 set构造和赋值\"></a>3.8.2 set构造和赋值</h4><p>功能描述：创建set容器以及赋值</p>\n<p>构造：</p>\n<ul>\n<li><code>set&lt;T&gt; st;</code>                        //默认构造函数：</li>\n<li><code>set(const set &amp;st);</code>       //拷贝构造函数</li>\n</ul>\n<p>赋值：</p>\n<ul>\n<li><code>set&amp; operator=(const set &amp;st);</code>    //重载等号操作符</li>\n</ul>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;set&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">printSet</span><span class=\"params\">(<span class=\"built_in\">set</span>&lt;<span class=\"keyword\">int</span>&gt; &amp; s)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"built_in\">set</span>&lt;<span class=\"keyword\">int</span>&gt;::iterator it = s.<span class=\"built_in\">begin</span>(); it != s.<span class=\"built_in\">end</span>(); it++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; *it &lt;&lt; <span class=\"string\">\" \"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//构造和赋值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">set</span>&lt;<span class=\"keyword\">int</span>&gt; s1;</span><br><span class=\"line\"></span><br><span class=\"line\">\ts1.insert(<span class=\"number\">10</span>);</span><br><span class=\"line\">\ts1.insert(<span class=\"number\">30</span>);</span><br><span class=\"line\">\ts1.insert(<span class=\"number\">20</span>);</span><br><span class=\"line\">\ts1.insert(<span class=\"number\">40</span>);</span><br><span class=\"line\">\tprintSet(s1);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//拷贝构造</span></span><br><span class=\"line\">\t<span class=\"built_in\">set</span>&lt;<span class=\"keyword\">int</span>&gt;s2(s1);</span><br><span class=\"line\">\tprintSet(s2);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//赋值</span></span><br><span class=\"line\">\t<span class=\"built_in\">set</span>&lt;<span class=\"keyword\">int</span>&gt;s3;</span><br><span class=\"line\">\ts3 = s2;</span><br><span class=\"line\">\tprintSet(s3);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\ttest01();</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>总结：</p>\n<ul>\n<li>set容器插入数据时用insert</li>\n<li>set容器插入数据的数据会自动排序</li>\n</ul>\n<h4 id=\"3-8-3-set大小和交换\"><a href=\"#3-8-3-set大小和交换\" class=\"headerlink\" title=\"3.8.3 set大小和交换\"></a>3.8.3 set大小和交换</h4><p><strong>功能描述：</strong></p>\n<ul>\n<li>统计set容器大小以及交换set容器</li>\n</ul>\n<p><strong>函数原型：</strong></p>\n<ul>\n<li><code>size();</code>          //返回容器中元素的数目</li>\n<li><code>empty();</code>        //判断容器是否为空</li>\n<li><code>swap(st);</code>      //交换两个集合容器</li>\n</ul>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;set&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">printSet</span><span class=\"params\">(<span class=\"built_in\">set</span>&lt;<span class=\"keyword\">int</span>&gt; &amp; s)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"built_in\">set</span>&lt;<span class=\"keyword\">int</span>&gt;::iterator it = s.<span class=\"built_in\">begin</span>(); it != s.<span class=\"built_in\">end</span>(); it++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; *it &lt;&lt; <span class=\"string\">\" \"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//大小</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">set</span>&lt;<span class=\"keyword\">int</span>&gt; s1;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\ts1.insert(<span class=\"number\">10</span>);</span><br><span class=\"line\">\ts1.insert(<span class=\"number\">30</span>);</span><br><span class=\"line\">\ts1.insert(<span class=\"number\">20</span>);</span><br><span class=\"line\">\ts1.insert(<span class=\"number\">40</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (s1.empty())</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"s1为空\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"s1不为空\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"s1的大小为： \"</span> &lt;&lt; s1.<span class=\"built_in\">size</span>() &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//交换</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test02</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">set</span>&lt;<span class=\"keyword\">int</span>&gt; s1;</span><br><span class=\"line\"></span><br><span class=\"line\">\ts1.insert(<span class=\"number\">10</span>);</span><br><span class=\"line\">\ts1.insert(<span class=\"number\">30</span>);</span><br><span class=\"line\">\ts1.insert(<span class=\"number\">20</span>);</span><br><span class=\"line\">\ts1.insert(<span class=\"number\">40</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">set</span>&lt;<span class=\"keyword\">int</span>&gt; s2;</span><br><span class=\"line\"></span><br><span class=\"line\">\ts2.insert(<span class=\"number\">100</span>);</span><br><span class=\"line\">\ts2.insert(<span class=\"number\">300</span>);</span><br><span class=\"line\">\ts2.insert(<span class=\"number\">200</span>);</span><br><span class=\"line\">\ts2.insert(<span class=\"number\">400</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"交换前\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\tprintSet(s1);</span><br><span class=\"line\">\tprintSet(s2);</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"交换后\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\ts1.swap(s2);</span><br><span class=\"line\">\tprintSet(s1);</span><br><span class=\"line\">\tprintSet(s2);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//test01();</span></span><br><span class=\"line\"></span><br><span class=\"line\">\ttest02();</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>总结：</p>\n<ul>\n<li>统计大小   — size</li>\n<li>判断是否为空   — empty</li>\n<li>交换容器   — swap</li>\n</ul>\n<h4 id=\"3-8-4-set插入和删除\"><a href=\"#3-8-4-set插入和删除\" class=\"headerlink\" title=\"3.8.4 set插入和删除\"></a>3.8.4 set插入和删除</h4><p><strong>功能描述：</strong></p>\n<ul>\n<li>set容器进行插入数据和删除数据</li>\n</ul>\n<p><strong>函数原型：</strong></p>\n<ul>\n<li><code>insert(elem);</code>           //在容器中插入元素。</li>\n<li><code>clear();</code>                    //清除所有元素</li>\n<li><code>erase(pos);</code>              //删除pos迭代器所指的元素，返回下一个元素的迭代器。</li>\n<li><code>erase(beg, end);</code>    //删除区间[beg,end)的所有元素 ，返回下一个元素的迭代器。</li>\n<li><code>erase(elem);</code>            //删除容器中值为elem的元素。</li>\n</ul>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;set&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">printSet</span><span class=\"params\">(<span class=\"built_in\">set</span>&lt;<span class=\"keyword\">int</span>&gt; &amp; s)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"built_in\">set</span>&lt;<span class=\"keyword\">int</span>&gt;::iterator it = s.<span class=\"built_in\">begin</span>(); it != s.<span class=\"built_in\">end</span>(); it++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; *it &lt;&lt; <span class=\"string\">\" \"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//插入和删除</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">set</span>&lt;<span class=\"keyword\">int</span>&gt; s1;</span><br><span class=\"line\">\t<span class=\"comment\">//插入</span></span><br><span class=\"line\">\ts1.insert(<span class=\"number\">10</span>);</span><br><span class=\"line\">\ts1.insert(<span class=\"number\">30</span>);</span><br><span class=\"line\">\ts1.insert(<span class=\"number\">20</span>);</span><br><span class=\"line\">\ts1.insert(<span class=\"number\">40</span>);</span><br><span class=\"line\">\tprintSet(s1);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//删除</span></span><br><span class=\"line\">\ts1.erase(s1.<span class=\"built_in\">begin</span>());</span><br><span class=\"line\">\tprintSet(s1);</span><br><span class=\"line\"></span><br><span class=\"line\">\ts1.erase(<span class=\"number\">30</span>);</span><br><span class=\"line\">\tprintSet(s1);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//清空</span></span><br><span class=\"line\">\t<span class=\"comment\">//s1.erase(s1.begin(), s1.end());</span></span><br><span class=\"line\">\ts1.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">\tprintSet(s1);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\ttest01();</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>总结：</p>\n<ul>\n<li>插入   — insert</li>\n<li>删除   — erase</li>\n<li>清空   — clear</li>\n</ul>\n<h4 id=\"3-8-5-set查找和统计\"><a href=\"#3-8-5-set查找和统计\" class=\"headerlink\" title=\"3.8.5 set查找和统计\"></a>3.8.5 set查找和统计</h4><p><strong>功能描述：</strong></p>\n<ul>\n<li>对set容器进行查找数据以及统计数据</li>\n</ul>\n<p><strong>函数原型：</strong></p>\n<ul>\n<li><code>find(key);</code>                  //查找key是否存在,若存在，返回该键的元素的迭代器；若不存在，返回set.end();</li>\n<li><code>count(key);</code>                //统计key的元素个数</li>\n</ul>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;set&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//查找和统计</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">set</span>&lt;<span class=\"keyword\">int</span>&gt; s1;</span><br><span class=\"line\">\t<span class=\"comment\">//插入</span></span><br><span class=\"line\">\ts1.insert(<span class=\"number\">10</span>);</span><br><span class=\"line\">\ts1.insert(<span class=\"number\">30</span>);</span><br><span class=\"line\">\ts1.insert(<span class=\"number\">20</span>);</span><br><span class=\"line\">\ts1.insert(<span class=\"number\">40</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//查找</span></span><br><span class=\"line\">\t<span class=\"built_in\">set</span>&lt;<span class=\"keyword\">int</span>&gt;::iterator pos = s1.<span class=\"built_in\">find</span>(<span class=\"number\">30</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (pos != s1.<span class=\"built_in\">end</span>())</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"找到了元素 ： \"</span> &lt;&lt; *pos &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"未找到元素\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//统计</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> num = s1.count(<span class=\"number\">30</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"num = \"</span> &lt;&lt; num &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\ttest01();</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>总结：</p>\n<ul>\n<li>查找   —  find    （返回的是迭代器）</li>\n<li>统计   —  count  （对于set，结果为0或者1）</li>\n</ul>\n<h4 id=\"3-8-6-set和multiset区别\"><a href=\"#3-8-6-set和multiset区别\" class=\"headerlink\" title=\"3.8.6 set和multiset区别\"></a>3.8.6 set和multiset区别</h4><p><strong>学习目标：</strong></p>\n<ul>\n<li>掌握set和multiset的区别</li>\n</ul>\n<p><strong>区别：</strong></p>\n<ul>\n<li>set不可以插入重复数据，而multiset可以</li>\n<li>set插入数据的同时会返回插入结果，表示插入是否成功</li>\n<li>multiset不会检测数据，因此可以插入重复数据</li>\n</ul>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;set&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//set和multiset区别</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">set</span>&lt;<span class=\"keyword\">int</span>&gt; s;</span><br><span class=\"line\">\tpair&lt;<span class=\"built_in\">set</span>&lt;<span class=\"keyword\">int</span>&gt;::iterator, <span class=\"keyword\">bool</span>&gt;  ret = s.insert(<span class=\"number\">10</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (ret.second) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"第一次插入成功!\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"第一次插入失败!\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tret = s.insert(<span class=\"number\">10</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (ret.second) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"第二次插入成功!\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"第二次插入失败!\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">\t<span class=\"comment\">//multiset</span></span><br><span class=\"line\">\t<span class=\"built_in\">multiset</span>&lt;<span class=\"keyword\">int</span>&gt; ms;</span><br><span class=\"line\">\tms.insert(<span class=\"number\">10</span>);</span><br><span class=\"line\">\tms.insert(<span class=\"number\">10</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"built_in\">multiset</span>&lt;<span class=\"keyword\">int</span>&gt;::iterator it = ms.<span class=\"built_in\">begin</span>(); it != ms.<span class=\"built_in\">end</span>(); it++) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; *it &lt;&lt; <span class=\"string\">\" \"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\ttest01();</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>总结：</p>\n<ul>\n<li>如果不允许插入重复数据可以利用set</li>\n<li>如果需要插入重复数据利用multiset</li>\n</ul>\n<h4 id=\"3-8-7-pair对组创建\"><a href=\"#3-8-7-pair对组创建\" class=\"headerlink\" title=\"3.8.7 pair对组创建\"></a>3.8.7 pair对组创建</h4><p><strong>功能描述：</strong></p>\n<ul>\n<li>成对出现的数据，利用对组可以返回两个数据</li>\n</ul>\n<p><strong>两种创建方式：</strong></p>\n<ul>\n<li><code>pair&lt;type, type&gt; p ( value1, value2 );</code></li>\n<li><code>pair&lt;type, type&gt; p = make_pair( value1, value2 );</code></li>\n</ul>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//对组创建</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tpair&lt;string, int&gt; p(string(\"Tom\"), 20);</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"姓名： \"</span> &lt;&lt;  p.first &lt;&lt; <span class=\"string\">\" 年龄： \"</span> &lt;&lt; p.second &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpair&lt;<span class=\"built_in\">string</span>, <span class=\"keyword\">int</span>&gt; p2 = make_pair(<span class=\"string\">\"Jerry\"</span>, <span class=\"number\">10</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"姓名： \"</span> &lt;&lt; p2.first &lt;&lt; <span class=\"string\">\" 年龄： \"</span> &lt;&lt; p2.second &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\ttest01();</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>总结：</p>\n<p>两种方式都可以创建对组，记住一种即可</p>\n<h4 id=\"3-8-8-set容器排序\"><a href=\"#3-8-8-set容器排序\" class=\"headerlink\" title=\"3.8.8 set容器排序\"></a>3.8.8 set容器排序</h4><p>学习目标：</p>\n<ul>\n<li>set容器默认排序规则为从小到大，掌握如何改变排序规则</li>\n</ul>\n<p>主要技术点：</p>\n<ul>\n<li>利用仿函数，可以改变排序规则</li>\n</ul>\n<p><strong>示例一</strong>   set存放内置数据类型</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;set&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyCompare</span> </span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">operator</span><span class=\"params\">()</span><span class=\"params\">(<span class=\"keyword\">int</span> v1, <span class=\"keyword\">int</span> v2)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> v1 &gt; v2;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span> </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;    </span><br><span class=\"line\">\t<span class=\"built_in\">set</span>&lt;<span class=\"keyword\">int</span>&gt; s1;</span><br><span class=\"line\">\ts1.insert(<span class=\"number\">10</span>);</span><br><span class=\"line\">\ts1.insert(<span class=\"number\">40</span>);</span><br><span class=\"line\">\ts1.insert(<span class=\"number\">20</span>);</span><br><span class=\"line\">\ts1.insert(<span class=\"number\">30</span>);</span><br><span class=\"line\">\ts1.insert(<span class=\"number\">50</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//默认从小到大</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"built_in\">set</span>&lt;<span class=\"keyword\">int</span>&gt;::iterator it = s1.<span class=\"built_in\">begin</span>(); it != s1.<span class=\"built_in\">end</span>(); it++) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; *it &lt;&lt; <span class=\"string\">\" \"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//指定排序规则</span></span><br><span class=\"line\">\t<span class=\"built_in\">set</span>&lt;<span class=\"keyword\">int</span>,MyCompare&gt; s2;</span><br><span class=\"line\">\ts2.insert(<span class=\"number\">10</span>);</span><br><span class=\"line\">\ts2.insert(<span class=\"number\">40</span>);</span><br><span class=\"line\">\ts2.insert(<span class=\"number\">20</span>);</span><br><span class=\"line\">\ts2.insert(<span class=\"number\">30</span>);</span><br><span class=\"line\">\ts2.insert(<span class=\"number\">50</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"built_in\">set</span>&lt;<span class=\"keyword\">int</span>, MyCompare&gt;::iterator it = s2.<span class=\"built_in\">begin</span>(); it != s2.<span class=\"built_in\">end</span>(); it++) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; *it &lt;&lt; <span class=\"string\">\" \"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\ttest01();</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>总结：利用仿函数可以指定set容器的排序规则</p>\n<p><strong>示例二</strong> set存放自定义数据类型</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;set&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\tPerson(<span class=\"built_in\">string</span> name, <span class=\"keyword\">int</span> age)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>-&gt;m_Name = name;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>-&gt;m_Age = age;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">string</span> m_Name;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> m_Age;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">comparePerson</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">operator</span><span class=\"params\">()</span><span class=\"params\">(<span class=\"keyword\">const</span> Person&amp; p1, <span class=\"keyword\">const</span> Person &amp;p2)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//按照年龄进行排序  降序</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> p1.m_Age &gt; p2.m_Age;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">set</span>&lt;Person, comparePerson&gt; s;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\">Person <span class=\"title\">p1</span><span class=\"params\">(<span class=\"string\">\"刘备\"</span>, <span class=\"number\">23</span>)</span></span>;</span><br><span class=\"line\">\t<span class=\"function\">Person <span class=\"title\">p2</span><span class=\"params\">(<span class=\"string\">\"关羽\"</span>, <span class=\"number\">27</span>)</span></span>;</span><br><span class=\"line\">\t<span class=\"function\">Person <span class=\"title\">p3</span><span class=\"params\">(<span class=\"string\">\"张飞\"</span>, <span class=\"number\">25</span>)</span></span>;</span><br><span class=\"line\">\t<span class=\"function\">Person <span class=\"title\">p4</span><span class=\"params\">(<span class=\"string\">\"赵云\"</span>, <span class=\"number\">21</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\ts.insert(p1);</span><br><span class=\"line\">\ts.insert(p2);</span><br><span class=\"line\">\ts.insert(p3);</span><br><span class=\"line\">\ts.insert(p4);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"built_in\">set</span>&lt;Person, comparePerson&gt;::iterator it = s.<span class=\"built_in\">begin</span>(); it != s.<span class=\"built_in\">end</span>(); it++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"姓名： \"</span> &lt;&lt; it-&gt;m_Name &lt;&lt; <span class=\"string\">\" 年龄： \"</span> &lt;&lt; it-&gt;m_Age &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\ttest01();</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>总结：</p>\n<p>对于自定义数据类型，set必须指定排序规则才可以插入数据</p>\n<h3 id=\"3-9-map-multimap容器\"><a href=\"#3-9-map-multimap容器\" class=\"headerlink\" title=\"3.9 map/ multimap容器\"></a>3.9 map/ multimap容器</h3><h4 id=\"3-9-1-map基本概念\"><a href=\"#3-9-1-map基本概念\" class=\"headerlink\" title=\"3.9.1 map基本概念\"></a>3.9.1 map基本概念</h4><p><strong>简介：</strong></p>\n<ul>\n<li>map中所有元素都是pair</li>\n<li>pair中第一个元素为key（键值），起到索引作用，第二个元素为value（实值）</li>\n<li>所有元素都会根据元素的键值自动排序</li>\n</ul>\n<p><strong>本质：</strong></p>\n<ul>\n<li>map/multimap属于<strong>关联式容器</strong>，底层结构是用二叉树实现。</li>\n</ul>\n<p><strong>优点：</strong></p>\n<ul>\n<li>可以根据key值快速找到value值</li>\n</ul>\n<p>map和multimap<strong>区别</strong>：</p>\n<ul>\n<li>map不允许容器中有重复key值元素</li>\n<li>multimap允许容器中有重复key值元素</li>\n</ul>\n<h4 id=\"3-9-2-map构造和赋值\"><a href=\"#3-9-2-map构造和赋值\" class=\"headerlink\" title=\"3.9.2  map构造和赋值\"></a>3.9.2  map构造和赋值</h4><p><strong>功能描述：</strong></p>\n<ul>\n<li>对map容器进行构造和赋值操作</li>\n</ul>\n<p><strong>函数原型：</strong></p>\n<p><strong>构造：</strong></p>\n<ul>\n<li><code>map&lt;T1, T2&gt; mp;</code>                     //map默认构造函数: </li>\n<li><code>map(const map &amp;mp);</code>             //拷贝构造函数</li>\n</ul>\n<p><strong>赋值：</strong></p>\n<ul>\n<li><code>map&amp; operator=(const map &amp;mp);</code>    //重载等号操作符</li>\n</ul>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;map&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">printMap</span><span class=\"params\">(<span class=\"built_in\">map</span>&lt;<span class=\"keyword\">int</span>,<span class=\"keyword\">int</span>&gt;&amp;m)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"built_in\">map</span>&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt;::iterator it = m.<span class=\"built_in\">begin</span>(); it != m.<span class=\"built_in\">end</span>(); it++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"key = \"</span> &lt;&lt; it-&gt;first &lt;&lt; <span class=\"string\">\" value = \"</span> &lt;&lt; it-&gt;second &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">map</span>&lt;<span class=\"keyword\">int</span>,<span class=\"keyword\">int</span>&gt;m; <span class=\"comment\">//默认构造</span></span><br><span class=\"line\">\tm.insert(pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt;(<span class=\"number\">1</span>, <span class=\"number\">10</span>));</span><br><span class=\"line\">\tm.insert(pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt;(<span class=\"number\">2</span>, <span class=\"number\">20</span>));</span><br><span class=\"line\">\tm.insert(pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt;(<span class=\"number\">3</span>, <span class=\"number\">30</span>));</span><br><span class=\"line\">\tprintMap(m);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">map</span>&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt;m2(m); <span class=\"comment\">//拷贝构造</span></span><br><span class=\"line\">\tprintMap(m2);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">map</span>&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt;m3;</span><br><span class=\"line\">\tm3 = m2; <span class=\"comment\">//赋值</span></span><br><span class=\"line\">\tprintMap(m3);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\ttest01();</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>总结：map中所有元素都是成对出现，插入数据时候要使用对组</p>\n<h4 id=\"3-9-3-map大小和交换\"><a href=\"#3-9-3-map大小和交换\" class=\"headerlink\" title=\"3.9.3 map大小和交换\"></a>3.9.3 map大小和交换</h4><p><strong>功能描述：</strong></p>\n<ul>\n<li>统计map容器大小以及交换map容器</li>\n</ul>\n<p>函数原型：</p>\n<ul>\n<li><code>size();</code>          //返回容器中元素的数目</li>\n<li><code>empty();</code>        //判断容器是否为空</li>\n<li><code>swap(st);</code>      //交换两个集合容器</li>\n</ul>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;map&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">printMap</span><span class=\"params\">(<span class=\"built_in\">map</span>&lt;<span class=\"keyword\">int</span>,<span class=\"keyword\">int</span>&gt;&amp;m)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"built_in\">map</span>&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt;::iterator it = m.<span class=\"built_in\">begin</span>(); it != m.<span class=\"built_in\">end</span>(); it++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"key = \"</span> &lt;&lt; it-&gt;first &lt;&lt; <span class=\"string\">\" value = \"</span> &lt;&lt; it-&gt;second &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">map</span>&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt;m;</span><br><span class=\"line\">\tm.insert(pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt;(<span class=\"number\">1</span>, <span class=\"number\">10</span>));</span><br><span class=\"line\">\tm.insert(pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt;(<span class=\"number\">2</span>, <span class=\"number\">20</span>));</span><br><span class=\"line\">\tm.insert(pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt;(<span class=\"number\">3</span>, <span class=\"number\">30</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (m.empty())</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"m为空\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"m不为空\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"m的大小为： \"</span> &lt;&lt; m.<span class=\"built_in\">size</span>() &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//交换</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test02</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">map</span>&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt;m;</span><br><span class=\"line\">\tm.insert(pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt;(<span class=\"number\">1</span>, <span class=\"number\">10</span>));</span><br><span class=\"line\">\tm.insert(pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt;(<span class=\"number\">2</span>, <span class=\"number\">20</span>));</span><br><span class=\"line\">\tm.insert(pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt;(<span class=\"number\">3</span>, <span class=\"number\">30</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">map</span>&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt;m2;</span><br><span class=\"line\">\tm2.insert(pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt;(<span class=\"number\">4</span>, <span class=\"number\">100</span>));</span><br><span class=\"line\">\tm2.insert(pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt;(<span class=\"number\">5</span>, <span class=\"number\">200</span>));</span><br><span class=\"line\">\tm2.insert(pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt;(<span class=\"number\">6</span>, <span class=\"number\">300</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"交换前\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\tprintMap(m);</span><br><span class=\"line\">\tprintMap(m2);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"交换后\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\tm.swap(m2);</span><br><span class=\"line\">\tprintMap(m);</span><br><span class=\"line\">\tprintMap(m2);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\ttest01();</span><br><span class=\"line\"></span><br><span class=\"line\">\ttest02();</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>总结：</p>\n<ul>\n<li>统计大小   — size</li>\n<li>判断是否为空   — empty</li>\n<li>交换容器   — swap</li>\n</ul>\n<h4 id=\"3-9-4-map插入和删除\"><a href=\"#3-9-4-map插入和删除\" class=\"headerlink\" title=\"3.9.4 map插入和删除\"></a>3.9.4 map插入和删除</h4><p><strong>功能描述：</strong></p>\n<ul>\n<li>map容器进行插入数据和删除数据</li>\n</ul>\n<p><strong>函数原型：</strong></p>\n<ul>\n<li><code>insert(elem);</code>           //在容器中插入元素。</li>\n<li><code>clear();</code>                    //清除所有元素</li>\n<li><code>erase(pos);</code>              //删除pos迭代器所指的元素，返回下一个元素的迭代器。</li>\n<li><code>erase(beg, end);</code>    //删除区间[beg,end)的所有元素 ，返回下一个元素的迭代器。</li>\n<li><code>erase(key);</code>            //删除容器中值为key的元素。</li>\n</ul>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;map&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">printMap</span><span class=\"params\">(<span class=\"built_in\">map</span>&lt;<span class=\"keyword\">int</span>,<span class=\"keyword\">int</span>&gt;&amp;m)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"built_in\">map</span>&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt;::iterator it = m.<span class=\"built_in\">begin</span>(); it != m.<span class=\"built_in\">end</span>(); it++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"key = \"</span> &lt;&lt; it-&gt;first &lt;&lt; <span class=\"string\">\" value = \"</span> &lt;&lt; it-&gt;second &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//插入</span></span><br><span class=\"line\">\t<span class=\"built_in\">map</span>&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt; m;</span><br><span class=\"line\">\t<span class=\"comment\">//第一种插入方式</span></span><br><span class=\"line\">\tm.insert(pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt;(<span class=\"number\">1</span>, <span class=\"number\">10</span>));</span><br><span class=\"line\">\t<span class=\"comment\">//第二种插入方式</span></span><br><span class=\"line\">\tm.insert(make_pair(<span class=\"number\">2</span>, <span class=\"number\">20</span>));</span><br><span class=\"line\">\t<span class=\"comment\">//第三种插入方式</span></span><br><span class=\"line\">\tm.insert(<span class=\"built_in\">map</span>&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt;::value_type(<span class=\"number\">3</span>, <span class=\"number\">30</span>));</span><br><span class=\"line\">\t<span class=\"comment\">//第四种插入方式</span></span><br><span class=\"line\">\tm[<span class=\"number\">4</span>] = <span class=\"number\">40</span>; </span><br><span class=\"line\">\tprintMap(m);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//删除</span></span><br><span class=\"line\">\tm.erase(m.<span class=\"built_in\">begin</span>());</span><br><span class=\"line\">\tprintMap(m);</span><br><span class=\"line\"></span><br><span class=\"line\">\tm.erase(<span class=\"number\">3</span>);</span><br><span class=\"line\">\tprintMap(m);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//清空</span></span><br><span class=\"line\">\tm.erase(m.<span class=\"built_in\">begin</span>(),m.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">\tm.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">\tprintMap(m);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\ttest01();</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>总结：</p>\n<ul>\n<li>map插入方式很多，记住其一即可</li>\n</ul>\n<ul>\n<li>插入   — insert </li>\n<li>删除   — erase</li>\n<li>清空   — clear</li>\n</ul>\n<h4 id=\"3-9-5-map查找和统计\"><a href=\"#3-9-5-map查找和统计\" class=\"headerlink\" title=\"3.9.5 map查找和统计\"></a>3.9.5 map查找和统计</h4><p><strong>功能描述：</strong></p>\n<ul>\n<li>对map容器进行查找数据以及统计数据</li>\n</ul>\n<p><strong>函数原型：</strong></p>\n<ul>\n<li><code>find(key);</code>                  //查找key是否存在,若存在，返回该键的元素的迭代器；若不存在，返回set.end();</li>\n<li><code>count(key);</code>                //统计key的元素个数</li>\n</ul>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;map&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//查找和统计</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">map</span>&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt;m; </span><br><span class=\"line\">\tm.insert(pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt;(<span class=\"number\">1</span>, <span class=\"number\">10</span>));</span><br><span class=\"line\">\tm.insert(pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt;(<span class=\"number\">2</span>, <span class=\"number\">20</span>));</span><br><span class=\"line\">\tm.insert(pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt;(<span class=\"number\">3</span>, <span class=\"number\">30</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//查找</span></span><br><span class=\"line\">\t<span class=\"built_in\">map</span>&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt;::iterator pos = m.<span class=\"built_in\">find</span>(<span class=\"number\">3</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (pos != m.<span class=\"built_in\">end</span>())</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"找到了元素 key = \"</span> &lt;&lt; (*pos).first &lt;&lt; <span class=\"string\">\" value = \"</span> &lt;&lt; (*pos).second &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"未找到元素\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//统计</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> num = m.count(<span class=\"number\">3</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"num = \"</span> &lt;&lt; num &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\ttest01();</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>总结：</p>\n<ul>\n<li>查找   —  find    （返回的是迭代器）</li>\n<li>统计   —  count  （对于map，结果为0或者1）</li>\n</ul>\n<h4 id=\"3-9-6-map容器排序\"><a href=\"#3-9-6-map容器排序\" class=\"headerlink\" title=\"3.9.6 map容器排序\"></a>3.9.6 map容器排序</h4><p><strong>学习目标：</strong></p>\n<ul>\n<li>map容器默认排序规则为 按照key值进行 从小到大排序，掌握如何改变排序规则</li>\n</ul>\n<p><strong>主要技术点:</strong></p>\n<ul>\n<li>利用仿函数，可以改变排序规则</li>\n</ul>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;map&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyCompare</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">operator</span><span class=\"params\">()</span><span class=\"params\">(<span class=\"keyword\">int</span> v1, <span class=\"keyword\">int</span> v2)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> v1 &gt; v2;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span> </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//默认从小到大排序</span></span><br><span class=\"line\">\t<span class=\"comment\">//利用仿函数实现从大到小排序</span></span><br><span class=\"line\">\t<span class=\"built_in\">map</span>&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>, MyCompare&gt; m;</span><br><span class=\"line\"></span><br><span class=\"line\">\tm.insert(make_pair(<span class=\"number\">1</span>, <span class=\"number\">10</span>));</span><br><span class=\"line\">\tm.insert(make_pair(<span class=\"number\">2</span>, <span class=\"number\">20</span>));</span><br><span class=\"line\">\tm.insert(make_pair(<span class=\"number\">3</span>, <span class=\"number\">30</span>));</span><br><span class=\"line\">\tm.insert(make_pair(<span class=\"number\">4</span>, <span class=\"number\">40</span>));</span><br><span class=\"line\">\tm.insert(make_pair(<span class=\"number\">5</span>, <span class=\"number\">50</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"built_in\">map</span>&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>, MyCompare&gt;::iterator it = m.<span class=\"built_in\">begin</span>(); it != m.<span class=\"built_in\">end</span>(); it++) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"key:\"</span> &lt;&lt; it-&gt;first &lt;&lt; <span class=\"string\">\" value:\"</span> &lt;&lt; it-&gt;second &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\ttest01();</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>总结：</p>\n<ul>\n<li>利用仿函数可以指定map容器的排序规则</li>\n<li>对于自定义数据类型，map必须要指定排序规则,同set容器</li>\n</ul>\n<h3 id=\"3-10-案例-员工分组\"><a href=\"#3-10-案例-员工分组\" class=\"headerlink\" title=\"3.10 案例-员工分组\"></a>3.10 案例-员工分组</h3><h4 id=\"3-10-1-案例描述\"><a href=\"#3-10-1-案例描述\" class=\"headerlink\" title=\"3.10.1 案例描述\"></a>3.10.1 案例描述</h4><ul>\n<li>公司今天招聘了10个员工（ABCDEFGHIJ），10名员工进入公司之后，需要指派员工在那个部门工作</li>\n<li>员工信息有: 姓名  工资组成；部门分为：策划、美术、研发</li>\n<li>随机给10名员工分配部门和工资</li>\n<li>通过multimap进行信息的插入  key(部门编号) value(员工)</li>\n<li>分部门显示员工信息</li>\n</ul>\n<h4 id=\"3-10-2-实现步骤\"><a href=\"#3-10-2-实现步骤\" class=\"headerlink\" title=\"3.10.2 实现步骤\"></a>3.10.2 实现步骤</h4><ol>\n<li>创建10名员工，放到vector中</li>\n<li>遍历vector容器，取出每个员工，进行随机分组</li>\n<li>分组后，将员工部门编号作为key，具体员工作为value，放入到multimap容器中</li>\n<li>分部门显示员工信息</li>\n</ol>\n<p><strong>案例代码：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;ctime&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">- 公司今天招聘了10个员工（ABCDEFGHIJ），10名员工进入公司之后，需要指派员工在那个部门工作</span></span><br><span class=\"line\"><span class=\"comment\">- 员工信息有: 姓名  工资组成；部门分为：策划、美术、研发</span></span><br><span class=\"line\"><span class=\"comment\">- 随机给10名员工分配部门和工资</span></span><br><span class=\"line\"><span class=\"comment\">- 通过multimap进行信息的插入  key(部门编号) value(员工)</span></span><br><span class=\"line\"><span class=\"comment\">- 分部门显示员工信息</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> CEHUA  0</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MEISHU 1</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> YANFA  2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Worker</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">string</span> m_Name;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> m_Salary;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">createWorker</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;Worker&gt;&amp;v)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">string</span> nameSeed = <span class=\"string\">\"ABCDEFGHIJ\"</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tWorker worker;</span><br><span class=\"line\">\t\tworker.m_Name = <span class=\"string\">\"员工\"</span>;</span><br><span class=\"line\">\t\tworker.m_Name += nameSeed[i];</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tworker.m_Salary = rand() % <span class=\"number\">10000</span> + <span class=\"number\">10000</span>; <span class=\"comment\">// 10000 ~ 19999</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//将员工放入到容器中</span></span><br><span class=\"line\">\t\tv.push_back(worker);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//员工分组</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setGroup</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;Worker&gt;&amp;v,<span class=\"built_in\">multimap</span>&lt;<span class=\"keyword\">int</span>,Worker&gt;&amp;m)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"built_in\">vector</span>&lt;Worker&gt;::iterator it = v.<span class=\"built_in\">begin</span>(); it != v.<span class=\"built_in\">end</span>(); it++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//产生随机部门编号</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> deptId = rand() % <span class=\"number\">3</span>; <span class=\"comment\">// 0 1 2 </span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">//将员工插入到分组中</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//key部门编号，value具体员工</span></span><br><span class=\"line\">\t\tm.insert(make_pair(deptId, *it));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">showWorkerByGourp</span><span class=\"params\">(<span class=\"built_in\">multimap</span>&lt;<span class=\"keyword\">int</span>,Worker&gt;&amp;m)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 0  A  B  C   1  D  E   2  F G ...</span></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"策划部门：\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">multimap</span>&lt;<span class=\"keyword\">int</span>,Worker&gt;::iterator pos = m.<span class=\"built_in\">find</span>(CEHUA);</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> count = m.count(CEHUA); <span class=\"comment\">// 统计具体人数</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> index = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (; pos != m.<span class=\"built_in\">end</span>() &amp;&amp; index &lt; count; pos++ , index++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"姓名： \"</span> &lt;&lt; pos-&gt;second.m_Name &lt;&lt; <span class=\"string\">\" 工资： \"</span> &lt;&lt; pos-&gt;second.m_Salary &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"----------------------\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"美术部门： \"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\tpos = m.<span class=\"built_in\">find</span>(MEISHU);</span><br><span class=\"line\">\tcount = m.count(MEISHU); <span class=\"comment\">// 统计具体人数</span></span><br><span class=\"line\">\tindex = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (; pos != m.<span class=\"built_in\">end</span>() &amp;&amp; index &lt; count; pos++, index++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"姓名： \"</span> &lt;&lt; pos-&gt;second.m_Name &lt;&lt; <span class=\"string\">\" 工资： \"</span> &lt;&lt; pos-&gt;second.m_Salary &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"----------------------\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"研发部门： \"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\tpos = m.<span class=\"built_in\">find</span>(YANFA);</span><br><span class=\"line\">\tcount = m.count(YANFA); <span class=\"comment\">// 统计具体人数</span></span><br><span class=\"line\">\tindex = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (; pos != m.<span class=\"built_in\">end</span>() &amp;&amp; index &lt; count; pos++, index++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"姓名： \"</span> &lt;&lt; pos-&gt;second.m_Name &lt;&lt; <span class=\"string\">\" 工资： \"</span> &lt;&lt; pos-&gt;second.m_Salary &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tsrand((<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span>)time(<span class=\"literal\">NULL</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//1、创建员工</span></span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;Worker&gt;vWorker;</span><br><span class=\"line\">\tcreateWorker(vWorker);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//2、员工分组</span></span><br><span class=\"line\">\t<span class=\"built_in\">multimap</span>&lt;<span class=\"keyword\">int</span>, Worker&gt;mWorker;</span><br><span class=\"line\">\tsetGroup(vWorker, mWorker);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//3、分组显示员工</span></span><br><span class=\"line\">\tshowWorkerByGourp(mWorker);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">////测试</span></span><br><span class=\"line\">\t<span class=\"comment\">//for (vector&lt;Worker&gt;::iterator it = vWorker.begin(); it != vWorker.end(); it++)</span></span><br><span class=\"line\">\t<span class=\"comment\">//&#123;</span></span><br><span class=\"line\">\t<span class=\"comment\">//\tcout &lt;&lt; \"姓名： \" &lt;&lt; it-&gt;m_Name &lt;&lt; \" 工资： \" &lt;&lt; it-&gt;m_Salary &lt;&lt; endl;</span></span><br><span class=\"line\">\t<span class=\"comment\">//&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>总结：</p>\n<ul>\n<li>当数据以键值对形式存在，可以考虑用map 或 multimap</li>\n</ul>\n<h2 id=\"4-STL-函数对象\"><a href=\"#4-STL-函数对象\" class=\"headerlink\" title=\"4 STL- 函数对象\"></a>4 STL- 函数对象</h2><h3 id=\"4-1-函数对象\"><a href=\"#4-1-函数对象\" class=\"headerlink\" title=\"4.1 函数对象\"></a>4.1 函数对象</h3><h4 id=\"4-1-1-函数对象概念\"><a href=\"#4-1-1-函数对象概念\" class=\"headerlink\" title=\"4.1.1 函数对象概念\"></a>4.1.1 函数对象概念</h4><p><strong>概念：</strong></p>\n<ul>\n<li>重载<strong>函数调用操作符</strong>的类，其对象常称为<strong>函数对象</strong></li>\n<li><strong>函数对象</strong>使用重载的()时，行为类似函数调用，也叫<strong>仿函数</strong></li>\n</ul>\n<p><strong>本质：</strong></p>\n<p>函数对象(仿函数)是一个<strong>类</strong>，不是一个函数</p>\n<h4 id=\"4-1-2-函数对象使用\"><a href=\"#4-1-2-函数对象使用\" class=\"headerlink\" title=\"4.1.2  函数对象使用\"></a>4.1.2  函数对象使用</h4><p><strong>特点：</strong></p>\n<ul>\n<li>函数对象在使用时，可以像普通函数那样调用, 可以有参数，可以有返回值</li>\n<li>函数对象超出普通函数的概念，函数对象可以有自己的状态</li>\n<li>函数对象可以作为参数传递</li>\n</ul>\n<p><strong>示例:</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//1、函数对象在使用时，可以像普通函数那样调用, 可以有参数，可以有返回值</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyAdd</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> :</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">operator</span><span class=\"params\">()</span><span class=\"params\">(<span class=\"keyword\">int</span> v1,<span class=\"keyword\">int</span> v2)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> v1 + v2;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tMyAdd myAdd;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; myAdd(<span class=\"number\">10</span>, <span class=\"number\">10</span>) &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//2、函数对象可以有自己的状态</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyPrint</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\tMyPrint()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcount = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">operator</span><span class=\"params\">()</span><span class=\"params\">(<span class=\"built_in\">string</span> test)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; test &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t\tcount++; <span class=\"comment\">//统计使用次数</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> count; <span class=\"comment\">//内部自己的状态</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test02</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tMyPrint myPrint;</span><br><span class=\"line\">\tmyPrint(<span class=\"string\">\"hello world\"</span>);</span><br><span class=\"line\">\tmyPrint(<span class=\"string\">\"hello world\"</span>);</span><br><span class=\"line\">\tmyPrint(<span class=\"string\">\"hello world\"</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"myPrint调用次数为： \"</span> &lt;&lt; myPrint.count &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//3、函数对象可以作为参数传递</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">doPrint</span><span class=\"params\">(MyPrint &amp;mp , <span class=\"built_in\">string</span> test)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tmp(test);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test03</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tMyPrint myPrint;</span><br><span class=\"line\">\tdoPrint(myPrint, <span class=\"string\">\"Hello C++\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//test01();</span></span><br><span class=\"line\">\t<span class=\"comment\">//test02();</span></span><br><span class=\"line\">\ttest03();</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>总结：</p>\n<ul>\n<li>仿函数写法非常灵活，可以作为参数进行传递。</li>\n</ul>\n<h3 id=\"4-2-谓词\"><a href=\"#4-2-谓词\" class=\"headerlink\" title=\"4.2  谓词\"></a>4.2  谓词</h3><h4 id=\"4-2-1-谓词概念\"><a href=\"#4-2-1-谓词概念\" class=\"headerlink\" title=\"4.2.1 谓词概念\"></a>4.2.1 谓词概念</h4><p><strong>概念：</strong></p>\n<ul>\n<li>返回bool类型的仿函数称为<strong>谓词</strong></li>\n<li>如果operator()接受一个参数，那么叫做一元谓词</li>\n<li>如果operator()接受两个参数，那么叫做二元谓词</li>\n</ul>\n<h4 id=\"4-2-2-一元谓词\"><a href=\"#4-2-2-一元谓词\" class=\"headerlink\" title=\"4.2.2 一元谓词\"></a>4.2.2 一元谓词</h4><p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//1.一元谓词</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">GreaterFive</span>&#123;</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">operator</span><span class=\"params\">()</span><span class=\"params\">(<span class=\"keyword\">int</span> val)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> val &gt; <span class=\"number\">5</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; v;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tv.push_back(i);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;::iterator it = find_if(v.<span class=\"built_in\">begin</span>(), v.<span class=\"built_in\">end</span>(), GreaterFive());</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (it == v.<span class=\"built_in\">end</span>()) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"没找到!\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"找到:\"</span> &lt;&lt; *it &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\ttest01();</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>总结：参数只有一个的谓词，称为一元谓词</p>\n<h4 id=\"4-2-3-二元谓词\"><a href=\"#4-2-3-二元谓词\" class=\"headerlink\" title=\"4.2.3 二元谓词\"></a>4.2.3 二元谓词</h4><p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">//二元谓词</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyCompare</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">operator</span><span class=\"params\">()</span><span class=\"params\">(<span class=\"keyword\">int</span> num1, <span class=\"keyword\">int</span> num2)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> num1 &gt; num2;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; v;</span><br><span class=\"line\">\tv.push_back(<span class=\"number\">10</span>);</span><br><span class=\"line\">\tv.push_back(<span class=\"number\">40</span>);</span><br><span class=\"line\">\tv.push_back(<span class=\"number\">20</span>);</span><br><span class=\"line\">\tv.push_back(<span class=\"number\">30</span>);</span><br><span class=\"line\">\tv.push_back(<span class=\"number\">50</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//默认从小到大</span></span><br><span class=\"line\">\tsort(v.<span class=\"built_in\">begin</span>(), v.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;::iterator it = v.<span class=\"built_in\">begin</span>(); it != v.<span class=\"built_in\">end</span>(); it++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; *it &lt;&lt; <span class=\"string\">\" \"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"----------------------------\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//使用函数对象改变算法策略，排序从大到小</span></span><br><span class=\"line\">\tsort(v.<span class=\"built_in\">begin</span>(), v.<span class=\"built_in\">end</span>(), MyCompare());</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;::iterator it = v.<span class=\"built_in\">begin</span>(); it != v.<span class=\"built_in\">end</span>(); it++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; *it &lt;&lt; <span class=\"string\">\" \"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\ttest01();</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>总结：参数只有两个的谓词，称为二元谓词</p>\n<h3 id=\"4-3-内建函数对象\"><a href=\"#4-3-内建函数对象\" class=\"headerlink\" title=\"4.3 内建函数对象\"></a>4.3 内建函数对象</h3><h4 id=\"4-3-1-内建函数对象意义\"><a href=\"#4-3-1-内建函数对象意义\" class=\"headerlink\" title=\"4.3.1 内建函数对象意义\"></a>4.3.1 内建函数对象意义</h4><p><strong>概念：</strong></p>\n<ul>\n<li>STL内建了一些函数对象</li>\n</ul>\n<p><strong>分类:</strong></p>\n<ul>\n<li><p>算术仿函数</p>\n</li>\n<li><p>关系仿函数</p>\n</li>\n<li><p>逻辑仿函数</p>\n</li>\n</ul>\n<p><strong>用法：</strong></p>\n<ul>\n<li>这些仿函数所产生的对象，用法和一般函数完全相同</li>\n<li>使用内建函数对象，需要引入头文件 <code>#include&lt;functional&gt;</code></li>\n</ul>\n<h4 id=\"4-3-2-算术仿函数\"><a href=\"#4-3-2-算术仿函数\" class=\"headerlink\" title=\"4.3.2 算术仿函数\"></a>4.3.2 算术仿函数</h4><p><strong>功能描述：</strong></p>\n<ul>\n<li>实现四则运算</li>\n<li>其中negate是一元运算，其他都是二元运算</li>\n</ul>\n<p><strong>仿函数原型：</strong></p>\n<ul>\n<li><code>template&lt;class T&gt; T plus&lt;T&gt;</code>                //加法仿函数</li>\n<li><code>template&lt;class T&gt; T minus&lt;T&gt;</code>              //减法仿函数</li>\n<li><code>template&lt;class T&gt; T multiplies&lt;T&gt;</code>    //乘法仿函数</li>\n<li><code>template&lt;class T&gt; T divides&lt;T&gt;</code>         //除法仿函数</li>\n<li><code>template&lt;class T&gt; T modulus&lt;T&gt;</code>         //取模仿函数</li>\n<li><code>template&lt;class T&gt; T negate&lt;T&gt;</code>           //取反仿函数</li>\n</ul>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;functional&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">//negate</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tnegate&lt;<span class=\"keyword\">int</span>&gt; n;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; n(<span class=\"number\">50</span>) &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//plus</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test02</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tplus&lt;<span class=\"keyword\">int</span>&gt; p;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; p(<span class=\"number\">10</span>, <span class=\"number\">20</span>) &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\ttest01();</span><br><span class=\"line\">\ttest02();</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>总结：使用内建函数对象时，需要引入头文件 <code>#include &lt;functional&gt;</code></p>\n<h4 id=\"4-3-3-关系仿函数\"><a href=\"#4-3-3-关系仿函数\" class=\"headerlink\" title=\"4.3.3 关系仿函数\"></a>4.3.3 关系仿函数</h4><p><strong>功能描述：</strong></p>\n<ul>\n<li>实现关系对比</li>\n</ul>\n<p><strong>仿函数原型：</strong></p>\n<ul>\n<li><code>template&lt;class T&gt; bool equal_to&lt;T&gt;</code>                    //等于</li>\n<li><code>template&lt;class T&gt; bool not_equal_to&lt;T&gt;</code>            //不等于</li>\n<li><code>template&lt;class T&gt; bool greater&lt;T&gt;</code>                      //大于</li>\n<li><code>template&lt;class T&gt; bool greater_equal&lt;T&gt;</code>          //大于等于</li>\n<li><code>template&lt;class T&gt; bool less&lt;T&gt;</code>                           //小于</li>\n<li><code>template&lt;class T&gt; bool less_equal&lt;T&gt;</code>               //小于等于</li>\n</ul>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;functional&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyCompare</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">operator</span><span class=\"params\">()</span><span class=\"params\">(<span class=\"keyword\">int</span> v1,<span class=\"keyword\">int</span> v2)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> v1 &gt; v2;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; v;</span><br><span class=\"line\"></span><br><span class=\"line\">\tv.push_back(<span class=\"number\">10</span>);</span><br><span class=\"line\">\tv.push_back(<span class=\"number\">30</span>);</span><br><span class=\"line\">\tv.push_back(<span class=\"number\">50</span>);</span><br><span class=\"line\">\tv.push_back(<span class=\"number\">40</span>);</span><br><span class=\"line\">\tv.push_back(<span class=\"number\">20</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;::iterator it = v.<span class=\"built_in\">begin</span>(); it != v.<span class=\"built_in\">end</span>(); it++) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; *it &lt;&lt; <span class=\"string\">\" \"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//自己实现仿函数</span></span><br><span class=\"line\">\t<span class=\"comment\">//sort(v.begin(), v.end(), MyCompare());</span></span><br><span class=\"line\">\t<span class=\"comment\">//STL内建仿函数  大于仿函数</span></span><br><span class=\"line\">\tsort(v.<span class=\"built_in\">begin</span>(), v.<span class=\"built_in\">end</span>(), greater&lt;<span class=\"keyword\">int</span>&gt;());</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;::iterator it = v.<span class=\"built_in\">begin</span>(); it != v.<span class=\"built_in\">end</span>(); it++) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; *it &lt;&lt; <span class=\"string\">\" \"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\ttest01();</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>总结：关系仿函数中最常用的就是greater&lt;&gt;大于</p>\n<h4 id=\"4-3-4-逻辑仿函数\"><a href=\"#4-3-4-逻辑仿函数\" class=\"headerlink\" title=\"4.3.4 逻辑仿函数\"></a>4.3.4 逻辑仿函数</h4><p><strong>功能描述：</strong></p>\n<ul>\n<li>实现逻辑运算</li>\n</ul>\n<p><strong>函数原型：</strong></p>\n<ul>\n<li><code>template&lt;class T&gt; bool logical_and&lt;T&gt;</code>              //逻辑与</li>\n<li><code>template&lt;class T&gt; bool logical_or&lt;T&gt;</code>                //逻辑或</li>\n<li><code>template&lt;class T&gt; bool logical_not&lt;T&gt;</code>              //逻辑非</li>\n</ul>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;functional&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">bool</span>&gt; v;</span><br><span class=\"line\">\tv.push_back(<span class=\"literal\">true</span>);</span><br><span class=\"line\">\tv.push_back(<span class=\"literal\">false</span>);</span><br><span class=\"line\">\tv.push_back(<span class=\"literal\">true</span>);</span><br><span class=\"line\">\tv.push_back(<span class=\"literal\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">bool</span>&gt;::iterator it = v.<span class=\"built_in\">begin</span>();it!= v.<span class=\"built_in\">end</span>();it++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; *it &lt;&lt; <span class=\"string\">\" \"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//逻辑非  将v容器搬运到v2中，并执行逻辑非运算</span></span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">bool</span>&gt; v2;</span><br><span class=\"line\">\tv2.resize(v.<span class=\"built_in\">size</span>());</span><br><span class=\"line\">\ttransform(v.<span class=\"built_in\">begin</span>(), v.<span class=\"built_in\">end</span>(),  v2.<span class=\"built_in\">begin</span>(), logical_not&lt;<span class=\"keyword\">bool</span>&gt;());</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">bool</span>&gt;::iterator it = v2.<span class=\"built_in\">begin</span>(); it != v2.<span class=\"built_in\">end</span>(); it++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; *it &lt;&lt; <span class=\"string\">\" \"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\ttest01();</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>总结：逻辑仿函数实际应用较少，了解即可</p>\n<h2 id=\"5-STL-常用算法\"><a href=\"#5-STL-常用算法\" class=\"headerlink\" title=\"5 STL- 常用算法\"></a>5 STL- 常用算法</h2><p><strong>概述</strong>:</p>\n<ul>\n<li>算法主要是由头文件<code>&lt;algorithm&gt;</code> <code>&lt;functional&gt;</code> <code>&lt;numeric&gt;</code>组成。</li>\n</ul>\n<ul>\n<li><code>&lt;algorithm&gt;</code>是所有STL头文件中最大的一个，范围涉及到比较、 交换、查找、遍历操作、复制、修改等等</li>\n<li><code>&lt;numeric&gt;</code>体积很小，只包括几个在序列上面进行简单数学运算的模板函数</li>\n<li><code>&lt;functional&gt;</code>定义了一些模板类,用以声明函数对象。</li>\n</ul>\n<h3 id=\"5-1-常用遍历算法\"><a href=\"#5-1-常用遍历算法\" class=\"headerlink\" title=\"5.1 常用遍历算法\"></a>5.1 常用遍历算法</h3><p><strong>学习目标：</strong></p>\n<ul>\n<li>掌握常用的遍历算法</li>\n</ul>\n<p><strong>算法简介：</strong></p>\n<ul>\n<li><code>for_each</code>     //遍历容器</li>\n<li><code>transform</code>   //搬运容器到另一个容器中</li>\n</ul>\n<h4 id=\"5-1-1-for-each\"><a href=\"#5-1-1-for-each\" class=\"headerlink\" title=\"5.1.1 for_each\"></a>5.1.1 for_each</h4><p><strong>功能描述：</strong></p>\n<ul>\n<li>实现遍历容器</li>\n</ul>\n<p><strong>函数原型：</strong></p>\n<ul>\n<li><p><code>for_each(iterator beg, iterator end, _func);</code></p>\n<p>// 遍历算法 遍历容器元素</p>\n<p>// beg 开始迭代器</p>\n<p>// end 结束迭代器</p>\n<p>// _func 函数或者函数对象</p>\n</li>\n</ul>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//普通函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print01</span><span class=\"params\">(<span class=\"keyword\">int</span> val)</span> </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; val &lt;&lt; <span class=\"string\">\" \"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//函数对象</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">print02</span> </span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">operator</span><span class=\"params\">()</span><span class=\"params\">(<span class=\"keyword\">int</span> val)</span> </span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; val &lt;&lt; <span class=\"string\">\" \"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//for_each算法基本用法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; v;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) </span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tv.push_back(i);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//遍历算法</span></span><br><span class=\"line\">\tfor_each(v.<span class=\"built_in\">begin</span>(), v.<span class=\"built_in\">end</span>(), print01);</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tfor_each(v.<span class=\"built_in\">begin</span>(), v.<span class=\"built_in\">end</span>(), print02());</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\ttest01();</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>总结：</strong>for_each在实际开发中是最常用遍历算法，需要熟练掌握</p>\n<h4 id=\"5-1-2-transform\"><a href=\"#5-1-2-transform\" class=\"headerlink\" title=\"5.1.2 transform\"></a>5.1.2 transform</h4><p><strong>功能描述：</strong></p>\n<ul>\n<li>搬运容器到另一个容器中</li>\n</ul>\n<p><strong>函数原型：</strong></p>\n<ul>\n<li><code>transform(iterator beg1, iterator end1, iterator beg2, _func);</code></li>\n</ul>\n<p>//beg1 源容器开始迭代器</p>\n<p>//end1 源容器结束迭代器</p>\n<p>//beg2 目标容器开始迭代器</p>\n<p>//_func 函数或者函数对象</p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//常用遍历算法  搬运 transform</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TransForm</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">operator</span><span class=\"params\">()</span><span class=\"params\">(<span class=\"keyword\">int</span> val)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> val;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyPrint</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">operator</span><span class=\"params\">()</span><span class=\"params\">(<span class=\"keyword\">int</span> val)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; val &lt;&lt; <span class=\"string\">\" \"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;v;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tv.push_back(i);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;vTarget; <span class=\"comment\">//目标容器</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tvTarget.resize(v.<span class=\"built_in\">size</span>()); <span class=\"comment\">// 目标容器需要提前开辟空间</span></span><br><span class=\"line\"></span><br><span class=\"line\">\ttransform(v.<span class=\"built_in\">begin</span>(), v.<span class=\"built_in\">end</span>(), vTarget.<span class=\"built_in\">begin</span>(), TransForm());</span><br><span class=\"line\"></span><br><span class=\"line\">\tfor_each(vTarget.<span class=\"built_in\">begin</span>(), vTarget.<span class=\"built_in\">end</span>(), MyPrint());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\ttest01();</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>总结：</strong> 搬运的目标容器必须要提前开辟空间，否则无法正常搬运</p>\n<h3 id=\"5-2-常用查找算法\"><a href=\"#5-2-常用查找算法\" class=\"headerlink\" title=\"5.2 常用查找算法\"></a>5.2 常用查找算法</h3><p>学习目标：</p>\n<ul>\n<li>掌握常用的查找算法</li>\n</ul>\n<p><strong>算法简介：</strong></p>\n<ul>\n<li><code>find</code>                     //查找元素</li>\n<li><code>find_if</code>               //按条件查找元素</li>\n<li><code>adjacent_find</code>    //查找相邻重复元素</li>\n<li><code>binary_search</code>    //二分查找法</li>\n<li><code>count</code>                   //统计元素个数</li>\n<li><code>count_if</code>             //按条件统计元素个数</li>\n</ul>\n<h4 id=\"5-2-1-find\"><a href=\"#5-2-1-find\" class=\"headerlink\" title=\"5.2.1 find\"></a>5.2.1 find</h4><p><strong>功能描述：</strong></p>\n<ul>\n<li>查找指定元素，找到返回指定元素的迭代器，找不到返回结束迭代器end()</li>\n</ul>\n<p><strong>函数原型：</strong></p>\n<ul>\n<li><p><code>find(iterator beg, iterator end, value);</code></p>\n<p>// 按值查找元素，找到返回指定位置迭代器，找不到返回结束迭代器位置</p>\n<p>// beg 开始迭代器</p>\n<p>// end 结束迭代器</p>\n<p>// value 查找的元素</p>\n</li>\n</ul>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; v;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">\t\tv.push_back(i + <span class=\"number\">1</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//查找容器中是否有 5 这个元素</span></span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;::iterator it = <span class=\"built_in\">find</span>(v.<span class=\"built_in\">begin</span>(), v.<span class=\"built_in\">end</span>(), <span class=\"number\">5</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (it == v.<span class=\"built_in\">end</span>()) </span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"没有找到!\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> </span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"找到:\"</span> &lt;&lt; *it &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\tPerson(<span class=\"built_in\">string</span> name, <span class=\"keyword\">int</span> age) </span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>-&gt;m_Name = name;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>-&gt;m_Age = age;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//重载==</span></span><br><span class=\"line\">\t<span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span>==(<span class=\"keyword\">const</span> Person&amp; p) </span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>-&gt;m_Name == p.m_Name &amp;&amp; <span class=\"keyword\">this</span>-&gt;m_Age == p.m_Age) </span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">string</span> m_Name;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> m_Age;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test02</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;Person&gt; v;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//创建数据</span></span><br><span class=\"line\">\t<span class=\"function\">Person <span class=\"title\">p1</span><span class=\"params\">(<span class=\"string\">\"aaa\"</span>, <span class=\"number\">10</span>)</span></span>;</span><br><span class=\"line\">\t<span class=\"function\">Person <span class=\"title\">p2</span><span class=\"params\">(<span class=\"string\">\"bbb\"</span>, <span class=\"number\">20</span>)</span></span>;</span><br><span class=\"line\">\t<span class=\"function\">Person <span class=\"title\">p3</span><span class=\"params\">(<span class=\"string\">\"ccc\"</span>, <span class=\"number\">30</span>)</span></span>;</span><br><span class=\"line\">\t<span class=\"function\">Person <span class=\"title\">p4</span><span class=\"params\">(<span class=\"string\">\"ddd\"</span>, <span class=\"number\">40</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tv.push_back(p1);</span><br><span class=\"line\">\tv.push_back(p2);</span><br><span class=\"line\">\tv.push_back(p3);</span><br><span class=\"line\">\tv.push_back(p4);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;Person&gt;::iterator it = <span class=\"built_in\">find</span>(v.<span class=\"built_in\">begin</span>(), v.<span class=\"built_in\">end</span>(), p2);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (it == v.<span class=\"built_in\">end</span>()) </span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"没有找到!\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> </span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"找到姓名:\"</span> &lt;&lt; it-&gt;m_Name &lt;&lt; <span class=\"string\">\" 年龄: \"</span> &lt;&lt; it-&gt;m_Age &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>总结： 利用find可以在容器中找指定的元素，返回值是<strong>迭代器</strong></p>\n<h4 id=\"5-2-2-find-if\"><a href=\"#5-2-2-find-if\" class=\"headerlink\" title=\"5.2.2 find_if\"></a>5.2.2 find_if</h4><p><strong>功能描述：</strong></p>\n<ul>\n<li>按条件查找元素</li>\n</ul>\n<p><strong>函数原型：</strong></p>\n<ul>\n<li><p><code>find_if(iterator beg, iterator end, _Pred);</code></p>\n<p>// 按值查找元素，找到返回指定位置迭代器，找不到返回结束迭代器位置</p>\n<p>// beg 开始迭代器</p>\n<p>// end 结束迭代器</p>\n<p>// _Pred 函数或者谓词（返回bool类型的仿函数）</p>\n</li>\n</ul>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//内置数据类型</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GreaterFive</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">operator</span><span class=\"params\">()</span><span class=\"params\">(<span class=\"keyword\">int</span> val)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> val &gt; <span class=\"number\">5</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; v;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">\t\tv.push_back(i + <span class=\"number\">1</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;::iterator it = find_if(v.<span class=\"built_in\">begin</span>(), v.<span class=\"built_in\">end</span>(), GreaterFive());</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (it == v.<span class=\"built_in\">end</span>()) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"没有找到!\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"找到大于5的数字:\"</span> &lt;&lt; *it &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//自定义数据类型</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\tPerson(<span class=\"built_in\">string</span> name, <span class=\"keyword\">int</span> age)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>-&gt;m_Name = name;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>-&gt;m_Age = age;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">string</span> m_Name;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> m_Age;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Greater20</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">operator</span><span class=\"params\">()</span><span class=\"params\">(Person &amp;p)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> p.m_Age &gt; <span class=\"number\">20</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test02</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;Person&gt; v;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//创建数据</span></span><br><span class=\"line\">\t<span class=\"function\">Person <span class=\"title\">p1</span><span class=\"params\">(<span class=\"string\">\"aaa\"</span>, <span class=\"number\">10</span>)</span></span>;</span><br><span class=\"line\">\t<span class=\"function\">Person <span class=\"title\">p2</span><span class=\"params\">(<span class=\"string\">\"bbb\"</span>, <span class=\"number\">20</span>)</span></span>;</span><br><span class=\"line\">\t<span class=\"function\">Person <span class=\"title\">p3</span><span class=\"params\">(<span class=\"string\">\"ccc\"</span>, <span class=\"number\">30</span>)</span></span>;</span><br><span class=\"line\">\t<span class=\"function\">Person <span class=\"title\">p4</span><span class=\"params\">(<span class=\"string\">\"ddd\"</span>, <span class=\"number\">40</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tv.push_back(p1);</span><br><span class=\"line\">\tv.push_back(p2);</span><br><span class=\"line\">\tv.push_back(p3);</span><br><span class=\"line\">\tv.push_back(p4);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;Person&gt;::iterator it = find_if(v.<span class=\"built_in\">begin</span>(), v.<span class=\"built_in\">end</span>(), Greater20());</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (it == v.<span class=\"built_in\">end</span>())</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"没有找到!\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"找到姓名:\"</span> &lt;&lt; it-&gt;m_Name &lt;&lt; <span class=\"string\">\" 年龄: \"</span> &lt;&lt; it-&gt;m_Age &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//test01();</span></span><br><span class=\"line\"></span><br><span class=\"line\">\ttest02();</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>总结：find_if按条件查找使查找更加灵活，提供的仿函数可以改变不同的策略</p>\n<h4 id=\"5-2-3-adjacent-find\"><a href=\"#5-2-3-adjacent-find\" class=\"headerlink\" title=\"5.2.3 adjacent_find\"></a>5.2.3 adjacent_find</h4><p><strong>功能描述：</strong></p>\n<ul>\n<li>查找相邻重复元素</li>\n</ul>\n<p><strong>函数原型：</strong></p>\n<ul>\n<li><p><code>adjacent_find(iterator beg, iterator end);</code></p>\n<p>// 查找相邻重复元素,返回相邻元素的第一个位置的迭代器</p>\n<p>// beg 开始迭代器</p>\n<p>// end 结束迭代器</p>\n</li>\n</ul>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; v;</span><br><span class=\"line\">\tv.push_back(<span class=\"number\">1</span>);</span><br><span class=\"line\">\tv.push_back(<span class=\"number\">2</span>);</span><br><span class=\"line\">\tv.push_back(<span class=\"number\">5</span>);</span><br><span class=\"line\">\tv.push_back(<span class=\"number\">2</span>);</span><br><span class=\"line\">\tv.push_back(<span class=\"number\">4</span>);</span><br><span class=\"line\">\tv.push_back(<span class=\"number\">4</span>);</span><br><span class=\"line\">\tv.push_back(<span class=\"number\">3</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//查找相邻重复元素</span></span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;::iterator it = adjacent_find(v.<span class=\"built_in\">begin</span>(), v.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (it == v.<span class=\"built_in\">end</span>()) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"找不到!\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"找到相邻重复元素为:\"</span> &lt;&lt; *it &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>总结：面试题中如果出现查找相邻重复元素，记得用STL中的adjacent_find算法</p>\n<h4 id=\"5-2-4-binary-search\"><a href=\"#5-2-4-binary-search\" class=\"headerlink\" title=\"5.2.4 binary_search\"></a>5.2.4 binary_search</h4><p><strong>功能描述：</strong></p>\n<ul>\n<li>查找指定元素是否存在</li>\n</ul>\n<p><strong>函数原型：</strong></p>\n<ul>\n<li><p><code>bool binary_search(iterator beg, iterator end, value);</code></p>\n<p>// 查找指定的元素，查到 返回true  否则false</p>\n<p>// 注意: 在<strong>无序序列中不可用</strong></p>\n<p>// beg 开始迭代器</p>\n<p>// end 结束迭代器</p>\n<p>// value 查找的元素</p>\n</li>\n</ul>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;v;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tv.push_back(i);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//二分查找</span></span><br><span class=\"line\">\t<span class=\"keyword\">bool</span> ret = binary_search(v.<span class=\"built_in\">begin</span>(), v.<span class=\"built_in\">end</span>(),<span class=\"number\">2</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (ret)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"找到了\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"未找到\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\ttest01();</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>总结：</strong>二分查找法查找效率很高，值得注意的是查找的容器中元素必须的有序序列</p>\n<h4 id=\"5-2-5-count\"><a href=\"#5-2-5-count\" class=\"headerlink\" title=\"5.2.5 count\"></a>5.2.5 count</h4><p><strong>功能描述：</strong></p>\n<ul>\n<li>统计元素个数</li>\n</ul>\n<p><strong>函数原型：</strong></p>\n<ul>\n<li><p><code>count(iterator beg, iterator end, value);</code></p>\n<p>// 统计元素出现次数</p>\n<p>// beg 开始迭代器</p>\n<p>// end 结束迭代器</p>\n<p>// value 统计的元素</p>\n</li>\n</ul>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//内置数据类型</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; v;</span><br><span class=\"line\">\tv.push_back(<span class=\"number\">1</span>);</span><br><span class=\"line\">\tv.push_back(<span class=\"number\">2</span>);</span><br><span class=\"line\">\tv.push_back(<span class=\"number\">4</span>);</span><br><span class=\"line\">\tv.push_back(<span class=\"number\">5</span>);</span><br><span class=\"line\">\tv.push_back(<span class=\"number\">3</span>);</span><br><span class=\"line\">\tv.push_back(<span class=\"number\">4</span>);</span><br><span class=\"line\">\tv.push_back(<span class=\"number\">4</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> num = count(v.<span class=\"built_in\">begin</span>(), v.<span class=\"built_in\">end</span>(), <span class=\"number\">4</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"4的个数为： \"</span> &lt;&lt; num &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//自定义数据类型</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\tPerson(<span class=\"built_in\">string</span> name, <span class=\"keyword\">int</span> age)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>-&gt;m_Name = name;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>-&gt;m_Age = age;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span>==(<span class=\"keyword\">const</span> Person &amp; p)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>-&gt;m_Age == p.m_Age)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">string</span> m_Name;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> m_Age;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test02</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;Person&gt; v;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\">Person <span class=\"title\">p1</span><span class=\"params\">(<span class=\"string\">\"刘备\"</span>, <span class=\"number\">35</span>)</span></span>;</span><br><span class=\"line\">\t<span class=\"function\">Person <span class=\"title\">p2</span><span class=\"params\">(<span class=\"string\">\"关羽\"</span>, <span class=\"number\">35</span>)</span></span>;</span><br><span class=\"line\">\t<span class=\"function\">Person <span class=\"title\">p3</span><span class=\"params\">(<span class=\"string\">\"张飞\"</span>, <span class=\"number\">35</span>)</span></span>;</span><br><span class=\"line\">\t<span class=\"function\">Person <span class=\"title\">p4</span><span class=\"params\">(<span class=\"string\">\"赵云\"</span>, <span class=\"number\">30</span>)</span></span>;</span><br><span class=\"line\">\t<span class=\"function\">Person <span class=\"title\">p5</span><span class=\"params\">(<span class=\"string\">\"曹操\"</span>, <span class=\"number\">25</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tv.push_back(p1);</span><br><span class=\"line\">\tv.push_back(p2);</span><br><span class=\"line\">\tv.push_back(p3);</span><br><span class=\"line\">\tv.push_back(p4);</span><br><span class=\"line\">\tv.push_back(p5);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\">Person <span class=\"title\">p</span><span class=\"params\">(<span class=\"string\">\"诸葛亮\"</span>,<span class=\"number\">35</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> num = count(v.<span class=\"built_in\">begin</span>(), v.<span class=\"built_in\">end</span>(), p);</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"num = \"</span> &lt;&lt; num &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//test01();</span></span><br><span class=\"line\"></span><br><span class=\"line\">\ttest02();</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>总结：</strong> 统计自定义数据类型时候，需要配合重载 <code>operator==</code></p>\n<h4 id=\"5-2-6-count-if\"><a href=\"#5-2-6-count-if\" class=\"headerlink\" title=\"5.2.6 count_if\"></a>5.2.6 count_if</h4><p><strong>功能描述：</strong></p>\n<ul>\n<li>按条件统计元素个数</li>\n</ul>\n<p><strong>函数原型：</strong></p>\n<ul>\n<li><p><code>count_if(iterator beg, iterator end, _Pred);</code></p>\n<p>// 按条件统计元素出现次数</p>\n<p>// beg 开始迭代器</p>\n<p>// end 结束迭代器</p>\n<p>// _Pred 谓词</p>\n</li>\n</ul>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Greater4</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">operator</span><span class=\"params\">()</span><span class=\"params\">(<span class=\"keyword\">int</span> val)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> val &gt;= <span class=\"number\">4</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//内置数据类型</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; v;</span><br><span class=\"line\">\tv.push_back(<span class=\"number\">1</span>);</span><br><span class=\"line\">\tv.push_back(<span class=\"number\">2</span>);</span><br><span class=\"line\">\tv.push_back(<span class=\"number\">4</span>);</span><br><span class=\"line\">\tv.push_back(<span class=\"number\">5</span>);</span><br><span class=\"line\">\tv.push_back(<span class=\"number\">3</span>);</span><br><span class=\"line\">\tv.push_back(<span class=\"number\">4</span>);</span><br><span class=\"line\">\tv.push_back(<span class=\"number\">4</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> num = count_if(v.<span class=\"built_in\">begin</span>(), v.<span class=\"built_in\">end</span>(), Greater4());</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"大于4的个数为： \"</span> &lt;&lt; num &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//自定义数据类型</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\tPerson(<span class=\"built_in\">string</span> name, <span class=\"keyword\">int</span> age)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>-&gt;m_Name = name;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>-&gt;m_Age = age;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">string</span> m_Name;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> m_Age;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AgeLess35</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">operator</span><span class=\"params\">()</span><span class=\"params\">(<span class=\"keyword\">const</span> Person &amp;p)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> p.m_Age &lt; <span class=\"number\">35</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test02</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;Person&gt; v;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\">Person <span class=\"title\">p1</span><span class=\"params\">(<span class=\"string\">\"刘备\"</span>, <span class=\"number\">35</span>)</span></span>;</span><br><span class=\"line\">\t<span class=\"function\">Person <span class=\"title\">p2</span><span class=\"params\">(<span class=\"string\">\"关羽\"</span>, <span class=\"number\">35</span>)</span></span>;</span><br><span class=\"line\">\t<span class=\"function\">Person <span class=\"title\">p3</span><span class=\"params\">(<span class=\"string\">\"张飞\"</span>, <span class=\"number\">35</span>)</span></span>;</span><br><span class=\"line\">\t<span class=\"function\">Person <span class=\"title\">p4</span><span class=\"params\">(<span class=\"string\">\"赵云\"</span>, <span class=\"number\">30</span>)</span></span>;</span><br><span class=\"line\">\t<span class=\"function\">Person <span class=\"title\">p5</span><span class=\"params\">(<span class=\"string\">\"曹操\"</span>, <span class=\"number\">25</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tv.push_back(p1);</span><br><span class=\"line\">\tv.push_back(p2);</span><br><span class=\"line\">\tv.push_back(p3);</span><br><span class=\"line\">\tv.push_back(p4);</span><br><span class=\"line\">\tv.push_back(p5);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> num = count_if(v.<span class=\"built_in\">begin</span>(), v.<span class=\"built_in\">end</span>(), AgeLess35());</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"小于35岁的个数：\"</span> &lt;&lt; num &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//test01();</span></span><br><span class=\"line\"></span><br><span class=\"line\">\ttest02();</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>总结：</strong>按值统计用count，按条件统计用count_if</p>\n<h3 id=\"5-3-常用排序算法\"><a href=\"#5-3-常用排序算法\" class=\"headerlink\" title=\"5.3 常用排序算法\"></a>5.3 常用排序算法</h3><p><strong>学习目标：</strong></p>\n<ul>\n<li>掌握常用的排序算法</li>\n</ul>\n<p><strong>算法简介：</strong></p>\n<ul>\n<li><code>sort</code>             //对容器内元素进行排序</li>\n<li><code>random_shuffle</code>   //洗牌   指定范围内的元素随机调整次序</li>\n<li><code>merge</code>           // 容器元素合并，并存储到另一容器中</li>\n<li><code>reverse</code>       // 反转指定范围的元素</li>\n</ul>\n<h4 id=\"5-3-1-sort\"><a href=\"#5-3-1-sort\" class=\"headerlink\" title=\"5.3.1 sort\"></a>5.3.1 sort</h4><p><strong>功能描述：</strong></p>\n<ul>\n<li>对容器内元素进行排序</li>\n</ul>\n<p><strong>函数原型：</strong></p>\n<ul>\n<li><p><code>sort(iterator beg, iterator end, _Pred);</code></p>\n<p>// 按值查找元素，找到返回指定位置迭代器，找不到返回结束迭代器位置</p>\n<p>//  beg    开始迭代器</p>\n<p>//  end    结束迭代器</p>\n<p>// _Pred  谓词</p>\n</li>\n</ul>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">myPrint</span><span class=\"params\">(<span class=\"keyword\">int</span> val)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; val &lt;&lt; <span class=\"string\">\" \"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; v;</span><br><span class=\"line\">\tv.push_back(<span class=\"number\">10</span>);</span><br><span class=\"line\">\tv.push_back(<span class=\"number\">30</span>);</span><br><span class=\"line\">\tv.push_back(<span class=\"number\">50</span>);</span><br><span class=\"line\">\tv.push_back(<span class=\"number\">20</span>);</span><br><span class=\"line\">\tv.push_back(<span class=\"number\">40</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//sort默认从小到大排序</span></span><br><span class=\"line\">\tsort(v.<span class=\"built_in\">begin</span>(), v.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">\tfor_each(v.<span class=\"built_in\">begin</span>(), v.<span class=\"built_in\">end</span>(), myPrint);</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//从大到小排序</span></span><br><span class=\"line\">\tsort(v.<span class=\"built_in\">begin</span>(), v.<span class=\"built_in\">end</span>(), greater&lt;<span class=\"keyword\">int</span>&gt;());</span><br><span class=\"line\">\tfor_each(v.<span class=\"built_in\">begin</span>(), v.<span class=\"built_in\">end</span>(), myPrint);</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\ttest01();</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>总结：</strong>sort属于开发中最常用的算法之一，需熟练掌握</p>\n<h4 id=\"5-3-2-random-shuffle\"><a href=\"#5-3-2-random-shuffle\" class=\"headerlink\" title=\"5.3.2 random_shuffle\"></a>5.3.2 random_shuffle</h4><p><strong>功能描述：</strong></p>\n<ul>\n<li>洗牌   指定范围内的元素随机调整次序</li>\n</ul>\n<p><strong>函数原型：</strong></p>\n<ul>\n<li><p><code>random_shuffle(iterator beg, iterator end);</code></p>\n<p>// 指定范围内的元素随机调整次序</p>\n<p>// beg 开始迭代器</p>\n<p>// end 结束迭代器</p>\n</li>\n</ul>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;ctime&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">myPrint</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">operator</span><span class=\"params\">()</span><span class=\"params\">(<span class=\"keyword\">int</span> val)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; val &lt;&lt; <span class=\"string\">\" \"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tsrand((<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span>)time(<span class=\"literal\">NULL</span>));</span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; v;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span> ; i &lt; <span class=\"number\">10</span>;i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tv.push_back(i);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfor_each(v.<span class=\"built_in\">begin</span>(), v.<span class=\"built_in\">end</span>(), myPrint());</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//打乱顺序</span></span><br><span class=\"line\">\trandom_shuffle(v.<span class=\"built_in\">begin</span>(), v.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">\tfor_each(v.<span class=\"built_in\">begin</span>(), v.<span class=\"built_in\">end</span>(), myPrint());</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\ttest01();</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>总结：</strong>random_shuffle洗牌算法比较实用，使用时记得加随机数种子</p>\n<h4 id=\"5-3-3-merge\"><a href=\"#5-3-3-merge\" class=\"headerlink\" title=\"5.3.3 merge\"></a>5.3.3 merge</h4><p><strong>功能描述：</strong></p>\n<ul>\n<li>两个容器元素合并，并存储到另一容器中</li>\n</ul>\n<p><strong>函数原型：</strong></p>\n<ul>\n<li><p><code>merge(iterator beg1, iterator end1, iterator beg2, iterator end2, iterator dest);</code></p>\n<p>// 容器元素合并，并存储到另一容器中</p>\n<p>// 注意: 两个容器必须是<strong>有序的</strong></p>\n<p>// beg1   容器1开始迭代器<br>// end1   容器1结束迭代器<br>// beg2   容器2开始迭代器<br>// end2   容器2结束迭代器<br>// dest    目标容器开始迭代器</p>\n</li>\n</ul>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">myPrint</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">operator</span><span class=\"params\">()</span><span class=\"params\">(<span class=\"keyword\">int</span> val)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; val &lt;&lt; <span class=\"string\">\" \"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; v1;</span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; v2;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span> ; i++) </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">\t\tv1.push_back(i);</span><br><span class=\"line\">\t\tv2.push_back(i + <span class=\"number\">1</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; vtarget;</span><br><span class=\"line\">\t<span class=\"comment\">//目标容器需要提前开辟空间</span></span><br><span class=\"line\">\tvtarget.resize(v1.<span class=\"built_in\">size</span>() + v2.<span class=\"built_in\">size</span>());</span><br><span class=\"line\">\t<span class=\"comment\">//合并  需要两个有序序列</span></span><br><span class=\"line\">\tmerge(v1.<span class=\"built_in\">begin</span>(), v1.<span class=\"built_in\">end</span>(), v2.<span class=\"built_in\">begin</span>(), v2.<span class=\"built_in\">end</span>(), vtarget.<span class=\"built_in\">begin</span>());</span><br><span class=\"line\">\tfor_each(vtarget.<span class=\"built_in\">begin</span>(), vtarget.<span class=\"built_in\">end</span>(), myPrint());</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\ttest01();</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>总结：</strong>merge合并的两个容器必须的有序序列</p>\n<h4 id=\"5-3-4-reverse\"><a href=\"#5-3-4-reverse\" class=\"headerlink\" title=\"5.3.4 reverse\"></a>5.3.4 reverse</h4><p><strong>功能描述：</strong></p>\n<ul>\n<li>将容器内元素进行反转</li>\n</ul>\n<p><strong>函数原型：</strong></p>\n<ul>\n<li><p><code>reverse(iterator beg, iterator end);</code></p>\n<p>// 反转指定范围的元素</p>\n<p>// beg 开始迭代器</p>\n<p>// end 结束迭代器</p>\n</li>\n</ul>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">myPrint</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">operator</span><span class=\"params\">()</span><span class=\"params\">(<span class=\"keyword\">int</span> val)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; val &lt;&lt; <span class=\"string\">\" \"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; v;</span><br><span class=\"line\">\tv.push_back(<span class=\"number\">10</span>);</span><br><span class=\"line\">\tv.push_back(<span class=\"number\">30</span>);</span><br><span class=\"line\">\tv.push_back(<span class=\"number\">50</span>);</span><br><span class=\"line\">\tv.push_back(<span class=\"number\">20</span>);</span><br><span class=\"line\">\tv.push_back(<span class=\"number\">40</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"反转前： \"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\tfor_each(v.<span class=\"built_in\">begin</span>(), v.<span class=\"built_in\">end</span>(), myPrint());</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"反转后： \"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\treverse(v.<span class=\"built_in\">begin</span>(), v.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">\tfor_each(v.<span class=\"built_in\">begin</span>(), v.<span class=\"built_in\">end</span>(), myPrint());</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\ttest01();</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>总结：</strong>reverse反转区间内元素，面试题可能涉及到</p>\n<h3 id=\"5-4-常用拷贝和替换算法\"><a href=\"#5-4-常用拷贝和替换算法\" class=\"headerlink\" title=\"5.4 常用拷贝和替换算法\"></a>5.4 常用拷贝和替换算法</h3><p><strong>学习目标：</strong></p>\n<ul>\n<li>掌握常用的拷贝和替换算法</li>\n</ul>\n<p><strong>算法简介：</strong></p>\n<ul>\n<li><code>copy</code>                      // 容器内指定范围的元素拷贝到另一容器中</li>\n<li><code>replace</code>                // 将容器内指定范围的旧元素修改为新元素</li>\n<li><code>replace_if</code>          // 容器内指定范围满足条件的元素替换为新元素</li>\n<li><code>swap</code>                     // 互换两个容器的元素</li>\n</ul>\n<h4 id=\"5-4-1-copy\"><a href=\"#5-4-1-copy\" class=\"headerlink\" title=\"5.4.1 copy\"></a>5.4.1 copy</h4><p><strong>功能描述：</strong></p>\n<ul>\n<li>容器内指定范围的元素拷贝到另一容器中</li>\n</ul>\n<p><strong>函数原型：</strong></p>\n<ul>\n<li><p><code>copy(iterator beg, iterator end, iterator dest);</code></p>\n<p>// 按值查找元素，找到返回指定位置迭代器，找不到返回结束迭代器位置</p>\n<p>// beg  开始迭代器</p>\n<p>// end  结束迭代器</p>\n<p>// dest 目标起始迭代器</p>\n</li>\n</ul>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">myPrint</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">operator</span><span class=\"params\">()</span><span class=\"params\">(<span class=\"keyword\">int</span> val)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; val &lt;&lt; <span class=\"string\">\" \"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; v1;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">\t\tv1.push_back(i + <span class=\"number\">1</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; v2;</span><br><span class=\"line\">\tv2.resize(v1.<span class=\"built_in\">size</span>());</span><br><span class=\"line\">\tcopy(v1.<span class=\"built_in\">begin</span>(), v1.<span class=\"built_in\">end</span>(), v2.<span class=\"built_in\">begin</span>());</span><br><span class=\"line\"></span><br><span class=\"line\">\tfor_each(v2.<span class=\"built_in\">begin</span>(), v2.<span class=\"built_in\">end</span>(), myPrint());</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\ttest01();</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>总结：</strong>利用copy算法在拷贝时，目标容器记得提前开辟空间</p>\n<h4 id=\"5-4-2-replace\"><a href=\"#5-4-2-replace\" class=\"headerlink\" title=\"5.4.2 replace\"></a>5.4.2 replace</h4><p><strong>功能描述：</strong></p>\n<ul>\n<li>将容器内指定范围的旧元素修改为新元素</li>\n</ul>\n<p><strong>函数原型：</strong></p>\n<ul>\n<li><p><code>replace(iterator beg, iterator end, oldvalue, newvalue);</code></p>\n<p>// 将区间内旧元素 替换成 新元素</p>\n<p>// beg 开始迭代器</p>\n<p>// end 结束迭代器</p>\n<p>// oldvalue 旧元素</p>\n<p>// newvalue 新元素</p>\n</li>\n</ul>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">myPrint</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">operator</span><span class=\"params\">()</span><span class=\"params\">(<span class=\"keyword\">int</span> val)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; val &lt;&lt; <span class=\"string\">\" \"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; v;</span><br><span class=\"line\">\tv.push_back(<span class=\"number\">20</span>);</span><br><span class=\"line\">\tv.push_back(<span class=\"number\">30</span>);</span><br><span class=\"line\">\tv.push_back(<span class=\"number\">20</span>);</span><br><span class=\"line\">\tv.push_back(<span class=\"number\">40</span>);</span><br><span class=\"line\">\tv.push_back(<span class=\"number\">50</span>);</span><br><span class=\"line\">\tv.push_back(<span class=\"number\">10</span>);</span><br><span class=\"line\">\tv.push_back(<span class=\"number\">20</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"替换前：\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\tfor_each(v.<span class=\"built_in\">begin</span>(), v.<span class=\"built_in\">end</span>(), myPrint());</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//将容器中的20 替换成 2000</span></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"替换后：\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\treplace(v.<span class=\"built_in\">begin</span>(), v.<span class=\"built_in\">end</span>(), <span class=\"number\">20</span>,<span class=\"number\">2000</span>);</span><br><span class=\"line\">\tfor_each(v.<span class=\"built_in\">begin</span>(), v.<span class=\"built_in\">end</span>(), myPrint());</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\ttest01();</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>总结：</strong>replace会替换区间内满足条件的元素</p>\n<h4 id=\"5-4-3-replace-if\"><a href=\"#5-4-3-replace-if\" class=\"headerlink\" title=\"5.4.3 replace_if\"></a>5.4.3 replace_if</h4><p><strong>功能描述:</strong>  </p>\n<ul>\n<li>将区间内满足条件的元素，替换成指定元素</li>\n</ul>\n<p><strong>函数原型：</strong></p>\n<ul>\n<li><p><code>replace_if(iterator beg, iterator end, _pred, newvalue);</code></p>\n<p>// 按条件替换元素，满足条件的替换成指定元素</p>\n<p>// beg 开始迭代器</p>\n<p>// end 结束迭代器</p>\n<p>// _pred 谓词</p>\n<p>// newvalue 替换的新元素</p>\n</li>\n</ul>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">myPrint</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">operator</span><span class=\"params\">()</span><span class=\"params\">(<span class=\"keyword\">int</span> val)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; val &lt;&lt; <span class=\"string\">\" \"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ReplaceGreater30</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">operator</span><span class=\"params\">()</span><span class=\"params\">(<span class=\"keyword\">int</span> val)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> val &gt;= <span class=\"number\">30</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; v;</span><br><span class=\"line\">\tv.push_back(<span class=\"number\">20</span>);</span><br><span class=\"line\">\tv.push_back(<span class=\"number\">30</span>);</span><br><span class=\"line\">\tv.push_back(<span class=\"number\">20</span>);</span><br><span class=\"line\">\tv.push_back(<span class=\"number\">40</span>);</span><br><span class=\"line\">\tv.push_back(<span class=\"number\">50</span>);</span><br><span class=\"line\">\tv.push_back(<span class=\"number\">10</span>);</span><br><span class=\"line\">\tv.push_back(<span class=\"number\">20</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"替换前：\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\tfor_each(v.<span class=\"built_in\">begin</span>(), v.<span class=\"built_in\">end</span>(), myPrint());</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//将容器中大于等于的30 替换成 3000</span></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"替换后：\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\treplace_if(v.<span class=\"built_in\">begin</span>(), v.<span class=\"built_in\">end</span>(), ReplaceGreater30(), <span class=\"number\">3000</span>);</span><br><span class=\"line\">\tfor_each(v.<span class=\"built_in\">begin</span>(), v.<span class=\"built_in\">end</span>(), myPrint());</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\ttest01();</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>总结：</strong>replace_if按条件查找，可以利用仿函数灵活筛选满足的条件</p>\n<h4 id=\"5-4-4-swap\"><a href=\"#5-4-4-swap\" class=\"headerlink\" title=\"5.4.4 swap\"></a>5.4.4 swap</h4><p><strong>功能描述：</strong></p>\n<ul>\n<li>互换两个容器的元素</li>\n</ul>\n<p><strong>函数原型：</strong></p>\n<ul>\n<li><p><code>swap(container c1, container c2);</code></p>\n<p>// 互换两个容器的元素</p>\n<p>// c1容器1</p>\n<p>// c2容器2</p>\n</li>\n</ul>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">myPrint</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">operator</span><span class=\"params\">()</span><span class=\"params\">(<span class=\"keyword\">int</span> val)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; val &lt;&lt; <span class=\"string\">\" \"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; v1;</span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; v2;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">\t\tv1.push_back(i);</span><br><span class=\"line\">\t\tv2.push_back(i+<span class=\"number\">100</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"交换前： \"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\tfor_each(v1.<span class=\"built_in\">begin</span>(), v1.<span class=\"built_in\">end</span>(), myPrint());</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\tfor_each(v2.<span class=\"built_in\">begin</span>(), v2.<span class=\"built_in\">end</span>(), myPrint());</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"交换后： \"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\tswap(v1, v2);</span><br><span class=\"line\">\tfor_each(v1.<span class=\"built_in\">begin</span>(), v1.<span class=\"built_in\">end</span>(), myPrint());</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\tfor_each(v2.<span class=\"built_in\">begin</span>(), v2.<span class=\"built_in\">end</span>(), myPrint());</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\ttest01();</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>总结：</strong>swap交换容器时，注意交换的容器要同种类型</p>\n<h3 id=\"5-5-常用算术生成算法\"><a href=\"#5-5-常用算术生成算法\" class=\"headerlink\" title=\"5.5 常用算术生成算法\"></a>5.5 常用算术生成算法</h3><p><strong>学习目标：</strong></p>\n<ul>\n<li>掌握常用的算术生成算法</li>\n</ul>\n<p><strong>注意：</strong></p>\n<ul>\n<li>算术生成算法属于小型算法，使用时包含的头文件为 <code>#include &lt;numeric&gt;</code></li>\n</ul>\n<p><strong>算法简介：</strong></p>\n<ul>\n<li><p><code>accumulate</code>      // 计算容器元素累计总和</p>\n</li>\n<li><p><code>fill</code>                 // 向容器中添加元素</p>\n</li>\n</ul>\n<h4 id=\"5-5-1-accumulate\"><a href=\"#5-5-1-accumulate\" class=\"headerlink\" title=\"5.5.1 accumulate\"></a>5.5.1 accumulate</h4><p><strong>功能描述：</strong></p>\n<ul>\n<li>计算区间内 容器元素累计总和</li>\n</ul>\n<p><strong>函数原型：</strong></p>\n<ul>\n<li><p><code>accumulate(iterator beg, iterator end, value);</code></p>\n<p>// 计算容器元素累计总和</p>\n<p>// beg 开始迭代器</p>\n<p>// end 结束迭代器</p>\n<p>// value 起始值</p>\n</li>\n</ul>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;numeric&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; v;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= <span class=\"number\">100</span>; i++) &#123;</span><br><span class=\"line\">\t\tv.push_back(i);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> total = accumulate(v.<span class=\"built_in\">begin</span>(), v.<span class=\"built_in\">end</span>(), <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"total = \"</span> &lt;&lt; total &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\ttest01();</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>总结：</strong>accumulate使用时头文件注意是 numeric，这个算法很实用</p>\n<h4 id=\"5-5-2-fill\"><a href=\"#5-5-2-fill\" class=\"headerlink\" title=\"5.5.2 fill\"></a>5.5.2 fill</h4><p><strong>功能描述：</strong></p>\n<ul>\n<li>向容器中填充指定的元素</li>\n</ul>\n<p><strong>函数原型：</strong></p>\n<ul>\n<li><p><code>fill(iterator beg, iterator end, value);</code></p>\n<p>// 向容器中填充元素</p>\n<p>// beg 开始迭代器</p>\n<p>// end 结束迭代器</p>\n<p>// value 填充的值</p>\n</li>\n</ul>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;numeric&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">myPrint</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">operator</span><span class=\"params\">()</span><span class=\"params\">(<span class=\"keyword\">int</span> val)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; val &lt;&lt; <span class=\"string\">\" \"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; v;</span><br><span class=\"line\">\tv.resize(<span class=\"number\">10</span>);</span><br><span class=\"line\">\t<span class=\"comment\">//填充</span></span><br><span class=\"line\">\t<span class=\"built_in\">fill</span>(v.<span class=\"built_in\">begin</span>(), v.<span class=\"built_in\">end</span>(), <span class=\"number\">100</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\tfor_each(v.<span class=\"built_in\">begin</span>(), v.<span class=\"built_in\">end</span>(), myPrint());</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\ttest01();</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>总结：</strong>利用fill可以将容器区间内元素填充为 指定的值</p>\n<h3 id=\"5-6-常用集合算法\"><a href=\"#5-6-常用集合算法\" class=\"headerlink\" title=\"5.6 常用集合算法\"></a>5.6 常用集合算法</h3><p><strong>学习目标：</strong></p>\n<ul>\n<li>掌握常用的集合算法</li>\n</ul>\n<p><strong>算法简介：</strong></p>\n<ul>\n<li><p><code>set_intersection</code>          // 求两个容器的交集</p>\n</li>\n<li><p><code>set_union</code>                       // 求两个容器的并集</p>\n</li>\n<li><p><code>set_difference</code>              // 求两个容器的差集</p>\n</li>\n</ul>\n<h4 id=\"5-6-1-set-intersection\"><a href=\"#5-6-1-set-intersection\" class=\"headerlink\" title=\"5.6.1 set_intersection\"></a>5.6.1 set_intersection</h4><p><strong>功能描述：</strong></p>\n<ul>\n<li>求两个容器的交集</li>\n</ul>\n<p><strong>函数原型：</strong></p>\n<ul>\n<li><p><code>set_intersection(iterator beg1, iterator end1, iterator beg2, iterator end2, iterator dest);</code></p>\n<p>// 求两个集合的交集</p>\n<p>// <strong>注意:两个集合必须是有序序列</strong></p>\n<p>// beg1 容器1开始迭代器<br>// end1 容器1结束迭代器<br>// beg2 容器2开始迭代器<br>// end2 容器2结束迭代器<br>// dest 目标容器开始迭代器</p>\n</li>\n</ul>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">myPrint</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">operator</span><span class=\"params\">()</span><span class=\"params\">(<span class=\"keyword\">int</span> val)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; val &lt;&lt; <span class=\"string\">\" \"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; v1;</span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; v2;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">\t\tv1.push_back(i);</span><br><span class=\"line\">\t\tv2.push_back(i+<span class=\"number\">5</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; vTarget;</span><br><span class=\"line\">\t<span class=\"comment\">//取两个里面较小的值给目标容器开辟空间</span></span><br><span class=\"line\">\tvTarget.resize(<span class=\"built_in\">min</span>(v1.<span class=\"built_in\">size</span>(), v2.<span class=\"built_in\">size</span>()));</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//返回目标容器的最后一个元素的迭代器地址</span></span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;::iterator itEnd = </span><br><span class=\"line\">        set_intersection(v1.<span class=\"built_in\">begin</span>(), v1.<span class=\"built_in\">end</span>(), v2.<span class=\"built_in\">begin</span>(), v2.<span class=\"built_in\">end</span>(), vTarget.<span class=\"built_in\">begin</span>());</span><br><span class=\"line\"></span><br><span class=\"line\">\tfor_each(vTarget.<span class=\"built_in\">begin</span>(), itEnd, myPrint());</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\ttest01();</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>总结：</strong> </p>\n<ul>\n<li>求交集的两个集合必须的有序序列</li>\n<li>目标容器开辟空间需要从<strong>两个容器中取小值</strong></li>\n<li>set_intersection返回值既是交集中最后一个元素的位置</li>\n</ul>\n<h4 id=\"5-6-2-set-union\"><a href=\"#5-6-2-set-union\" class=\"headerlink\" title=\"5.6.2 set_union\"></a>5.6.2 set_union</h4><p><strong>功能描述：</strong></p>\n<ul>\n<li>求两个集合的并集</li>\n</ul>\n<p><strong>函数原型：</strong></p>\n<ul>\n<li><p><code>set_union(iterator beg1, iterator end1, iterator beg2, iterator end2, iterator dest);</code></p>\n<p>// 求两个集合的并集</p>\n<p>// <strong>注意:两个集合必须是有序序列</strong></p>\n<p>// beg1 容器1开始迭代器<br>// end1 容器1结束迭代器<br>// beg2 容器2开始迭代器<br>// end2 容器2结束迭代器<br>// dest 目标容器开始迭代器</p>\n</li>\n</ul>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">myPrint</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">operator</span><span class=\"params\">()</span><span class=\"params\">(<span class=\"keyword\">int</span> val)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; val &lt;&lt; <span class=\"string\">\" \"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; v1;</span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; v2;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">\t\tv1.push_back(i);</span><br><span class=\"line\">\t\tv2.push_back(i+<span class=\"number\">5</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; vTarget;</span><br><span class=\"line\">\t<span class=\"comment\">//取两个容器的和给目标容器开辟空间</span></span><br><span class=\"line\">\tvTarget.resize(v1.<span class=\"built_in\">size</span>() + v2.<span class=\"built_in\">size</span>());</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//返回目标容器的最后一个元素的迭代器地址</span></span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;::iterator itEnd = </span><br><span class=\"line\">        set_union(v1.<span class=\"built_in\">begin</span>(), v1.<span class=\"built_in\">end</span>(), v2.<span class=\"built_in\">begin</span>(), v2.<span class=\"built_in\">end</span>(), vTarget.<span class=\"built_in\">begin</span>());</span><br><span class=\"line\"></span><br><span class=\"line\">\tfor_each(vTarget.<span class=\"built_in\">begin</span>(), itEnd, myPrint());</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\ttest01();</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>总结：</strong> </p>\n<ul>\n<li>求并集的两个集合必须的有序序列</li>\n<li>目标容器开辟空间需要<strong>两个容器相加</strong></li>\n<li>set_union返回值既是并集中最后一个元素的位置</li>\n</ul>\n<h4 id=\"5-6-3-set-difference\"><a href=\"#5-6-3-set-difference\" class=\"headerlink\" title=\"5.6.3  set_difference\"></a>5.6.3  set_difference</h4><p><strong>功能描述：</strong></p>\n<ul>\n<li>求两个集合的差集</li>\n</ul>\n<p><strong>函数原型：</strong></p>\n<ul>\n<li><p><code>set_difference(iterator beg1, iterator end1, iterator beg2, iterator end2, iterator dest);</code></p>\n<p>// 求两个集合的差集</p>\n<p>// <strong>注意:两个集合必须是有序序列</strong></p>\n<p>// beg1 容器1开始迭代器<br>// end1 容器1结束迭代器<br>// beg2 容器2开始迭代器<br>// end2 容器2结束迭代器<br>// dest 目标容器开始迭代器</p>\n</li>\n</ul>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">myPrint</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">operator</span><span class=\"params\">()</span><span class=\"params\">(<span class=\"keyword\">int</span> val)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; val &lt;&lt; <span class=\"string\">\" \"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; v1;</span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; v2;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">\t\tv1.push_back(i);</span><br><span class=\"line\">\t\tv2.push_back(i+<span class=\"number\">5</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; vTarget;</span><br><span class=\"line\">\t<span class=\"comment\">//取两个里面较大的值给目标容器开辟空间</span></span><br><span class=\"line\">\tvTarget.resize( <span class=\"built_in\">max</span>(v1.<span class=\"built_in\">size</span>() , v2.<span class=\"built_in\">size</span>()));</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//返回目标容器的最后一个元素的迭代器地址</span></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"v1与v2的差集为： \"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;::iterator itEnd = </span><br><span class=\"line\">        set_difference(v1.<span class=\"built_in\">begin</span>(), v1.<span class=\"built_in\">end</span>(), v2.<span class=\"built_in\">begin</span>(), v2.<span class=\"built_in\">end</span>(), vTarget.<span class=\"built_in\">begin</span>());</span><br><span class=\"line\">\tfor_each(vTarget.<span class=\"built_in\">begin</span>(), itEnd, myPrint());</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"v2与v1的差集为： \"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\titEnd = set_difference(v2.<span class=\"built_in\">begin</span>(), v2.<span class=\"built_in\">end</span>(), v1.<span class=\"built_in\">begin</span>(), v1.<span class=\"built_in\">end</span>(), vTarget.<span class=\"built_in\">begin</span>());</span><br><span class=\"line\">\tfor_each(vTarget.<span class=\"built_in\">begin</span>(), itEnd, myPrint());</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\ttest01();</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>总结：</strong> </p>\n<ul>\n<li>求差集的两个集合必须的有序序列</li>\n<li>目标容器开辟空间需要从<strong>两个容器取较大值</strong></li>\n<li>set_difference返回值既是差集中最后一个元素的位置</li>\n</ul>\n"}]