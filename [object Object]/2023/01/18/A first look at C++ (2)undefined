<!DOCTYPE html><html lang="zh-CN" data-theme="light"><head><meta charset="UTF-8"><meta http-equiv="X-UA-Compatible" content="IE=edge"><meta name="viewport" content="width=device-width,initial-scale=1"><title>A first look at C++ (2) | 熊儿老猫的博客</title><meta name="description" content="C++核心编程本阶段主要针对 C++&#x3D;&#x3D;面向对象&#x3D;&#x3D;编程技术做详细讲解，探讨 C++中的核心和精髓。 1 内存分区模型C++程序在执行时，将内存大方向划分为 4 个区域 代码区：存放函数体的二进制代码，由操作系统进行管理的全局区：存放全局变量和静态变量以及常量栈区：由编译器自动分配释放, 存放函数的参数值,局部变量等堆区：由程序员分配和释放,若程序员不释放,程序结束时由操作系统回收内存四区意义："><meta name="author" content="Zhenglin Li"><meta name="copyright" content="Zhenglin Li"><meta name="format-detection" content="telephone=no"><link rel="shortcut icon" href="/ZhengLin-Li.github.io.butterfly/img/favicon.png"><link rel="canonical" href="https://zhenglin-li.github.io/ZhengLin-Li.github.io.butterfly/[object%20Object]/2023/01/18/A%20first%20look%20at%20C++%20(2)undefined"><meta http-equiv="Cache-Control" content="no-transform"><meta http-equiv="Cache-Control" content="no-siteapp"><link rel="preconnect" href="//cdn.jsdelivr.net"/><link rel="preconnect" href="//hm.baidu.com"/><link rel="preconnect" href="//fonts.googleapis.com" crossorigin="crossorigin"/><link rel="preconnect" href="//busuanzi.ibruce.info"/><link rel="preconnect" href="//zz.bdstatic.com"/><meta property="og:type" content="article"><meta property="og:title" content="A first look at C++ (2)"><meta property="og:url" content="https://zhenglin-li.github.io/ZhengLin-Li.github.io.butterfly/[object%20Object]/2023/01/18/A%20first%20look%20at%20C++%20(2)undefined"><meta property="og:site_name" content="熊儿老猫的博客"><meta property="og:description" content="C++核心编程本阶段主要针对 C++&#x3D;&#x3D;面向对象&#x3D;&#x3D;编程技术做详细讲解，探讨 C++中的核心和精髓。 1 内存分区模型C++程序在执行时，将内存大方向划分为 4 个区域 代码区：存放函数体的二进制代码，由操作系统进行管理的全局区：存放全局变量和静态变量以及常量栈区：由编译器自动分配释放, 存放函数的参数值,局部变量等堆区：由程序员分配和释放,若程序员不释放,程序结束时由操作系统回收内存四区意义："><meta property="og:image" content="https://cdn.jsdelivr.net/gh/useblue/ucdn/imgs/bp-6.webp"><meta property="article:published_time" content="2023-01-18T12:11:43.021Z"><meta property="article:modified_time" content="2023-01-18T11:42:29.249Z"><meta name="twitter:card" content="summary"><script>var activateDarkMode = function () {
  document.documentElement.setAttribute('data-theme', 'dark')
  if (document.querySelector('meta[name="theme-color"]') !== null) {
    document.querySelector('meta[name="theme-color"]').setAttribute('content', '#000')
  }
}
var activateLightMode = function () {
  document.documentElement.setAttribute('data-theme', 'light')
  if (document.querySelector('meta[name="theme-color"]') !== null) {
    document.querySelector('meta[name="theme-color"]').setAttribute('content', '#fff')
  }
}

var getCookies = function (name) {
  const value = `; ${document.cookie}`
  const parts = value.split(`; ${name}=`)
  if (parts.length === 2) return parts.pop().split(';').shift()
}

var autoChangeMode = 'true'
var t = getCookies('theme')
if (autoChangeMode === '1') {
  var isDarkMode = window.matchMedia('(prefers-color-scheme: dark)').matches
  var isLightMode = window.matchMedia('(prefers-color-scheme: light)').matches
  var isNotSpecified = window.matchMedia('(prefers-color-scheme: no-preference)').matches
  var hasNoSupport = !isDarkMode && !isLightMode && !isNotSpecified

  if (t === undefined) {
    if (isLightMode) activateLightMode()
    else if (isDarkMode) activateDarkMode()
    else if (isNotSpecified || hasNoSupport) {
      console.log('You specified no preference for a color scheme or your browser does not support it. I Schedule dark mode during night time.')
      var now = new Date()
      var hour = now.getHours()
      var isNight = hour <= 6 || hour >= 18
      isNight ? activateDarkMode() : activateLightMode()
    }
    window.matchMedia('(prefers-color-scheme: dark)').addListener(function (e) {
      if (Cookies.get('theme') === undefined) {
        e.matches ? activateDarkMode() : activateLightMode()
      }
    })
  } else if (t === 'light') activateLightMode()
  else activateDarkMode()
} else if (autoChangeMode === '2') {
  now = new Date()
  hour = now.getHours()
  isNight = hour <= 6 || hour >= 18
  if (t === undefined) isNight ? activateDarkMode() : activateLightMode()
  else if (t === 'light') activateLightMode()
  else activateDarkMode()
} else {
  if (t === 'dark') activateDarkMode()
  else if (t === 'light') activateLightMode()
}</script><link rel="stylesheet" href="/ZhengLin-Li.github.io.butterfly/css/index.css"><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free/css/all.min.css"><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.css"><script>var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?0773dcadd0397be86eb74da114bd1757";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script><link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Titillium+Web&amp;display=swap"><script>var GLOBAL_CONFIG = { 
  root: '/ZhengLin-Li.github.io.butterfly/',
  algolia: undefined,
  localSearch: undefined,
  translate: {"defaultEncoding":2,"translateDelay":0,"msgToTraditionalChinese":"繁","msgToSimplifiedChinese":"簡"},
  noticeOutdate: undefined,
  copy: {
    success: '复制成功',
    error: '复制错误',
    noSupport: '浏览器不支持'
  },
  bookmark: {
    message_prev: '按',
    message_next: '键将本页加入书签'
  },
  runtime_unit: '天',
  runtime: false,
  copyright: undefined,
  ClickShowText: undefined,
  medium_zoom: false,
  fancybox: true,
  Snackbar: undefined,
  justifiedGallery: {
    js: 'https://cdn.jsdelivr.net/npm/justifiedGallery/dist/js/jquery.justifiedGallery.min.js',
    css: 'https://cdn.jsdelivr.net/npm/justifiedGallery/dist/css/justifiedGallery.min.css'
  },
  baiduPush: true,
  highlightCopy: true,
  highlightLang: true,
  isPhotoFigcaption: true,
  islazyload: true,
  isanchor: false    
}</script><script id="config_change">var GLOBAL_CONFIG_SITE = { 
  isPost: true,
  isHome: false,
  isHighlightShrink: false,
  isSidebar: false,
  postUpdate: '2023-01-18 19:42:29'
}</script><noscript><style>
#nav {
  opacity: 1
}
.justified-gallery img {
  opacity: 1
}
</style></noscript><link rel="stylesheet" href="/css/iconfont.css"><meta name="generator" content="Hexo 4.2.1"></head><body><div id="loading-box"><div class="loading-left-bg"></div><div class="loading-right-bg"></div><div class="spinner-box"><div class="configure-border-1"><div class="configure-core"></div></div><div class="configure-border-2"><div class="configure-core"></div></div><div class="loading-word">加载中...</div></div></div><div id="mobile-sidebar"><div id="menu_mask"></div><div id="mobile-sidebar-menus"><div class="mobile_author_icon"><img class="avatar-img" data-lazy-src="/ZhengLin-Li.github.io.butterfly/img/avatar.png" onerror="onerror=null;src='/img/friend_404.gif'" alt="avatar"/></div><div class="mobile_post_data"><div class="mobile_data_item is-center"><div class="mobile_data_link"><a href="/ZhengLin-Li.github.io.butterfly/archives/"><div class="headline">文章</div><div class="length_num">42</div></a></div></div><div class="mobile_data_item is-center">      <div class="mobile_data_link"><a href="/ZhengLin-Li.github.io.butterfly/tags/"><div class="headline">标签</div><div class="length_num">15</div></a></div></div><div class="mobile_data_item is-center">     <div class="mobile_data_link"><a href="/ZhengLin-Li.github.io.butterfly/categories/"><div class="headline">分类</div><div class="length_num">9</div></a></div></div></div><hr/><div class="menus_items"><div class="menus_item"><a class="site-page" href="/ZhengLin-Li.github.io.butterfly/"><i class="fa-fw fas fa-home"></i><span> 首页</span></a></div><div class="menus_item"><a class="site-page" href="/ZhengLin-Li.github.io.butterfly/archives/"><i class="fa-fw fas fa-archive"></i><span> 时间轴</span></a></div><div class="menus_item"><a class="site-page" href="/ZhengLin-Li.github.io.butterfly/tags/"><i class="fa-fw fas fa-tags"></i><span> 标签</span></a></div><div class="menus_item"><a class="site-page" href="/ZhengLin-Li.github.io.butterfly/categories/"><i class="fa-fw fas fa-folder-open"></i><span> 分类</span></a></div><div class="menus_item"><a class="site-page" href="javascript:void(0);"><i class="fa-fw fa fa-heartbeat"></i><span> 清单</span><i class="fas fa-chevron-down expand"></i></a><ul class="menus_item_child"><li><a class="site-page" href="/ZhengLin-Li.github.io.butterfly/books/"><i class="fa-fw fas fa-book"></i><span> 书籍</span></a></li><li><a class="site-page" href="/ZhengLin-Li.github.io.butterfly/games/"><i class="fa-fw fas fa-gamepad"></i><span> 游戏</span></a></li><li><a class="site-page" href="/ZhengLin-Li.github.io.butterfly/music/"><i class="fa-fw fas fa-music"></i><span> 音乐</span></a></li><li><a class="site-page" href="/ZhengLin-Li.github.io.butterfly/movies/"><i class="fa-fw fas fa-video"></i><span> 电影</span></a></li></ul></div><div class="menus_item"><a class="site-page" href="/ZhengLin-Li.github.io.butterfly/link/"><i class="fa-fw fas fa-link"></i><span> 友链</span></a></div><div class="menus_item"><a class="site-page" href="/ZhengLin-Li.github.io.butterfly/about/"><i class="fa-fw fas fa-heart"></i><span> 关于</span></a></div></div></div></div><div id="body-wrap"><div id="web_bg" data-type="photo"></div><header class="post-bg" id="page-header" style="background-image: url(https://cdn.jsdelivr.net/gh/useblue/ucdn/imgs/bp-6.webp)"><nav id="nav"><span class="pull-left" id="blog_name"><a class="blog_title" id="site-name" href="/ZhengLin-Li.github.io.butterfly/">熊儿老猫的博客</a></span><span class="pull-right menus"><div class="menus_items"><div class="menus_item"><a class="site-page" href="/ZhengLin-Li.github.io.butterfly/"><i class="fa-fw fas fa-home"></i><span> 首页</span></a></div><div class="menus_item"><a class="site-page" href="/ZhengLin-Li.github.io.butterfly/archives/"><i class="fa-fw fas fa-archive"></i><span> 时间轴</span></a></div><div class="menus_item"><a class="site-page" href="/ZhengLin-Li.github.io.butterfly/tags/"><i class="fa-fw fas fa-tags"></i><span> 标签</span></a></div><div class="menus_item"><a class="site-page" href="/ZhengLin-Li.github.io.butterfly/categories/"><i class="fa-fw fas fa-folder-open"></i><span> 分类</span></a></div><div class="menus_item"><a class="site-page" href="javascript:void(0);"><i class="fa-fw fa fa-heartbeat"></i><span> 清单</span><i class="fas fa-chevron-down expand"></i></a><ul class="menus_item_child"><li><a class="site-page" href="/ZhengLin-Li.github.io.butterfly/books/"><i class="fa-fw fas fa-book"></i><span> 书籍</span></a></li><li><a class="site-page" href="/ZhengLin-Li.github.io.butterfly/games/"><i class="fa-fw fas fa-gamepad"></i><span> 游戏</span></a></li><li><a class="site-page" href="/ZhengLin-Li.github.io.butterfly/music/"><i class="fa-fw fas fa-music"></i><span> 音乐</span></a></li><li><a class="site-page" href="/ZhengLin-Li.github.io.butterfly/movies/"><i class="fa-fw fas fa-video"></i><span> 电影</span></a></li></ul></div><div class="menus_item"><a class="site-page" href="/ZhengLin-Li.github.io.butterfly/link/"><i class="fa-fw fas fa-link"></i><span> 友链</span></a></div><div class="menus_item"><a class="site-page" href="/ZhengLin-Li.github.io.butterfly/about/"><i class="fa-fw fas fa-heart"></i><span> 关于</span></a></div></div><span class="toggle-menu close"><a class="site-page"><i class="fas fa-bars fa-fw"></i></a></span></span></nav><div id="post-info"><div id="post-title"><div class="posttitle">A first look at C++ (2)</div></div><div id="post-meta"><div class="meta-firstline"><span class="post-meta-date"><i class="far fa-calendar-alt fa-fw post-meta-icon"></i><span class="post-meta-label">发表于</span><time class="post-meta-date-created" datetime="2023-01-18T12:11:43.021Z" title="发表于 2023-01-18 20:11:43">2023-01-18</time><span class="post-meta-separator">|</span><i class="fas fa-history fa-fw post-meta-icon"></i><span class="post-meta-label">更新于</span><time class="post-meta-date-updated" datetime="2023-01-18T11:42:29.249Z" title="更新于 2023-01-18 19:42:29">2023-01-18</time></span></div><div class="meta-secondline"> <span class="post-meta-separator">|</span><span class="post-meta-wordcount"><i class="far fa-file-word fa-fw post-meta-icon"></i><span class="post-meta-label">字数总计:</span><span class="word-count">16.7k</span><span class="post-meta-separator">|</span><i class="far fa-clock fa-fw post-meta-icon"></i><span class="post-meta-label">阅读时长:</span><span>68分钟</span></span><span class="post-meta-separator">|</span><span class="post-meta-pv-cv"><i class="far fa-eye fa-fw post-meta-icon"></i><span class="post-meta-label">阅读量:</span><span id="busuanzi_value_page_pv"></span></span></div></div></div></header><main class="layout_post" id="content-inner"><article id="post"><div class="post-content" id="article-container"><p>C++核心编程<br>本阶段主要针对 C++==面向对象==编程技术做详细讲解，探讨 C++中的核心和精髓。</p>
<p>1 内存分区模型<br>C++程序在执行时，将内存大方向划分为 4 个区域</p>
<p>代码区：存放函数体的二进制代码，由操作系统进行管理的<br>全局区：存放全局变量和静态变量以及常量<br>栈区：由编译器自动分配释放, 存放函数的参数值,局部变量等<br>堆区：由程序员分配和释放,若程序员不释放,程序结束时由操作系统回收<br>内存四区意义：</p>
<p>不同区域存放的数据，赋予不同的生命周期, 给我们更大的灵活编程</p>
<p>1.1 程序运行前<br>​ 在程序编译后，生成了 exe 可执行程序，未执行该程序前分为两个区域</p>
<p>​ 代码区：</p>
<p>​ 存放 CPU 执行的机器指令</p>
<p>​ 代码区是共享的，共享的目的是对于频繁被执行的程序，只需要在内存中有一份代码即可</p>
<p>​ 代码区是只读的，使其只读的原因是防止程序意外地修改了它的指令</p>
<p>​ 全局区：</p>
<p>​ 全局变量和静态变量存放在此.</p>
<p>​ 全局区还包含了常量区, 字符串常量和其他常量也存放在此.</p>
<p>​ ==该区域的数据在程序结束后由操作系统释放==.</p>
<p>示例：</p>
<p>C++<br>//全局变量<br>int g_a = 10;<br>int g_b = 10;</p>
<p>//全局常量<br>const int c_g_a = 10;<br>const int c_g_b = 10;</p>
<p>int main() {</p>
<pre><code>//局部变量
int a = 10;
int b = 10;

//打印地址
cout &lt;&lt; &quot;局部变量a地址为： &quot; &lt;&lt; (int)&amp;a &lt;&lt; endl;
cout &lt;&lt; &quot;局部变量b地址为： &quot; &lt;&lt; (int)&amp;b &lt;&lt; endl;

cout &lt;&lt; &quot;全局变量g_a地址为： &quot; &lt;&lt;  (int)&amp;g_a &lt;&lt; endl;
cout &lt;&lt; &quot;全局变量g_b地址为： &quot; &lt;&lt;  (int)&amp;g_b &lt;&lt; endl;

//静态变量
static int s_a = 10;
static int s_b = 10;

cout &lt;&lt; &quot;静态变量s_a地址为： &quot; &lt;&lt; (int)&amp;s_a &lt;&lt; endl;
cout &lt;&lt; &quot;静态变量s_b地址为： &quot; &lt;&lt; (int)&amp;s_b &lt;&lt; endl;

cout &lt;&lt; &quot;字符串常量地址为： &quot; &lt;&lt; (int)&amp;&quot;hello world&quot; &lt;&lt; endl;
cout &lt;&lt; &quot;字符串常量地址为： &quot; &lt;&lt; (int)&amp;&quot;hello world1&quot; &lt;&lt; endl;

cout &lt;&lt; &quot;全局常量c_g_a地址为： &quot; &lt;&lt; (int)&amp;c_g_a &lt;&lt; endl;
cout &lt;&lt; &quot;全局常量c_g_b地址为： &quot; &lt;&lt; (int)&amp;c_g_b &lt;&lt; endl;

const int c_l_a = 10;
const int c_l_b = 10;
cout &lt;&lt; &quot;局部常量c_l_a地址为： &quot; &lt;&lt; (int)&amp;c_l_a &lt;&lt; endl;
cout &lt;&lt; &quot;局部常量c_l_b地址为： &quot; &lt;&lt; (int)&amp;c_l_b &lt;&lt; endl;

system(&quot;pause&quot;);

return 0;</code></pre><p>}<br>打印结果：</p>
<p>1545017602518<br>1545017602518</p>
<p>总结：</p>
<p>C++中在程序运行前分为全局区和代码区<br>代码区特点是共享和只读<br>全局区中存放全局变量、静态变量、常量<br>常量区中存放 const 修饰的全局常量 和 字符串常量<br>1.2 程序运行后<br>​ 栈区：</p>
<p>​ 由编译器自动分配释放, 存放函数的参数值,局部变量等</p>
<p>​ 注意事项：不要返回局部变量的地址，栈区开辟的数据由编译器自动释放</p>
<p>示例：</p>
<p>C++<br>int * func()<br>{<br>int a = 10;<br>return &a;<br>}</p>
<p>int main() {</p>
<pre><code>int *p = func();

cout &lt;&lt; *p &lt;&lt; endl;
cout &lt;&lt; *p &lt;&lt; endl;

system(&quot;pause&quot;);

return 0;</code></pre><p>}<br>​ 堆区：</p>
<p>​ 由程序员分配释放,若程序员不释放,程序结束时由操作系统回收</p>
<p>​ 在 C++中主要利用 new 在堆区开辟内存</p>
<p>示例：</p>
<p>C++<br>int* func()<br>{<br>int* a = new int(10);<br>return a;<br>}</p>
<p>int main() {</p>
<pre><code>int *p = func();

cout &lt;&lt; *p &lt;&lt; endl;
cout &lt;&lt; *p &lt;&lt; endl;

system(&quot;pause&quot;);

return 0;</code></pre><p>}<br>总结：</p>
<p>堆区数据由程序员管理开辟和释放</p>
<p>堆区数据利用 new 关键字进行开辟内存</p>
<p>1.3 new 操作符<br>​ C++中利用==new==操作符在堆区开辟数据</p>
<p>​ 堆区开辟的数据，由程序员手动开辟，手动释放，释放利用操作符 ==delete==</p>
<p>​ 语法：new 数据类型</p>
<p>​ 利用 new 创建的数据，会返回该数据对应的类型的指针</p>
<p>示例 1： 基本语法</p>
<p>C++<br>int* func()<br>{<br>int* a = new int(10);<br>return a;<br>}</p>
<p>int main() {</p>
<pre><code>int *p = func();

cout &lt;&lt; *p &lt;&lt; endl;
cout &lt;&lt; *p &lt;&lt; endl;

//利用delete释放堆区数据
delete p;

//cout &lt;&lt; *p &lt;&lt; endl; //报错，释放的空间不可访问

system(&quot;pause&quot;);

return 0;</code></pre><p>}<br>示例 2：开辟数组</p>
<p>C++<br>//堆区开辟数组<br>int main() {</p>
<pre><code>int* arr = new int[10];

for (int i = 0; i &lt; 10; i++)
{
    arr[i] = i + 100;
}

for (int i = 0; i &lt; 10; i++)
{
    cout &lt;&lt; arr[i] &lt;&lt; endl;
}
//释放数组 delete 后加 []
delete[] arr;

system(&quot;pause&quot;);

return 0;</code></pre><p>}<br>2 引用<br>2.1 引用的基本使用<br>*作用： *给变量起别名</p>
<p>语法： 数据类型 &amp;别名 = 原名</p>
<p>示例：</p>
<p>C++<br>int main() {</p>
<pre><code>int a = 10;
int &amp;b = a;

cout &lt;&lt; &quot;a = &quot; &lt;&lt; a &lt;&lt; endl;
cout &lt;&lt; &quot;b = &quot; &lt;&lt; b &lt;&lt; endl;

b = 100;

cout &lt;&lt; &quot;a = &quot; &lt;&lt; a &lt;&lt; endl;
cout &lt;&lt; &quot;b = &quot; &lt;&lt; b &lt;&lt; endl;

system(&quot;pause&quot;);

return 0;</code></pre><p>}<br>2.2 引用注意事项<br>引用必须初始化<br>引用在初始化后，不可以改变<br>示例：</p>
<p>C++<br>int main() {</p>
<pre><code>int a = 10;
int b = 20;
//int &amp;c; //错误，引用必须初始化
int &amp;c = a; //一旦初始化后，就不可以更改
c = b; //这是赋值操作，不是更改引用

cout &lt;&lt; &quot;a = &quot; &lt;&lt; a &lt;&lt; endl;
cout &lt;&lt; &quot;b = &quot; &lt;&lt; b &lt;&lt; endl;
cout &lt;&lt; &quot;c = &quot; &lt;&lt; c &lt;&lt; endl;

system(&quot;pause&quot;);

return 0;</code></pre><p>}<br>2.3 引用做函数参数<br>作用：函数传参时，可以利用引用的技术让形参修饰实参</p>
<p>优点：可以简化指针修改实参</p>
<p>示例：</p>
<p>C++<br>//1. 值传递<br>void mySwap01(int a, int b) {<br>int temp = a;<br>a = b;<br>b = temp;<br>}</p>
<p>//2. 地址传递<br>void mySwap02(int* a, int* b) {<br>int temp = *a;<br>*a = *b;<br>*b = temp;<br>}</p>
<p>//3. 引用传递<br>void mySwap03(int&amp; a, int&amp; b) {<br>int temp = a;<br>a = b;<br>b = temp;<br>}</p>
<p>int main() {</p>
<pre><code>int a = 10;
int b = 20;

mySwap01(a, b);
cout &lt;&lt; &quot;a:&quot; &lt;&lt; a &lt;&lt; &quot; b:&quot; &lt;&lt; b &lt;&lt; endl;

mySwap02(&amp;a, &amp;b);
cout &lt;&lt; &quot;a:&quot; &lt;&lt; a &lt;&lt; &quot; b:&quot; &lt;&lt; b &lt;&lt; endl;

mySwap03(a, b);
cout &lt;&lt; &quot;a:&quot; &lt;&lt; a &lt;&lt; &quot; b:&quot; &lt;&lt; b &lt;&lt; endl;

system(&quot;pause&quot;);

return 0;</code></pre><p>}<br>总结：通过引用参数产生的效果同按地址传递是一样的。引用的语法更清楚简单</p>
<p>2.4 引用做函数返回值<br>作用：引用是可以作为函数的返回值存在的</p>
<p>注意：不要返回局部变量引用</p>
<p>用法：函数调用作为左值</p>
<p>示例：</p>
<p>C++<br>//返回局部变量引用<br>int&amp; test01() {<br>int a = 10; //局部变量<br>return a;<br>}</p>
<p>//返回静态变量引用<br>int&amp; test02() {<br>static int a = 20;<br>return a;<br>}</p>
<p>int main() {</p>
<pre><code>//不能返回局部变量的引用
int&amp; ref = test01();
cout &lt;&lt; &quot;ref = &quot; &lt;&lt; ref &lt;&lt; endl;
cout &lt;&lt; &quot;ref = &quot; &lt;&lt; ref &lt;&lt; endl;

//如果函数做左值，那么必须返回引用
int&amp; ref2 = test02();
cout &lt;&lt; &quot;ref2 = &quot; &lt;&lt; ref2 &lt;&lt; endl;
cout &lt;&lt; &quot;ref2 = &quot; &lt;&lt; ref2 &lt;&lt; endl;

test02() = 1000;

cout &lt;&lt; &quot;ref2 = &quot; &lt;&lt; ref2 &lt;&lt; endl;
cout &lt;&lt; &quot;ref2 = &quot; &lt;&lt; ref2 &lt;&lt; endl;

system(&quot;pause&quot;);

return 0;</code></pre><p>}<br>​</p>
<p>2.5 引用的本质<br>本质：引用的本质在 c++内部实现是一个指针常量.</p>
<p>讲解示例：</p>
<p>C++<br>//发现是引用，转换为 int* const ref = &a;<br>void func(int&amp; ref){<br>ref = 100; // ref 是引用，转换为*ref = 100<br>}<br>int main(){<br>int a = 10;</p>
<pre><code>//自动转换为 int* const ref = &amp;a; 指针常量是指针指向不可改，也说明为什么引用不可更改
int&amp; ref = a;
ref = 20; //内部发现ref是引用，自动帮我们转换为: *ref = 20;

cout &lt;&lt; &quot;a:&quot; &lt;&lt; a &lt;&lt; endl;
cout &lt;&lt; &quot;ref:&quot; &lt;&lt; ref &lt;&lt; endl;

func(a);
return 0;</code></pre><p>}<br>结论：C++推荐用引用技术，因为语法方便，引用本质是指针常量，但是所有的指针操作编译器都帮我们做了</p>
<p>2.6 常量引用<br>作用：常量引用主要用来修饰形参，防止误操作</p>
<p>在函数形参列表中，可以加==const 修饰形参==，防止形参改变实参</p>
<p>示例：</p>
<p>C++<br>//引用使用的场景，通常用来修饰形参<br>void showValue(const int&amp; v) {<br>//v += 10;<br>cout &lt;&lt; v &lt;&lt; endl;<br>}</p>
<p>int main() {</p>
<pre><code>//int&amp; ref = 10;  引用本身需要一个合法的内存空间，因此这行错误
//加入const就可以了，编译器优化代码，int temp = 10; const int&amp; ref = temp;
const int&amp; ref = 10;

//ref = 100;  //加入const后不可以修改变量
cout &lt;&lt; ref &lt;&lt; endl;

//函数中利用常量引用防止误操作修改实参
int a = 10;
showValue(a);

system(&quot;pause&quot;);

return 0;</code></pre><p>}<br>3 函数提高<br>3.1 函数默认参数<br>在 C++中，函数的形参列表中的形参是可以有默认值的。</p>
<p>语法：返回值类型 函数名 （参数= 默认值）{}</p>
<p>示例：</p>
<p>C++<br>int func(int a, int b = 10, int c = 10) {<br>return a + b + c;<br>}</p>
<p>//1. 如果某个位置参数有默认值，那么从这个位置往后，从左向右，必须都要有默认值<br>//2. 如果函数声明有默认值，函数实现的时候就不能有默认参数<br>int func2(int a = 10, int b = 10);<br>int func2(int a, int b) {<br>return a + b;<br>}</p>
<p>int main() {</p>
<pre><code>cout &lt;&lt; &quot;ret = &quot; &lt;&lt; func(20, 20) &lt;&lt; endl;
cout &lt;&lt; &quot;ret = &quot; &lt;&lt; func(100) &lt;&lt; endl;

system(&quot;pause&quot;);

return 0;</code></pre><p>}<br>3.2 函数占位参数<br>C++中函数的形参列表里可以有占位参数，用来做占位，调用函数时必须填补该位置</p>
<p>语法： 返回值类型 函数名 (数据类型){}</p>
<p>在现阶段函数的占位参数存在意义不大，但是后面的课程中会用到该技术</p>
<p>示例：</p>
<p>C++<br>//函数占位参数 ，占位参数也可以有默认参数<br>void func(int a, int) {<br>cout &lt;&lt; “this is func” &lt;&lt; endl;<br>}</p>
<p>int main() {</p>
<pre><code>func(10,10); //占位参数必须填补

system(&quot;pause&quot;);

return 0;</code></pre><p>}<br>3.3 函数重载<br>3.3.1 函数重载概述<br>作用：函数名可以相同，提高复用性</p>
<p>函数重载满足条件：</p>
<p>同一个作用域下<br>函数名称相同<br>函数参数类型不同 或者 个数不同 或者 顺序不同<br>注意: 函数的返回值不可以作为函数重载的条件</p>
<p>示例：</p>
<p>C++<br>//函数重载需要函数都在同一个作用域下<br>void func()<br>{<br>cout &lt;&lt; “func 的调用！” &lt;&lt; endl;<br>}<br>void func(int a)<br>{<br>cout &lt;&lt; “func (int a) 的调用！” &lt;&lt; endl;<br>}<br>void func(double a)<br>{<br>cout &lt;&lt; “func (double a)的调用！” &lt;&lt; endl;<br>}<br>void func(int a ,double b)<br>{<br>cout &lt;&lt; “func (int a ,double b) 的调用！” &lt;&lt; endl;<br>}<br>void func(double a ,int b)<br>{<br>cout &lt;&lt; “func (double a ,int b)的调用！” &lt;&lt; endl;<br>}</p>
<p>//函数返回值不可以作为函数重载条件<br>//int func(double a, int b)<br>//{<br>// cout &lt;&lt; “func (double a ,int b)的调用！” &lt;&lt; endl;<br>//}</p>
<p>int main() {</p>
<pre><code>func();
func(10);
func(3.14);
func(10,3.14);
func(3.14 , 10);

system(&quot;pause&quot;);

return 0;</code></pre><p>}<br>3.3.2 函数重载注意事项<br>引用作为重载条件<br>函数重载碰到函数默认参数<br>示例：</p>
<p>C++<br>//函数重载注意事项<br>//1、引用作为重载条件</p>
<p>void func(int &amp;a)<br>{<br>cout &lt;&lt; “func (int &amp;a) 调用 “ &lt;&lt; endl;<br>}</p>
<p>void func(const int &amp;a)<br>{<br>cout &lt;&lt; “func (const int &amp;a) 调用 “ &lt;&lt; endl;<br>}</p>
<p>//2、函数重载碰到函数默认参数</p>
<p>void func2(int a, int b = 10)<br>{<br>cout &lt;&lt; “func2(int a, int b = 10) 调用” &lt;&lt; endl;<br>}</p>
<p>void func2(int a)<br>{<br>cout &lt;&lt; “func2(int a) 调用” &lt;&lt; endl;<br>}</p>
<p>int main() {<br>int a = 10;<br>func(a); //调用无 const<br>func(10);//调用有 const</p>
<pre><code>//func2(10); //碰到默认参数产生歧义，需要避免

system(&quot;pause&quot;);

return 0;</code></pre><p>}<br>4 类和对象<br>C++面向对象的三大特性为：==封装、继承、多态==</p>
<p>C++认为==万事万物都皆为对象==，对象上有其属性和行为</p>
<p>例如：</p>
<p>​ 人可以作为对象，属性有姓名、年龄、身高、体重…，行为有走、跑、跳、吃饭、唱歌…</p>
<p>​ 车也可以作为对象，属性有轮胎、方向盘、车灯…,行为有载人、放音乐、放空调…</p>
<p>​ 具有相同性质的==对象==，我们可以抽象称为==类==，人属于人类，车属于车类</p>
<p>4.1 封装<br>4.1.1 封装的意义<br>封装是 C++面向对象三大特性之一</p>
<p>封装的意义：</p>
<p>将属性和行为作为一个整体，表现生活中的事物<br>将属性和行为加以权限控制<br>封装意义一：</p>
<p>​ 在设计类的时候，属性和行为写在一起，表现事物</p>
<p>语法： class 类名{ 访问权限： 属性 / 行为 };</p>
<p>示例 1：设计一个圆类，求圆的周长</p>
<p>示例代码：</p>
<p>C++<br>//圆周率<br>const double PI = 3.14;</p>
<p>//1、封装的意义<br>//将属性和行为作为一个整体，用来表现生活中的事物</p>
<p>//封装一个圆类，求圆的周长<br>//class 代表设计一个类，后面跟着的是类名<br>class Circle<br>{<br>public: //访问权限 公共的权限</p>
<pre><code>//属性
int m_r;//半径

//行为
//获取到圆的周长
double calculateZC()
{
    //2 * pi  * r
    //获取圆的周长
    return  2 * PI * m_r;
}</code></pre><p>};</p>
<p>int main() {</p>
<pre><code>//通过圆类，创建圆的对象
// c1就是一个具体的圆
Circle c1;
c1.m_r = 10; //给圆对象的半径 进行赋值操作

//2 * pi * 10 = = 62.8
cout &lt;&lt; &quot;圆的周长为： &quot; &lt;&lt; c1.calculateZC() &lt;&lt; endl;

system(&quot;pause&quot;);

return 0;</code></pre><p>}<br>示例 2：设计一个学生类，属性有姓名和学号，可以给姓名和学号赋值，可以显示学生的姓名和学号</p>
<p>示例 2 代码：</p>
<p>C++<br>//学生类<br>class Student {<br>public:<br>void setName(string name) {<br>m_name = name;<br>}<br>void setID(int id) {<br>m_id = id;<br>}</p>
<pre><code>void showStudent() {
    cout &lt;&lt; &quot;name:&quot; &lt;&lt; m_name &lt;&lt; &quot; ID:&quot; &lt;&lt; m_id &lt;&lt; endl;
}</code></pre><p>public:<br>string m_name;<br>int m_id;<br>};</p>
<p>int main() {</p>
<pre><code>Student stu;
stu.setName(&quot;德玛西亚&quot;);
stu.setID(250);
stu.showStudent();

system(&quot;pause&quot;);

return 0;</code></pre><p>}<br>封装意义二：</p>
<p>类在设计时，可以把属性和行为放在不同的权限下，加以控制</p>
<p>访问权限有三种：</p>
<p>public 公共权限<br>protected 保护权限<br>private 私有权限<br>示例：</p>
<p>C++<br>//三种权限<br>//公共权限 public 类内可以访问 类外可以访问<br>//保护权限 protected 类内可以访问 类外不可以访问<br>//私有权限 private 类内可以访问 类外不可以访问</p>
<p>class Person<br>{<br>//姓名 公共权限<br>public:<br>string m_Name;</p>
<pre><code>//汽车  保护权限</code></pre><p>protected:<br>string m_Car;</p>
<pre><code>//银行卡密码  私有权限</code></pre><p>private:<br>int m_Password;</p>
<p>public:<br>void func()<br>{<br>m_Name = “张三”;<br>m_Car = “拖拉机”;<br>m_Password = 123456;<br>}<br>};</p>
<p>int main() {</p>
<pre><code>Person p;
p.m_Name = &quot;李四&quot;;
//p.m_Car = &quot;奔驰&quot;;  //保护权限类外访问不到
//p.m_Password = 123; //私有权限类外访问不到

system(&quot;pause&quot;);

return 0;</code></pre><p>}<br>4.1.2 struct 和 class 区别<br>在 C++中 struct 和 class 唯一的区别就在于 默认的访问权限不同</p>
<p>区别：</p>
<p>struct 默认权限为公共<br>class 默认权限为私有<br>C++<br>class C1<br>{<br>int m_A; //默认是私有权限<br>};</p>
<p>struct C2<br>{<br>int m_A; //默认是公共权限<br>};</p>
<p>int main() {</p>
<pre><code>C1 c1;
c1.m_A = 10; //错误，访问权限是私有

C2 c2;
c2.m_A = 10; //正确，访问权限是公共

system(&quot;pause&quot;);

return 0;</code></pre><p>}<br>4.1.3 成员属性设置为私有<br>优点 1：将所有成员属性设置为私有，可以自己控制读写权限</p>
<p>优点 2：对于写权限，我们可以检测数据的有效性</p>
<p>示例：</p>
<p>C++<br>class Person {<br>public:</p>
<pre><code>//姓名设置可读可写
void setName(string name) {
    m_Name = name;
}
string getName()
{
    return m_Name;
}


//获取年龄
int getAge() {
    return m_Age;
}
//设置年龄
void setAge(int age) {
    if (age &lt; 0 || age &gt; 150) {
        cout &lt;&lt; &quot;你个老妖精!&quot; &lt;&lt; endl;
        return;
    }
    m_Age = age;
}

//情人设置为只写
void setLover(string lover) {
    m_Lover = lover;
}</code></pre><p>private:<br>string m_Name; //可读可写 姓名<br>int m_Age; //只读 年龄</p>
<pre><code>string m_Lover; //只写  情人</code></pre><p>};</p>
<p>int main() {</p>
<pre><code>Person p;
//姓名设置
p.setName(&quot;张三&quot;);
cout &lt;&lt; &quot;姓名： &quot; &lt;&lt; p.getName() &lt;&lt; endl;

//年龄设置
p.setAge(50);
cout &lt;&lt; &quot;年龄： &quot; &lt;&lt; p.getAge() &lt;&lt; endl;

//情人设置
p.setLover(&quot;苍井&quot;);
//cout &lt;&lt; &quot;情人： &quot; &lt;&lt; p.m_Lover &lt;&lt; endl;  //只写属性，不可以读取

system(&quot;pause&quot;);

return 0;</code></pre><p>}<br>练习案例 1：设计立方体类</p>
<p>设计立方体类(Cube)</p>
<p>求出立方体的面积和体积</p>
<p>分别用全局函数和成员函数判断两个立方体是否相等。</p>
<p>1545533548532<br>1545533548532</p>
<p>练习案例 2：点和圆的关系</p>
<p>设计一个圆形类（Circle），和一个点类（Point），计算点和圆的关系。</p>
<p>1545533829184<br>1545533829184</p>
<p>4.2 对象的初始化和清理<br>生活中我们买的电子产品都基本会有出厂设置，在某一天我们不用时候也会删除一些自己信息数据保证安全<br>C++中的面向对象来源于生活，每个对象也都会有初始设置以及 对象销毁前的清理数据的设置。<br>4.2.1 构造函数和析构函数<br>对象的初始化和清理也是两个非常重要的安全问题</p>
<p>​ 一个对象或者变量没有初始状态，对其使用后果是未知</p>
<p>​ 同样的使用完一个对象或变量，没有及时清理，也会造成一定的安全问题</p>
<p>c++利用了构造函数和析构函数解决上述问题，这两个函数将会被编译器自动调用，完成对象初始化和清理工作。</p>
<p>对象的初始化和清理工作是编译器强制要我们做的事情，因此如果我们不提供构造和析构，编译器会提供</p>
<p>编译器提供的构造函数和析构函数是空实现。</p>
<p>构造函数：主要作用在于创建对象时为对象的成员属性赋值，构造函数由编译器自动调用，无须手动调用。<br>析构函数：主要作用在于对象销毁前系统自动调用，执行一些清理工作。<br>构造函数语法：类名(){}</p>
<p>构造函数，没有返回值也不写 void<br>函数名称与类名相同<br>构造函数可以有参数，因此可以发生重载<br>程序在调用对象时候会自动调用构造，无须手动调用,而且只会调用一次<br>析构函数语法： ~类名(){}</p>
<p>析构函数，没有返回值也不写 void<br>函数名称与类名相同,在名称前加上符号 ~<br>析构函数不可以有参数，因此不可以发生重载<br>程序在对象销毁前会自动调用析构，无须手动调用,而且只会调用一次<br>C++<br>class Person<br>{<br>public:<br>//构造函数<br>Person()<br>{<br>cout &lt;&lt; “Person 的构造函数调用” &lt;&lt; endl;<br>}<br>//析构函数<br>~Person()<br>{<br>cout &lt;&lt; “Person 的析构函数调用” &lt;&lt; endl;<br>}</p>
<p>};</p>
<p>void test01()<br>{<br>Person p;<br>}</p>
<p>int main() {<br>test01();</p>
<pre><code>system(&quot;pause&quot;);

return 0;</code></pre><p>}<br>4.2.2 构造函数的分类及调用<br>两种分类方式：</p>
<p>​ 按参数分为： 有参构造和无参构造</p>
<p>​ 按类型分为： 普通构造和拷贝构造</p>
<p>三种调用方式：</p>
<p>​ 括号法</p>
<p>​ 显示法</p>
<p>​ 隐式转换法</p>
<p>示例：</p>
<p>C++<br>//1、构造函数分类<br>// 按照参数分类分为 有参和无参构造 无参又称为默认构造函数<br>// 按照类型分类分为 普通构造和拷贝构造</p>
<p>class Person {<br>public:<br>//无参（默认）构造函数<br>Person() {<br>cout &lt;&lt; “无参构造函数!” &lt;&lt; endl;<br>}<br>//有参构造函数<br>Person(int a) {<br>age = a;<br>cout &lt;&lt; “有参构造函数!” &lt;&lt; endl;<br>}<br>//拷贝构造函数<br>Person(const Person&amp; p) {<br>age = p.age;<br>cout &lt;&lt; “拷贝构造函数!” &lt;&lt; endl;<br>}<br>//析构函数<br>~Person() {<br>cout &lt;&lt; “析构函数!” &lt;&lt; endl;<br>}<br>public:<br>int age;<br>};</p>
<p>//2、构造函数的调用<br>//调用无参构造函数<br>void test01() {<br>Person p; //调用无参构造函数<br>}</p>
<p>//调用有参的构造函数<br>void test02() {</p>
<pre><code>//2.1  括号法，常用
Person p1(10);
//注意1：调用无参构造函数不能加括号，如果加了编译器认为这是一个函数声明
//Person p2();

//2.2 显式法
Person p2 = Person(10);
Person p3 = Person(p2);
//Person(10)单独写就是匿名对象  当前行结束之后，马上析构

//2.3 隐式转换法
Person p4 = 10; // Person p4 = Person(10);
Person p5 = p4; // Person p5 = Person(p4);

//注意2：不能利用 拷贝构造函数 初始化匿名对象 编译器认为是对象声明
//Person p5(p4);</code></pre><p>}</p>
<p>int main() {</p>
<pre><code>test01();
//test02();

system(&quot;pause&quot;);

return 0;</code></pre><p>}<br>4.2.3 拷贝构造函数调用时机<br>C++中拷贝构造函数调用时机通常有三种情况</p>
<p>使用一个已经创建完毕的对象来初始化一个新对象<br>值传递的方式给函数参数传值<br>以值方式返回局部对象<br>示例：</p>
<p>C++<br>class Person {<br>public:<br>Person() {<br>cout &lt;&lt; “无参构造函数!” &lt;&lt; endl;<br>mAge = 0;<br>}<br>Person(int age) {<br>cout &lt;&lt; “有参构造函数!” &lt;&lt; endl;<br>mAge = age;<br>}<br>Person(const Person&amp; p) {<br>cout &lt;&lt; “拷贝构造函数!” &lt;&lt; endl;<br>mAge = p.mAge;<br>}<br>//析构函数在释放内存之前调用<br>~Person() {<br>cout &lt;&lt; “析构函数!” &lt;&lt; endl;<br>}<br>public:<br>int mAge;<br>};</p>
<p>//1. 使用一个已经创建完毕的对象来初始化一个新对象<br>void test01() {</p>
<pre><code>Person man(100); //p对象已经创建完毕
Person newman(man); //调用拷贝构造函数
Person newman2 = man; //拷贝构造

//Person newman3;
//newman3 = man; //不是调用拷贝构造函数，赋值操作</code></pre><p>}</p>
<p>//2. 值传递的方式给函数参数传值<br>//相当于 Person p1 = p;<br>void doWork(Person p1) {}<br>void test02() {<br>Person p; //无参构造函数<br>doWork(p);<br>}</p>
<p>//3. 以值方式返回局部对象<br>Person doWork2()<br>{<br>Person p1;<br>cout &lt;&lt; (int *)&amp;p1 &lt;&lt; endl;<br>return p1;<br>}</p>
<p>void test03()<br>{<br>Person p = doWork2();<br>cout &lt;&lt; (int *)&amp;p &lt;&lt; endl;<br>}</p>
<p>int main() {</p>
<pre><code>//test01();
//test02();
test03();

system(&quot;pause&quot;);

return 0;</code></pre><p>}<br>4.2.4 构造函数调用规则<br>默认情况下，c++编译器至少给一个类添加 3 个函数</p>
<p>1．默认构造函数(无参，函数体为空)</p>
<p>2．默认析构函数(无参，函数体为空)</p>
<p>3．默认拷贝构造函数，对属性进行值拷贝</p>
<p>构造函数调用规则如下：</p>
<p>如果用户定义有参构造函数，c++不在提供默认无参构造，但是会提供默认拷贝构造<br>如果用户定义拷贝构造函数，c++不会再提供其他构造函数<br>示例：</p>
<p>C++<br>class Person {<br>public:<br>//无参（默认）构造函数<br>Person() {<br>cout &lt;&lt; “无参构造函数!” &lt;&lt; endl;<br>}<br>//有参构造函数<br>Person(int a) {<br>age = a;<br>cout &lt;&lt; “有参构造函数!” &lt;&lt; endl;<br>}<br>//拷贝构造函数<br>Person(const Person&amp; p) {<br>age = p.age;<br>cout &lt;&lt; “拷贝构造函数!” &lt;&lt; endl;<br>}<br>//析构函数<br>~Person() {<br>cout &lt;&lt; “析构函数!” &lt;&lt; endl;<br>}<br>public:<br>int age;<br>};</p>
<p>void test01()<br>{<br>Person p1(18);<br>//如果不写拷贝构造，编译器会自动添加拷贝构造，并且做浅拷贝操作<br>Person p2(p1);</p>
<pre><code>cout &lt;&lt; &quot;p2的年龄为： &quot; &lt;&lt; p2.age &lt;&lt; endl;</code></pre><p>}</p>
<p>void test02()<br>{<br>//如果用户提供有参构造，编译器不会提供默认构造，会提供拷贝构造<br>Person p1; //此时如果用户自己没有提供默认构造，会出错<br>Person p2(10); //用户提供的有参<br>Person p3(p2); //此时如果用户没有提供拷贝构造，编译器会提供</p>
<pre><code>//如果用户提供拷贝构造，编译器不会提供其他构造函数
Person p4; //此时如果用户自己没有提供默认构造，会出错
Person p5(10); //此时如果用户自己没有提供有参，会出错
Person p6(p5); //用户自己提供拷贝构造</code></pre><p>}</p>
<p>int main() {</p>
<pre><code>test01();

system(&quot;pause&quot;);

return 0;</code></pre><p>}<br>4.2.5 深拷贝与浅拷贝<br>深浅拷贝是面试经典问题，也是常见的一个坑</p>
<p>浅拷贝：简单的赋值拷贝操作</p>
<p>深拷贝：在堆区重新申请空间，进行拷贝操作</p>
<p>示例：</p>
<p>C++<br>class Person {<br>public:<br>//无参（默认）构造函数<br>Person() {<br>cout &lt;&lt; “无参构造函数!” &lt;&lt; endl;<br>}<br>//有参构造函数<br>Person(int age ,int height) {<br>cout &lt;&lt; “有参构造函数!” &lt;&lt; endl;</p>
<pre><code>    m_age = age;
    m_height = new int(height);

}
//拷贝构造函数
Person(const Person&amp; p) {
    cout &lt;&lt; &quot;拷贝构造函数!&quot; &lt;&lt; endl;
    //如果不利用深拷贝在堆区创建新内存，会导致浅拷贝带来的重复释放堆区问题
    m_age = p.m_age;
    m_height = new int(*p.m_height);

}

//析构函数
~Person() {
    cout &lt;&lt; &quot;析构函数!&quot; &lt;&lt; endl;
    if (m_height != NULL)
    {
        delete m_height;
    }
}</code></pre><p>public:<br>int m_age;<br>int* m_height;<br>};</p>
<p>void test01()<br>{<br>Person p1(18, 180);</p>
<pre><code>Person p2(p1);

cout &lt;&lt; &quot;p1的年龄： &quot; &lt;&lt; p1.m_age &lt;&lt; &quot; 身高： &quot; &lt;&lt; *p1.m_height &lt;&lt; endl;

cout &lt;&lt; &quot;p2的年龄： &quot; &lt;&lt; p2.m_age &lt;&lt; &quot; 身高： &quot; &lt;&lt; *p2.m_height &lt;&lt; endl;</code></pre><p>}</p>
<p>int main() {</p>
<pre><code>test01();

system(&quot;pause&quot;);

return 0;</code></pre><p>}<br>总结：如果属性有在堆区开辟的，一定要自己提供拷贝构造函数，防止浅拷贝带来的问题</p>
<p>4.2.6 初始化列表<br>作用：</p>
<p>C++提供了初始化列表语法，用来初始化属性</p>
<p>语法：构造函数()：属性 1(值 1),属性 2（值 2）… {}</p>
<p>示例：</p>
<p>C++<br>class Person {<br>public:</p>
<pre><code>////传统方式初始化
//Person(int a, int b, int c) {
//    m_A = a;
//    m_B = b;
//    m_C = c;
//}

//初始化列表方式初始化
Person(int a, int b, int c) :m_A(a), m_B(b), m_C(c) {}
void PrintPerson() {
    cout &lt;&lt; &quot;mA:&quot; &lt;&lt; m_A &lt;&lt; endl;
    cout &lt;&lt; &quot;mB:&quot; &lt;&lt; m_B &lt;&lt; endl;
    cout &lt;&lt; &quot;mC:&quot; &lt;&lt; m_C &lt;&lt; endl;
}</code></pre><p>private:<br>int m_A;<br>int m_B;<br>int m_C;<br>};</p>
<p>int main() {</p>
<pre><code>Person p(1, 2, 3);
p.PrintPerson();


system(&quot;pause&quot;);

return 0;</code></pre><p>}<br>4.2.7 类对象作为类成员<br>C++类中的成员可以是另一个类的对象，我们称该成员为 对象成员</p>
<p>例如：</p>
<p>C++<br>class A {}<br>class B<br>{<br>A a；<br>}<br>B 类中有对象 A 作为成员，A 为对象成员</p>
<p>那么当创建 B 对象时，A 与 B 的构造和析构的顺序是谁先谁后？</p>
<p>示例：</p>
<p>C++<br>class Phone<br>{<br>public:<br>Phone(string name)<br>{<br>m_PhoneName = name;<br>cout &lt;&lt; “Phone 构造” &lt;&lt; endl;<br>}</p>
<pre><code>~Phone()
{
    cout &lt;&lt; &quot;Phone析构&quot; &lt;&lt; endl;
}

string m_PhoneName;</code></pre><p>};</p>
<p>class Person<br>{<br>public:</p>
<pre><code>//初始化列表可以告诉编译器调用哪一个构造函数
Person(string name, string pName) :m_Name(name), m_Phone(pName)
{
    cout &lt;&lt; &quot;Person构造&quot; &lt;&lt; endl;
}

~Person()
{
    cout &lt;&lt; &quot;Person析构&quot; &lt;&lt; endl;
}

void playGame()
{
    cout &lt;&lt; m_Name &lt;&lt; &quot; 使用&quot; &lt;&lt; m_Phone.m_PhoneName &lt;&lt; &quot; 牌手机! &quot; &lt;&lt; endl;
}

string m_Name;
Phone m_Phone;</code></pre><p>};<br>void test01()<br>{<br>//当类中成员是其他类对象时，我们称该成员为 对象成员<br>//构造的顺序是 ：先调用对象成员的构造，再调用本类构造<br>//析构顺序与构造相反<br>Person p(“张三” , “苹果 X”);<br>p.playGame();</p>
<p>}</p>
<p>int main() {</p>
<pre><code>test01();

system(&quot;pause&quot;);

return 0;</code></pre><p>}<br>4.2.8 静态成员<br>静态成员就是在成员变量和成员函数前加上关键字 static，称为静态成员</p>
<p>静态成员分为：</p>
<p>静态成员变量<br>所有对象共享同一份数据<br>在编译阶段分配内存<br>类内声明，类外初始化<br>静态成员函数<br>所有对象共享同一个函数<br>静态成员函数只能访问静态成员变量<br>示例 1 ：静态成员变量</p>
<p>C++<br>class Person<br>{<br>public:</p>
<pre><code>static int m_A; //静态成员变量

//静态成员变量特点：
//1 在编译阶段分配内存
//2 类内声明，类外初始化
//3 所有对象共享同一份数据</code></pre><p>private:<br>static int m_B; //静态成员变量也是有访问权限的<br>};<br>int Person::m_A = 10;<br>int Person::m_B = 10;</p>
<p>void test01()<br>{<br>//静态成员变量两种访问方式</p>
<pre><code>//1、通过对象
Person p1;
p1.m_A = 100;
cout &lt;&lt; &quot;p1.m_A = &quot; &lt;&lt; p1.m_A &lt;&lt; endl;

Person p2;
p2.m_A = 200;
cout &lt;&lt; &quot;p1.m_A = &quot; &lt;&lt; p1.m_A &lt;&lt; endl; //共享同一份数据
cout &lt;&lt; &quot;p2.m_A = &quot; &lt;&lt; p2.m_A &lt;&lt; endl;

//2、通过类名
cout &lt;&lt; &quot;m_A = &quot; &lt;&lt; Person::m_A &lt;&lt; endl;


//cout &lt;&lt; &quot;m_B = &quot; &lt;&lt; Person::m_B &lt;&lt; endl; //私有权限访问不到</code></pre><p>}</p>
<p>int main() {</p>
<pre><code>test01();

system(&quot;pause&quot;);

return 0;</code></pre><p>}<br>示例 2：静态成员函数</p>
<p>C++<br>class Person<br>{</p>
<p>public:</p>
<pre><code>//静态成员函数特点：
//1 程序共享一个函数
//2 静态成员函数只能访问静态成员变量

static void func()
{
    cout &lt;&lt; &quot;func调用&quot; &lt;&lt; endl;
    m_A = 100;
    //m_B = 100; //错误，不可以访问非静态成员变量
}

static int m_A; //静态成员变量
int m_B; //</code></pre><p>private:</p>
<pre><code>//静态成员函数也是有访问权限的
static void func2()
{
    cout &lt;&lt; &quot;func2调用&quot; &lt;&lt; endl;
}</code></pre><p>};<br>int Person::m_A = 10;</p>
<p>void test01()<br>{<br>//静态成员变量两种访问方式</p>
<pre><code>//1、通过对象
Person p1;
p1.func();

//2、通过类名
Person::func();


//Person::func2(); //私有权限访问不到</code></pre><p>}</p>
<p>int main() {</p>
<pre><code>test01();

system(&quot;pause&quot;);

return 0;</code></pre><p>}<br>4.3 C++对象模型和 this 指针<br>4.3.1 成员变量和成员函数分开存储<br>在 C++中，类内的成员变量和成员函数分开存储</p>
<p>只有非静态成员变量才属于类的对象上</p>
<p>C++<br>class Person {<br>public:<br>Person() {<br>mA = 0;<br>}<br>//非静态成员变量占对象空间<br>int mA;<br>//静态成员变量不占对象空间<br>static int mB;<br>//函数也不占对象空间，所有函数共享一个函数实例<br>void func() {<br>cout &lt;&lt; “mA:” &lt;&lt; this-&gt;mA &lt;&lt; endl;<br>}<br>//静态成员函数也不占对象空间<br>static void sfunc() {<br>}<br>};</p>
<p>int main() {</p>
<pre><code>cout &lt;&lt; sizeof(Person) &lt;&lt; endl;

system(&quot;pause&quot;);

return 0;</code></pre><p>}<br>4.3.2 this 指针概念<br>通过 4.3.1 我们知道在 C++中成员变量和成员函数是分开存储的</p>
<p>每一个非静态成员函数只会诞生一份函数实例，也就是说多个同类型的对象会共用一块代码</p>
<p>那么问题是：这一块代码是如何区分那个对象调用自己的呢？</p>
<p>c++通过提供特殊的对象指针，this 指针，解决上述问题。this 指针指向被调用的成员函数所属的对象</p>
<p>this 指针是隐含每一个非静态成员函数内的一种指针</p>
<p>this 指针不需要定义，直接使用即可</p>
<p>this 指针的用途：</p>
<p>当形参和成员变量同名时，可用 this 指针来区分<br>在类的非静态成员函数中返回对象本身，可使用 return *this<br>C++<br>class Person<br>{<br>public:</p>
<pre><code>Person(int age)
{
    //1、当形参和成员变量同名时，可用this指针来区分
    this-&gt;age = age;
}

Person&amp; PersonAddPerson(Person p)
{
    this-&gt;age += p.age;
    //返回对象本身
    return *this;
}

int age;</code></pre><p>};</p>
<p>void test01()<br>{<br>Person p1(10);<br>cout &lt;&lt; “p1.age = “ &lt;&lt; p1.age &lt;&lt; endl;</p>
<pre><code>Person p2(10);
p2.PersonAddPerson(p1).PersonAddPerson(p1).PersonAddPerson(p1);
cout &lt;&lt; &quot;p2.age = &quot; &lt;&lt; p2.age &lt;&lt; endl;</code></pre><p>}</p>
<p>int main() {</p>
<pre><code>test01();

system(&quot;pause&quot;);

return 0;</code></pre><p>}<br>4.3.3 空指针访问成员函数<br>C++中空指针也是可以调用成员函数的，但是也要注意有没有用到 this 指针</p>
<p>如果用到 this 指针，需要加以判断保证代码的健壮性</p>
<p>示例：</p>
<p>C++<br>//空指针访问成员函数<br>class Person {<br>public:</p>
<pre><code>void ShowClassName() {
    cout &lt;&lt; &quot;我是Person类!&quot; &lt;&lt; endl;
}

void ShowPerson() {
    if (this == NULL) {
        return;
    }
    cout &lt;&lt; mAge &lt;&lt; endl;
}</code></pre><p>public:<br>int mAge;<br>};</p>
<p>void test01()<br>{<br>Person * p = NULL;<br>p-&gt;ShowClassName(); //空指针，可以调用成员函数<br>p-&gt;ShowPerson(); //但是如果成员函数中用到了 this 指针，就不可以了<br>}</p>
<p>int main() {</p>
<pre><code>test01();

system(&quot;pause&quot;);

return 0;</code></pre><p>}<br>4.3.4 const 修饰成员函数<br>常函数：</p>
<p>成员函数后加 const 后我们称为这个函数为常函数<br>常函数内不可以修改成员属性<br>成员属性声明时加关键字 mutable 后，在常函数中依然可以修改<br>常对象：</p>
<p>声明对象前加 const 称该对象为常对象<br>常对象只能调用常函数<br>示例：</p>
<p>C++<br>class Person {<br>public:<br>Person() {<br>m_A = 0;<br>m_B = 0;<br>}</p>
<pre><code>//this指针的本质是一个指针常量，指针的指向不可修改
//如果想让指针指向的值也不可以修改，需要声明常函数
void ShowPerson() const {
    //const Type* const pointer;
    //this = NULL; //不能修改指针的指向 Person* const this;
    //this-&gt;mA = 100; //但是this指针指向的对象的数据是可以修改的

    //const修饰成员函数，表示指针指向的内存空间的数据不能修改，除了mutable修饰的变量
    this-&gt;m_B = 100;
}

void MyFunc() const {
    //mA = 10000;
}</code></pre><p>public:<br>int m_A;<br>mutable int m_B; //可修改 可变的<br>};</p>
<p>//const 修饰对象 常对象<br>void test01() {</p>
<pre><code>const Person person; //常量对象
cout &lt;&lt; person.m_A &lt;&lt; endl;
//person.mA = 100; //常对象不能修改成员变量的值,但是可以访问
person.m_B = 100; //但是常对象可以修改mutable修饰成员变量

//常对象访问成员函数
person.MyFunc(); //常对象不能调用const的函数</code></pre><p>}</p>
<p>int main() {</p>
<pre><code>test01();

system(&quot;pause&quot;);

return 0;</code></pre><p>}<br>4.4 友元<br>生活中你的家有客厅(Public)，有你的卧室(Private)</p>
<p>客厅所有来的客人都可以进去，但是你的卧室是私有的，也就是说只有你能进去</p>
<p>但是呢，你也可以允许你的好闺蜜好基友进去。</p>
<p>在程序里，有些私有属性 也想让类外特殊的一些函数或者类进行访问，就需要用到友元的技术</p>
<p>友元的目的就是让一个函数或者类 访问另一个类中私有成员</p>
<p>友元的关键字为 ==friend==</p>
<p>友元的三种实现</p>
<p>全局函数做友元<br>类做友元<br>成员函数做友元<br>4.4.1 全局函数做友元<br>C++<br>class Building<br>{<br>//告诉编译器 goodGay 全局函数 是 Building 类的好朋友，可以访问类中的私有内容<br>friend void goodGay(Building * building);</p>
<p>public:</p>
<pre><code>Building()
{
    this-&gt;m_SittingRoom = &quot;客厅&quot;;
    this-&gt;m_BedRoom = &quot;卧室&quot;;
}</code></pre><p>public:<br>string m_SittingRoom; //客厅</p>
<p>private:<br>string m_BedRoom; //卧室<br>};</p>
<p>void goodGay(Building * building)<br>{<br>cout &lt;&lt; “好基友正在访问： “ &lt;&lt; building-&gt;m_SittingRoom &lt;&lt; endl;<br>cout &lt;&lt; “好基友正在访问： “ &lt;&lt; building-&gt;m_BedRoom &lt;&lt; endl;<br>}</p>
<p>void test01()<br>{<br>Building b;<br>goodGay(&amp;b);<br>}</p>
<p>int main(){</p>
<pre><code>test01();

system(&quot;pause&quot;);
return 0;</code></pre><p>}<br>4.4.2 类做友元<br>C++<br>class Building;<br>class goodGay<br>{<br>public:</p>
<pre><code>goodGay();
void visit();</code></pre><p>private:<br>Building *building;<br>};</p>
<p>class Building<br>{<br>//告诉编译器 goodGay 类是 Building 类的好朋友，可以访问到 Building 类中私有内容<br>friend class goodGay;</p>
<p>public:<br>Building();</p>
<p>public:<br>string m_SittingRoom; //客厅<br>private:<br>string m_BedRoom;//卧室<br>};</p>
<p>Building::Building()<br>{<br>this-&gt;m_SittingRoom = “客厅”;<br>this-&gt;m_BedRoom = “卧室”;<br>}</p>
<p>goodGay::goodGay()<br>{<br>building = new Building;<br>}</p>
<p>void goodGay::visit()<br>{<br>cout &lt;&lt; “好基友正在访问” &lt;&lt; building-&gt;m_SittingRoom &lt;&lt; endl;<br>cout &lt;&lt; “好基友正在访问” &lt;&lt; building-&gt;m_BedRoom &lt;&lt; endl;<br>}</p>
<p>void test01()<br>{<br>goodGay gg;<br>gg.visit();</p>
<p>}</p>
<p>int main(){</p>
<pre><code>test01();

system(&quot;pause&quot;);
return 0;</code></pre><p>}<br>4.4.3 成员函数做友元<br>C++</p>
<p>class Building;<br>class goodGay<br>{<br>public:</p>
<pre><code>goodGay();
void visit(); //只让visit函数作为Building的好朋友，可以发访问Building中私有内容
void visit2();</code></pre><p>private:<br>Building *building;<br>};</p>
<p>class Building<br>{<br>//告诉编译器 goodGay 类中的 visit 成员函数 是 Building 好朋友，可以访问私有内容<br>friend void goodGay::visit();</p>
<p>public:<br>Building();</p>
<p>public:<br>string m_SittingRoom; //客厅<br>private:<br>string m_BedRoom;//卧室<br>};</p>
<p>Building::Building()<br>{<br>this-&gt;m_SittingRoom = “客厅”;<br>this-&gt;m_BedRoom = “卧室”;<br>}</p>
<p>goodGay::goodGay()<br>{<br>building = new Building;<br>}</p>
<p>void goodGay::visit()<br>{<br>cout &lt;&lt; “好基友正在访问” &lt;&lt; building-&gt;m_SittingRoom &lt;&lt; endl;<br>cout &lt;&lt; “好基友正在访问” &lt;&lt; building-&gt;m_BedRoom &lt;&lt; endl;<br>}</p>
<p>void goodGay::visit2()<br>{<br>cout &lt;&lt; “好基友正在访问” &lt;&lt; building-&gt;m_SittingRoom &lt;&lt; endl;<br>//cout &lt;&lt; “好基友正在访问” &lt;&lt; building-&gt;m_BedRoom &lt;&lt; endl;<br>}</p>
<p>void test01()<br>{<br>goodGay gg;<br>gg.visit();</p>
<p>}</p>
<p>int main(){</p>
<pre><code>test01();

system(&quot;pause&quot;);
return 0;</code></pre><p>}<br>4.5 运算符重载<br>运算符重载概念：对已有的运算符重新进行定义，赋予其另一种功能，以适应不同的数据类型</p>
<p>4.5.1 加号运算符重载<br>作用：实现两个自定义数据类型相加的运算</p>
<p>C++<br>class Person {<br>public:<br>Person() {};<br>Person(int a, int b)<br>{<br>this-&gt;m_A = a;<br>this-&gt;m_B = b;<br>}<br>//成员函数实现 + 号运算符重载<br>Person operator+(const Person&amp; p) {<br>Person temp;<br>temp.m_A = this-&gt;m_A + p.m_A;<br>temp.m_B = this-&gt;m_B + p.m_B;<br>return temp;<br>}</p>
<p>public:<br>int m_A;<br>int m_B;<br>};</p>
<p>//全局函数实现 + 号运算符重载<br>//Person operator+(const Person&amp; p1, const Person&amp; p2) {<br>// Person temp(0, 0);<br>// temp.m_A = p1.m_A + p2.m_A;<br>// temp.m_B = p1.m_B + p2.m_B;<br>// return temp;<br>//}</p>
<p>//运算符重载 可以发生函数重载<br>Person operator+(const Person&amp; p2, int val)<br>{<br>Person temp;<br>temp.m_A = p2.m_A + val;<br>temp.m_B = p2.m_B + val;<br>return temp;<br>}</p>
<p>void test() {</p>
<pre><code>Person p1(10, 10);
Person p2(20, 20);

//成员函数方式
Person p3 = p2 + p1;  //相当于 p2.operaor+(p1)
cout &lt;&lt; &quot;mA:&quot; &lt;&lt; p3.m_A &lt;&lt; &quot; mB:&quot; &lt;&lt; p3.m_B &lt;&lt; endl;


Person p4 = p3 + 10; //相当于 operator+(p3,10)
cout &lt;&lt; &quot;mA:&quot; &lt;&lt; p4.m_A &lt;&lt; &quot; mB:&quot; &lt;&lt; p4.m_B &lt;&lt; endl;</code></pre><p>}</p>
<p>int main() {</p>
<pre><code>test();

system(&quot;pause&quot;);

return 0;</code></pre><p>}<br>总结 1：对于内置的数据类型的表达式的的运算符是不可能改变的</p>
<p>总结 2：不要滥用运算符重载</p>
<p>4.5.2 左移运算符重载<br>作用：可以输出自定义数据类型</p>
<p>C++<br>class Person {<br>friend ostream&amp; operator&lt;&lt;(ostream&amp; out, Person&amp; p);</p>
<p>public:</p>
<pre><code>Person(int a, int b)
{
    this-&gt;m_A = a;
    this-&gt;m_B = b;
}

//成员函数 实现不了  p &lt;&lt; cout 不是我们想要的效果
//void operator&lt;&lt;(Person&amp; p){
//}</code></pre><p>private:<br>int m_A;<br>int m_B;<br>};</p>
<p>//全局函数实现左移重载<br>//ostream 对象只能有一个<br>ostream&amp; operator&lt;&lt;(ostream&amp; out, Person&amp; p) {<br>out &lt;&lt; “a:” &lt;&lt; p.m_A &lt;&lt; “ b:” &lt;&lt; p.m_B;<br>return out;<br>}</p>
<p>void test() {</p>
<pre><code>Person p1(10, 20);

cout &lt;&lt; p1 &lt;&lt; &quot;hello world&quot; &lt;&lt; endl; //链式编程</code></pre><p>}</p>
<p>int main() {</p>
<pre><code>test();

system(&quot;pause&quot;);

return 0;</code></pre><p>}<br>总结：重载左移运算符配合友元可以实现输出自定义数据类型</p>
<p>4.5.3 递增运算符重载<br>作用： 通过重载递增运算符，实现自己的整型数据</p>
<p>C++</p>
<p>class MyInteger {</p>
<pre><code>friend ostream&amp; operator&lt;&lt;(ostream&amp; out, MyInteger myint);</code></pre><p>public:<br>MyInteger() {<br>m_Num = 0;<br>}<br>//前置++<br>MyInteger&amp; operator++() {<br>//先++<br>m_Num++;<br>//再返回<br>return *this;<br>}</p>
<pre><code>//后置++
MyInteger operator++(int) {
    //先返回
    MyInteger temp = *this; //记录当前本身的值，然后让本身的值加1，但是返回的是以前的值，达到先返回后++；
    m_Num++;
    return temp;
}</code></pre><p>private:<br>int m_Num;<br>};</p>
<p>ostream&amp; operator&lt;&lt;(ostream&amp; out, MyInteger myint) {<br>out &lt;&lt; myint.m_Num;<br>return out;<br>}</p>
<p>//前置++ 先++ 再返回<br>void test01() {<br>MyInteger myInt;<br>cout &lt;&lt; ++myInt &lt;&lt; endl;<br>cout &lt;&lt; myInt &lt;&lt; endl;<br>}</p>
<p>//后置++ 先返回 再++<br>void test02() {</p>
<pre><code>MyInteger myInt;
cout &lt;&lt; myInt++ &lt;&lt; endl;
cout &lt;&lt; myInt &lt;&lt; endl;</code></pre><p>}</p>
<p>int main() {</p>
<pre><code>test01();
//test02();

system(&quot;pause&quot;);

return 0;</code></pre><p>}<br>总结： 前置递增返回引用，后置递增返回值</p>
<p>4.5.4 赋值运算符重载<br>c++编译器至少给一个类添加 4 个函数</p>
<p>默认构造函数(无参，函数体为空)<br>默认析构函数(无参，函数体为空)<br>默认拷贝构造函数，对属性进行值拷贝<br>赋值运算符 operator=, 对属性进行值拷贝<br>如果类中有属性指向堆区，做赋值操作时也会出现深浅拷贝问题</p>
<p>示例：</p>
<p>C++<br>class Person<br>{<br>public:</p>
<pre><code>Person(int age)
{
    //将年龄数据开辟到堆区
    m_Age = new int(age);
}

//重载赋值运算符
Person&amp; operator=(Person &amp;p)
{
    if (m_Age != NULL)
    {
        delete m_Age;
        m_Age = NULL;
    }
    //编译器提供的代码是浅拷贝
    //m_Age = p.m_Age;

    //提供深拷贝 解决浅拷贝的问题
    m_Age = new int(*p.m_Age);

    //返回自身
    return *this;
}


~Person()
{
    if (m_Age != NULL)
    {
        delete m_Age;
        m_Age = NULL;
    }
}

//年龄的指针
int *m_Age;</code></pre><p>};</p>
<p>void test01()<br>{<br>Person p1(18);</p>
<pre><code>Person p2(20);

Person p3(30);

p3 = p2 = p1; //赋值操作

cout &lt;&lt; &quot;p1的年龄为：&quot; &lt;&lt; *p1.m_Age &lt;&lt; endl;

cout &lt;&lt; &quot;p2的年龄为：&quot; &lt;&lt; *p2.m_Age &lt;&lt; endl;

cout &lt;&lt; &quot;p3的年龄为：&quot; &lt;&lt; *p3.m_Age &lt;&lt; endl;</code></pre><p>}</p>
<p>int main() {</p>
<pre><code>test01();

//int a = 10;
//int b = 20;
//int c = 30;

//c = b = a;
//cout &lt;&lt; &quot;a = &quot; &lt;&lt; a &lt;&lt; endl;
//cout &lt;&lt; &quot;b = &quot; &lt;&lt; b &lt;&lt; endl;
//cout &lt;&lt; &quot;c = &quot; &lt;&lt; c &lt;&lt; endl;

system(&quot;pause&quot;);

return 0;</code></pre><p>}<br>4.5.5 关系运算符重载<br>作用：重载关系运算符，可以让两个自定义类型对象进行对比操作</p>
<p>示例：</p>
<p>C++<br>class Person<br>{<br>public:<br>Person(string name, int age)<br>{<br>this-&gt;m_Name = name;<br>this-&gt;m_Age = age;<br>};</p>
<pre><code>bool operator==(Person &amp; p)
{
    if (this-&gt;m_Name == p.m_Name &amp;&amp; this-&gt;m_Age == p.m_Age)
    {
        return true;
    }
    else
    {
        return false;
    }
}

bool operator!=(Person &amp; p)
{
    if (this-&gt;m_Name == p.m_Name &amp;&amp; this-&gt;m_Age == p.m_Age)
    {
        return false;
    }
    else
    {
        return true;
    }
}

string m_Name;
int m_Age;</code></pre><p>};</p>
<p>void test01()<br>{<br>//int a = 0;<br>//int b = 0;</p>
<pre><code>Person a(&quot;孙悟空&quot;, 18);
Person b(&quot;孙悟空&quot;, 18);

if (a == b)
{
    cout &lt;&lt; &quot;a和b相等&quot; &lt;&lt; endl;
}
else
{
    cout &lt;&lt; &quot;a和b不相等&quot; &lt;&lt; endl;
}

if (a != b)
{
    cout &lt;&lt; &quot;a和b不相等&quot; &lt;&lt; endl;
}
else
{
    cout &lt;&lt; &quot;a和b相等&quot; &lt;&lt; endl;
}</code></pre><p>}</p>
<p>int main() {</p>
<pre><code>test01();

system(&quot;pause&quot;);

return 0;</code></pre><p>}<br>4.5.6 函数调用运算符重载<br>函数调用运算符 () 也可以重载<br>由于重载后使用的方式非常像函数的调用，因此称为仿函数<br>仿函数没有固定写法，非常灵活<br>示例：</p>
<p>C++<br>class MyPrint<br>{<br>public:<br>void operator()(string text)<br>{<br>cout &lt;&lt; text &lt;&lt; endl;<br>}</p>
<p>};<br>void test01()<br>{<br>//重载的（）操作符 也称为仿函数<br>MyPrint myFunc;<br>myFunc(“hello world”);<br>}</p>
<p>class MyAdd<br>{<br>public:<br>int operator()(int v1, int v2)<br>{<br>return v1 + v2;<br>}<br>};</p>
<p>void test02()<br>{<br>MyAdd add;<br>int ret = add(10, 10);<br>cout &lt;&lt; “ret = “ &lt;&lt; ret &lt;&lt; endl;</p>
<pre><code>//匿名对象调用
cout &lt;&lt; &quot;MyAdd()(100,100) = &quot; &lt;&lt; MyAdd()(100, 100) &lt;&lt; endl;</code></pre><p>}</p>
<p>int main() {</p>
<pre><code>test01();
test02();

system(&quot;pause&quot;);

return 0;</code></pre><p>}<br>4.6 继承<br>继承是面向对象三大特性之一</p>
<p>有些类与类之间存在特殊的关系，例如下图中：</p>
<p>1544861202252<br>1544861202252</p>
<p>我们发现，定义这些类时，下级别的成员除了拥有上一级的共性，还有自己的特性。</p>
<p>这个时候我们就可以考虑利用继承的技术，减少重复代码</p>
<p>4.6.1 继承的基本语法<br>例如我们看到很多网站中，都有公共的头部，公共的底部，甚至公共的左侧列表，只有中心内容不同</p>
<p>接下来我们分别利用普通写法和继承的写法来实现网页中的内容，看一下继承存在的意义以及好处</p>
<p>普通实现：</p>
<p>C++<br>//Java 页面<br>class Java<br>{<br>public:<br>void header()<br>{<br>cout &lt;&lt; “首页、公开课、登录、注册…（公共头部）” &lt;&lt; endl;<br>}<br>void footer()<br>{<br>cout &lt;&lt; “帮助中心、交流合作、站内地图…(公共底部)” &lt;&lt; endl;<br>}<br>void left()<br>{<br>cout &lt;&lt; “Java,Python,C++…(公共分类列表)” &lt;&lt; endl;<br>}<br>void content()<br>{<br>cout &lt;&lt; “JAVA 学科视频” &lt;&lt; endl;<br>}<br>};<br>//Python 页面<br>class Python<br>{<br>public:<br>void header()<br>{<br>cout &lt;&lt; “首页、公开课、登录、注册…（公共头部）” &lt;&lt; endl;<br>}<br>void footer()<br>{<br>cout &lt;&lt; “帮助中心、交流合作、站内地图…(公共底部)” &lt;&lt; endl;<br>}<br>void left()<br>{<br>cout &lt;&lt; “Java,Python,C++…(公共分类列表)” &lt;&lt; endl;<br>}<br>void content()<br>{<br>cout &lt;&lt; “Python 学科视频” &lt;&lt; endl;<br>}<br>};<br>//C++页面<br>class CPP<br>{<br>public:<br>void header()<br>{<br>cout &lt;&lt; “首页、公开课、登录、注册…（公共头部）” &lt;&lt; endl;<br>}<br>void footer()<br>{<br>cout &lt;&lt; “帮助中心、交流合作、站内地图…(公共底部)” &lt;&lt; endl;<br>}<br>void left()<br>{<br>cout &lt;&lt; “Java,Python,C++…(公共分类列表)” &lt;&lt; endl;<br>}<br>void content()<br>{<br>cout &lt;&lt; “C++学科视频” &lt;&lt; endl;<br>}<br>};</p>
<p>void test01()<br>{<br>//Java 页面<br>cout &lt;&lt; “Java 下载视频页面如下： “ &lt;&lt; endl;<br>Java ja;<br>ja.header();<br>ja.footer();<br>ja.left();<br>ja.content();<br>cout &lt;&lt; “——————–” &lt;&lt; endl;</p>
<pre><code>//Python页面
cout &lt;&lt; &quot;Python下载视频页面如下： &quot; &lt;&lt; endl;
Python py;
py.header();
py.footer();
py.left();
py.content();
cout &lt;&lt; &quot;--------------------&quot; &lt;&lt; endl;

//C++页面
cout &lt;&lt; &quot;C++下载视频页面如下： &quot; &lt;&lt; endl;
CPP cp;
cp.header();
cp.footer();
cp.left();
cp.content();</code></pre><p>}</p>
<p>int main() {</p>
<pre><code>test01();

system(&quot;pause&quot;);

return 0;</code></pre><p>}<br>继承实现：</p>
<p>C++<br>//公共页面<br>class BasePage<br>{<br>public:<br>void header()<br>{<br>cout &lt;&lt; “首页、公开课、登录、注册…（公共头部）” &lt;&lt; endl;<br>}</p>
<pre><code>void footer()
{
    cout &lt;&lt; &quot;帮助中心、交流合作、站内地图...(公共底部)&quot; &lt;&lt; endl;
}
void left()
{
    cout &lt;&lt; &quot;Java,Python,C++...(公共分类列表)&quot; &lt;&lt; endl;
}</code></pre><p>};</p>
<p>//Java 页面<br>class Java : public BasePage<br>{<br>public:<br>void content()<br>{<br>cout &lt;&lt; “JAVA 学科视频” &lt;&lt; endl;<br>}<br>};<br>//Python 页面<br>class Python : public BasePage<br>{<br>public:<br>void content()<br>{<br>cout &lt;&lt; “Python 学科视频” &lt;&lt; endl;<br>}<br>};<br>//C++页面<br>class CPP : public BasePage<br>{<br>public:<br>void content()<br>{<br>cout &lt;&lt; “C++学科视频” &lt;&lt; endl;<br>}<br>};</p>
<p>void test01()<br>{<br>//Java 页面<br>cout &lt;&lt; “Java 下载视频页面如下： “ &lt;&lt; endl;<br>Java ja;<br>ja.header();<br>ja.footer();<br>ja.left();<br>ja.content();<br>cout &lt;&lt; “——————–” &lt;&lt; endl;</p>
<pre><code>//Python页面
cout &lt;&lt; &quot;Python下载视频页面如下： &quot; &lt;&lt; endl;
Python py;
py.header();
py.footer();
py.left();
py.content();
cout &lt;&lt; &quot;--------------------&quot; &lt;&lt; endl;

//C++页面
cout &lt;&lt; &quot;C++下载视频页面如下： &quot; &lt;&lt; endl;
CPP cp;
cp.header();
cp.footer();
cp.left();
cp.content();</code></pre><p>}</p>
<p>int main() {</p>
<pre><code>test01();

system(&quot;pause&quot;);

return 0;</code></pre><p>}<br>总结：</p>
<p>继承的好处：==可以减少重复的代码==</p>
<p>class A : public B;</p>
<p>A 类称为子类 或 派生类</p>
<p>B 类称为父类 或 基类</p>
<p>派生类中的成员，包含两大部分：</p>
<p>一类是从基类继承过来的，一类是自己增加的成员。</p>
<p>从基类继承过过来的表现其共性，而新增的成员体现了其个性。</p>
<p>4.6.2 继承方式<br>继承的语法：class 子类 : 继承方式 父类</p>
<p>继承方式一共有三种：</p>
<p>公共继承<br>保护继承<br>私有继承<br>img<br>img</p>
<p>示例：</p>
<p>C++<br>class Base1<br>{<br>public:<br>int m_A;<br>protected:<br>int m_B;<br>private:<br>int m_C;<br>};</p>
<p>//公共继承<br>class Son1 :public Base1<br>{<br>public:<br>void func()<br>{<br>m_A; //可访问 public 权限<br>m_B; //可访问 protected 权限<br>//m_C; //不可访问<br>}<br>};</p>
<p>void myClass()<br>{<br>Son1 s1;<br>s1.m_A; //其他类只能访问到公共权限<br>}</p>
<p>//保护继承<br>class Base2<br>{<br>public:<br>int m_A;<br>protected:<br>int m_B;<br>private:<br>int m_C;<br>};<br>class Son2:protected Base2<br>{<br>public:<br>void func()<br>{<br>m_A; //可访问 protected 权限<br>m_B; //可访问 protected 权限<br>//m_C; //不可访问<br>}<br>};<br>void myClass2()<br>{<br>Son2 s;<br>//s.m_A; //不可访问<br>}</p>
<p>//私有继承<br>class Base3<br>{<br>public:<br>int m_A;<br>protected:<br>int m_B;<br>private:<br>int m_C;<br>};<br>class Son3:private Base3<br>{<br>public:<br>void func()<br>{<br>m_A; //可访问 private 权限<br>m_B; //可访问 private 权限<br>//m_C; //不可访问<br>}<br>};<br>class GrandSon3 :public Son3<br>{<br>public:<br>void func()<br>{<br>//Son3 是私有继承，所以继承 Son3 的属性在 GrandSon3 中都无法访问到<br>//m_A;<br>//m_B;<br>//m_C;<br>}<br>};<br>4.6.3 继承中的对象模型<br>问题：从父类继承过来的成员，哪些属于子类对象中？</p>
<p>示例：</p>
<p>C++<br>class Base<br>{<br>public:<br>int m_A;<br>protected:<br>int m_B;<br>private:<br>int m_C; //私有成员只是被隐藏了，但是还是会继承下去<br>};</p>
<p>//公共继承<br>class Son :public Base<br>{<br>public:<br>int m_D;<br>};</p>
<p>void test01()<br>{<br>cout &lt;&lt; “sizeof Son = “ &lt;&lt; sizeof(Son) &lt;&lt; endl;<br>}</p>
<p>int main() {</p>
<pre><code>test01();

system(&quot;pause&quot;);

return 0;</code></pre><p>}<br>利用工具查看：</p>
<p>1545881904150<br>1545881904150</p>
<p>打开工具窗口后，定位到当前 CPP 文件的盘符</p>
<p>然后输入： cl /d1 reportSingleClassLayout 查看的类名 所属文件名</p>
<p>效果如下图：</p>
<p>1545882158050<br>1545882158050</p>
<p>结论： 父类中私有成员也是被子类继承下去了，只是由编译器给隐藏后访问不到</p>
<p>4.6.4 继承中构造和析构顺序<br>子类继承父类后，当创建子类对象，也会调用父类的构造函数</p>
<p>问题：父类和子类的构造和析构顺序是谁先谁后？</p>
<p>示例：</p>
<p>C++<br>class Base<br>{<br>public:<br>Base()<br>{<br>cout &lt;&lt; “Base 构造函数!” &lt;&lt; endl;<br>}<br>~Base()<br>{<br>cout &lt;&lt; “Base 析构函数!” &lt;&lt; endl;<br>}<br>};</p>
<p>class Son : public Base<br>{<br>public:<br>Son()<br>{<br>cout &lt;&lt; “Son 构造函数!” &lt;&lt; endl;<br>}<br>~Son()<br>{<br>cout &lt;&lt; “Son 析构函数!” &lt;&lt; endl;<br>}</p>
<p>};</p>
<p>void test01()<br>{<br>//继承中 先调用父类构造函数，再调用子类构造函数，析构顺序与构造相反<br>Son s;<br>}</p>
<p>int main() {</p>
<pre><code>test01();

system(&quot;pause&quot;);

return 0;</code></pre><p>}<br>总结：继承中 先调用父类构造函数，再调用子类构造函数，析构顺序与构造相反</p>
<p>4.6.5 继承同名成员处理方式<br>问题：当子类与父类出现同名的成员，如何通过子类对象，访问到子类或父类中同名的数据呢？</p>
<p>访问子类同名成员 直接访问即可<br>访问父类同名成员 需要加作用域<br>示例：</p>
<p>C++<br>class Base {<br>public:<br>Base()<br>{<br>m_A = 100;<br>}</p>
<pre><code>void func()
{
    cout &lt;&lt; &quot;Base - func()调用&quot; &lt;&lt; endl;
}

void func(int a)
{
    cout &lt;&lt; &quot;Base - func(int a)调用&quot; &lt;&lt; endl;
}</code></pre><p>public:<br>int m_A;<br>};</p>
<p>class Son : public Base {<br>public:<br>Son()<br>{<br>m_A = 200;<br>}</p>
<pre><code>//当子类与父类拥有同名的成员函数，子类会隐藏父类中所有版本的同名成员函数
//如果想访问父类中被隐藏的同名成员函数，需要加父类的作用域
void func()
{
    cout &lt;&lt; &quot;Son - func()调用&quot; &lt;&lt; endl;
}</code></pre><p>public:<br>int m_A;<br>};</p>
<p>void test01()<br>{<br>Son s;</p>
<pre><code>cout &lt;&lt; &quot;Son下的m_A = &quot; &lt;&lt; s.m_A &lt;&lt; endl;
cout &lt;&lt; &quot;Base下的m_A = &quot; &lt;&lt; s.Base::m_A &lt;&lt; endl;

s.func();
s.Base::func();
s.Base::func(10);</code></pre><p>}<br>int main() {</p>
<pre><code>test01();

system(&quot;pause&quot;);
return EXIT_SUCCESS;</code></pre><p>}<br>总结：</p>
<p>子类对象可以直接访问到子类中同名成员<br>子类对象加作用域可以访问到父类同名成员<br>当子类与父类拥有同名的成员函数，子类会隐藏父类中同名成员函数，加作用域可以访问到父类中同名函数<br>4.6.6 继承同名静态成员处理方式<br>问题：继承中同名的静态成员在子类对象上如何进行访问？</p>
<p>静态成员和非静态成员出现同名，处理方式一致</p>
<p>访问子类同名成员 直接访问即可<br>访问父类同名成员 需要加作用域<br>示例：</p>
<p>C++<br>class Base {<br>public:<br>static void func()<br>{<br>cout &lt;&lt; “Base - static void func()” &lt;&lt; endl;<br>}<br>static void func(int a)<br>{<br>cout &lt;&lt; “Base - static void func(int a)” &lt;&lt; endl;<br>}</p>
<pre><code>static int m_A;</code></pre><p>};</p>
<p>int Base::m_A = 100;</p>
<p>class Son : public Base {<br>public:<br>static void func()<br>{<br>cout &lt;&lt; “Son - static void func()” &lt;&lt; endl;<br>}<br>static int m_A;<br>};</p>
<p>int Son::m_A = 200;</p>
<p>//同名成员属性<br>void test01()<br>{<br>//通过对象访问<br>cout &lt;&lt; “通过对象访问： “ &lt;&lt; endl;<br>Son s;<br>cout &lt;&lt; “Son 下 m_A = “ &lt;&lt; s.m_A &lt;&lt; endl;<br>cout &lt;&lt; “Base 下 m_A = “ &lt;&lt; s.Base::m_A &lt;&lt; endl;</p>
<pre><code>//通过类名访问
cout &lt;&lt; &quot;通过类名访问： &quot; &lt;&lt; endl;
cout &lt;&lt; &quot;Son  下 m_A = &quot; &lt;&lt; Son::m_A &lt;&lt; endl;
cout &lt;&lt; &quot;Base 下 m_A = &quot; &lt;&lt; Son::Base::m_A &lt;&lt; endl;</code></pre><p>}</p>
<p>//同名成员函数<br>void test02()<br>{<br>//通过对象访问<br>cout &lt;&lt; “通过对象访问： “ &lt;&lt; endl;<br>Son s;<br>s.func();<br>s.Base::func();</p>
<pre><code>cout &lt;&lt; &quot;通过类名访问： &quot; &lt;&lt; endl;
Son::func();
Son::Base::func();
//出现同名，子类会隐藏掉父类中所有同名成员函数，需要加作作用域访问
Son::Base::func(100);</code></pre><p>}<br>int main() {</p>
<pre><code>//test01();
test02();

system(&quot;pause&quot;);

return 0;</code></pre><p>}<br>总结：同名静态成员处理方式和非静态处理方式一样，只不过有两种访问的方式（通过对象 和 通过类名）</p>
<p>4.6.7 多继承语法<br>C++允许一个类继承多个类</p>
<p>语法：class 子类 ：继承方式 父类 1 ， 继承方式 父类 2…</p>
<p>多继承可能会引发父类中有同名成员出现，需要加作用域区分</p>
<p>C++实际开发中不建议用多继承</p>
<p>示例：</p>
<p>C++<br>class Base1 {<br>public:<br>Base1()<br>{<br>m_A = 100;<br>}<br>public:<br>int m_A;<br>};</p>
<p>class Base2 {<br>public:<br>Base2()<br>{<br>m_A = 200; //开始是 m_B 不会出问题，但是改为 mA 就会出现不明确<br>}<br>public:<br>int m_A;<br>};</p>
<p>//语法：class 子类：继承方式 父类 1 ，继承方式 父类 2<br>class Son : public Base2, public Base1<br>{<br>public:<br>Son()<br>{<br>m_C = 300;<br>m_D = 400;<br>}<br>public:<br>int m_C;<br>int m_D;<br>};</p>
<p>//多继承容易产生成员同名的情况<br>//通过使用类名作用域可以区分调用哪一个基类的成员<br>void test01()<br>{<br>Son s;<br>cout &lt;&lt; “sizeof Son = “ &lt;&lt; sizeof(s) &lt;&lt; endl;<br>cout &lt;&lt; s.Base1::m_A &lt;&lt; endl;<br>cout &lt;&lt; s.Base2::m_A &lt;&lt; endl;<br>}</p>
<p>int main() {</p>
<pre><code>test01();

system(&quot;pause&quot;);

return 0;</code></pre><p>}<br>总结： 多继承中如果父类中出现了同名情况，子类使用时候要加作用域</p>
<p>4.6.8 菱形继承<br>菱形继承概念：</p>
<p>​ 两个派生类继承同一个基类</p>
<p>​ 又有某个类同时继承者两个派生类</p>
<p>​ 这种继承被称为菱形继承，或者钻石继承</p>
<p>典型的菱形继承案例：</p>
<p>IMG_256<br>IMG_256</p>
<p>菱形继承问题：</p>
<p>羊继承了动物的数据，驼同样继承了动物的数据，当草泥马使用数据时，就会产生二义性。</p>
<p>草泥马继承自动物的数据继承了两份，其实我们应该清楚，这份数据我们只需要一份就可以。</p>
<p>示例：</p>
<p>C++<br>class Animal<br>{<br>public:<br>int m_Age;<br>};</p>
<p>//继承前加 virtual 关键字后，变为虚继承<br>//此时公共的父类 Animal 称为虚基类<br>class Sheep : virtual public Animal {};<br>class Tuo : virtual public Animal {};<br>class SheepTuo : public Sheep, public Tuo {};</p>
<p>void test01()<br>{<br>SheepTuo st;<br>st.Sheep::m_Age = 100;<br>st.Tuo::m_Age = 200;</p>
<pre><code>cout &lt;&lt; &quot;st.Sheep::m_Age = &quot; &lt;&lt; st.Sheep::m_Age &lt;&lt; endl;
cout &lt;&lt; &quot;st.Tuo::m_Age = &quot; &lt;&lt;  st.Tuo::m_Age &lt;&lt; endl;
cout &lt;&lt; &quot;st.m_Age = &quot; &lt;&lt; st.m_Age &lt;&lt; endl;</code></pre><p>}</p>
<p>int main() {</p>
<pre><code>test01();

system(&quot;pause&quot;);

return 0;</code></pre><p>}<br>总结：</p>
<p>菱形继承带来的主要问题是子类继承两份相同的数据，导致资源浪费以及毫无意义<br>利用虚继承可以解决菱形继承问题<br>4.7 多态<br>4.7.1 多态的基本概念<br>多态是 C++面向对象三大特性之一</p>
<p>多态分为两类</p>
<p>静态多态: 函数重载 和 运算符重载属于静态多态，复用函数名<br>动态多态: 派生类和虚函数实现运行时多态<br>静态多态和动态多态区别：</p>
<p>静态多态的函数地址早绑定 - 编译阶段确定函数地址<br>动态多态的函数地址晚绑定 - 运行阶段确定函数地址<br>下面通过案例进行讲解多态</p>
<p>C++<br>class Animal<br>{<br>public:<br>//Speak 函数就是虚函数<br>//函数前面加上 virtual 关键字，变成虚函数，那么编译器在编译的时候就不能确定函数调用了。<br>virtual void speak()<br>{<br>cout &lt;&lt; “动物在说话” &lt;&lt; endl;<br>}<br>};</p>
<p>class Cat :public Animal<br>{<br>public:<br>void speak()<br>{<br>cout &lt;&lt; “小猫在说话” &lt;&lt; endl;<br>}<br>};</p>
<p>class Dog :public Animal<br>{<br>public:</p>
<pre><code>void speak()
{
    cout &lt;&lt; &quot;小狗在说话&quot; &lt;&lt; endl;
}</code></pre><p>};<br>//我们希望传入什么对象，那么就调用什么对象的函数<br>//如果函数地址在编译阶段就能确定，那么静态联编<br>//如果函数地址在运行阶段才能确定，就是动态联编</p>
<p>void DoSpeak(Animal &amp; animal)<br>{<br>animal.speak();<br>}<br>//<br>//多态满足条件：<br>//1、有继承关系<br>//2、子类重写父类中的虚函数<br>//多态使用：<br>//父类指针或引用指向子类对象</p>
<p>void test01()<br>{<br>Cat cat;<br>DoSpeak(cat);</p>
<pre><code>Dog dog;
DoSpeak(dog);</code></pre><p>}</p>
<p>int main() {</p>
<pre><code>test01();

system(&quot;pause&quot;);

return 0;</code></pre><p>}<br>总结：</p>
<p>多态满足条件</p>
<p>有继承关系<br>子类重写父类中的虚函数<br>多态使用条件</p>
<p>父类指针或引用指向子类对象<br>重写：函数返回值类型 函数名 参数列表 完全一致称为重写</p>
<p>4.7.2 多态案例一-计算器类<br>案例描述：</p>
<p>分别利用普通写法和多态技术，设计实现两个操作数进行运算的计算器类</p>
<p>多态的优点：</p>
<p>代码组织结构清晰<br>可读性强<br>利于前期和后期的扩展以及维护<br>示例：</p>
<p>C++<br>//普通实现<br>class Calculator {<br>public:<br>int getResult(string oper)<br>{<br>if (oper == “+”) {<br>return m_Num1 + m_Num2;<br>}<br>else if (oper == “-“) {<br>return m_Num1 - m_Num2;<br>}<br>else if (oper == “_”) {<br>return m_Num1 _ m_Num2;<br>}<br>//如果要提供新的运算，需要修改源码<br>}<br>public:<br>int m_Num1;<br>int m_Num2;<br>};</p>
<p>void test01()<br>{<br>//普通实现测试<br>Calculator c;<br>c.m_Num1 = 10;<br>c.m_Num2 = 10;<br>cout &lt;&lt; c.m_Num1 &lt;&lt; “ + “ &lt;&lt; c.m_Num2 &lt;&lt; “ = “ &lt;&lt; c.getResult(“+”) &lt;&lt; endl;</p>
<pre><code>cout &lt;&lt; c.m_Num1 &lt;&lt; &quot; - &quot; &lt;&lt; c.m_Num2 &lt;&lt; &quot; = &quot; &lt;&lt; c.getResult(&quot;-&quot;) &lt;&lt; endl;

cout &lt;&lt; c.m_Num1 &lt;&lt; &quot; * &quot; &lt;&lt; c.m_Num2 &lt;&lt; &quot; = &quot; &lt;&lt; c.getResult(&quot;*&quot;) &lt;&lt; endl;</code></pre><p>}</p>
<p>//多态实现<br>//抽象计算器类<br>//多态优点：代码组织结构清晰，可读性强，利于前期和后期的扩展以及维护<br>class AbstractCalculator<br>{<br>public :</p>
<pre><code>virtual int getResult()
{
    return 0;
}

int m_Num1;
int m_Num2;</code></pre><p>};</p>
<p>//加法计算器<br>class AddCalculator :public AbstractCalculator<br>{<br>public:<br>int getResult()<br>{<br>return m_Num1 + m_Num2;<br>}<br>};</p>
<p>//减法计算器<br>class SubCalculator :public AbstractCalculator<br>{<br>public:<br>int getResult()<br>{<br>return m_Num1 - m_Num2;<br>}<br>};</p>
<p>//乘法计算器<br>class MulCalculator :public AbstractCalculator<br>{<br>public:<br>int getResult()<br>{<br>return m_Num1 * m_Num2;<br>}<br>};</p>
<p>void test02()<br>{<br>//创建加法计算器<br>AbstractCalculator *abc = new AddCalculator;<br>abc-&gt;m_Num1 = 10;<br>abc-&gt;m_Num2 = 10;<br>cout &lt;&lt; abc-&gt;m_Num1 &lt;&lt; “ + “ &lt;&lt; abc-&gt;m_Num2 &lt;&lt; “ = “ &lt;&lt; abc-&gt;getResult() &lt;&lt; endl;<br>delete abc; //用完了记得销毁</p>
<pre><code>//创建减法计算器
abc = new SubCalculator;
abc-&gt;m_Num1 = 10;
abc-&gt;m_Num2 = 10;
cout &lt;&lt; abc-&gt;m_Num1 &lt;&lt; &quot; - &quot; &lt;&lt; abc-&gt;m_Num2 &lt;&lt; &quot; = &quot; &lt;&lt; abc-&gt;getResult() &lt;&lt; endl;
delete abc;

//创建乘法计算器
abc = new MulCalculator;
abc-&gt;m_Num1 = 10;
abc-&gt;m_Num2 = 10;
cout &lt;&lt; abc-&gt;m_Num1 &lt;&lt; &quot; * &quot; &lt;&lt; abc-&gt;m_Num2 &lt;&lt; &quot; = &quot; &lt;&lt; abc-&gt;getResult() &lt;&lt; endl;
delete abc;</code></pre><p>}</p>
<p>int main() {</p>
<pre><code>//test01();

test02();

system(&quot;pause&quot;);

return 0;</code></pre><p>}<br>总结：C++开发提倡利用多态设计程序架构，因为多态优点很多</p>
<p>4.7.3 纯虚函数和抽象类<br>在多态中，通常父类中虚函数的实现是毫无意义的，主要都是调用子类重写的内容</p>
<p>因此可以将虚函数改为纯虚函数</p>
<p>纯虚函数语法：virtual 返回值类型 函数名 （参数列表）= 0 ;</p>
<p>当类中有了纯虚函数，这个类也称为==抽象类==</p>
<p>抽象类特点：</p>
<p>无法实例化对象<br>子类必须重写抽象类中的纯虚函数，否则也属于抽象类<br>示例：</p>
<p>C++<br>class Base<br>{<br>public:<br>//纯虚函数<br>//类中只要有一个纯虚函数就称为抽象类<br>//抽象类无法实例化对象<br>//子类必须重写父类中的纯虚函数，否则也属于抽象类<br>virtual void func() = 0;<br>};</p>
<p>class Son :public Base<br>{<br>public:<br>virtual void func()<br>{<br>cout &lt;&lt; “func 调用” &lt;&lt; endl;<br>};<br>};</p>
<p>void test01()<br>{<br>Base * base = NULL;<br>//base = new Base; // 错误，抽象类无法实例化对象<br>base = new Son;<br>base-&gt;func();<br>delete base;//记得销毁<br>}</p>
<p>int main() {</p>
<pre><code>test01();

system(&quot;pause&quot;);

return 0;</code></pre><p>}<br>4.7.4 多态案例二-制作饮品<br>案例描述：</p>
<p>制作饮品的大致流程为：煮水 - 冲泡 - 倒入杯中 - 加入辅料</p>
<p>利用多态技术实现本案例，提供抽象制作饮品基类，提供子类制作咖啡和茶叶</p>
<p>1545985945198<br>1545985945198</p>
<p>示例：</p>
<p>C++<br>//抽象制作饮品<br>class AbstractDrinking {<br>public:<br>//烧水<br>virtual void Boil() = 0;<br>//冲泡<br>virtual void Brew() = 0;<br>//倒入杯中<br>virtual void PourInCup() = 0;<br>//加入辅料<br>virtual void PutSomething() = 0;<br>//规定流程<br>void MakeDrink() {<br>Boil();<br>Brew();<br>PourInCup();<br>PutSomething();<br>}<br>};</p>
<p>//制作咖啡<br>class Coffee : public AbstractDrinking {<br>public:<br>//烧水<br>virtual void Boil() {<br>cout &lt;&lt; “煮农夫山泉!” &lt;&lt; endl;<br>}<br>//冲泡<br>virtual void Brew() {<br>cout &lt;&lt; “冲泡咖啡!” &lt;&lt; endl;<br>}<br>//倒入杯中<br>virtual void PourInCup() {<br>cout &lt;&lt; “将咖啡倒入杯中!” &lt;&lt; endl;<br>}<br>//加入辅料<br>virtual void PutSomething() {<br>cout &lt;&lt; “加入牛奶!” &lt;&lt; endl;<br>}<br>};</p>
<p>//制作茶水<br>class Tea : public AbstractDrinking {<br>public:<br>//烧水<br>virtual void Boil() {<br>cout &lt;&lt; “煮自来水!” &lt;&lt; endl;<br>}<br>//冲泡<br>virtual void Brew() {<br>cout &lt;&lt; “冲泡茶叶!” &lt;&lt; endl;<br>}<br>//倒入杯中<br>virtual void PourInCup() {<br>cout &lt;&lt; “将茶水倒入杯中!” &lt;&lt; endl;<br>}<br>//加入辅料<br>virtual void PutSomething() {<br>cout &lt;&lt; “加入枸杞!” &lt;&lt; endl;<br>}<br>};</p>
<p>//业务函数<br>void DoWork(AbstractDrinking* drink) {<br>drink-&gt;MakeDrink();<br>delete drink;<br>}</p>
<p>void test01() {<br>DoWork(new Coffee);<br>cout &lt;&lt; “————–” &lt;&lt; endl;<br>DoWork(new Tea);<br>}</p>
<p>int main() {</p>
<pre><code>test01();

system(&quot;pause&quot;);

return 0;</code></pre><p>}<br>4.7.5 虚析构和纯虚析构<br>多态使用时，如果子类中有属性开辟到堆区，那么父类指针在释放时无法调用到子类的析构代码</p>
<p>解决方式：将父类中的析构函数改为虚析构或者纯虚析构</p>
<p>虚析构和纯虚析构共性：</p>
<p>可以解决父类指针释放子类对象<br>都需要有具体的函数实现<br>虚析构和纯虚析构区别：</p>
<p>如果是纯虚析构，该类属于抽象类，无法实例化对象<br>虚析构语法：</p>
<p>virtual ~类名(){}</p>
<p>纯虚析构语法：</p>
<p>virtual ~类名() = 0;</p>
<p>类名::~类名(){}</p>
<p>示例：</p>
<p>C++<br>class Animal {<br>public:</p>
<pre><code>Animal()
{
    cout &lt;&lt; &quot;Animal 构造函数调用！&quot; &lt;&lt; endl;
}
virtual void Speak() = 0;

//析构函数加上virtual关键字，变成虚析构函数
//virtual ~Animal()
//{
//    cout &lt;&lt; &quot;Animal虚析构函数调用！&quot; &lt;&lt; endl;
//}


virtual ~Animal() = 0;</code></pre><p>};</p>
<p>Animal::~Animal()<br>{<br>cout &lt;&lt; “Animal 纯虚析构函数调用！” &lt;&lt; endl;<br>}</p>
<p>//和包含普通纯虚函数的类一样，包含了纯虚析构函数的类也是一个抽象类。不能够被实例化。</p>
<p>class Cat : public Animal {<br>public:<br>Cat(string name)<br>{<br>cout &lt;&lt; “Cat 构造函数调用！” &lt;&lt; endl;<br>m_Name = new string(name);<br>}<br>virtual void Speak()<br>{<br>cout &lt;&lt; *m_Name &lt;&lt; “小猫在说话!” &lt;&lt; endl;<br>}<br>~Cat()<br>{<br>cout &lt;&lt; “Cat 析构函数调用!” &lt;&lt; endl;<br>if (this-&gt;m_Name != NULL) {<br>delete m_Name;<br>m_Name = NULL;<br>}<br>}</p>
<p>public:<br>string *m_Name;<br>};</p>
<p>void test01()<br>{<br>Animal *animal = new Cat(“Tom”);<br>animal-&gt;Speak();</p>
<pre><code>//通过父类指针去释放，会导致子类对象可能清理不干净，造成内存泄漏
//怎么解决？给基类增加一个虚析构函数
//虚析构函数就是用来解决通过父类指针释放子类对象
delete animal;</code></pre><p>}</p>
<p>int main() {</p>
<pre><code>test01();

system(&quot;pause&quot;);

return 0;</code></pre><p>}<br>总结：</p>
<p>​ 1. 虚析构或纯虚析构就是用来解决通过父类指针释放子类对象</p>
<p>​ 2. 如果子类中没有堆区数据，可以不写为虚析构或纯虚析构</p>
<p>​ 3. 拥有纯虚析构函数的类也属于抽象类</p>
<p>4.7.6 多态案例三-电脑组装<br>案例描述：</p>
<p>电脑主要组成部件为 CPU（用于计算），显卡（用于显示），内存条（用于存储）</p>
<p>将每个零件封装出抽象基类，并且提供不同的厂商生产不同的零件，例如 Intel 厂商和 Lenovo 厂商</p>
<p>创建电脑类提供让电脑工作的函数，并且调用每个零件工作的接口</p>
<p>测试时组装三台不同的电脑进行工作</p>
<p>示例：</p>
<p>C++<br>#include<iostream><br>using namespace std;</p>
<p>//抽象 CPU 类<br>class CPU<br>{<br>public:<br>//抽象的计算函数<br>virtual void calculate() = 0;<br>};</p>
<p>//抽象显卡类<br>class VideoCard<br>{<br>public:<br>//抽象的显示函数<br>virtual void display() = 0;<br>};</p>
<p>//抽象内存条类<br>class Memory<br>{<br>public:<br>//抽象的存储函数<br>virtual void storage() = 0;<br>};</p>
<p>//电脑类<br>class Computer<br>{<br>public:<br>Computer(CPU _ cpu, VideoCard _ vc, Memory * mem)<br>{<br>m_cpu = cpu;<br>m_vc = vc;<br>m_mem = mem;<br>}</p>
<pre><code>//提供工作的函数
void work()
{
    //让零件工作起来，调用接口
    m_cpu-&gt;calculate();

    m_vc-&gt;display();

    m_mem-&gt;storage();
}

//提供析构函数 释放3个电脑零件
~Computer()
{

    //释放CPU零件
    if (m_cpu != NULL)
    {
        delete m_cpu;
        m_cpu = NULL;
    }

    //释放显卡零件
    if (m_vc != NULL)
    {
        delete m_vc;
        m_vc = NULL;
    }

    //释放内存条零件
    if (m_mem != NULL)
    {
        delete m_mem;
        m_mem = NULL;
    }
}</code></pre><p>private:</p>
<pre><code>CPU * m_cpu; //CPU的零件指针
VideoCard * m_vc; //显卡零件指针
Memory * m_mem; //内存条零件指针</code></pre><p>};</p>
<p>//具体厂商<br>//Intel 厂商<br>class IntelCPU :public CPU<br>{<br>public:<br>virtual void calculate()<br>{<br>cout &lt;&lt; “Intel 的 CPU 开始计算了！” &lt;&lt; endl;<br>}<br>};</p>
<p>class IntelVideoCard :public VideoCard<br>{<br>public:<br>virtual void display()<br>{<br>cout &lt;&lt; “Intel 的显卡开始显示了！” &lt;&lt; endl;<br>}<br>};</p>
<p>class IntelMemory :public Memory<br>{<br>public:<br>virtual void storage()<br>{<br>cout &lt;&lt; “Intel 的内存条开始存储了！” &lt;&lt; endl;<br>}<br>};</p>
<p>//Lenovo 厂商<br>class LenovoCPU :public CPU<br>{<br>public:<br>virtual void calculate()<br>{<br>cout &lt;&lt; “Lenovo 的 CPU 开始计算了！” &lt;&lt; endl;<br>}<br>};</p>
<p>class LenovoVideoCard :public VideoCard<br>{<br>public:<br>virtual void display()<br>{<br>cout &lt;&lt; “Lenovo 的显卡开始显示了！” &lt;&lt; endl;<br>}<br>};</p>
<p>class LenovoMemory :public Memory<br>{<br>public:<br>virtual void storage()<br>{<br>cout &lt;&lt; “Lenovo 的内存条开始存储了！” &lt;&lt; endl;<br>}<br>};</p>
<p>void test01()<br>{<br>//第一台电脑零件<br>CPU _ intelCpu = new IntelCPU;<br>VideoCard _ intelCard = new IntelVideoCard;<br>Memory * intelMem = new IntelMemory;</p>
<pre><code>cout &lt;&lt; &quot;第一台电脑开始工作：&quot; &lt;&lt; endl;
//创建第一台电脑
Computer * computer1 = new Computer(intelCpu, intelCard, intelMem);
computer1-&gt;work();
delete computer1;

cout &lt;&lt; &quot;-----------------------&quot; &lt;&lt; endl;
cout &lt;&lt; &quot;第二台电脑开始工作：&quot; &lt;&lt; endl;
//第二台电脑组装
Computer * computer2 = new Computer(new LenovoCPU, new LenovoVideoCard, new LenovoMemory);;
computer2-&gt;work();
delete computer2;

cout &lt;&lt; &quot;-----------------------&quot; &lt;&lt; endl;
cout &lt;&lt; &quot;第三台电脑开始工作：&quot; &lt;&lt; endl;
//第三台电脑组装
Computer * computer3 = new Computer(new LenovoCPU, new IntelVideoCard, new LenovoMemory);;
computer3-&gt;work();
delete computer3;</code></pre><p>}<br>5 文件操作<br>程序运行时产生的数据都属于临时数据，程序一旦运行结束都会被释放</p>
<p>通过文件可以将数据持久化</p>
<p>C++中对文件操作需要包含头文件 ==&lt; fstream &gt;==</p>
<p>文件类型分为两种：</p>
<p>文本文件 - 文件以文本的 ASCII 码形式存储在计算机中<br>二进制文件 - 文件以文本的二进制形式存储在计算机中，用户一般不能直接读懂它们<br>操作文件的三大类:</p>
<p>ofstream：写操作<br>ifstream： 读操作<br>fstream ： 读写操作<br>5.1 文本文件<br>5.1.1 写文件<br>写文件步骤如下：</p>
<p>包含头文件</p>
<p>#include <fstream></p>
<p>创建流对象</p>
<p>ofstream ofs;</p>
<p>打开文件</p>
<p>ofs.open(“文件路径”,打开方式);</p>
<p>写数据</p>
<p>ofs &lt;&lt; “写入的数据”;</p>
<p>关闭文件</p>
<p>ofs.close();</p>
<p>文件打开方式：</p>
<p>打开方式 解释<br>ios::in 为读文件而打开文件<br>ios::out 为写文件而打开文件<br>ios::ate 初始位置：文件尾<br>ios::app 追加方式写文件<br>ios::trunc 如果文件存在先删除，再创建<br>ios::binary 二进制方式<br>注意： 文件打开方式可以配合使用，利用|操作符</p>
<p>例如：用二进制方式写文件 ios::binary | ios:: out</p>
<p>示例：</p>
<p>C++<br>#include <fstream></p>
<p>void test01()<br>{<br>ofstream ofs;<br>ofs.open(“test.txt”, ios::out);</p>
<pre><code>ofs &lt;&lt; &quot;姓名：张三&quot; &lt;&lt; endl;
ofs &lt;&lt; &quot;性别：男&quot; &lt;&lt; endl;
ofs &lt;&lt; &quot;年龄：18&quot; &lt;&lt; endl;

ofs.close();</code></pre><p>}</p>
<p>int main() {</p>
<pre><code>test01();

system(&quot;pause&quot;);

return 0;</code></pre><p>}<br>总结：</p>
<p>文件操作必须包含头文件 fstream<br>读文件可以利用 ofstream ，或者 fstream 类<br>打开文件时候需要指定操作文件的路径，以及打开方式<br>利用&lt;&lt;可以向文件中写数据<br>操作完毕，要关闭文件<br>5.1.2 读文件<br>读文件与写文件步骤相似，但是读取方式相对于比较多</p>
<p>读文件步骤如下：</p>
<p>包含头文件</p>
<p>#include <fstream></p>
<p>创建流对象</p>
<p>ifstream ifs;</p>
<p>打开文件并判断文件是否打开成功</p>
<p>ifs.open(“文件路径”,打开方式);</p>
<p>读数据</p>
<p>四种方式读取</p>
<p>关闭文件</p>
<p>ifs.close();</p>
<p>示例：</p>
<p>C++<br>#include <fstream><br>#include <string><br>void test01()<br>{<br>ifstream ifs;<br>ifs.open(“test.txt”, ios::in);</p>
<pre><code>if (!ifs.is_open())
{
    cout &lt;&lt; &quot;文件打开失败&quot; &lt;&lt; endl;
    return;
}

//第一种方式
//char buf[1024] = { 0 };
//while (ifs &gt;&gt; buf)
//{
//    cout &lt;&lt; buf &lt;&lt; endl;
//}

//第二种
//char buf[1024] = { 0 };
//while (ifs.getline(buf,sizeof(buf)))
//{
//    cout &lt;&lt; buf &lt;&lt; endl;
//}

//第三种
//string buf;
//while (getline(ifs, buf))
//{
//    cout &lt;&lt; buf &lt;&lt; endl;
//}

char c;
while ((c = ifs.get()) != EOF)
{
    cout &lt;&lt; c;
}

ifs.close();</code></pre><p>}</p>
<p>int main() {</p>
<pre><code>test01();

system(&quot;pause&quot;);

return 0;</code></pre><p>}<br>总结：</p>
<p>读文件可以利用 ifstream ，或者 fstream 类<br>利用 is_open 函数可以判断文件是否打开成功<br>close 关闭文件<br>5.2 二进制文件<br>以二进制的方式对文件进行读写操作</p>
<p>打开方式要指定为 ==ios::binary==</p>
<p>5.2.1 写文件<br>二进制方式写文件主要利用流对象调用成员函数 write</p>
<p>函数原型 ：ostream&amp; write(const char * buffer,int len);</p>
<p>参数解释：字符指针 buffer 指向内存中一段存储空间。len 是读写的字节数</p>
<p>示例：</p>
<p>C++<br>#include <fstream><br>#include <string></p>
<p>class Person<br>{<br>public:<br>char m_Name[64];<br>int m_Age;<br>};</p>
<p>//二进制文件 写文件<br>void test01()<br>{<br>//1、包含头文件</p>
<pre><code>//2、创建输出流对象
ofstream ofs(&quot;person.txt&quot;, ios::out | ios::binary);

//3、打开文件
//ofs.open(&quot;person.txt&quot;, ios::out | ios::binary);

Person p = {&quot;张三&quot;  , 18};

//4、写文件
ofs.write((const char *)&amp;p, sizeof(p));

//5、关闭文件
ofs.close();</code></pre><p>}</p>
<p>int main() {</p>
<pre><code>test01();

system(&quot;pause&quot;);

return 0;</code></pre><p>}<br>总结：</p>
<p>文件输出流对象 可以通过 write 函数，以二进制方式写数据<br>5.2.2 读文件<br>二进制方式读文件主要利用流对象调用成员函数 read</p>
<p>函数原型：istream&amp; read(char *buffer,int len);</p>
<p>参数解释：字符指针 buffer 指向内存中一段存储空间。len 是读写的字节数</p>
<p>示例：</p>
<p>C++<br>#include <fstream><br>#include <string></p>
<p>class Person<br>{<br>public:<br>char m_Name[64];<br>int m_Age;<br>};</p>
<p>void test01()<br>{<br>ifstream ifs(“person.txt”, ios::in | ios::binary);<br>if (!ifs.is_open())<br>{<br>cout &lt;&lt; “文件打开失败” &lt;&lt; endl;<br>}</p>
<pre><code>Person p;
ifs.read((char *)&amp;p, sizeof(p));

cout &lt;&lt; &quot;姓名： &quot; &lt;&lt; p.m_Name &lt;&lt; &quot; 年龄： &quot; &lt;&lt; p.m_Age &lt;&lt; endl;</code></pre><p>}</p>
<p>int main() {</p>
<pre><code>test01();

system(&quot;pause&quot;);

return 0;</code></pre><p>}<br>文件输入流对象 可以通过 read 函数，以二进制方式读数据</p>
</div><div class="post-copyright"><div class="post-copyright__author"><span class="post-copyright-meta">文章作者: </span><span class="post-copyright-info"><a href="mailto:undefined">Zhenglin Li</a></span></div><div class="post-copyright__type"><span class="post-copyright-meta">文章链接: </span><span class="post-copyright-info"><a href="https://zhenglin-li.github.io/ZhengLin-Li.github.io.butterfly/[object%20Object]/2023/01/18/A%20first%20look%20at%20C++%20(2)undefined">https://zhenglin-li.github.io/ZhengLin-Li.github.io.butterfly/[object%20Object]/2023/01/18/A%20first%20look%20at%20C++%20(2)undefined</a></span></div><div class="post-copyright__notice"><span class="post-copyright-meta">版权声明: </span><span class="post-copyright-info">本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank">CC BY-NC-SA 4.0</a> 许可协议。转载请注明来自 <a href="https://zhenglin-li.github.io/ZhengLin-Li.github.io.butterfly" target="_blank">熊儿老猫的博客</a>！</span></div></div><div class="tag_share"><div class="post-meta__tag-list"></div><div class="post_share"><div class="social-share" data-image="https://cdn.jsdelivr.net/gh/useblue/ucdn/imgs/bp-6.webp" data-sites="facebook,twitter,wechat,weibo,qq"></div><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/social-share.js/dist/css/share.min.css"><script src="https://cdn.jsdelivr.net/npm/social-share.js/dist/js/social-share.min.js" defer></script></div></div><div class="post-reward"><div class="reward-button"><i class="fas fa-qrcode"></i> 打赏<div class="reward-main"><ul class="reward-all"><li class="reward-item"><a href="../assets/wechatpay.jpg" target="_blank"><img class="post-qr-code-img" data-lazy-src="/ZhengLin-Li.github.io.butterfly/../assets/wechatpay.jpg" alt="wechat"/></a><div class="post-qr-code-desc">wechat</div></li><li class="reward-item"><a href="../assets/alipay.jpg" target="_blank"><img class="post-qr-code-img" data-lazy-src="/ZhengLin-Li.github.io.butterfly/../assets/alipay.jpg" alt="alipay"/></a><div class="post-qr-code-desc">alipay</div></li></ul></div></div></div><nav class="pagination-post" id="pagination"><div class="prev-post pull-left"><a href="/ZhengLin-Li.github.io.butterfly/%5Bobject%20Object%5D/2023/01/18/A%20first%20look%20at%20C++%20(5)undefined"><img class="prev-cover" data-lazy-src="https://cdn.jsdelivr.net/gh/useblue/ucdn/imgs/bp-7.webp" onerror="onerror=null;src='/ZhengLin-Li.github.io.butterfly/img/404.jpg'"><div class="pagination-info"><div class="label">上一篇</div><div class="prev_info">A first look at C++ (5)</div></div></a></div><div class="next-post pull-right"><a href="/ZhengLin-Li.github.io.butterfly/%5Bobject%20Object%5D/2023/01/18/A%20first%20look%20at%20C++%20(2)%20copyundefined"><img class="next-cover" data-lazy-src="https://cdn.jsdelivr.net/gh/useblue/ucdn/imgs/bp-8.webp" onerror="onerror=null;src='/ZhengLin-Li.github.io.butterfly/img/404.jpg'"><div class="pagination-info"><div class="label">下一篇</div><div class="next_info">A first look at C++ (2) copy</div></div></a></div></nav></article></main><footer id="footer" style="background-image: url(https://cdn.jsdelivr.net/gh/useblue/ucdn/imgs/bp-6.webp)" data-type="photo"><div id="footer-wrap"><div class="copyright">&copy;2020 - 2023 By Zhenglin Li</div><div class="framework-info"><span>框架 </span><a href="https://hexo.io" target="_blank" rel="noopener">Hexo</a><span class="footer-separator">|</span><span>主题 </span><a href="https://github.com/jerryc127/hexo-theme-butterfly" target="_blank" rel="noopener">Butterfly</a></div></div></footer></div><section id="rightside"><div id="rightside-config-hide"><button id="readmode" type="button" title="阅读模式"><i class="fas fa-book-open"></i></button><button id="font_plus" type="button" title="放大字体"><i class="fas fa-plus"></i></button><button id="font_minus" type="button" title="缩小字体"><i class="fas fa-minus"></i></button><button id="translateLink" type="button" title="简繁转换">简</button><button id="darkmode" type="button" title="浅色和深色模式转换"><i class="fas fa-adjust"></i></button></div><div id="rightside-config-show"><button id="rightside_config" type="button" title="设置"><i class="fas fa-cog"></i></button><button id="go-up" type="button" title="回到顶部"><i class="fas fa-arrow-up"></i></button></div></section><div><script src="https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js"></script><script src="/ZhengLin-Li.github.io.butterfly/js/utils.js"></script><script src="/ZhengLin-Li.github.io.butterfly/js/main.js"></script><script src="/ZhengLin-Li.github.io.butterfly/js/tw_cn.js"></script><script src="https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js"></script><script src="https://cdn.jsdelivr.net/npm/instant.page/instantpage.min.js" type="module" defer></script><script src="https://cdn.jsdelivr.net/npm/vanilla-lazyload/dist/lazyload.iife.min.js" async></script><script>var endLoading = function () {
  document.body.style.overflow = 'auto';
  document.getElementById('loading-box').classList.add("loaded")
}
window.addEventListener('load',endLoading)</script><div class="js-pjax"><script async src="//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js"></script></div><canvas class="fireworks"></canvas><script src="https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js"></script><script src="/ZhengLin-Li.github.io.butterfly/js/third-party/fireworks.js"></script><script defer="defer" id="ribbon_piao" mobile="false" src="/ZhengLin-Li.github.io.butterfly/js/third-party/piao.js"></script><script id="canvas_nest" defer="defer" color="0,0,255" opacity="0.7" zIndex="-1" count="99" mobile="false" src="/ZhengLin-Li.github.io.butterfly/js/third-party/canvas-nest.js"></script></div><script src="https://cdn.jsdelivr.net/npm/live2d-widget@^3.1.3/lib/L2Dwidget.min.js"></script><script>L2Dwidget.init({"pluginRootPath":"live2dw/","pluginJsPath":"lib/","pluginModelPath":"assets/","tagMode":false,"debug":false,"model":{"scale":1,"hHeadPos":0.5,"vHeadPos":0.618,"jsonPath":"/ZhengLin-Li.github.io.butterfly/live2dw/assets/tororo.model.json"},"display":{"superSample":2,"position":"right","width":150,"height":300,"hOffset":20,"vOffset":-90},"mobile":{"show":true,"scale":1},"react":{"opacityDefault":0.3,"opacityOnHover":0.3,"opacity":0.95},"log":false});</script></body></html>